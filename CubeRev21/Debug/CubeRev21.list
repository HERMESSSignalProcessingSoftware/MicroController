
CubeRev21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d00  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08007f00  08007f00  00017f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008148  08008148  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008148  08008148  00018148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008150  08008150  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008150  08008150  00018150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000070  080081c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  080081c8  00020440  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa70  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027b9  00000000  00000000  0002fb0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c50  00000000  00000000  000322c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae8  00000000  00000000  00032f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e92a  00000000  00000000  00033a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd9a  00000000  00000000  0006232a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00113184  00000000  00000000  000700c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00183248  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032dc  00000000  00000000  001832c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08007ee8 	.word	0x08007ee8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08007ee8 	.word	0x08007ee8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MemoryTest>:
/**
 * @brief: tests the memory
 * TEST: Write to memory, wait, read form memory.
 * @return 0: Passed.
 */
uint32_t MemoryTest(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08e      	sub	sp, #56	; 0x38
 80005f4:	af00      	add	r7, sp, #0
	SPI_Values DUT0;
 	DUT0.CS_Pin = FL2_CS1_Pin;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DUT0.CS_Port = FL2_CS1_GPIO_Port;
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MemoryTest+0xa4>)
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
	DUT0.spihandle = &hspi2;
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <MemoryTest+0xa8>)
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
	//
	SPI_Values DUT1;
	DUT1.CS_Pin = FL2_CS2_Pin;
 8000604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000608:	843b      	strh	r3, [r7, #32]
	DUT1.CS_Port = FL2_CS2_GPIO_Port;
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MemoryTest+0xa4>)
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
	DUT1.spihandle = &hspi2;
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MemoryTest+0xa8>)
 8000610:	61fb      	str	r3, [r7, #28]
	//
	SPI_Values DUT2;
	DUT2.CS_Pin = FL1_CS1_Pin;
 8000612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000616:	82bb      	strh	r3, [r7, #20]
	DUT2.CS_Port = FL1_CS1_GPIO_Port;
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <MemoryTest+0xac>)
 800061a:	61bb      	str	r3, [r7, #24]
	DUT2.spihandle = &hspi6;
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <MemoryTest+0xb0>)
 800061e:	613b      	str	r3, [r7, #16]
	//
	SPI_Values DUT3;
	DUT1.CS_Pin = FL1_CS2_Pin;
 8000620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000624:	843b      	strh	r3, [r7, #32]
	DUT1.CS_Port = FL1_CS2_GPIO_Port;
 8000626:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MemoryTest+0xb4>)
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
	DUT1.spihandle = &hspi6;
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MemoryTest+0xb0>)
 800062c:	61fb      	str	r3, [r7, #28]

	uint32_t result = 1;
 800062e:	2301      	movs	r3, #1
 8000630:	637b      	str	r3, [r7, #52]	; 0x34
	result &= MemoryTestDUT(DUT0);
 8000632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000636:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800063a:	f000 f835 	bl	80006a8 <MemoryTestDUT>
 800063e:	4602      	mov	r2, r0
 8000640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000642:	4013      	ands	r3, r2
 8000644:	637b      	str	r3, [r7, #52]	; 0x34
	result &= MemoryTestDUT(DUT1);
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800064e:	f000 f82b 	bl	80006a8 <MemoryTestDUT>
 8000652:	4602      	mov	r2, r0
 8000654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000656:	4013      	ands	r3, r2
 8000658:	637b      	str	r3, [r7, #52]	; 0x34
	result &= MemoryTestDUT(DUT2);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000662:	f000 f821 	bl	80006a8 <MemoryTestDUT>
 8000666:	4602      	mov	r2, r0
 8000668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800066a:	4013      	ands	r3, r2
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
	result &= MemoryTestDUT(DUT3);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000674:	f000 f818 	bl	80006a8 <MemoryTestDUT>
 8000678:	4602      	mov	r2, r0
 800067a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800067c:	4013      	ands	r3, r2
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
	return !result; //to create the 0 if the test passed!
 8000680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000682:	2b00      	cmp	r3, #0
 8000684:	bf0c      	ite	eq
 8000686:	2301      	moveq	r3, #1
 8000688:	2300      	movne	r3, #0
 800068a:	b2db      	uxtb	r3, r3

}
 800068c:	4618      	mov	r0, r3
 800068e:	3738      	adds	r7, #56	; 0x38
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40020c00 	.word	0x40020c00
 8000698:	200000c4 	.word	0x200000c4
 800069c:	40020400 	.word	0x40020400
 80006a0:	2000018c 	.word	0x2000018c
 80006a4:	40021c00 	.word	0x40021c00

080006a8 <MemoryTestDUT>:

/**
 * @retun: 1: passed
 */
uint32_t MemoryTestDUT(SPI_Values dut) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80006ae:	af02      	add	r7, sp, #8
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t writeBuffer[256] = { 0 };
 80006b6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80006ba:	4618      	mov	r0, r3
 80006bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c0:	461a      	mov	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f007 f802 	bl	80076cc <memset>
	uint8_t readBuffer[256] = { 0 };
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4618      	mov	r0, r3
 80006ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d2:	461a      	mov	r2, r3
 80006d4:	2100      	movs	r1, #0
 80006d6:	f006 fff9 	bl	80076cc <memset>
	uint32_t adresse = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

	//Testdaten initialisieren
	for (int i = 0; i < 256; i++) {
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80006e6:	e00e      	b.n	8000706 <MemoryTestDUT+0x5e>
		writeBuffer[i] = i;
 80006e8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80006ec:	b2d9      	uxtb	r1, r3
 80006ee:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80006f2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80006f6:	4413      	add	r3, r2
 80006f8:	460a      	mov	r2, r1
 80006fa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 256; i++) {
 80006fc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000700:	3301      	adds	r3, #1
 8000702:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000706:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800070a:	2bff      	cmp	r3, #255	; 0xff
 800070c:	ddec      	ble.n	80006e8 <MemoryTestDUT+0x40>
	}

	//CHIP löschen
	chipErase(dut);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000714:	f000 f9ca 	bl	8000aac <chipErase>
	//evtl Zusätzliche Schleife für die verschiedenen Chips und CS pins
	for (int i = 0; i < PAGE_COUNT; i++) {
 8000718:	2300      	movs	r3, #0
 800071a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800071e:	e053      	b.n	80007c8 <MemoryTestDUT+0x120>
		adresse = i * 0x1000;
 8000720:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000724:	031b      	lsls	r3, r3, #12
 8000726:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		//Daten für eine Page schicken
		writePage(writeBuffer, adresse, dut);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000730:	689a      	ldr	r2, [r3, #8]
 8000732:	9200      	str	r2, [sp, #0]
 8000734:	cb0c      	ldmia	r3, {r2, r3}
 8000736:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 800073a:	f000 f8df 	bl	80008fc <writePage>
		//Warten bis fertig geschrieben wurde
		writeReady(dut);
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000744:	f000 f9d1 	bl	8000aea <writeReady>
		//Selbe page auslesen
		readPage(readBuffer, adresse, dut);
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	f107 0014 	add.w	r0, r7, #20
 800074e:	689a      	ldr	r2, [r3, #8]
 8000750:	9200      	str	r2, [sp, #0]
 8000752:	cb0c      	ldmia	r3, {r2, r3}
 8000754:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8000758:	f000 f942 	bl	80009e0 <readPage>
		//Inhalt vergleichen
		for (int y = 0; y < 256; y++) {
 800075c:	2300      	movs	r3, #0
 800075e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000762:	e014      	b.n	800078e <MemoryTestDUT+0xe6>
			//Wenn inhalt nicht gleich
			if (writeBuffer[y] != readBuffer[y])
 8000764:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000768:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800076c:	4413      	add	r3, r2
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	f107 0114 	add.w	r1, r7, #20
 8000774:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000778:	440b      	add	r3, r1
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	429a      	cmp	r2, r3
 800077e:	d001      	beq.n	8000784 <MemoryTestDUT+0xdc>
				return 0;
 8000780:	2300      	movs	r3, #0
 8000782:	e027      	b.n	80007d4 <MemoryTestDUT+0x12c>
		for (int y = 0; y < 256; y++) {
 8000784:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000788:	3301      	adds	r3, #1
 800078a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800078e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000792:	2bff      	cmp	r3, #255	; 0xff
 8000794:	dde6      	ble.n	8000764 <MemoryTestDUT+0xbc>
		}
		//readBuffer auf null initialisieren
		for (int z = 0; z < 256; z++) {
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800079c:	e00b      	b.n	80007b6 <MemoryTestDUT+0x10e>
			readBuffer[z] = 0;
 800079e:	f107 0214 	add.w	r2, r7, #20
 80007a2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80007a6:	4413      	add	r3, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
		for (int z = 0; z < 256; z++) {
 80007ac:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80007b0:	3301      	adds	r3, #1
 80007b2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80007b6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80007ba:	2bff      	cmp	r3, #255	; 0xff
 80007bc:	ddef      	ble.n	800079e <MemoryTestDUT+0xf6>
	for (int i = 0; i < PAGE_COUNT; i++) {
 80007be:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80007c2:	3301      	adds	r3, #1
 80007c4:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80007c8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <MemoryTestDUT+0x138>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	dda6      	ble.n	8000720 <MemoryTestDUT+0x78>
		}
	}
	return 1;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	f507 770a 	add.w	r7, r7, #552	; 0x228
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	0001e847 	.word	0x0001e847

080007e4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_CRC_Init+0x3c>)
 80007ea:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <MX_CRC_Init+0x40>)
 80007ec:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_CRC_Init+0x3c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_CRC_Init+0x3c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_CRC_Init+0x3c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_CRC_Init+0x3c>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_CRC_Init+0x3c>)
 8000808:	2203      	movs	r2, #3
 800080a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_CRC_Init+0x3c>)
 800080e:	f002 f8cd 	bl	80029ac <HAL_CRC_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000818:	f001 f9ba 	bl	8001b90 <Error_Handler>
  }

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000009c 	.word	0x2000009c
 8000824:	40023000 	.word	0x40023000

08000828 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <HAL_CRC_MspInit+0x38>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d10b      	bne.n	8000852 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_CRC_MspInit+0x3c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a09      	ldr	r2, [pc, #36]	; (8000864 <HAL_CRC_MspInit+0x3c>)
 8000840:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <HAL_CRC_MspInit+0x3c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40023000 	.word	0x40023000
 8000864:	40023800 	.word	0x40023800

08000868 <readStatus>:
 * Function Read Status
 * reads the status byte from the memory unit
 * @param: SPI_val
 * @return 8 bit status register
 */
uint8_t readStatus(SPI_Values SPI_val) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t data;
	uint8_t command = c_READSTATUSREG1;
 8000874:	2305      	movs	r3, #5
 8000876:	75bb      	strb	r3, [r7, #22]
	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	8939      	ldrh	r1, [r7, #8]
 800087c:	2200      	movs	r2, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f002 fdb4 	bl	80033ec <HAL_GPIO_WritePin>
	//send command
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f107 0116 	add.w	r1, r7, #22
 800088a:	230a      	movs	r3, #10
 800088c:	2201      	movs	r2, #1
 800088e:	f004 fe81 	bl	8005594 <HAL_SPI_Transmit>
	//read data from status register
	HAL_SPI_Receive(SPI_val.spihandle, &data, 1, 10);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f107 0117 	add.w	r1, r7, #23
 8000898:	230a      	movs	r3, #10
 800089a:	2201      	movs	r2, #1
 800089c:	f004 fff0 	bl	8005880 <HAL_SPI_Receive>
	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	8939      	ldrh	r1, [r7, #8]
 80008a4:	2201      	movs	r2, #1
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 fda0 	bl	80033ec <HAL_GPIO_WritePin>
	return data;
 80008ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <writeByte>:
 *  @brief Writes one byte so SPI
 *  @param uint8_t data: the one byte
 *  @param SPI_Val: the specifier of the SPI
 *  @return 0: Ok.
 */
int writeByte(uint8_t data, SPI_Values SPI_val) {
 80008b6:	b590      	push	{r4, r7, lr}
 80008b8:	b087      	sub	sp, #28
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4604      	mov	r4, r0
 80008be:	4638      	mov	r0, r7
 80008c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80008c4:	4623      	mov	r3, r4
 80008c6:	73fb      	strb	r3, [r7, #15]
	uint8_t command = data;
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	75fb      	strb	r3, [r7, #23]
	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	88b9      	ldrh	r1, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f002 fd8a 	bl	80033ec <HAL_GPIO_WritePin>
	//Ausgabe lesen
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 80008d8:	6838      	ldr	r0, [r7, #0]
 80008da:	f107 0117 	add.w	r1, r7, #23
 80008de:	230a      	movs	r3, #10
 80008e0:	2201      	movs	r2, #1
 80008e2:	f004 fe57 	bl	8005594 <HAL_SPI_Transmit>
	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	88b9      	ldrh	r1, [r7, #4]
 80008ea:	2201      	movs	r2, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fd7d 	bl	80033ec <HAL_GPIO_WritePin>
	return 0;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	371c      	adds	r7, #28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd90      	pop	{r4, r7, pc}

080008fc <writePage>:
 * @param uint8_t * data: Pointer to the data field
 * @param uint32_t address: the address on the memory chip
 * @param SPI_Values SPI_val
 * @return 0: ok
 */
int writePage(uint8_t *data, uint32_t address, SPI_Values SPI_val) {
 80008fc:	b082      	sub	sp, #8
 80008fe:	b580      	push	{r7, lr}
 8000900:	b084      	sub	sp, #16
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	6039      	str	r1, [r7, #0]
 8000908:	f107 0118 	add.w	r1, r7, #24
 800090c:	e881 000c 	stmia.w	r1, {r2, r3}

	uint8_t command = c_WRITEPAGE;
 8000910:	2312      	movs	r3, #18
 8000912:	72fb      	strb	r3, [r7, #11]
	uint8_t tmp_add;

//Write enable
	writeByte(c_WREN, SPI_val);
 8000914:	f107 0318 	add.w	r3, r7, #24
 8000918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800091a:	2006      	movs	r0, #6
 800091c:	f7ff ffcb 	bl	80008b6 <writeByte>

	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000920:	6a3b      	ldr	r3, [r7, #32]
 8000922:	8bb9      	ldrh	r1, [r7, #28]
 8000924:	2200      	movs	r2, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fd60 	bl	80033ec <HAL_GPIO_WritePin>

	//commando schicken
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 800092c:	69b8      	ldr	r0, [r7, #24]
 800092e:	f107 010b 	add.w	r1, r7, #11
 8000932:	230a      	movs	r3, #10
 8000934:	2201      	movs	r2, #1
 8000936:	f004 fe2d 	bl	8005594 <HAL_SPI_Transmit>
	HAL_Delay(10);
 800093a:	200a      	movs	r0, #10
 800093c:	f001 fed4 	bl	80026e8 <HAL_Delay>
	//Addressse schicken MSB to LSB
//	HAL_SPI_Transmit(SPI_val.spihandle, (uint8_t*) (&address), 4, 40);

	tmp_add = (uint8_t) ((address >> 24) & 0x000000FF);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	0e1b      	lsrs	r3, r3, #24
 8000944:	b2db      	uxtb	r3, r3
 8000946:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000948:	69b8      	ldr	r0, [r7, #24]
 800094a:	f107 010a 	add.w	r1, r7, #10
 800094e:	230a      	movs	r3, #10
 8000950:	2201      	movs	r2, #1
 8000952:	f004 fe1f 	bl	8005594 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 16) & 0x000000FF);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	0c1b      	lsrs	r3, r3, #16
 800095a:	b2db      	uxtb	r3, r3
 800095c:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 800095e:	69b8      	ldr	r0, [r7, #24]
 8000960:	f107 010a 	add.w	r1, r7, #10
 8000964:	230a      	movs	r3, #10
 8000966:	2201      	movs	r2, #1
 8000968:	f004 fe14 	bl	8005594 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 8) & 0x000000FF);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	0a1b      	lsrs	r3, r3, #8
 8000970:	b2db      	uxtb	r3, r3
 8000972:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000974:	69b8      	ldr	r0, [r7, #24]
 8000976:	f107 010a 	add.w	r1, r7, #10
 800097a:	230a      	movs	r3, #10
 800097c:	2201      	movs	r2, #1
 800097e:	f004 fe09 	bl	8005594 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) (address & 0x000000FF);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000988:	69b8      	ldr	r0, [r7, #24]
 800098a:	f107 010a 	add.w	r1, r7, #10
 800098e:	230a      	movs	r3, #10
 8000990:	2201      	movs	r2, #1
 8000992:	f004 fdff 	bl	8005594 <HAL_SPI_Transmit>

	//Daten schicken
//	HAL_SPI_Transmit(SPI_val.spihandle, data, 256, HAL_MAX_DELAY);
	for (int i = 0; i < 256; i++) {
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	e00a      	b.n	80009b2 <writePage+0xb6>
		HAL_SPI_Transmit(SPI_val.spihandle, &data[i], 1, 10);
 800099c:	69b8      	ldr	r0, [r7, #24]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	18d1      	adds	r1, r2, r3
 80009a4:	230a      	movs	r3, #10
 80009a6:	2201      	movs	r2, #1
 80009a8:	f004 fdf4 	bl	8005594 <HAL_SPI_Transmit>
	for (int i = 0; i < 256; i++) {
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3301      	adds	r3, #1
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2bff      	cmp	r3, #255	; 0xff
 80009b6:	ddf1      	ble.n	800099c <writePage+0xa0>
	}

	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 80009b8:	6a3b      	ldr	r3, [r7, #32]
 80009ba:	8bb9      	ldrh	r1, [r7, #28]
 80009bc:	2201      	movs	r2, #1
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 fd14 	bl	80033ec <HAL_GPIO_WritePin>

	//Write disable
	writeByte(c_WRDI, SPI_val);
 80009c4:	f107 0318 	add.w	r3, r7, #24
 80009c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009ca:	2004      	movs	r0, #4
 80009cc:	f7ff ff73 	bl	80008b6 <writeByte>
	return 0;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009dc:	b002      	add	sp, #8
 80009de:	4770      	bx	lr

080009e0 <readPage>:
 * @param uint8_t  * data: Pointer to the data array
 * @param uint32_t address: Address of the momory unit to be read
 * @param SPI_Values SPI_val: the corresponding SPI values
 * @return 0: ok
 */
int readPage(uint8_t *data, uint32_t address, SPI_Values SPI_val) {
 80009e0:	b082      	sub	sp, #8
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b084      	sub	sp, #16
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
 80009ec:	f107 0118 	add.w	r1, r7, #24
 80009f0:	e881 000c 	stmia.w	r1, {r2, r3}

	uint8_t command = c_READ;
 80009f4:	2313      	movs	r3, #19
 80009f6:	72fb      	strb	r3, [r7, #11]

	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	8bb9      	ldrh	r1, [r7, #28]
 80009fc:	2200      	movs	r2, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 fcf4 	bl	80033ec <HAL_GPIO_WritePin>

	//commando schicken
//	writeByte(c_READ, SPI_val);
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000a04:	69b8      	ldr	r0, [r7, #24]
 8000a06:	f107 010b 	add.w	r1, r7, #11
 8000a0a:	230a      	movs	r3, #10
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f004 fdc1 	bl	8005594 <HAL_SPI_Transmit>

//4 Byte Addressse schicken MSB to LSB
//	HAL_SPI_Transmit(SPI_val.spihandle, (uint8_t*) (&address), 4, 40);
	tmp_add = (uint8_t) ((address >> 24) & 0x000000FF);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	0e1b      	lsrs	r3, r3, #24
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <readPage+0xc8>)
 8000a1a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000a1c:	69b8      	ldr	r0, [r7, #24]
 8000a1e:	230a      	movs	r3, #10
 8000a20:	2201      	movs	r2, #1
 8000a22:	4921      	ldr	r1, [pc, #132]	; (8000aa8 <readPage+0xc8>)
 8000a24:	f004 fdb6 	bl	8005594 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 16) & 0x000000FF);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	0c1b      	lsrs	r3, r3, #16
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <readPage+0xc8>)
 8000a30:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000a32:	69b8      	ldr	r0, [r7, #24]
 8000a34:	230a      	movs	r3, #10
 8000a36:	2201      	movs	r2, #1
 8000a38:	491b      	ldr	r1, [pc, #108]	; (8000aa8 <readPage+0xc8>)
 8000a3a:	f004 fdab 	bl	8005594 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 8) & 0x000000FF);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <readPage+0xc8>)
 8000a46:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000a48:	69b8      	ldr	r0, [r7, #24]
 8000a4a:	230a      	movs	r3, #10
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4916      	ldr	r1, [pc, #88]	; (8000aa8 <readPage+0xc8>)
 8000a50:	f004 fda0 	bl	8005594 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) (address & 0x000000FF);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <readPage+0xc8>)
 8000a5a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000a5c:	69b8      	ldr	r0, [r7, #24]
 8000a5e:	230a      	movs	r3, #10
 8000a60:	2201      	movs	r2, #1
 8000a62:	4911      	ldr	r1, [pc, #68]	; (8000aa8 <readPage+0xc8>)
 8000a64:	f004 fd96 	bl	8005594 <HAL_SPI_Transmit>

//Daten lesen
//	HAL_SPI_Receive(SPI_val.spihandle, data, 256, 2560);
	for (int i = 0; i < 256; i++) {
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	e00a      	b.n	8000a84 <readPage+0xa4>
		HAL_SPI_Receive(SPI_val.spihandle, &data[i], 1, 10);
 8000a6e:	69b8      	ldr	r0, [r7, #24]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	18d1      	adds	r1, r2, r3
 8000a76:	230a      	movs	r3, #10
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f004 ff01 	bl	8005880 <HAL_SPI_Receive>
	for (int i = 0; i < 256; i++) {
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2bff      	cmp	r3, #255	; 0xff
 8000a88:	ddf1      	ble.n	8000a6e <readPage+0x8e>
	}

//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000a8a:	6a3b      	ldr	r3, [r7, #32]
 8000a8c:	8bb9      	ldrh	r1, [r7, #28]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fcab 	bl	80033ec <HAL_GPIO_WritePin>

	return 0;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aa2:	b002      	add	sp, #8
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	200000c0 	.word	0x200000c0

08000aac <chipErase>:
/**
 * Function Chip Erase
 * Erases the whole chip
 * @param SPI_Values SPI_val: the corresponding memory ic
 */
int chipErase(SPI_Values SPI_val) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Write enable
	writeByte(c_WREN, SPI_val);
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000abc:	2006      	movs	r0, #6
 8000abe:	f7ff fefa 	bl	80008b6 <writeByte>
	//erase chip
	writeByte(c_CE, SPI_val);
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ac6:	20c7      	movs	r0, #199	; 0xc7
 8000ac8:	f7ff fef5 	bl	80008b6 <writeByte>
	//Write Disable
	writeByte(c_WRDI, SPI_val);
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ad0:	2004      	movs	r0, #4
 8000ad2:	f7ff fef0 	bl	80008b6 <writeByte>
	//warte bis Schreiben beendet ist
	writeReady(SPI_val);
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000adc:	f000 f805 	bl	8000aea <writeReady>

	return 0;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <writeReady>:

/**
 * Waits for the bit WIP (Write in Progress) bit to toggle
 * Reads SR1 register from memory
 */
void writeReady(SPI_Values SPI_val) {
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t status = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
	uint8_t SR1 = 0xF;
 8000afa:	230f      	movs	r3, #15
 8000afc:	74fb      	strb	r3, [r7, #19]
	while (status == 0) {
 8000afe:	e00d      	b.n	8000b1c <writeReady+0x32>
		SR1 = readStatus(SPI_val);
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b06:	f7ff feaf 	bl	8000868 <readStatus>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	74fb      	strb	r3, [r7, #19]
		if ((SR1 & 0x1) == 0)
 8000b0e:	7cfb      	ldrb	r3, [r7, #19]
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <writeReady+0x32>
			status = 1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
	while (status == 0) {
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0ee      	beq.n	8000b00 <writeReady+0x16>
	}
}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b090      	sub	sp, #64	; 0x40
 8000b30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b42:	4bb2      	ldr	r3, [pc, #712]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4ab1      	ldr	r2, [pc, #708]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000b48:	f043 0310 	orr.w	r3, r3, #16
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4baf      	ldr	r3, [pc, #700]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0310 	and.w	r3, r3, #16
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b5a:	4bac      	ldr	r3, [pc, #688]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4aab      	ldr	r2, [pc, #684]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4ba9      	ldr	r3, [pc, #676]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4ba6      	ldr	r3, [pc, #664]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4aa5      	ldr	r2, [pc, #660]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4ba3      	ldr	r3, [pc, #652]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	623b      	str	r3, [r7, #32]
 8000b88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8a:	4ba0      	ldr	r3, [pc, #640]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a9f      	ldr	r2, [pc, #636]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000b90:	f043 0320 	orr.w	r3, r3, #32
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b9d      	ldr	r3, [pc, #628]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0320 	and.w	r3, r3, #32
 8000b9e:	61fb      	str	r3, [r7, #28]
 8000ba0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba2:	4b9a      	ldr	r3, [pc, #616]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a99      	ldr	r2, [pc, #612]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b97      	ldr	r3, [pc, #604]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb6:	61bb      	str	r3, [r7, #24]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b94      	ldr	r3, [pc, #592]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a93      	ldr	r2, [pc, #588]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b91      	ldr	r3, [pc, #580]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b8e      	ldr	r3, [pc, #568]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a8d      	ldr	r2, [pc, #564]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b8b      	ldr	r3, [pc, #556]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000bea:	4b88      	ldr	r3, [pc, #544]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a87      	ldr	r2, [pc, #540]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000bf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b85      	ldr	r3, [pc, #532]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c02:	4b82      	ldr	r3, [pc, #520]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a81      	ldr	r2, [pc, #516]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b7f      	ldr	r3, [pc, #508]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1a:	4b7c      	ldr	r3, [pc, #496]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a7b      	ldr	r2, [pc, #492]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b79      	ldr	r3, [pc, #484]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c32:	4b76      	ldr	r3, [pc, #472]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a75      	ldr	r2, [pc, #468]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000c38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b73      	ldr	r3, [pc, #460]	; (8000e0c <MX_GPIO_Init+0x2e0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_4_Pin|LWL_OUT_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f244 0108 	movw	r1, #16392	; 0x4008
 8000c50:	486f      	ldr	r0, [pc, #444]	; (8000e10 <MX_GPIO_Init+0x2e4>)
 8000c52:	f002 fbcb 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 8000c56:	2200      	movs	r2, #0
 8000c58:	f24e 4138 	movw	r1, #58424	; 0xe438
 8000c5c:	486d      	ldr	r0, [pc, #436]	; (8000e14 <MX_GPIO_Init+0x2e8>)
 8000c5e:	f002 fbc5 	bl	80033ec <HAL_GPIO_WritePin>
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, nCS_DMS4_Pin|nCS_DMS5_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2103      	movs	r1, #3
 8000c66:	486c      	ldr	r0, [pc, #432]	; (8000e18 <MX_GPIO_Init+0x2ec>)
 8000c68:	f002 fbc0 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_DMS6_GPIO_Port, nCS_DMS6_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2180      	movs	r1, #128	; 0x80
 8000c70:	486a      	ldr	r0, [pc, #424]	; (8000e1c <MX_GPIO_Init+0x2f0>)
 8000c72:	f002 fbbb 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000c7c:	4868      	ldr	r0, [pc, #416]	; (8000e20 <MX_GPIO_Init+0x2f4>)
 8000c7e:	f002 fbb5 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS2_GPIO_Port, FL1_CS2_Pin, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c88:	4865      	ldr	r0, [pc, #404]	; (8000e20 <MX_GPIO_Init+0x2f4>)
 8000c8a:	f002 fbaf 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS1_GPIO_Port, FL1_CS1_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c94:	4863      	ldr	r0, [pc, #396]	; (8000e24 <MX_GPIO_Init+0x2f8>)
 8000c96:	f002 fba9 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_WP_Pin
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 4167 	mov.w	r1, #59136	; 0xe700
 8000ca0:	4861      	ldr	r0, [pc, #388]	; (8000e28 <MX_GPIO_Init+0x2fc>)
 8000ca2:	f002 fba3 	bl	80033ec <HAL_GPIO_WritePin>
                          |nCS_PT2_Pin|nCS_PT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FL2_CS2_Pin|FL2_CS1_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000cac:	485e      	ldr	r0, [pc, #376]	; (8000e28 <MX_GPIO_Init+0x2fc>)
 8000cae:	f002 fb9d 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8000cb2:	f64f 7318 	movw	r3, #65304	; 0xff18
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4855      	ldr	r0, [pc, #340]	; (8000e1c <MX_GPIO_Init+0x2f0>)
 8000cc8:	f001 ffe2 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LWL_IN_Pin;
 8000ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LWL_IN_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	484b      	ldr	r0, [pc, #300]	; (8000e10 <MX_GPIO_Init+0x2e4>)
 8000ce2:	f001 ffd5 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000ce6:	f24e 33ff 	movw	r3, #58367	; 0xe3ff
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cec:	2303      	movs	r3, #3
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	484c      	ldr	r0, [pc, #304]	; (8000e2c <MX_GPIO_Init+0x300>)
 8000cfc:	f001 ffc8 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI10 PI11 PI12 PI13
                           PI15 PI0 PI1 PI2
                           PI4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000d00:	f64b 4317 	movw	r3, #48151	; 0xbc17
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d06:	2303      	movs	r3, #3
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d12:	4619      	mov	r1, r3
 8000d14:	483e      	ldr	r0, [pc, #248]	; (8000e10 <MX_GPIO_Init+0x2e4>)
 8000d16:	f001 ffbb 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF6
                           PF11 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8000d1a:	f641 0347 	movw	r3, #6215	; 0x1847
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d20:	2303      	movs	r3, #3
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4839      	ldr	r0, [pc, #228]	; (8000e14 <MX_GPIO_Init+0x2e8>)
 8000d30:	f001 ffae 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED_4_Pin|LWL_OUT_Pin;
 8000d34:	f244 0308 	movw	r3, #16392	; 0x4008
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4830      	ldr	r0, [pc, #192]	; (8000e10 <MX_GPIO_Init+0x2e4>)
 8000d4e:	f001 ff9f 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 8000d52:	f24e 4338 	movw	r3, #58424	; 0xe438
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d68:	4619      	mov	r1, r3
 8000d6a:	482a      	ldr	r0, [pc, #168]	; (8000e14 <MX_GPIO_Init+0x2e8>)
 8000d6c:	f001 ff90 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH2 PH3
                           PH4 PH5 PH6 PH7
                           PH8 PH13 PH14 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d70:	f24e 13ff 	movw	r3, #57855	; 0xe1ff
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d76:	2303      	movs	r3, #3
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d82:	4619      	mov	r1, r3
 8000d84:	4826      	ldr	r0, [pc, #152]	; (8000e20 <MX_GPIO_Init+0x2f4>)
 8000d86:	f001 ff83 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000d8a:	231e      	movs	r3, #30
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4824      	ldr	r0, [pc, #144]	; (8000e30 <MX_GPIO_Init+0x304>)
 8000d9e:	f001 ff77 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000da2:	f640 73e3 	movw	r3, #4067	; 0xfe3
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da8:	2303      	movs	r3, #3
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db4:	4619      	mov	r1, r3
 8000db6:	481b      	ldr	r0, [pc, #108]	; (8000e24 <MX_GPIO_Init+0x2f8>)
 8000db8:	f001 ff6a 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 PJ2 PJ3
                           PJ4 PJ5 PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dbc:	f241 033f 	movw	r3, #4159	; 0x103f
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4818      	ldr	r0, [pc, #96]	; (8000e34 <MX_GPIO_Init+0x308>)
 8000dd2:	f001 ff5d 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_DMS4_Pin|nCS_DMS5_Pin;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dea:	4619      	mov	r1, r3
 8000dec:	480a      	ldr	r0, [pc, #40]	; (8000e18 <MX_GPIO_Init+0x2ec>)
 8000dee:	f001 ff4f 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_DMS6_Pin;
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(nCS_DMS6_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e06:	4619      	mov	r1, r3
 8000e08:	e016      	b.n	8000e38 <MX_GPIO_Init+0x30c>
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40022000 	.word	0x40022000
 8000e14:	40021400 	.word	0x40021400
 8000e18:	40021800 	.word	0x40021800
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40021c00 	.word	0x40021c00
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40020c00 	.word	0x40020c00
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40022400 	.word	0x40022400
 8000e38:	485d      	ldr	r0, [pc, #372]	; (8000fb0 <MX_GPIO_Init+0x484>)
 8000e3a:	f001 ff29 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin|FL1_CS2_Pin;
 8000e3e:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e54:	4619      	mov	r1, r3
 8000e56:	4857      	ldr	r0, [pc, #348]	; (8000fb4 <MX_GPIO_Init+0x488>)
 8000e58:	f001 ff1a 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FL1_CS1_Pin;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FL1_CS1_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e72:	4619      	mov	r1, r3
 8000e74:	4850      	ldr	r0, [pc, #320]	; (8000fb8 <MX_GPIO_Init+0x48c>)
 8000e76:	f001 ff0b 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_CS2_Pin
 8000e7a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FL2_CS1_Pin|FL2_WP_Pin|nCS_PT2_Pin|nCS_PT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e90:	4619      	mov	r1, r3
 8000e92:	484a      	ldr	r0, [pc, #296]	; (8000fbc <MX_GPIO_Init+0x490>)
 8000e94:	f001 fefc 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS_SEL_Pin;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MS_SEL_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4845      	ldr	r0, [pc, #276]	; (8000fc0 <MX_GPIO_Init+0x494>)
 8000eac:	f001 fef0 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000eb0:	f64f 73e8 	movw	r3, #65512	; 0xffe8
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ebe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	483e      	ldr	r0, [pc, #248]	; (8000fc0 <MX_GPIO_Init+0x494>)
 8000ec6:	f001 fee3 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS1_Pin;
 8000eca:	2310      	movs	r3, #16
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ece:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <MX_GPIO_Init+0x498>)
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS1_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eda:	4619      	mov	r1, r3
 8000edc:	4838      	ldr	r0, [pc, #224]	; (8000fc0 <MX_GPIO_Init+0x494>)
 8000ede:	f001 fed7 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = nDRDY_DMS2_Pin|nDRDY_DMS3_Pin|nDRDY_DMS5_Pin|nDRDY_DMS6_Pin;
 8000ee2:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee8:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <MX_GPIO_Init+0x498>)
 8000eea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4834      	ldr	r0, [pc, #208]	; (8000fc8 <MX_GPIO_Init+0x49c>)
 8000ef8:	f001 feca 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS4_Pin;
 8000efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS4_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	482d      	ldr	r0, [pc, #180]	; (8000fc8 <MX_GPIO_Init+0x49c>)
 8000f12:	f001 febd 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000f16:	23fb      	movs	r3, #251	; 0xfb
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f26:	4619      	mov	r1, r3
 8000f28:	4824      	ldr	r0, [pc, #144]	; (8000fbc <MX_GPIO_Init+0x490>)
 8000f2a:	f001 feb1 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = nDRDY_PT3_Pin|nDRDY_PT2_Pin|nDRDY_PT1_Pin;
 8000f2e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <MX_GPIO_Init+0x498>)
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f40:	4619      	mov	r1, r3
 8000f42:	4822      	ldr	r0, [pc, #136]	; (8000fcc <MX_GPIO_Init+0x4a0>)
 8000f44:	f001 fea4 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK3 PK4 PK5 PK6
                           PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000f48:	23f8      	movs	r3, #248	; 0xf8
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f58:	4619      	mov	r1, r3
 8000f5a:	481d      	ldr	r0, [pc, #116]	; (8000fd0 <MX_GPIO_Init+0x4a4>)
 8000f5c:	f001 fe98 	bl	8002c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SODS_OPT_Pin|SOE_OPT_Pin|LO_OPT_Pin;
 8000f60:	23e0      	movs	r3, #224	; 0xe0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_GPIO_Init+0x498>)
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f70:	4619      	mov	r1, r3
 8000f72:	4818      	ldr	r0, [pc, #96]	; (8000fd4 <MX_GPIO_Init+0x4a8>)
 8000f74:	f001 fe8c 	bl	8002c90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2105      	movs	r1, #5
 8000f7c:	200a      	movs	r0, #10
 8000f7e:	f001 fcc5 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f82:	200a      	movs	r0, #10
 8000f84:	f001 fcee 	bl	8002964 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2105      	movs	r1, #5
 8000f8c:	2017      	movs	r0, #23
 8000f8e:	f001 fcbd 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f92:	2017      	movs	r0, #23
 8000f94:	f001 fce6 	bl	8002964 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2105      	movs	r1, #5
 8000f9c:	2028      	movs	r0, #40	; 0x28
 8000f9e:	f001 fcb5 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fa2:	2028      	movs	r0, #40	; 0x28
 8000fa4:	f001 fcde 	bl	8002964 <HAL_NVIC_EnableIRQ>

}
 8000fa8:	bf00      	nop
 8000faa:	3740      	adds	r7, #64	; 0x40
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40021c00 	.word	0x40021c00
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020c00 	.word	0x40020c00
 8000fc0:	40021800 	.word	0x40021800
 8000fc4:	10110000 	.word	0x10110000
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40022400 	.word	0x40022400
 8000fd0:	40022800 	.word	0x40022800
 8000fd4:	40022000 	.word	0x40022000

08000fd8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fdc:	f001 fb27 	bl	800262e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fe0:	f000 f83c 	bl	800105c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fe4:	f7ff fda2 	bl	8000b2c <MX_GPIO_Init>
	MX_SPI2_Init();
 8000fe8:	f000 fde4 	bl	8001bb4 <MX_SPI2_Init>
	MX_SPI3_Init();
 8000fec:	f000 fe20 	bl	8001c30 <MX_SPI3_Init>
	MX_SPI6_Init();
 8000ff0:	f000 fed8 	bl	8001da4 <MX_SPI6_Init>
	MX_UART4_Init();
 8000ff4:	f001 f964 	bl	80022c0 <MX_UART4_Init>
	MX_UART8_Init();
 8000ff8:	f001 f9c2 	bl	8002380 <MX_UART8_Init>
	MX_UART5_Init();
 8000ffc:	f001 f990 	bl	8002320 <MX_UART5_Init>
	MX_CRC_Init();
 8001000:	f7ff fbf0 	bl	80007e4 <MX_CRC_Init>
	MX_SPI4_Init();
 8001004:	f000 fe52 	bl	8001cac <MX_SPI4_Init>
	MX_SPI5_Init();
 8001008:	f000 fe8e 	bl	8001d28 <MX_SPI5_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET); //clear all LEDs
 800100c:	2200      	movs	r2, #0
 800100e:	2120      	movs	r1, #32
 8001010:	480f      	ldr	r0, [pc, #60]	; (8001050 <main+0x78>)
 8001012:	f002 f9eb 	bl	80033ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2110      	movs	r1, #16
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <main+0x78>)
 800101c:	f002 f9e6 	bl	80033ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	2108      	movs	r1, #8
 8001024:	480a      	ldr	r0, [pc, #40]	; (8001050 <main+0x78>)
 8001026:	f002 f9e1 	bl	80033ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <main+0x7c>)
 8001032:	f002 f9db 	bl	80033ec <HAL_GPIO_WritePin>

	if (!HAL_GPIO_ReadPin(MS_SEL_GPIO_Port, MS_SEL_Pin)) {
 8001036:	2104      	movs	r1, #4
 8001038:	4807      	ldr	r0, [pc, #28]	; (8001058 <main+0x80>)
 800103a:	f002 f9b7 	bl	80033ac <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <main+0x72>
		main_master();
 8001044:	f000 f89e 	bl	8001184 <main_master>
 8001048:	e001      	b.n	800104e <main+0x76>
	} else { //Slave loop
		main_slave();
 800104a:	f000 f979 	bl	8001340 <main_slave>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800104e:	e7fe      	b.n	800104e <main+0x76>
 8001050:	40021400 	.word	0x40021400
 8001054:	40022000 	.word	0x40022000
 8001058:	40021800 	.word	0x40021800

0800105c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b0b8      	sub	sp, #224	; 0xe0
 8001060:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001062:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001066:	2234      	movs	r2, #52	; 0x34
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f006 fb2e 	bl	80076cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001070:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	2290      	movs	r2, #144	; 0x90
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f006 fb1f 	bl	80076cc <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b3b      	ldr	r3, [pc, #236]	; (800117c <SystemClock_Config+0x120>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a3a      	ldr	r2, [pc, #232]	; (800117c <SystemClock_Config+0x120>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b38      	ldr	r3, [pc, #224]	; (800117c <SystemClock_Config+0x120>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a6:	4b36      	ldr	r3, [pc, #216]	; (8001180 <SystemClock_Config+0x124>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a35      	ldr	r2, [pc, #212]	; (8001180 <SystemClock_Config+0x124>)
 80010ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	4b33      	ldr	r3, [pc, #204]	; (8001180 <SystemClock_Config+0x124>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ca:	2310      	movs	r3, #16
 80010cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 8;
 80010dc:	2308      	movs	r3, #8
 80010de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 192;
 80010e2:	23c0      	movs	r3, #192	; 0xc0
 80010e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80010ee:	2302      	movs	r3, #2
 80010f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010f8:	4618      	mov	r0, r3
 80010fa:	f002 fa39 	bl	8003570 <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0xac>
		Error_Handler();
 8001104:	f000 fd44 	bl	8001b90 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001108:	f002 f9e2 	bl	80034d0 <HAL_PWREx_EnableOverDrive>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0xba>
		Error_Handler();
 8001112:	f000 fd3d 	bl	8001b90 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111c:	2302      	movs	r3, #2
 800111e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001128:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800112c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001130:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001134:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8001138:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800113c:	2106      	movs	r1, #6
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fd86 	bl	8003c50 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xf2>
		Error_Handler();
 800114a:	f000 fd21 	bl	8001b90 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4
 800114e:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8001152:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_UART5 | RCC_PERIPHCLK_UART8;
	PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001154:	2300      	movs	r3, #0
 8001156:	65bb      	str	r3, [r7, #88]	; 0x58
	PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001158:	2300      	movs	r3, #0
 800115a:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 800115c:	2300      	movs	r3, #0
 800115e:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	4618      	mov	r0, r3
 8001166:	f003 f801 	bl	800416c <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x118>
		Error_Handler();
 8001170:	f000 fd0e 	bl	8001b90 <Error_Handler>
	}
}
 8001174:	bf00      	nop
 8001176:	37e0      	adds	r7, #224	; 0xe0
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	40007000 	.word	0x40007000

08001184 <main_master>:

/* USER CODE BEGIN 4 */
void main_master(void) {
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b0c9      	sub	sp, #292	; 0x124
 8001188:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);  //ON = MS set to Master
	//uint8_t bufferOff[3] = {0x01, 0x03, 0x05};
	//uint8_t bufferOn[3] = {0x02, 0x04, 0x06};

	uint32_t lastInit = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	uint32_t lastBlinky = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	uint8_t writeBuffer[256] = { 0 };
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	4618      	mov	r0, r3
 800119c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a0:	461a      	mov	r2, r3
 80011a2:	2100      	movs	r1, #0
 80011a4:	f006 fa92 	bl	80076cc <memset>

	uint8_t readSensor = 3; //DMS: 0-5, PT100: 6-8
 80011a8:	2303      	movs	r3, #3
 80011aa:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113

	/* Performing the memory test */
	uint32_t memoryTest = MemoryTest();
 80011ae:	f7ff fa1f 	bl	80005f0 <MemoryTest>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(writeBuffer, " \n\rMemory test: %s\n\r\0",
 80011b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <main_master+0x40>
 80011c0:	4a58      	ldr	r2, [pc, #352]	; (8001324 <main_master+0x1a0>)
 80011c2:	e000      	b.n	80011c6 <main_master+0x42>
 80011c4:	4a58      	ldr	r2, [pc, #352]	; (8001328 <main_master+0x1a4>)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4958      	ldr	r1, [pc, #352]	; (800132c <main_master+0x1a8>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f006 fa85 	bl	80076dc <siprintf>
			(memoryTest == 0 ? "Passed" : "Failed"));
	HAL_UART_Transmit(&huart4, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f832 	bl	8000240 <strlen>
 80011dc:	4603      	mov	r3, r0
 80011de:	b29a      	uxth	r2, r3
 80011e0:	f107 0108 	add.w	r1, r7, #8
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	4851      	ldr	r0, [pc, #324]	; (8001330 <main_master+0x1ac>)
 80011ea:	f005 f9e3 	bl	80065b4 <HAL_UART_Transmit>
	/*For Framerate*/
	HAL_Delay(5000);
 80011ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80011f2:	f001 fa79 	bl	80026e8 <HAL_Delay>

	for (int sensors = 0; sensors <= 8; sensors++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80011fc:	e01b      	b.n	8001236 <main_master+0xb2>
		if (sensors <= 5)
 80011fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001202:	2b05      	cmp	r3, #5
 8001204:	dc09      	bgt.n	800121a <main_master+0x96>
			adc_scan_start(sensors, 2000, 128, 0);
 8001206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800120a:	b258      	sxtb	r0, r3
 800120c:	2300      	movs	r3, #0
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001214:	f000 f946 	bl	80014a4 <adc_scan_start>
 8001218:	e008      	b.n	800122c <main_master+0xa8>
		else
			adc_scan_start(sensors, 2000, 1, 0);
 800121a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800121e:	b258      	sxtb	r0, r3
 8001220:	2300      	movs	r3, #0
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001228:	f000 f93c 	bl	80014a4 <adc_scan_start>
	for (int sensors = 0; sensors <= 8; sensors++) {
 800122c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001230:	3301      	adds	r3, #1
 8001232:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800123a:	2b08      	cmp	r3, #8
 800123c:	dddf      	ble.n	80011fe <main_master+0x7a>
	}

	HAL_Delay(1000);
 800123e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001242:	f001 fa51 	bl	80026e8 <HAL_Delay>

	uint8_t softgain = 1;
 8001246:	2301      	movs	r3, #1
 8001248:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint8_t offset = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
	uint8_t dout = 0;
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart4, (uint8_t*) &dout, sizeof(dout), HAL_MAX_DELAY);
 8001258:	1df9      	adds	r1, r7, #7
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	2201      	movs	r2, #1
 8001260:	4833      	ldr	r0, [pc, #204]	; (8001330 <main_master+0x1ac>)
 8001262:	f005 f9a7 	bl	80065b4 <HAL_UART_Transmit>

	while (1) { //Master loop

		data = adc_scan(readSensor, 0x01);
 8001266:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 800126a:	2101      	movs	r1, #1
 800126c:	4618      	mov	r0, r3
 800126e:	f000 f907 	bl	8001480 <adc_scan>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <main_master+0x1b0>)
 8001278:	801a      	strh	r2, [r3, #0]
		dout = data * softgain + offset;
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <main_master+0x1b0>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8001284:	fb12 f303 	smulbb	r3, r2, r3
 8001288:	b2da      	uxtb	r2, r3
 800128a:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800128e:	4413      	add	r3, r2
 8001290:	b2da      	uxtb	r2, r3
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	701a      	strb	r2, [r3, #0]
		write_DAPI(&dout);
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fc67 	bl	8001b6c <write_DAPI>
		write_EXP(&dout);
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fc51 	bl	8001b48 <write_EXP>

		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin,
 80012a6:	2120      	movs	r1, #32
 80012a8:	4823      	ldr	r0, [pc, #140]	; (8001338 <main_master+0x1b4>)
 80012aa:	f002 f87f 	bl	80033ac <HAL_GPIO_ReadPin>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	2110      	movs	r1, #16
 80012b4:	4821      	ldr	r0, [pc, #132]	; (800133c <main_master+0x1b8>)
 80012b6:	f002 f899 	bl	80033ec <HAL_GPIO_WritePin>
				HAL_GPIO_ReadPin(SODS_OPT_GPIO_Port, SODS_OPT_Pin));
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin,
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	481e      	ldr	r0, [pc, #120]	; (8001338 <main_master+0x1b4>)
 80012be:	f002 f875 	bl	80033ac <HAL_GPIO_ReadPin>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	2108      	movs	r1, #8
 80012c8:	481c      	ldr	r0, [pc, #112]	; (800133c <main_master+0x1b8>)
 80012ca:	f002 f88f 	bl	80033ec <HAL_GPIO_WritePin>
				HAL_GPIO_ReadPin(LO_OPT_GPIO_Port, LO_OPT_Pin));
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin,
 80012ce:	2140      	movs	r1, #64	; 0x40
 80012d0:	4819      	ldr	r0, [pc, #100]	; (8001338 <main_master+0x1b4>)
 80012d2:	f002 f86b 	bl	80033ac <HAL_GPIO_ReadPin>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012de:	4816      	ldr	r0, [pc, #88]	; (8001338 <main_master+0x1b4>)
 80012e0:	f002 f884 	bl	80033ec <HAL_GPIO_WritePin>
				HAL_GPIO_ReadPin(SOE_OPT_GPIO_Port, SOE_OPT_Pin));

		if (lastInit + 5000 < HAL_GetTick()) {
 80012e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80012e8:	f241 3488 	movw	r4, #5000	; 0x1388
 80012ec:	441c      	add	r4, r3
 80012ee:	f001 f9ef 	bl	80026d0 <HAL_GetTick>
 80012f2:	4603      	mov	r3, r0
 80012f4:	429c      	cmp	r4, r3
 80012f6:	d203      	bcs.n	8001300 <main_master+0x17c>
			lastInit = HAL_GetTick();
 80012f8:	f001 f9ea 	bl	80026d0 <HAL_GetTick>
 80012fc:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
			 }
			 */

		}

		if (lastBlinky + 1000 < HAL_GetTick()) {
 8001300:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001304:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 8001308:	f001 f9e2 	bl	80026d0 <HAL_GetTick>
 800130c:	4603      	mov	r3, r0
 800130e:	429c      	cmp	r4, r3
 8001310:	d2a9      	bcs.n	8001266 <main_master+0xe2>
			lastBlinky = HAL_GetTick();
 8001312:	f001 f9dd 	bl	80026d0 <HAL_GetTick>
 8001316:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800131a:	2120      	movs	r1, #32
 800131c:	4807      	ldr	r0, [pc, #28]	; (800133c <main_master+0x1b8>)
 800131e:	f002 f891 	bl	8003444 <HAL_GPIO_TogglePin>
		data = adc_scan(readSensor, 0x01);
 8001322:	e7a0      	b.n	8001266 <main_master+0xe2>
 8001324:	08007f00 	.word	0x08007f00
 8001328:	08007f08 	.word	0x08007f08
 800132c:	08007f10 	.word	0x08007f10
 8001330:	200003b8 	.word	0x200003b8
 8001334:	2000008c 	.word	0x2000008c
 8001338:	40022000 	.word	0x40022000
 800133c:	40021400 	.word	0x40021400

08001340 <main_slave>:
		 HAL_Delay(100);
		 */
	}
}

void main_slave(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	uint8_t buffer[1] = { 0x00 };
 8001346:	2300      	movs	r3, #0
 8001348:	713b      	strb	r3, [r7, #4]
	while (1) {
		HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 800134a:	1d39      	adds	r1, r7, #4
 800134c:	2305      	movs	r3, #5
 800134e:	2201      	movs	r2, #1
 8001350:	481e      	ldr	r0, [pc, #120]	; (80013cc <main_slave+0x8c>)
 8001352:	f005 f9c0 	bl	80066d6 <HAL_UART_Receive>
		if (buffer[0] == 0x01) {
 8001356:	793b      	ldrb	r3, [r7, #4]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d105      	bne.n	8001368 <main_slave+0x28>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2110      	movs	r1, #16
 8001360:	481b      	ldr	r0, [pc, #108]	; (80013d0 <main_slave+0x90>)
 8001362:	f002 f843 	bl	80033ec <HAL_GPIO_WritePin>
 8001366:	e02d      	b.n	80013c4 <main_slave+0x84>
		} else if (buffer[0] == 0x02) {
 8001368:	793b      	ldrb	r3, [r7, #4]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d105      	bne.n	800137a <main_slave+0x3a>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800136e:	2201      	movs	r2, #1
 8001370:	2110      	movs	r1, #16
 8001372:	4817      	ldr	r0, [pc, #92]	; (80013d0 <main_slave+0x90>)
 8001374:	f002 f83a 	bl	80033ec <HAL_GPIO_WritePin>
 8001378:	e024      	b.n	80013c4 <main_slave+0x84>
		} else if (buffer[0] == 0x03) {
 800137a:	793b      	ldrb	r3, [r7, #4]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d105      	bne.n	800138c <main_slave+0x4c>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2108      	movs	r1, #8
 8001384:	4812      	ldr	r0, [pc, #72]	; (80013d0 <main_slave+0x90>)
 8001386:	f002 f831 	bl	80033ec <HAL_GPIO_WritePin>
 800138a:	e01b      	b.n	80013c4 <main_slave+0x84>
		} else if (buffer[0] == 0x04) {
 800138c:	793b      	ldrb	r3, [r7, #4]
 800138e:	2b04      	cmp	r3, #4
 8001390:	d105      	bne.n	800139e <main_slave+0x5e>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	2108      	movs	r1, #8
 8001396:	480e      	ldr	r0, [pc, #56]	; (80013d0 <main_slave+0x90>)
 8001398:	f002 f828 	bl	80033ec <HAL_GPIO_WritePin>
 800139c:	e012      	b.n	80013c4 <main_slave+0x84>
		} else if (buffer[0] == 0x05) {
 800139e:	793b      	ldrb	r3, [r7, #4]
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d106      	bne.n	80013b2 <main_slave+0x72>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013aa:	480a      	ldr	r0, [pc, #40]	; (80013d4 <main_slave+0x94>)
 80013ac:	f002 f81e 	bl	80033ec <HAL_GPIO_WritePin>
 80013b0:	e008      	b.n	80013c4 <main_slave+0x84>
		} else if (buffer[0] == 0x06) {
 80013b2:	793b      	ldrb	r3, [r7, #4]
 80013b4:	2b06      	cmp	r3, #6
 80013b6:	d105      	bne.n	80013c4 <main_slave+0x84>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <main_slave+0x94>)
 80013c0:	f002 f814 	bl	80033ec <HAL_GPIO_WritePin>
		}
		buffer[1] = 0x00;
 80013c4:	2300      	movs	r3, #0
 80013c6:	717b      	strb	r3, [r7, #5]
		HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 80013c8:	e7bf      	b.n	800134a <main_slave+0xa>
 80013ca:	bf00      	nop
 80013cc:	200002b8 	.word	0x200002b8
 80013d0:	40021400 	.word	0x40021400
 80013d4:	40022000 	.word	0x40022000

080013d8 <cs_enable>:
	}
}

int cs_enable(int8_t id) {
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_RESET);
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fa3a 	bl	8001860 <port_from_id>
 80013ec:	4604      	mov	r4, r0
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f9f6 	bl	80017e4 <pin_from_id>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2200      	movs	r2, #0
 80013fc:	4619      	mov	r1, r3
 80013fe:	4620      	mov	r0, r4
 8001400:	f001 fff4 	bl	80033ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f001 f96f 	bl	80026e8 <HAL_Delay>
	return 0;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bd90      	pop	{r4, r7, pc}

08001414 <cs_disable>:

int cs_disable(int8_t id) {
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_SET);
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fa1c 	bl	8001860 <port_from_id>
 8001428:	4604      	mov	r4, r0
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f9d8 	bl	80017e4 <pin_from_id>
 8001434:	4603      	mov	r3, r0
 8001436:	2201      	movs	r2, #1
 8001438:	4619      	mov	r1, r3
 800143a:	4620      	mov	r0, r4
 800143c:	f001 ffd6 	bl	80033ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001440:	2001      	movs	r0, #1
 8001442:	f001 f951 	bl	80026e8 <HAL_Delay>
	return 0;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bd90      	pop	{r4, r7, pc}

08001450 <wr_spi>:

int wr_spi(int8_t id, uint8_t cmd) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	460a      	mov	r2, r1
 800145a:	71fb      	strb	r3, [r7, #7]
 800145c:	4613      	mov	r3, r2
 800145e:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(get_hspi_from_id(id), &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fab9 	bl	80019dc <get_hspi_from_id>
 800146a:	1db9      	adds	r1, r7, #6
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	2201      	movs	r2, #1
 8001472:	f004 f88f 	bl	8005594 <HAL_SPI_Transmit>
	return 0;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <adc_scan>:

uint16_t adc_scan(int8_t id, uint8_t chn) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	460a      	mov	r2, r1
 800148a:	71fb      	strb	r3, [r7, #7]
 800148c:	4613      	mov	r3, r2
 800148e:	71bb      	strb	r3, [r7, #6]
	return rd_data(id);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f000 f947 	bl	8001728 <rd_data>
 800149a:	4603      	mov	r3, r0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <adc_scan_start>:

int16_t adc_scan_start(int8_t id, uint_least16_t drate, uint_least8_t gain,
		uint_least16_t current) {
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	71fb      	strb	r3, [r7, #7]
 80014b6:	4603      	mov	r3, r0
 80014b8:	80bb      	strh	r3, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	71bb      	strb	r3, [r7, #6]
 80014be:	4613      	mov	r3, r2
 80014c0:	807b      	strh	r3, [r7, #2]
	int16_t r = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	81fb      	strh	r3, [r7, #14]
	switch (drate) {
 80014c6:	88bb      	ldrh	r3, [r7, #4]
 80014c8:	2ba0      	cmp	r3, #160	; 0xa0
 80014ca:	d02d      	beq.n	8001528 <adc_scan_start+0x84>
 80014cc:	2ba0      	cmp	r3, #160	; 0xa0
 80014ce:	dc0b      	bgt.n	80014e8 <adc_scan_start+0x44>
 80014d0:	2b0a      	cmp	r3, #10
 80014d2:	d01d      	beq.n	8001510 <adc_scan_start+0x6c>
 80014d4:	2b0a      	cmp	r3, #10
 80014d6:	dc02      	bgt.n	80014de <adc_scan_start+0x3a>
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d016      	beq.n	800150a <adc_scan_start+0x66>
 80014dc:	e01e      	b.n	800151c <adc_scan_start+0x78>
 80014de:	2b14      	cmp	r3, #20
 80014e0:	d019      	beq.n	8001516 <adc_scan_start+0x72>
 80014e2:	2b50      	cmp	r3, #80	; 0x50
 80014e4:	d01d      	beq.n	8001522 <adc_scan_start+0x7e>
 80014e6:	e019      	b.n	800151c <adc_scan_start+0x78>
 80014e8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80014ec:	d022      	beq.n	8001534 <adc_scan_start+0x90>
 80014ee:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80014f2:	dc03      	bgt.n	80014fc <adc_scan_start+0x58>
 80014f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80014f8:	d019      	beq.n	800152e <adc_scan_start+0x8a>
 80014fa:	e00f      	b.n	800151c <adc_scan_start+0x78>
 80014fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001500:	d01b      	beq.n	800153a <adc_scan_start+0x96>
 8001502:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001506:	d01b      	beq.n	8001540 <adc_scan_start+0x9c>
 8001508:	e008      	b.n	800151c <adc_scan_start+0x78>
	case 5:
		drate = SYS0_DOR5;
 800150a:	2300      	movs	r3, #0
 800150c:	80bb      	strh	r3, [r7, #4]
		break;
 800150e:	e01a      	b.n	8001546 <adc_scan_start+0xa2>
	case 10:
		drate = SYS0_DOR10;
 8001510:	2301      	movs	r3, #1
 8001512:	80bb      	strh	r3, [r7, #4]
		break;
 8001514:	e017      	b.n	8001546 <adc_scan_start+0xa2>
	case 20:
		drate = SYS0_DOR20;
 8001516:	2302      	movs	r3, #2
 8001518:	80bb      	strh	r3, [r7, #4]
		break;
 800151a:	e014      	b.n	8001546 <adc_scan_start+0xa2>
	default:
	case 40:
		drate = SYS0_DOR40;
 800151c:	2303      	movs	r3, #3
 800151e:	80bb      	strh	r3, [r7, #4]
		break;
 8001520:	e011      	b.n	8001546 <adc_scan_start+0xa2>
	case 80:
		drate = SYS0_DOR80;
 8001522:	2304      	movs	r3, #4
 8001524:	80bb      	strh	r3, [r7, #4]
		break;
 8001526:	e00e      	b.n	8001546 <adc_scan_start+0xa2>
	case 160:
		drate = SYS0_DOR160;
 8001528:	2305      	movs	r3, #5
 800152a:	80bb      	strh	r3, [r7, #4]
		break;
 800152c:	e00b      	b.n	8001546 <adc_scan_start+0xa2>
	case 320:
		drate = SYS0_DOR320;
 800152e:	2306      	movs	r3, #6
 8001530:	80bb      	strh	r3, [r7, #4]
		break;
 8001532:	e008      	b.n	8001546 <adc_scan_start+0xa2>
	case 640:
		drate = SYS0_DOR640;
 8001534:	2307      	movs	r3, #7
 8001536:	80bb      	strh	r3, [r7, #4]
		break;
 8001538:	e005      	b.n	8001546 <adc_scan_start+0xa2>
	case 1000:
		drate = SYS0_DOR1000;
 800153a:	2308      	movs	r3, #8
 800153c:	80bb      	strh	r3, [r7, #4]
		break;
 800153e:	e002      	b.n	8001546 <adc_scan_start+0xa2>
	case 2000:
		drate = SYS0_DOR2000;
 8001540:	2309      	movs	r3, #9
 8001542:	80bb      	strh	r3, [r7, #4]
		break;
 8001544:	bf00      	nop
	}

	switch (gain) {
 8001546:	79bb      	ldrb	r3, [r7, #6]
 8001548:	2b10      	cmp	r3, #16
 800154a:	d01a      	beq.n	8001582 <adc_scan_start+0xde>
 800154c:	2b10      	cmp	r3, #16
 800154e:	dc06      	bgt.n	800155e <adc_scan_start+0xba>
 8001550:	2b04      	cmp	r3, #4
 8001552:	d010      	beq.n	8001576 <adc_scan_start+0xd2>
 8001554:	2b08      	cmp	r3, #8
 8001556:	d011      	beq.n	800157c <adc_scan_start+0xd8>
 8001558:	2b02      	cmp	r3, #2
 800155a:	d009      	beq.n	8001570 <adc_scan_start+0xcc>
 800155c:	e005      	b.n	800156a <adc_scan_start+0xc6>
 800155e:	2b40      	cmp	r3, #64	; 0x40
 8001560:	d015      	beq.n	800158e <adc_scan_start+0xea>
 8001562:	2b80      	cmp	r3, #128	; 0x80
 8001564:	d016      	beq.n	8001594 <adc_scan_start+0xf0>
 8001566:	2b20      	cmp	r3, #32
 8001568:	d00e      	beq.n	8001588 <adc_scan_start+0xe4>
	default:
	case 1:
		gain = SYS0_PGA1;
 800156a:	2300      	movs	r3, #0
 800156c:	71bb      	strb	r3, [r7, #6]
		break;
 800156e:	e014      	b.n	800159a <adc_scan_start+0xf6>
	case 2:
		gain = SYS0_PGA2;
 8001570:	2310      	movs	r3, #16
 8001572:	71bb      	strb	r3, [r7, #6]
		break;
 8001574:	e011      	b.n	800159a <adc_scan_start+0xf6>
	case 4:
		gain = SYS0_PGA4;
 8001576:	2320      	movs	r3, #32
 8001578:	71bb      	strb	r3, [r7, #6]
		break;
 800157a:	e00e      	b.n	800159a <adc_scan_start+0xf6>
	case 8:
		gain = SYS0_PGA8;
 800157c:	2330      	movs	r3, #48	; 0x30
 800157e:	71bb      	strb	r3, [r7, #6]
		break;
 8001580:	e00b      	b.n	800159a <adc_scan_start+0xf6>
	case 16:
		gain = SYS0_PGA16;
 8001582:	2340      	movs	r3, #64	; 0x40
 8001584:	71bb      	strb	r3, [r7, #6]
		break;
 8001586:	e008      	b.n	800159a <adc_scan_start+0xf6>
	case 32:
		gain = SYS0_PGA32;
 8001588:	2350      	movs	r3, #80	; 0x50
 800158a:	71bb      	strb	r3, [r7, #6]
		break;
 800158c:	e005      	b.n	800159a <adc_scan_start+0xf6>
	case 64:
		gain = SYS0_PGA64;
 800158e:	2360      	movs	r3, #96	; 0x60
 8001590:	71bb      	strb	r3, [r7, #6]
		break;
 8001592:	e002      	b.n	800159a <adc_scan_start+0xf6>
	case 128:
		gain = SYS0_PGA128;
 8001594:	2370      	movs	r3, #112	; 0x70
 8001596:	71bb      	strb	r3, [r7, #6]
		break;
 8001598:	bf00      	nop
	}

	switch (current) {
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015a0:	d020      	beq.n	80015e4 <adc_scan_start+0x140>
 80015a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015a6:	dc06      	bgt.n	80015b6 <adc_scan_start+0x112>
 80015a8:	2b64      	cmp	r3, #100	; 0x64
 80015aa:	d015      	beq.n	80015d8 <adc_scan_start+0x134>
 80015ac:	2bfa      	cmp	r3, #250	; 0xfa
 80015ae:	d016      	beq.n	80015de <adc_scan_start+0x13a>
 80015b0:	2b32      	cmp	r3, #50	; 0x32
 80015b2:	d00e      	beq.n	80015d2 <adc_scan_start+0x12e>
 80015b4:	e00a      	b.n	80015cc <adc_scan_start+0x128>
 80015b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ba:	d019      	beq.n	80015f0 <adc_scan_start+0x14c>
 80015bc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d018      	beq.n	80015f6 <adc_scan_start+0x152>
 80015c4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d00e      	beq.n	80015ea <adc_scan_start+0x146>
	default:
	case 0:
		current = IDAC0_MAGOFF;
 80015cc:	2300      	movs	r3, #0
 80015ce:	807b      	strh	r3, [r7, #2]
		break;
 80015d0:	e014      	b.n	80015fc <adc_scan_start+0x158>
	case 50:
		current = IDAC0_MAG50UA;
 80015d2:	2301      	movs	r3, #1
 80015d4:	807b      	strh	r3, [r7, #2]
		break;
 80015d6:	e011      	b.n	80015fc <adc_scan_start+0x158>
	case 100:
		current = IDAC0_MAG100UA;
 80015d8:	2302      	movs	r3, #2
 80015da:	807b      	strh	r3, [r7, #2]
		break;
 80015dc:	e00e      	b.n	80015fc <adc_scan_start+0x158>
	case 250:
		current = IDAC0_MAG250UA;
 80015de:	2303      	movs	r3, #3
 80015e0:	807b      	strh	r3, [r7, #2]
		break;
 80015e2:	e00b      	b.n	80015fc <adc_scan_start+0x158>
	case 500:
		current = IDAC0_MAG500UA;
 80015e4:	2304      	movs	r3, #4
 80015e6:	807b      	strh	r3, [r7, #2]
		break;
 80015e8:	e008      	b.n	80015fc <adc_scan_start+0x158>
	case 750:
		current = IDAC0_MAG750UA;
 80015ea:	2305      	movs	r3, #5
 80015ec:	807b      	strh	r3, [r7, #2]
		break;
 80015ee:	e005      	b.n	80015fc <adc_scan_start+0x158>
	case 1000:
		current = IDAC0_MAG1000UA;
 80015f0:	2306      	movs	r3, #6
 80015f2:	807b      	strh	r3, [r7, #2]
		break;
 80015f4:	e002      	b.n	80015fc <adc_scan_start+0x158>
	case 1500:
		current = IDAC0_MAG1500UA;
 80015f6:	2307      	movs	r3, #7
 80015f8:	807b      	strh	r3, [r7, #2]
		break;
 80015fa:	bf00      	nop
	}

	cs_enable(id);
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fee9 	bl	80013d8 <cs_enable>

	if (id <= 5) {	//DMS
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	2b05      	cmp	r3, #5
 800160c:	dc40      	bgt.n	8001690 <adc_scan_start+0x1ec>

		wr_cmd(id, CMD_RESET);
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2106      	movs	r1, #6
 8001614:	4618      	mov	r0, r3
 8001616:	f000 fa1d 	bl	8001a54 <wr_cmd>
		wr_cmd(id, CMD_SDATAC);
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	2116      	movs	r1, #22
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fa17 	bl	8001a54 <wr_cmd>
		wr_reg(id, REG_MUX0, 0b00000001);
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	2201      	movs	r2, #1
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f000 fa50 	bl	8001ad4 <wr_reg>
		wr_reg(id, REG_VBIAS, 0x00);
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2200      	movs	r2, #0
 800163a:	2101      	movs	r1, #1
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fa49 	bl	8001ad4 <wr_reg>
		wr_reg(id, REG_MUX1, 0b00110000);
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	2230      	movs	r2, #48	; 0x30
 8001648:	2102      	movs	r1, #2
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fa42 	bl	8001ad4 <wr_reg>
		wr_reg(id, REG_SYS0, gain | drate);
 8001650:	88bb      	ldrh	r3, [r7, #4]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	79bb      	ldrb	r3, [r7, #6]
 8001656:	4313      	orrs	r3, r2
 8001658:	b2da      	uxtb	r2, r3
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	2103      	movs	r1, #3
 8001660:	4618      	mov	r0, r3
 8001662:	f000 fa37 	bl	8001ad4 <wr_reg>
		wr_reg(id, REG_IDAC0, 0x00);
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	2200      	movs	r2, #0
 800166c:	210a      	movs	r1, #10
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fa30 	bl	8001ad4 <wr_reg>
		wr_reg(id, REG_IDAC1, 0b11001100);
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	22cc      	movs	r2, #204	; 0xcc
 800167a:	210b      	movs	r1, #11
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fa29 	bl	8001ad4 <wr_reg>
		wr_cmd(id, CMD_SYNC);
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	2104      	movs	r1, #4
 8001688:	4618      	mov	r0, r3
 800168a:	f000 f9e3 	bl	8001a54 <wr_cmd>
 800168e:	e040      	b.n	8001712 <adc_scan_start+0x26e>
		//uint8_t rdata = CMD_RDATAC;
		//HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);

	} else {	//PT100

		wr_cmd(id, CMD_RESET);
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2106      	movs	r1, #6
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f9dc 	bl	8001a54 <wr_cmd>
		wr_cmd(id, CMD_SDATAC);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2116      	movs	r1, #22
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f9d6 	bl	8001a54 <wr_cmd>
		wr_reg(id, REG_VBIAS, 0x00);
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2200      	movs	r2, #0
 80016ae:	2101      	movs	r1, #1
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fa0f 	bl	8001ad4 <wr_reg>
		wr_reg(id, REG_MUX0, 0x01); //?
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	2201      	movs	r2, #1
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fa08 	bl	8001ad4 <wr_reg>
		wr_reg(id, REG_MUX1, 0b00100000); //int ref on, REFP0/REFN0 ref inp selected
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2220      	movs	r2, #32
 80016ca:	2102      	movs	r1, #2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fa01 	bl	8001ad4 <wr_reg>
		//wr_reg(id, REG_VBIAS, 0x00);
		//wr_reg(id, REG_MUX1, 0b00110000);
		wr_reg(id, REG_SYS0, gain | drate); //Gain 4, SPS 20
 80016d2:	88bb      	ldrh	r3, [r7, #4]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	4313      	orrs	r3, r2
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2103      	movs	r1, #3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f9f6 	bl	8001ad4 <wr_reg>
		wr_reg(id, REG_IDAC0, current); //1mA;
 80016e8:	887b      	ldrh	r3, [r7, #2]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	210a      	movs	r1, #10
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f9ee 	bl	8001ad4 <wr_reg>
		wr_reg(id, REG_IDAC1, 0b00000010); //IDAC1 = AIN0, IDAC2 = AIN3
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	2202      	movs	r2, #2
 80016fe:	210b      	movs	r1, #11
 8001700:	4618      	mov	r0, r3
 8001702:	f000 f9e7 	bl	8001ad4 <wr_reg>
		wr_cmd(id, CMD_SYNC);
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	2104      	movs	r1, #4
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f9a1 	bl	8001a54 <wr_cmd>
		//uint8_t rdata = CMD_RDATAC;
		//HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);
	}

	cs_disable(id);
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fe7c 	bl	8001414 <cs_disable>

	return r;
 800171c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bd90      	pop	{r4, r7, pc}

08001728 <rd_data>:

uint16_t rd_data(int8_t id) {
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b087      	sub	sp, #28
 800172c:	af02      	add	r7, sp, #8
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
	uint8_t d1, d3;
	uint16_t dR;

	while (HAL_GPIO_ReadPin(port_drdy_from_id(id), pin_drdy_from_id(id))
 8001732:	bf00      	nop
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f911 	bl	8001960 <port_drdy_from_id>
 800173e:	4604      	mov	r4, r0
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f8cb 	bl	80018e0 <pin_drdy_from_id>
 800174a:	4603      	mov	r3, r0
 800174c:	4619      	mov	r1, r3
 800174e:	4620      	mov	r0, r4
 8001750:	f001 fe2c 	bl	80033ac <HAL_GPIO_ReadPin>
 8001754:	4603      	mov	r3, r0
 8001756:	2b01      	cmp	r3, #1
 8001758:	d0ec      	beq.n	8001734 <rd_data+0xc>
			== GPIO_PIN_SET)
		;
	cs_enable(id);
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fe3a 	bl	80013d8 <cs_enable>

	uint8_t rdata = CMD_RDATA;
 8001764:	2312      	movs	r3, #18
 8001766:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f935 	bl	80019dc <get_hspi_from_id>
 8001772:	f107 010b 	add.w	r1, r7, #11
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	2202      	movs	r2, #2
 800177c:	f003 ff0a 	bl	8005594 <HAL_SPI_Transmit>
	//HAL_Delay(1);

	uint8_t nope = CMD_NOP;
 8001780:	23ff      	movs	r3, #255	; 0xff
 8001782:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_TransmitReceive(get_hspi_from_id(id), &nope, &d1, 2, HAL_MAX_DELAY);
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f927 	bl	80019dc <get_hspi_from_id>
 800178e:	f107 020d 	add.w	r2, r7, #13
 8001792:	f107 010a 	add.w	r1, r7, #10
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2302      	movs	r3, #2
 800179e:	f004 f997 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(get_hspi_from_id(id), &nope, &d3, 2, HAL_MAX_DELAY);
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f918 	bl	80019dc <get_hspi_from_id>
 80017ac:	f107 020c 	add.w	r2, r7, #12
 80017b0:	f107 010a 	add.w	r1, r7, #10
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2302      	movs	r3, #2
 80017bc:	f004 f988 	bl	8005ad0 <HAL_SPI_TransmitReceive>
	dR = (d1 << 8) | d3;
 80017c0:	7b7b      	ldrb	r3, [r7, #13]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	7b3b      	ldrb	r3, [r7, #12]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	81fb      	strh	r3, [r7, #14]
	cs_disable(id);
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fe1d 	bl	8001414 <cs_disable>

	return dR;
 80017da:	89fb      	ldrh	r3, [r7, #14]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd90      	pop	{r4, r7, pc}

080017e4 <pin_from_id>:
	//cs_disable(id);
	return d1;
}

//
uint16_t pin_from_id(int8_t id) {
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d82c      	bhi.n	8001850 <pin_from_id+0x6c>
 80017f6:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <pin_from_id+0x18>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	08001821 	.word	0x08001821
 8001800:	08001827 	.word	0x08001827
 8001804:	0800182d 	.word	0x0800182d
 8001808:	08001833 	.word	0x08001833
 800180c:	08001837 	.word	0x08001837
 8001810:	0800183b 	.word	0x0800183b
 8001814:	0800183f 	.word	0x0800183f
 8001818:	08001845 	.word	0x08001845
 800181c:	0800184b 	.word	0x0800184b
	case 0: //DMS 1
		return nCS_DMS1_Pin;
 8001820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001824:	e016      	b.n	8001854 <pin_from_id+0x70>
	case 1: //DMS 2
		return nCS_DMS2_Pin;
 8001826:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800182a:	e013      	b.n	8001854 <pin_from_id+0x70>
	case 2: //DMS 3
		return nCS_DMS3_Pin;
 800182c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001830:	e010      	b.n	8001854 <pin_from_id+0x70>
	case 3: //DMS 4
		return nCS_DMS4_Pin;
 8001832:	2301      	movs	r3, #1
 8001834:	e00e      	b.n	8001854 <pin_from_id+0x70>
	case 4: //DMS 5
		return nCS_DMS5_Pin;
 8001836:	2302      	movs	r3, #2
 8001838:	e00c      	b.n	8001854 <pin_from_id+0x70>
	case 5: //DMS 6
		return nCS_DMS6_Pin;
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	e00a      	b.n	8001854 <pin_from_id+0x70>
	case 6: //PT 1
		return nCS_PT1_Pin;
 800183e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001842:	e007      	b.n	8001854 <pin_from_id+0x70>
	case 7: //PT 2
		return nCS_PT2_Pin;
 8001844:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001848:	e004      	b.n	8001854 <pin_from_id+0x70>
	case 8: //PT 3
		return nCS_PT3_Pin;
 800184a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800184e:	e001      	b.n	8001854 <pin_from_id+0x70>
	default: //DMS 1
		return nCS_DMS1_Pin;
 8001850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	}
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <port_from_id>:

//
GPIO_TypeDef* port_from_id(int8_t id) {
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b08      	cmp	r3, #8
 8001870:	d826      	bhi.n	80018c0 <port_from_id+0x60>
 8001872:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <port_from_id+0x18>)
 8001874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001878:	0800189d 	.word	0x0800189d
 800187c:	080018a1 	.word	0x080018a1
 8001880:	080018a5 	.word	0x080018a5
 8001884:	080018a9 	.word	0x080018a9
 8001888:	080018ad 	.word	0x080018ad
 800188c:	080018b1 	.word	0x080018b1
 8001890:	080018b5 	.word	0x080018b5
 8001894:	080018b9 	.word	0x080018b9
 8001898:	080018bd 	.word	0x080018bd
	case 0: //DMS 1
		return nCS_DMS1_GPIO_Port;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <port_from_id+0x70>)
 800189e:	e010      	b.n	80018c2 <port_from_id+0x62>
	case 1: //DMS 2
		return nCS_DMS2_GPIO_Port;
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <port_from_id+0x70>)
 80018a2:	e00e      	b.n	80018c2 <port_from_id+0x62>
	case 2: //DMS 3
		return nCS_DMS3_GPIO_Port;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <port_from_id+0x70>)
 80018a6:	e00c      	b.n	80018c2 <port_from_id+0x62>
	case 3: //DMS 4
		return nCS_DMS4_GPIO_Port;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <port_from_id+0x74>)
 80018aa:	e00a      	b.n	80018c2 <port_from_id+0x62>
	case 4: //DMS 5
		return nCS_DMS5_GPIO_Port;
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <port_from_id+0x74>)
 80018ae:	e008      	b.n	80018c2 <port_from_id+0x62>
	case 5: //DMS 6
		return nCS_DMS6_GPIO_Port;
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <port_from_id+0x78>)
 80018b2:	e006      	b.n	80018c2 <port_from_id+0x62>
	case 6: //PT 1
		return nCS_PT1_GPIO_Port;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <port_from_id+0x7c>)
 80018b6:	e004      	b.n	80018c2 <port_from_id+0x62>
	case 7: //PT 2
		return nCS_PT2_GPIO_Port;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <port_from_id+0x7c>)
 80018ba:	e002      	b.n	80018c2 <port_from_id+0x62>
	case 8: //PT 3
		return nCS_PT3_GPIO_Port;
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <port_from_id+0x7c>)
 80018be:	e000      	b.n	80018c2 <port_from_id+0x62>
	default: //DMS 1
		return nCS_DMS1_GPIO_Port;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <port_from_id+0x70>)
	}
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40021400 	.word	0x40021400
 80018d4:	40021800 	.word	0x40021800
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40020c00 	.word	0x40020c00

080018e0 <pin_drdy_from_id>:

//
uint16_t pin_drdy_from_id(int8_t id) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d82e      	bhi.n	8001950 <pin_drdy_from_id+0x70>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <pin_drdy_from_id+0x18>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	0800191d 	.word	0x0800191d
 80018fc:	08001921 	.word	0x08001921
 8001900:	08001927 	.word	0x08001927
 8001904:	0800192d 	.word	0x0800192d
 8001908:	08001933 	.word	0x08001933
 800190c:	08001939 	.word	0x08001939
 8001910:	0800193f 	.word	0x0800193f
 8001914:	08001945 	.word	0x08001945
 8001918:	0800194b 	.word	0x0800194b
	case 0: //DMS 1
		return nDRDY_DMS1_Pin;
 800191c:	2310      	movs	r3, #16
 800191e:	e018      	b.n	8001952 <pin_drdy_from_id+0x72>
	case 1: //DMS 2
		return nDRDY_DMS2_Pin;
 8001920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001924:	e015      	b.n	8001952 <pin_drdy_from_id+0x72>
	case 2: //DMS 3
		return nDRDY_DMS3_Pin;
 8001926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800192a:	e012      	b.n	8001952 <pin_drdy_from_id+0x72>
	case 3: //DMS 4
		return nDRDY_DMS4_Pin;
 800192c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001930:	e00f      	b.n	8001952 <pin_drdy_from_id+0x72>
	case 4: //DMS 5
		return nDRDY_DMS5_Pin;
 8001932:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001936:	e00c      	b.n	8001952 <pin_drdy_from_id+0x72>
	case 5: //DMS 6
		return nDRDY_DMS6_Pin;
 8001938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193c:	e009      	b.n	8001952 <pin_drdy_from_id+0x72>
	case 6: //PT 1
		return nDRDY_PT1_Pin;
 800193e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001942:	e006      	b.n	8001952 <pin_drdy_from_id+0x72>
	case 7: //PT 2
		return nDRDY_PT2_Pin;
 8001944:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001948:	e003      	b.n	8001952 <pin_drdy_from_id+0x72>
	case 8: //PT 3
		return nDRDY_PT3_Pin;
 800194a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194e:	e000      	b.n	8001952 <pin_drdy_from_id+0x72>
	default: //DMS 1
		return nDRDY_DMS1_Pin;
 8001950:	2310      	movs	r3, #16
	}
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop

08001960 <port_drdy_from_id>:

//
GPIO_TypeDef* port_drdy_from_id(int8_t id) {
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b08      	cmp	r3, #8
 8001970:	d826      	bhi.n	80019c0 <port_drdy_from_id+0x60>
 8001972:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <port_drdy_from_id+0x18>)
 8001974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001978:	0800199d 	.word	0x0800199d
 800197c:	080019a1 	.word	0x080019a1
 8001980:	080019a5 	.word	0x080019a5
 8001984:	080019a9 	.word	0x080019a9
 8001988:	080019ad 	.word	0x080019ad
 800198c:	080019b1 	.word	0x080019b1
 8001990:	080019b5 	.word	0x080019b5
 8001994:	080019b9 	.word	0x080019b9
 8001998:	080019bd 	.word	0x080019bd
	case 0: //DMS 1
		return nDRDY_DMS1_GPIO_Port;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <port_drdy_from_id+0x70>)
 800199e:	e010      	b.n	80019c2 <port_drdy_from_id+0x62>
	case 1: //DMS 2
		return nDRDY_DMS2_GPIO_Port;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <port_drdy_from_id+0x74>)
 80019a2:	e00e      	b.n	80019c2 <port_drdy_from_id+0x62>
	case 2: //DMS 3
		return nDRDY_DMS3_GPIO_Port;
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <port_drdy_from_id+0x74>)
 80019a6:	e00c      	b.n	80019c2 <port_drdy_from_id+0x62>
	case 3: //DMS 4
		return nDRDY_DMS4_GPIO_Port;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <port_drdy_from_id+0x74>)
 80019aa:	e00a      	b.n	80019c2 <port_drdy_from_id+0x62>
	case 4: //DMS 5
		return nDRDY_DMS5_GPIO_Port;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <port_drdy_from_id+0x74>)
 80019ae:	e008      	b.n	80019c2 <port_drdy_from_id+0x62>
	case 5: //DMS 6
		return nDRDY_DMS6_GPIO_Port;
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <port_drdy_from_id+0x74>)
 80019b2:	e006      	b.n	80019c2 <port_drdy_from_id+0x62>
	case 6: //PT 1
		return nDRDY_PT1_GPIO_Port;
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <port_drdy_from_id+0x78>)
 80019b6:	e004      	b.n	80019c2 <port_drdy_from_id+0x62>
	case 7: //PT 2
		return nDRDY_PT2_GPIO_Port;
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <port_drdy_from_id+0x78>)
 80019ba:	e002      	b.n	80019c2 <port_drdy_from_id+0x62>
	case 8: //PT 3
		return nDRDY_PT3_GPIO_Port;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <port_drdy_from_id+0x78>)
 80019be:	e000      	b.n	80019c2 <port_drdy_from_id+0x62>
	default: //DMS 1
		return nDRDY_DMS1_GPIO_Port;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <port_drdy_from_id+0x70>)
	}
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40021800 	.word	0x40021800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40022400 	.word	0x40022400

080019dc <get_hspi_from_id>:

//
SPI_HandleTypeDef* get_hspi_from_id(int8_t id) {
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d826      	bhi.n	8001a3c <get_hspi_from_id+0x60>
 80019ee:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <get_hspi_from_id+0x18>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001a19 	.word	0x08001a19
 80019f8:	08001a1d 	.word	0x08001a1d
 80019fc:	08001a21 	.word	0x08001a21
 8001a00:	08001a25 	.word	0x08001a25
 8001a04:	08001a29 	.word	0x08001a29
 8001a08:	08001a2d 	.word	0x08001a2d
 8001a0c:	08001a31 	.word	0x08001a31
 8001a10:	08001a35 	.word	0x08001a35
 8001a14:	08001a39 	.word	0x08001a39
	case 0: //DMS 1
		return &hspi4;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <get_hspi_from_id+0x70>)
 8001a1a:	e010      	b.n	8001a3e <get_hspi_from_id+0x62>
	case 1: //DMS 2
		return &hspi4;
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <get_hspi_from_id+0x70>)
 8001a1e:	e00e      	b.n	8001a3e <get_hspi_from_id+0x62>
	case 2: //DMS 3
		return &hspi4;
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <get_hspi_from_id+0x70>)
 8001a22:	e00c      	b.n	8001a3e <get_hspi_from_id+0x62>
	case 3: //DMS 4
		return &hspi4;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <get_hspi_from_id+0x70>)
 8001a26:	e00a      	b.n	8001a3e <get_hspi_from_id+0x62>
	case 4: //DMS 5
		return &hspi4;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <get_hspi_from_id+0x70>)
 8001a2a:	e008      	b.n	8001a3e <get_hspi_from_id+0x62>
	case 5: //DMS 6
		return &hspi4;
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <get_hspi_from_id+0x70>)
 8001a2e:	e006      	b.n	8001a3e <get_hspi_from_id+0x62>
	case 6: //PT 1
		return &hspi3;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <get_hspi_from_id+0x74>)
 8001a32:	e004      	b.n	8001a3e <get_hspi_from_id+0x62>
	case 7: //PT 2
		return &hspi3;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <get_hspi_from_id+0x74>)
 8001a36:	e002      	b.n	8001a3e <get_hspi_from_id+0x62>
	case 8: //PT 3
		return &hspi3;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <get_hspi_from_id+0x74>)
 8001a3a:	e000      	b.n	8001a3e <get_hspi_from_id+0x62>
	default: //DMS 1
		return &hspi4;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <get_hspi_from_id+0x70>)
	}
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000254 	.word	0x20000254
 8001a50:	200001f0 	.word	0x200001f0

08001a54 <wr_cmd>:

//
int wr_cmd(int8_t id, uint8_t cmd) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	4613      	mov	r3, r2
 8001a62:	71bb      	strb	r3, [r7, #6]
	int8_t status = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]
	//status+= cs_enable(id);
	status += wr_spi(id, cmd);
 8001a68:	79ba      	ldrb	r2, [r7, #6]
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fced 	bl	8001450 <wr_spi>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD_SYNC) {
 8001a82:	79bb      	ldrb	r3, [r7, #6]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d10c      	bne.n	8001aa2 <wr_cmd+0x4e>
		status += wr_spi(id, cmd);
 8001a88:	79ba      	ldrb	r2, [r7, #6]
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fcdd 	bl	8001450 <wr_spi>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	73fb      	strb	r3, [r7, #15]
	}
	//status+= cs_disable(id);
	if (cmd == CMD_RESET) {
 8001aa2:	79bb      	ldrb	r3, [r7, #6]
 8001aa4:	2b06      	cmp	r3, #6
 8001aa6:	d103      	bne.n	8001ab0 <wr_cmd+0x5c>
		HAL_Delay(1); //1ms
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f000 fe1d 	bl	80026e8 <HAL_Delay>
 8001aae:	e00c      	b.n	8001aca <wr_cmd+0x76>
	} else if (cmd == CMD_SELFOCAL) {
 8001ab0:	79bb      	ldrb	r3, [r7, #6]
 8001ab2:	2b62      	cmp	r3, #98	; 0x62
 8001ab4:	d103      	bne.n	8001abe <wr_cmd+0x6a>
		HAL_Delay(10); //10ms
 8001ab6:	200a      	movs	r0, #10
 8001ab8:	f000 fe16 	bl	80026e8 <HAL_Delay>
 8001abc:	e005      	b.n	8001aca <wr_cmd+0x76>
	} else if (cmd == CMD_SDATAC) {
 8001abe:	79bb      	ldrb	r3, [r7, #6]
 8001ac0:	2b16      	cmp	r3, #22
 8001ac2:	d102      	bne.n	8001aca <wr_cmd+0x76>
		HAL_Delay(1); //1ms
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f000 fe0f 	bl	80026e8 <HAL_Delay>
	}
	return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <wr_reg>:

int wr_reg(int8_t id, uint8_t reg, uint8_t data) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	71bb      	strb	r3, [r7, #6]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	717b      	strb	r3, [r7, #5]
	int8_t status = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, CMD_WREG | reg);
 8001aea:	79bb      	ldrb	r3, [r7, #6]
 8001aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fca9 	bl	8001450 <wr_spi>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	4413      	add	r3, r2
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, 0);
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fc9d 	bl	8001450 <wr_spi>
 8001b16:	4603      	mov	r3, r0
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, data);
 8001b22:	797a      	ldrb	r2, [r7, #5]
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fc90 	bl	8001450 <wr_spi>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	4413      	add	r3, r2
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	73fb      	strb	r3, [r7, #15]
	return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <write_EXP>:
	data = rd_spi(id);
	//status += cs_disable(id);
	return data;
}

int write_EXP(uint8_t *dout) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart8, &dout, sizeof(dout), HAL_MAX_DELAY);
 8001b50:	1d39      	adds	r1, r7, #4
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	2204      	movs	r2, #4
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <write_EXP+0x20>)
 8001b5a:	f004 fd2b 	bl	80065b4 <HAL_UART_Transmit>
	return 0;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000338 	.word	0x20000338

08001b6c <write_DAPI>:

int write_DAPI(uint8_t *dout) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, &dout, sizeof(dout), HAL_MAX_DELAY);
 8001b74:	1d39      	adds	r1, r7, #4
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <write_DAPI+0x20>)
 8001b7e:	f004 fd19 	bl	80065b4 <HAL_UART_Transmit>
	return 0;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200003b8 	.word	0x200003b8

08001b90 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bba:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <MX_SPI2_Init+0x78>)
 8001bbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bd2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001c02:	2207      	movs	r2, #7
 8001c04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001c0e:	2208      	movs	r2, #8
 8001c10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c12:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001c14:	f003 fb16 	bl	8005244 <HAL_SPI_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c1e:	f7ff ffb7 	bl	8001b90 <Error_Handler>
  }

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200000c4 	.word	0x200000c4
 8001c2c:	40003800 	.word	0x40003800

08001c30 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001c34:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <MX_SPI3_Init+0x74>)
 8001c36:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <MX_SPI3_Init+0x78>)
 8001c38:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <MX_SPI3_Init+0x74>)
 8001c3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c40:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <MX_SPI3_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <MX_SPI3_Init+0x74>)
 8001c4a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c4e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <MX_SPI3_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <MX_SPI3_Init+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_SPI3_Init+0x74>)
 8001c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c62:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <MX_SPI3_Init+0x74>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_SPI3_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_SPI3_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <MX_SPI3_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_SPI3_Init+0x74>)
 8001c7e:	2207      	movs	r2, #7
 8001c80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <MX_SPI3_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_SPI3_Init+0x74>)
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_SPI3_Init+0x74>)
 8001c90:	f003 fad8 	bl	8005244 <HAL_SPI_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001c9a:	f7ff ff79 	bl	8001b90 <Error_Handler>
  }

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200001f0 	.word	0x200001f0
 8001ca8:	40003c00 	.word	0x40003c00

08001cac <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <MX_SPI4_Init+0x74>)
 8001cb2:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <MX_SPI4_Init+0x78>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <MX_SPI4_Init+0x74>)
 8001cb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cbc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001cbe:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <MX_SPI4_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <MX_SPI4_Init+0x74>)
 8001cc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cca:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <MX_SPI4_Init+0x74>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <MX_SPI4_Init+0x74>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_SPI4_Init+0x74>)
 8001cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cde:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <MX_SPI4_Init+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_SPI4_Init+0x74>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_SPI4_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <MX_SPI4_Init+0x74>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_SPI4_Init+0x74>)
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <MX_SPI4_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_SPI4_Init+0x74>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_SPI4_Init+0x74>)
 8001d0c:	f003 fa9a 	bl	8005244 <HAL_SPI_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001d16:	f7ff ff3b 	bl	8001b90 <Error_Handler>
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000254 	.word	0x20000254
 8001d24:	40013400 	.word	0x40013400

08001d28 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <MX_SPI5_Init+0x74>)
 8001d2e:	4a1c      	ldr	r2, [pc, #112]	; (8001da0 <MX_SPI5_Init+0x78>)
 8001d30:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <MX_SPI5_Init+0x74>)
 8001d34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d38:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <MX_SPI5_Init+0x74>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d40:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <MX_SPI5_Init+0x74>)
 8001d42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d46:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <MX_SPI5_Init+0x74>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <MX_SPI5_Init+0x74>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <MX_SPI5_Init+0x74>)
 8001d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d5a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <MX_SPI5_Init+0x74>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_SPI5_Init+0x74>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <MX_SPI5_Init+0x74>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <MX_SPI5_Init+0x74>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_SPI5_Init+0x74>)
 8001d76:	2207      	movs	r2, #7
 8001d78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <MX_SPI5_Init+0x74>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_SPI5_Init+0x74>)
 8001d82:	2208      	movs	r2, #8
 8001d84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001d86:	4805      	ldr	r0, [pc, #20]	; (8001d9c <MX_SPI5_Init+0x74>)
 8001d88:	f003 fa5c 	bl	8005244 <HAL_SPI_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001d92:	f7ff fefd 	bl	8001b90 <Error_Handler>
  }

}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000128 	.word	0x20000128
 8001da0:	40015000 	.word	0x40015000

08001da4 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <MX_SPI6_Init+0x74>)
 8001daa:	4a1c      	ldr	r2, [pc, #112]	; (8001e1c <MX_SPI6_Init+0x78>)
 8001dac:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001dae:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <MX_SPI6_Init+0x74>)
 8001db0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001db4:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <MX_SPI6_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dbc:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <MX_SPI6_Init+0x74>)
 8001dbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001dc2:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <MX_SPI6_Init+0x74>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <MX_SPI6_Init+0x74>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <MX_SPI6_Init+0x74>)
 8001dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd6:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <MX_SPI6_Init+0x74>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_SPI6_Init+0x74>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_SPI6_Init+0x74>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <MX_SPI6_Init+0x74>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_SPI6_Init+0x74>)
 8001df2:	2207      	movs	r2, #7
 8001df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <MX_SPI6_Init+0x74>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_SPI6_Init+0x74>)
 8001dfe:	2208      	movs	r2, #8
 8001e00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_SPI6_Init+0x74>)
 8001e04:	f003 fa1e 	bl	8005244 <HAL_SPI_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 8001e0e:	f7ff febf 	bl	8001b90 <Error_Handler>
  }

}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000018c 	.word	0x2000018c
 8001e1c:	40015400 	.word	0x40015400

08001e20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b092      	sub	sp, #72	; 0x48
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a8e      	ldr	r2, [pc, #568]	; (8002078 <HAL_SPI_MspInit+0x258>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d131      	bne.n	8001ea6 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e42:	4b8e      	ldr	r3, [pc, #568]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a8d      	ldr	r2, [pc, #564]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b8b      	ldr	r3, [pc, #556]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
 8001e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	4b88      	ldr	r3, [pc, #544]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a87      	ldr	r2, [pc, #540]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b85      	ldr	r3, [pc, #532]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e72:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e84:	2305      	movs	r3, #5
 8001e86:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	487c      	ldr	r0, [pc, #496]	; (8002080 <HAL_SPI_MspInit+0x260>)
 8001e90:	f000 fefe 	bl	8002c90 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2106      	movs	r1, #6
 8001e98:	2024      	movs	r0, #36	; 0x24
 8001e9a:	f000 fd37 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001e9e:	2024      	movs	r0, #36	; 0x24
 8001ea0:	f000 fd60 	bl	8002964 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001ea4:	e0e4      	b.n	8002070 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI3)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a76      	ldr	r2, [pc, #472]	; (8002084 <HAL_SPI_MspInit+0x264>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d145      	bne.n	8001f3c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001eb0:	4b72      	ldr	r3, [pc, #456]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	4a71      	ldr	r2, [pc, #452]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eba:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebc:	4b6f      	ldr	r3, [pc, #444]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec8:	4b6c      	ldr	r3, [pc, #432]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	4a6b      	ldr	r2, [pc, #428]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed4:	4b69      	ldr	r3, [pc, #420]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee0:	4b66      	ldr	r3, [pc, #408]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	4a65      	ldr	r2, [pc, #404]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	6313      	str	r3, [r2, #48]	; 0x30
 8001eec:	4b63      	ldr	r3, [pc, #396]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	623b      	str	r3, [r7, #32]
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001f08:	2307      	movs	r3, #7
 8001f0a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f10:	4619      	mov	r1, r3
 8001f12:	485b      	ldr	r0, [pc, #364]	; (8002080 <HAL_SPI_MspInit+0x260>)
 8001f14:	f000 febc 	bl	8002c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f18:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f2a:	2306      	movs	r3, #6
 8001f2c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f32:	4619      	mov	r1, r3
 8001f34:	4854      	ldr	r0, [pc, #336]	; (8002088 <HAL_SPI_MspInit+0x268>)
 8001f36:	f000 feab 	bl	8002c90 <HAL_GPIO_Init>
}
 8001f3a:	e099      	b.n	8002070 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI4)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a52      	ldr	r2, [pc, #328]	; (800208c <HAL_SPI_MspInit+0x26c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d130      	bne.n	8001fa8 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f46:	4b4d      	ldr	r3, [pc, #308]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	4a4c      	ldr	r2, [pc, #304]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001f4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f50:	6453      	str	r3, [r2, #68]	; 0x44
 8001f52:	4b4a      	ldr	r3, [pc, #296]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f5e:	4b47      	ldr	r3, [pc, #284]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a46      	ldr	r2, [pc, #280]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001f64:	f043 0310 	orr.w	r3, r3, #16
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b44      	ldr	r3, [pc, #272]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	61bb      	str	r3, [r7, #24]
 8001f74:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001f76:	2364      	movs	r3, #100	; 0x64
 8001f78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f82:	2303      	movs	r3, #3
 8001f84:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001f86:	2305      	movs	r3, #5
 8001f88:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f8e:	4619      	mov	r1, r3
 8001f90:	483f      	ldr	r0, [pc, #252]	; (8002090 <HAL_SPI_MspInit+0x270>)
 8001f92:	f000 fe7d 	bl	8002c90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 6, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2106      	movs	r1, #6
 8001f9a:	2054      	movs	r0, #84	; 0x54
 8001f9c:	f000 fcb6 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001fa0:	2054      	movs	r0, #84	; 0x54
 8001fa2:	f000 fcdf 	bl	8002964 <HAL_NVIC_EnableIRQ>
}
 8001fa6:	e063      	b.n	8002070 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI5)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a39      	ldr	r2, [pc, #228]	; (8002094 <HAL_SPI_MspInit+0x274>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d129      	bne.n	8002006 <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001fb2:	4b32      	ldr	r3, [pc, #200]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	4a31      	ldr	r2, [pc, #196]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fbe:	4b2f      	ldr	r3, [pc, #188]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fca:	4b2c      	ldr	r3, [pc, #176]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a2b      	ldr	r2, [pc, #172]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001fd0:	f043 0320 	orr.w	r3, r3, #32
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001fe2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001fe6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001ff4:	2305      	movs	r3, #5
 8001ff6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ff8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4826      	ldr	r0, [pc, #152]	; (8002098 <HAL_SPI_MspInit+0x278>)
 8002000:	f000 fe46 	bl	8002c90 <HAL_GPIO_Init>
}
 8002004:	e034      	b.n	8002070 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI6)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a24      	ldr	r2, [pc, #144]	; (800209c <HAL_SPI_MspInit+0x27c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d12f      	bne.n	8002070 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8002016:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800201a:	6453      	str	r3, [r2, #68]	; 0x44
 800201c:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_SPI_MspInit+0x25c>)
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <HAL_SPI_MspInit+0x25c>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	4a13      	ldr	r2, [pc, #76]	; (800207c <HAL_SPI_MspInit+0x25c>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6313      	str	r3, [r2, #48]	; 0x30
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <HAL_SPI_MspInit+0x25c>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002040:	23e0      	movs	r3, #224	; 0xe0
 8002042:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8002050:	2308      	movs	r3, #8
 8002052:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002058:	4619      	mov	r1, r3
 800205a:	4811      	ldr	r0, [pc, #68]	; (80020a0 <HAL_SPI_MspInit+0x280>)
 800205c:	f000 fe18 	bl	8002c90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 6, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2106      	movs	r1, #6
 8002064:	2056      	movs	r0, #86	; 0x56
 8002066:	f000 fc51 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 800206a:	2056      	movs	r0, #86	; 0x56
 800206c:	f000 fc7a 	bl	8002964 <HAL_NVIC_EnableIRQ>
}
 8002070:	bf00      	nop
 8002072:	3748      	adds	r7, #72	; 0x48
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40003800 	.word	0x40003800
 800207c:	40023800 	.word	0x40023800
 8002080:	40020400 	.word	0x40020400
 8002084:	40003c00 	.word	0x40003c00
 8002088:	40020800 	.word	0x40020800
 800208c:	40013400 	.word	0x40013400
 8002090:	40021000 	.word	0x40021000
 8002094:	40015000 	.word	0x40015000
 8002098:	40021400 	.word	0x40021400
 800209c:	40015400 	.word	0x40015400
 80020a0:	40020000 	.word	0x40020000

080020a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_MspInit+0x44>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <HAL_MspInit+0x44>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <HAL_MspInit+0x44>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_MspInit+0x44>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <HAL_MspInit+0x44>)
 80020c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020cc:	6453      	str	r3, [r2, #68]	; 0x44
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_MspInit+0x44>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800

080020ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fe:	e7fe      	b.n	80020fe <HardFault_Handler+0x4>

08002100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002104:	e7fe      	b.n	8002104 <MemManage_Handler+0x4>

08002106 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800210a:	e7fe      	b.n	800210a <BusFault_Handler+0x4>

0800210c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <UsageFault_Handler+0x4>

08002112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002140:	2010      	movs	r0, #16
 8002142:	f001 f9a1 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}

0800214a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800214e:	2020      	movs	r0, #32
 8002150:	f001 f99a 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002154:	2040      	movs	r0, #64	; 0x40
 8002156:	f001 f997 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800215a:	2080      	movs	r0, #128	; 0x80
 800215c:	f001 f994 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002160:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002164:	f001 f990 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002168:	f44f 7000 	mov.w	r0, #512	; 0x200
 800216c:	f001 f98c 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}

08002174 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <SPI2_IRQHandler+0x10>)
 800217a:	f003 fec7 	bl	8005f0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200000c4 	.word	0x200000c4

08002188 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800218c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002190:	f001 f97a 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002194:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002198:	f001 f976 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800219c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021a0:	f001 f972 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80021a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021a8:	f001 f96e 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80021ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021b0:	f001 f96a 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <UART4_IRQHandler+0x10>)
 80021be:	f004 fb57 	bl	8006870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200003b8 	.word	0x200003b8

080021cc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <UART5_IRQHandler+0x10>)
 80021d2:	f004 fb4d 	bl	8006870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200002b8 	.word	0x200002b8

080021e0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <UART8_IRQHandler+0x10>)
 80021e6:	f004 fb43 	bl	8006870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000338 	.word	0x20000338

080021f4 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <SPI4_IRQHandler+0x10>)
 80021fa:	f003 fe87 	bl	8005f0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000254 	.word	0x20000254

08002208 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <SPI6_IRQHandler+0x10>)
 800220e:	f003 fe7d 	bl	8005f0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	2000018c 	.word	0x2000018c

0800221c <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void) {
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8002220:	f000 fa42 	bl	80026a8 <HAL_IncTick>
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}

08002228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <_sbrk+0x5c>)
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <_sbrk+0x60>)
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <_sbrk+0x64>)
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <_sbrk+0x68>)
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <_sbrk+0x64>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	429a      	cmp	r2, r3
 8002256:	d207      	bcs.n	8002268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002258:	f005 fa0e 	bl	8007678 <__errno>
 800225c:	4602      	mov	r2, r0
 800225e:	230c      	movs	r3, #12
 8002260:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	e009      	b.n	800227c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <_sbrk+0x64>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <_sbrk+0x64>)
 8002278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800227a:	68fb      	ldr	r3, [r7, #12]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20080000 	.word	0x20080000
 8002288:	00000400 	.word	0x00000400
 800228c:	20000090 	.word	0x20000090
 8002290:	20000440 	.word	0x20000440

08002294 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <SystemInit+0x28>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	4a07      	ldr	r2, [pc, #28]	; (80022bc <SystemInit+0x28>)
 80022a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <SystemInit+0x28>)
 80022aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022ae:	609a      	str	r2, [r3, #8]
#endif
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <MX_UART4_Init+0x58>)
 80022c6:	4a15      	ldr	r2, [pc, #84]	; (800231c <MX_UART4_Init+0x5c>)
 80022c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <MX_UART4_Init+0x58>)
 80022cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MX_UART4_Init+0x58>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <MX_UART4_Init+0x58>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_UART4_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <MX_UART4_Init+0x58>)
 80022e6:	220c      	movs	r2, #12
 80022e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <MX_UART4_Init+0x58>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <MX_UART4_Init+0x58>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <MX_UART4_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <MX_UART4_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <MX_UART4_Init+0x58>)
 8002304:	f004 f896 	bl	8006434 <HAL_UART_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800230e:	f7ff fc3f 	bl	8001b90 <Error_Handler>
  }

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200003b8 	.word	0x200003b8
 800231c:	40004c00 	.word	0x40004c00

08002320 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MX_UART5_Init+0x58>)
 8002326:	4a15      	ldr	r2, [pc, #84]	; (800237c <MX_UART5_Init+0x5c>)
 8002328:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <MX_UART5_Init+0x58>)
 800232c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002330:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <MX_UART5_Init+0x58>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <MX_UART5_Init+0x58>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <MX_UART5_Init+0x58>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_UART5_Init+0x58>)
 8002346:	220c      	movs	r2, #12
 8002348:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <MX_UART5_Init+0x58>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_UART5_Init+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <MX_UART5_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_UART5_Init+0x58>)
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <MX_UART5_Init+0x58>)
 8002364:	f004 f866 	bl	8006434 <HAL_UART_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800236e:	f7ff fc0f 	bl	8001b90 <Error_Handler>
  }

}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200002b8 	.word	0x200002b8
 800237c:	40005000 	.word	0x40005000

08002380 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <MX_UART8_Init+0x58>)
 8002386:	4a15      	ldr	r2, [pc, #84]	; (80023dc <MX_UART8_Init+0x5c>)
 8002388:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 30000;
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <MX_UART8_Init+0x58>)
 800238c:	f247 5230 	movw	r2, #30000	; 0x7530
 8002390:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <MX_UART8_Init+0x58>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <MX_UART8_Init+0x58>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <MX_UART8_Init+0x58>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <MX_UART8_Init+0x58>)
 80023a6:	220c      	movs	r2, #12
 80023a8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <MX_UART8_Init+0x58>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MX_UART8_Init+0x58>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <MX_UART8_Init+0x58>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <MX_UART8_Init+0x58>)
 80023be:	2200      	movs	r2, #0
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80023c2:	4805      	ldr	r0, [pc, #20]	; (80023d8 <MX_UART8_Init+0x58>)
 80023c4:	f004 f836 	bl	8006434 <HAL_UART_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 80023ce:	f7ff fbdf 	bl	8001b90 <Error_Handler>
  }

}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000338 	.word	0x20000338
 80023dc:	40007c00 	.word	0x40007c00

080023e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b090      	sub	sp, #64	; 0x40
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a6e      	ldr	r2, [pc, #440]	; (80025b8 <HAL_UART_MspInit+0x1d8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d14d      	bne.n	800249e <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002402:	4b6e      	ldr	r3, [pc, #440]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a6d      	ldr	r2, [pc, #436]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002408:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b6b      	ldr	r3, [pc, #428]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
 8002418:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800241a:	4b68      	ldr	r3, [pc, #416]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a67      	ldr	r2, [pc, #412]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b65      	ldr	r3, [pc, #404]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	4b62      	ldr	r3, [pc, #392]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a61      	ldr	r2, [pc, #388]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b5f      	ldr	r3, [pc, #380]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	623b      	str	r3, [r7, #32]
 8002448:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = DAPI_RX_Pin;
 800244a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800245c:	2308      	movs	r3, #8
 800245e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_RX_GPIO_Port, &GPIO_InitStruct);
 8002460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002464:	4619      	mov	r1, r3
 8002466:	4856      	ldr	r0, [pc, #344]	; (80025c0 <HAL_UART_MspInit+0x1e0>)
 8002468:	f000 fc12 	bl	8002c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DAPI_TX_Pin;
 800246c:	2301      	movs	r3, #1
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002478:	2303      	movs	r3, #3
 800247a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800247c:	2308      	movs	r3, #8
 800247e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_TX_GPIO_Port, &GPIO_InitStruct);
 8002480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002484:	4619      	mov	r1, r3
 8002486:	484f      	ldr	r0, [pc, #316]	; (80025c4 <HAL_UART_MspInit+0x1e4>)
 8002488:	f000 fc02 	bl	8002c90 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 800248c:	2200      	movs	r2, #0
 800248e:	2106      	movs	r1, #6
 8002490:	2034      	movs	r0, #52	; 0x34
 8002492:	f000 fa3b 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002496:	2034      	movs	r0, #52	; 0x34
 8002498:	f000 fa64 	bl	8002964 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 800249c:	e087      	b.n	80025ae <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART5)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a49      	ldr	r2, [pc, #292]	; (80025c8 <HAL_UART_MspInit+0x1e8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d14d      	bne.n	8002544 <HAL_UART_MspInit+0x164>
    __HAL_RCC_UART5_CLK_ENABLE();
 80024a8:	4b44      	ldr	r3, [pc, #272]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	4a43      	ldr	r2, [pc, #268]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 80024ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b2:	6413      	str	r3, [r2, #64]	; 0x40
 80024b4:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c0:	4b3e      	ldr	r3, [pc, #248]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	4a3d      	ldr	r2, [pc, #244]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	6313      	str	r3, [r2, #48]	; 0x30
 80024cc:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d8:	4b38      	ldr	r3, [pc, #224]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	4a37      	ldr	r2, [pc, #220]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 80024de:	f043 0308 	orr.w	r3, r3, #8
 80024e2:	6313      	str	r3, [r2, #48]	; 0x30
 80024e4:	4b35      	ldr	r3, [pc, #212]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INTERSPU_TX_Pin;
 80024f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fe:	2303      	movs	r3, #3
 8002500:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002502:	2308      	movs	r3, #8
 8002504:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_TX_GPIO_Port, &GPIO_InitStruct);
 8002506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250a:	4619      	mov	r1, r3
 800250c:	482f      	ldr	r0, [pc, #188]	; (80025cc <HAL_UART_MspInit+0x1ec>)
 800250e:	f000 fbbf 	bl	8002c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INTERSPU_RX_Pin;
 8002512:	2304      	movs	r3, #4
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251e:	2303      	movs	r3, #3
 8002520:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002522:	2308      	movs	r3, #8
 8002524:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_RX_GPIO_Port, &GPIO_InitStruct);
 8002526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800252a:	4619      	mov	r1, r3
 800252c:	4828      	ldr	r0, [pc, #160]	; (80025d0 <HAL_UART_MspInit+0x1f0>)
 800252e:	f000 fbaf 	bl	8002c90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 8002532:	2200      	movs	r2, #0
 8002534:	2106      	movs	r1, #6
 8002536:	2035      	movs	r0, #53	; 0x35
 8002538:	f000 f9e8 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800253c:	2035      	movs	r0, #53	; 0x35
 800253e:	f000 fa11 	bl	8002964 <HAL_NVIC_EnableIRQ>
}
 8002542:	e034      	b.n	80025ae <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART8)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a22      	ldr	r2, [pc, #136]	; (80025d4 <HAL_UART_MspInit+0x1f4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d12f      	bne.n	80025ae <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART8_CLK_ENABLE();
 800254e:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a1a      	ldr	r2, [pc, #104]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b18      	ldr	r3, [pc, #96]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a14      	ldr	r2, [pc, #80]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 800256c:	f043 0310 	orr.w	r3, r3, #16
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_UART_MspInit+0x1dc>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXP_IN_Pin|EXP_OUT_Pin;
 800257e:	2303      	movs	r3, #3
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800258e:	2308      	movs	r3, #8
 8002590:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002596:	4619      	mov	r1, r3
 8002598:	480f      	ldr	r0, [pc, #60]	; (80025d8 <HAL_UART_MspInit+0x1f8>)
 800259a:	f000 fb79 	bl	8002c90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 6, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2106      	movs	r1, #6
 80025a2:	2053      	movs	r0, #83	; 0x53
 80025a4:	f000 f9b2 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80025a8:	2053      	movs	r0, #83	; 0x53
 80025aa:	f000 f9db 	bl	8002964 <HAL_NVIC_EnableIRQ>
}
 80025ae:	bf00      	nop
 80025b0:	3740      	adds	r7, #64	; 0x40
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40004c00 	.word	0x40004c00
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40022000 	.word	0x40022000
 80025c4:	40020000 	.word	0x40020000
 80025c8:	40005000 	.word	0x40005000
 80025cc:	40020800 	.word	0x40020800
 80025d0:	40020c00 	.word	0x40020c00
 80025d4:	40007c00 	.word	0x40007c00
 80025d8:	40021000 	.word	0x40021000

080025dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002614 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025e2:	e003      	b.n	80025ec <LoopCopyDataInit>

080025e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025ea:	3104      	adds	r1, #4

080025ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025ec:	480b      	ldr	r0, [pc, #44]	; (800261c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025f4:	d3f6      	bcc.n	80025e4 <CopyDataInit>
  ldr  r2, =_sbss
 80025f6:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025f8:	e002      	b.n	8002600 <LoopFillZerobss>

080025fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025fc:	f842 3b04 	str.w	r3, [r2], #4

08002600 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002602:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002604:	d3f9      	bcc.n	80025fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002606:	f7ff fe45 	bl	8002294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800260a:	f005 f83b 	bl	8007684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800260e:	f7fe fce3 	bl	8000fd8 <main>
  bx  lr    
 8002612:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002614:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002618:	08008158 	.word	0x08008158
  ldr  r0, =_sdata
 800261c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002620:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002624:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002628:	20000440 	.word	0x20000440

0800262c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800262c:	e7fe      	b.n	800262c <ADC_IRQHandler>

0800262e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002632:	2003      	movs	r0, #3
 8002634:	f000 f94a 	bl	80028cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002638:	2000      	movs	r0, #0
 800263a:	f000 f805 	bl	8002648 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800263e:	f7ff fd31 	bl	80020a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_InitTick+0x54>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_InitTick+0x58>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4619      	mov	r1, r3
 800265a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002662:	fbb2 f3f3 	udiv	r3, r2, r3
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f994 	bl	8002994 <HAL_SYSTICK_Config>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e00e      	b.n	8002694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b0f      	cmp	r3, #15
 800267a:	d80a      	bhi.n	8002692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800267c:	2200      	movs	r2, #0
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	f000 f942 	bl	800290c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002688:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <HAL_InitTick+0x5c>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	e000      	b.n	8002694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000000 	.word	0x20000000
 80026a0:	20000008 	.word	0x20000008
 80026a4:	20000004 	.word	0x20000004

080026a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x20>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_IncTick+0x24>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	4a04      	ldr	r2, [pc, #16]	; (80026cc <HAL_IncTick+0x24>)
 80026ba:	6013      	str	r3, [r2, #0]
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000008 	.word	0x20000008
 80026cc:	20000438 	.word	0x20000438

080026d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return uwTick;
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_GetTick+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000438 	.word	0x20000438

080026e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026f0:	f7ff ffee 	bl	80026d0 <HAL_GetTick>
 80026f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d005      	beq.n	800270e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_Delay+0x40>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800270e:	bf00      	nop
 8002710:	f7ff ffde 	bl	80026d0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	429a      	cmp	r2, r3
 800271e:	d8f7      	bhi.n	8002710 <HAL_Delay+0x28>
  {
  }
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000008 	.word	0x20000008

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <__NVIC_SetPriorityGrouping+0x40>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	4313      	orrs	r3, r2
 8002758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275a:	4a04      	ldr	r2, [pc, #16]	; (800276c <__NVIC_SetPriorityGrouping+0x40>)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	60d3      	str	r3, [r2, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00
 8002770:	05fa0000 	.word	0x05fa0000

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <__NVIC_EnableIRQ+0x38>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	; (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
         );
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002898:	d301      	bcc.n	800289e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289a:	2301      	movs	r3, #1
 800289c:	e00f      	b.n	80028be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <SysTick_Config+0x40>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a6:	210f      	movs	r1, #15
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	f7ff ff8e 	bl	80027cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <SysTick_Config+0x40>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <SysTick_Config+0x40>)
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000e010 	.word	0xe000e010

080028cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b07      	cmp	r3, #7
 80028d8:	d00f      	beq.n	80028fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b06      	cmp	r3, #6
 80028de:	d00c      	beq.n	80028fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b05      	cmp	r3, #5
 80028e4:	d009      	beq.n	80028fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d006      	beq.n	80028fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d003      	beq.n	80028fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80028f2:	2192      	movs	r1, #146	; 0x92
 80028f4:	4804      	ldr	r0, [pc, #16]	; (8002908 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80028f6:	f7ff f952 	bl	8001b9e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ff16 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	08007f28 	.word	0x08007f28

0800290c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b0f      	cmp	r3, #15
 8002922:	d903      	bls.n	800292c <HAL_NVIC_SetPriority+0x20>
 8002924:	21aa      	movs	r1, #170	; 0xaa
 8002926:	480e      	ldr	r0, [pc, #56]	; (8002960 <HAL_NVIC_SetPriority+0x54>)
 8002928:	f7ff f939 	bl	8001b9e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b0f      	cmp	r3, #15
 8002930:	d903      	bls.n	800293a <HAL_NVIC_SetPriority+0x2e>
 8002932:	21ab      	movs	r1, #171	; 0xab
 8002934:	480a      	ldr	r0, [pc, #40]	; (8002960 <HAL_NVIC_SetPriority+0x54>)
 8002936:	f7ff f932 	bl	8001b9e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800293a:	f7ff ff1b 	bl	8002774 <__NVIC_GetPriorityGrouping>
 800293e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	6978      	ldr	r0, [r7, #20]
 8002946:	f7ff ff6b 	bl	8002820 <NVIC_EncodePriority>
 800294a:	4602      	mov	r2, r0
 800294c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff3a 	bl	80027cc <__NVIC_SetPriority>
}
 8002958:	bf00      	nop
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	08007f28 	.word	0x08007f28

08002964 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	2b00      	cmp	r3, #0
 8002974:	da03      	bge.n	800297e <HAL_NVIC_EnableIRQ+0x1a>
 8002976:	21be      	movs	r1, #190	; 0xbe
 8002978:	4805      	ldr	r0, [pc, #20]	; (8002990 <HAL_NVIC_EnableIRQ+0x2c>)
 800297a:	f7ff f910 	bl	8001b9e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff ff04 	bl	8002790 <__NVIC_EnableIRQ>
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	08007f28 	.word	0x08007f28

08002994 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff73 	bl	8002888 <SysTick_Config>
 80029a2:	4603      	mov	r3, r0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0a5      	b.n	8002b0a <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a54      	ldr	r2, [pc, #336]	; (8002b14 <HAL_CRC_Init+0x168>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d003      	beq.n	80029d0 <HAL_CRC_Init+0x24>
 80029c8:	2170      	movs	r1, #112	; 0x70
 80029ca:	4853      	ldr	r0, [pc, #332]	; (8002b18 <HAL_CRC_Init+0x16c>)
 80029cc:	f7ff f8e7 	bl	8001b9e <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7f5b      	ldrb	r3, [r3, #29]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7fd ff21 	bl	8000828 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2202      	movs	r2, #2
 80029ea:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	791b      	ldrb	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <HAL_CRC_Init+0x58>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	791b      	ldrb	r3, [r3, #4]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d003      	beq.n	8002a04 <HAL_CRC_Init+0x58>
 80029fc:	217e      	movs	r1, #126	; 0x7e
 80029fe:	4846      	ldr	r0, [pc, #280]	; (8002b18 <HAL_CRC_Init+0x16c>)
 8002a00:	f7ff f8cd 	bl	8001b9e <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	791b      	ldrb	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10c      	bne.n	8002a26 <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a42      	ldr	r2, [pc, #264]	; (8002b1c <HAL_CRC_Init+0x170>)
 8002a12:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0218 	bic.w	r2, r2, #24
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	e00c      	b.n	8002a40 <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6899      	ldr	r1, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f875 	bl	8002b20 <HAL_CRCEx_Polynomial_Set>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e064      	b.n	8002b0a <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	795b      	ldrb	r3, [r3, #5]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d007      	beq.n	8002a58 <HAL_CRC_Init+0xac>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	795b      	ldrb	r3, [r3, #5]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d003      	beq.n	8002a58 <HAL_CRC_Init+0xac>
 8002a50:	2190      	movs	r1, #144	; 0x90
 8002a52:	4831      	ldr	r0, [pc, #196]	; (8002b18 <HAL_CRC_Init+0x16c>)
 8002a54:	f7ff f8a3 	bl	8001b9e <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	795b      	ldrb	r3, [r3, #5]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	611a      	str	r2, [r3, #16]
 8002a6a:	e004      	b.n	8002a76 <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6912      	ldr	r2, [r2, #16]
 8002a74:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00f      	beq.n	8002a9e <HAL_CRC_Init+0xf2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d00b      	beq.n	8002a9e <HAL_CRC_Init+0xf2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	2b40      	cmp	r3, #64	; 0x40
 8002a8c:	d007      	beq.n	8002a9e <HAL_CRC_Init+0xf2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	2b60      	cmp	r3, #96	; 0x60
 8002a94:	d003      	beq.n	8002a9e <HAL_CRC_Init+0xf2>
 8002a96:	219c      	movs	r1, #156	; 0x9c
 8002a98:	481f      	ldr	r0, [pc, #124]	; (8002b18 <HAL_CRC_Init+0x16c>)
 8002a9a:	f7ff f880 	bl	8001b9e <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <HAL_CRC_Init+0x120>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b80      	cmp	r3, #128	; 0x80
 8002ac2:	d003      	beq.n	8002acc <HAL_CRC_Init+0x120>
 8002ac4:	21a0      	movs	r1, #160	; 0xa0
 8002ac6:	4814      	ldr	r0, [pc, #80]	; (8002b18 <HAL_CRC_Init+0x16c>)
 8002ac8:	f7ff f869 	bl	8001b9e <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d00b      	beq.n	8002b02 <HAL_CRC_Init+0x156>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d007      	beq.n	8002b02 <HAL_CRC_Init+0x156>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d003      	beq.n	8002b02 <HAL_CRC_Init+0x156>
 8002afa:	21a5      	movs	r1, #165	; 0xa5
 8002afc:	4806      	ldr	r0, [pc, #24]	; (8002b18 <HAL_CRC_Init+0x16c>)
 8002afe:	f7ff f84e 	bl	8001b9e <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023000 	.word	0x40023000
 8002b18:	08007f64 	.word	0x08007f64
 8002b1c:	04c11db7 	.word	0x04c11db7

08002b20 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002b30:	231f      	movs	r3, #31
 8002b32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00c      	beq.n	8002b54 <HAL_CRCEx_Polynomial_Set+0x34>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d009      	beq.n	8002b54 <HAL_CRCEx_Polynomial_Set+0x34>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	d006      	beq.n	8002b54 <HAL_CRCEx_Polynomial_Set+0x34>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b18      	cmp	r3, #24
 8002b4a:	d003      	beq.n	8002b54 <HAL_CRCEx_Polynomial_Set+0x34>
 8002b4c:	215f      	movs	r1, #95	; 0x5f
 8002b4e:	483e      	ldr	r0, [pc, #248]	; (8002c48 <HAL_CRCEx_Polynomial_Set+0x128>)
 8002b50:	f7ff f825 	bl	8001b9e <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002b54:	bf00      	nop
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1e5a      	subs	r2, r3, #1
 8002b5a:	613a      	str	r2, [r7, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d009      	beq.n	8002b74 <HAL_CRCEx_Polynomial_Set+0x54>
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b18      	cmp	r3, #24
 8002b78:	d846      	bhi.n	8002c08 <HAL_CRCEx_Polynomial_Set+0xe8>
 8002b7a:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <HAL_CRCEx_Polynomial_Set+0x60>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002c0f 	.word	0x08002c0f
 8002b84:	08002c09 	.word	0x08002c09
 8002b88:	08002c09 	.word	0x08002c09
 8002b8c:	08002c09 	.word	0x08002c09
 8002b90:	08002c09 	.word	0x08002c09
 8002b94:	08002c09 	.word	0x08002c09
 8002b98:	08002c09 	.word	0x08002c09
 8002b9c:	08002c09 	.word	0x08002c09
 8002ba0:	08002bfd 	.word	0x08002bfd
 8002ba4:	08002c09 	.word	0x08002c09
 8002ba8:	08002c09 	.word	0x08002c09
 8002bac:	08002c09 	.word	0x08002c09
 8002bb0:	08002c09 	.word	0x08002c09
 8002bb4:	08002c09 	.word	0x08002c09
 8002bb8:	08002c09 	.word	0x08002c09
 8002bbc:	08002c09 	.word	0x08002c09
 8002bc0:	08002bf1 	.word	0x08002bf1
 8002bc4:	08002c09 	.word	0x08002c09
 8002bc8:	08002c09 	.word	0x08002c09
 8002bcc:	08002c09 	.word	0x08002c09
 8002bd0:	08002c09 	.word	0x08002c09
 8002bd4:	08002c09 	.word	0x08002c09
 8002bd8:	08002c09 	.word	0x08002c09
 8002bdc:	08002c09 	.word	0x08002c09
 8002be0:	08002be5 	.word	0x08002be5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d913      	bls.n	8002c12 <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002bee:	e010      	b.n	8002c12 <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	2b07      	cmp	r3, #7
 8002bf4:	d90f      	bls.n	8002c16 <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002bfa:	e00c      	b.n	8002c16 <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b0f      	cmp	r3, #15
 8002c00:	d90b      	bls.n	8002c1a <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c06:	e008      	b.n	8002c1a <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c0c:	e006      	b.n	8002c1c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002c0e:	bf00      	nop
 8002c10:	e004      	b.n	8002c1c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002c12:	bf00      	nop
 8002c14:	e002      	b.n	8002c1c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002c16:	bf00      	nop
 8002c18:	e000      	b.n	8002c1c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002c1a:	bf00      	nop
  }
  if (status == HAL_OK)
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10d      	bne.n	8002c3e <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f023 0118 	bic.w	r1, r3, #24
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	08007f9c 	.word	0x08007f9c

08002c4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d004      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e00c      	b.n	8002c84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2205      	movs	r2, #5
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a42      	ldr	r2, [pc, #264]	; (8002db8 <HAL_GPIO_Init+0x128>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d02b      	beq.n	8002d0a <HAL_GPIO_Init+0x7a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a41      	ldr	r2, [pc, #260]	; (8002dbc <HAL_GPIO_Init+0x12c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d027      	beq.n	8002d0a <HAL_GPIO_Init+0x7a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a40      	ldr	r2, [pc, #256]	; (8002dc0 <HAL_GPIO_Init+0x130>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d023      	beq.n	8002d0a <HAL_GPIO_Init+0x7a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a3f      	ldr	r2, [pc, #252]	; (8002dc4 <HAL_GPIO_Init+0x134>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01f      	beq.n	8002d0a <HAL_GPIO_Init+0x7a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a3e      	ldr	r2, [pc, #248]	; (8002dc8 <HAL_GPIO_Init+0x138>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01b      	beq.n	8002d0a <HAL_GPIO_Init+0x7a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a3d      	ldr	r2, [pc, #244]	; (8002dcc <HAL_GPIO_Init+0x13c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d017      	beq.n	8002d0a <HAL_GPIO_Init+0x7a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a3c      	ldr	r2, [pc, #240]	; (8002dd0 <HAL_GPIO_Init+0x140>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_GPIO_Init+0x7a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a3b      	ldr	r2, [pc, #236]	; (8002dd4 <HAL_GPIO_Init+0x144>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00f      	beq.n	8002d0a <HAL_GPIO_Init+0x7a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a3a      	ldr	r2, [pc, #232]	; (8002dd8 <HAL_GPIO_Init+0x148>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00b      	beq.n	8002d0a <HAL_GPIO_Init+0x7a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a39      	ldr	r2, [pc, #228]	; (8002ddc <HAL_GPIO_Init+0x14c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <HAL_GPIO_Init+0x7a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a38      	ldr	r2, [pc, #224]	; (8002de0 <HAL_GPIO_Init+0x150>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x7a>
 8002d02:	21b1      	movs	r1, #177	; 0xb1
 8002d04:	4837      	ldr	r0, [pc, #220]	; (8002de4 <HAL_GPIO_Init+0x154>)
 8002d06:	f7fe ff4a 	bl	8001b9e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d103      	bne.n	8002d1c <HAL_GPIO_Init+0x8c>
 8002d14:	21b2      	movs	r1, #178	; 0xb2
 8002d16:	4833      	ldr	r0, [pc, #204]	; (8002de4 <HAL_GPIO_Init+0x154>)
 8002d18:	f7fe ff41 	bl	8001b9e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d035      	beq.n	8002d90 <HAL_GPIO_Init+0x100>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d031      	beq.n	8002d90 <HAL_GPIO_Init+0x100>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b11      	cmp	r3, #17
 8002d32:	d02d      	beq.n	8002d90 <HAL_GPIO_Init+0x100>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d029      	beq.n	8002d90 <HAL_GPIO_Init+0x100>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b12      	cmp	r3, #18
 8002d42:	d025      	beq.n	8002d90 <HAL_GPIO_Init+0x100>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4a27      	ldr	r2, [pc, #156]	; (8002de8 <HAL_GPIO_Init+0x158>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d020      	beq.n	8002d90 <HAL_GPIO_Init+0x100>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4a26      	ldr	r2, [pc, #152]	; (8002dec <HAL_GPIO_Init+0x15c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d01b      	beq.n	8002d90 <HAL_GPIO_Init+0x100>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a24      	ldr	r2, [pc, #144]	; (8002df0 <HAL_GPIO_Init+0x160>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d016      	beq.n	8002d90 <HAL_GPIO_Init+0x100>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4a23      	ldr	r2, [pc, #140]	; (8002df4 <HAL_GPIO_Init+0x164>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d011      	beq.n	8002d90 <HAL_GPIO_Init+0x100>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4a21      	ldr	r2, [pc, #132]	; (8002df8 <HAL_GPIO_Init+0x168>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00c      	beq.n	8002d90 <HAL_GPIO_Init+0x100>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4a20      	ldr	r2, [pc, #128]	; (8002dfc <HAL_GPIO_Init+0x16c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d007      	beq.n	8002d90 <HAL_GPIO_Init+0x100>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x100>
 8002d88:	21b3      	movs	r1, #179	; 0xb3
 8002d8a:	4816      	ldr	r0, [pc, #88]	; (8002de4 <HAL_GPIO_Init+0x154>)
 8002d8c:	f7fe ff07 	bl	8001b9e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00b      	beq.n	8002db0 <HAL_GPIO_Init+0x120>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d007      	beq.n	8002db0 <HAL_GPIO_Init+0x120>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0x120>
 8002da8:	21b4      	movs	r1, #180	; 0xb4
 8002daa:	480e      	ldr	r0, [pc, #56]	; (8002de4 <HAL_GPIO_Init+0x154>)
 8002dac:	f7fe fef7 	bl	8001b9e <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	e2d6      	b.n	8003364 <HAL_GPIO_Init+0x6d4>
 8002db6:	bf00      	nop
 8002db8:	40020000 	.word	0x40020000
 8002dbc:	40020400 	.word	0x40020400
 8002dc0:	40020800 	.word	0x40020800
 8002dc4:	40020c00 	.word	0x40020c00
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40021400 	.word	0x40021400
 8002dd0:	40021800 	.word	0x40021800
 8002dd4:	40021c00 	.word	0x40021c00
 8002dd8:	40022000 	.word	0x40022000
 8002ddc:	40022400 	.word	0x40022400
 8002de0:	40022800 	.word	0x40022800
 8002de4:	08007fd8 	.word	0x08007fd8
 8002de8:	10110000 	.word	0x10110000
 8002dec:	10210000 	.word	0x10210000
 8002df0:	10310000 	.word	0x10310000
 8002df4:	10120000 	.word	0x10120000
 8002df8:	10220000 	.word	0x10220000
 8002dfc:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e00:	2201      	movs	r2, #1
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	f040 82a0 	bne.w	800335e <HAL_GPIO_Init+0x6ce>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d00b      	beq.n	8002e3e <HAL_GPIO_Init+0x1ae>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d007      	beq.n	8002e3e <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e32:	2b11      	cmp	r3, #17
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b12      	cmp	r3, #18
 8002e3c:	d144      	bne.n	8002ec8 <HAL_GPIO_Init+0x238>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00f      	beq.n	8002e66 <HAL_GPIO_Init+0x1d6>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d00b      	beq.n	8002e66 <HAL_GPIO_Init+0x1d6>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d007      	beq.n	8002e66 <HAL_GPIO_Init+0x1d6>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x1d6>
 8002e5e:	21c6      	movs	r1, #198	; 0xc6
 8002e60:	482a      	ldr	r0, [pc, #168]	; (8002f0c <HAL_GPIO_Init+0x27c>)
 8002e62:	f7fe fe9c 	bl	8001b9e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2203      	movs	r2, #3
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 0201 	and.w	r2, r3, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d007      	beq.n	8002f10 <HAL_GPIO_Init+0x280>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b12      	cmp	r3, #18
 8002f06:	f040 814b 	bne.w	80031a0 <HAL_GPIO_Init+0x510>
 8002f0a:	e001      	b.n	8002f10 <HAL_GPIO_Init+0x280>
 8002f0c:	08007fd8 	.word	0x08007fd8
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 811f 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	f000 811a 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 8115 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8110 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 810b 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	f000 8106 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	f000 8101 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	f000 80fc 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	f000 80f7 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	f000 80f2 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	f000 80ed 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	f000 80e8 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	f000 80e3 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	f000 80de 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	f000 80d9 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	f000 80d4 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	f000 80cf 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	f000 80ca 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	f000 80c5 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	f000 80c0 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	f000 80bb 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b05      	cmp	r3, #5
 8002fe8:	f000 80b6 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	f000 80b1 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b05      	cmp	r3, #5
 8002ffc:	f000 80ac 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b05      	cmp	r3, #5
 8003006:	f000 80a7 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b05      	cmp	r3, #5
 8003010:	f000 80a2 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b06      	cmp	r3, #6
 800301a:	f000 809d 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b06      	cmp	r3, #6
 8003024:	f000 8098 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b07      	cmp	r3, #7
 800302e:	f000 8093 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b07      	cmp	r3, #7
 8003038:	f000 808e 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2b07      	cmp	r3, #7
 8003042:	f000 8089 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b07      	cmp	r3, #7
 800304c:	f000 8084 	beq.w	8003158 <HAL_GPIO_Init+0x4c8>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	2b07      	cmp	r3, #7
 8003056:	d07f      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b07      	cmp	r3, #7
 800305e:	d07b      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b07      	cmp	r3, #7
 8003066:	d077      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b08      	cmp	r3, #8
 800306e:	d073      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	2b08      	cmp	r3, #8
 8003076:	d06f      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d06b      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d067      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d063      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d05f      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	2b08      	cmp	r3, #8
 800309e:	d05b      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2b09      	cmp	r3, #9
 80030a6:	d057      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b09      	cmp	r3, #9
 80030ae:	d053      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b09      	cmp	r3, #9
 80030b6:	d04f      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2b09      	cmp	r3, #9
 80030be:	d04b      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b09      	cmp	r3, #9
 80030c6:	d047      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	2b09      	cmp	r3, #9
 80030ce:	d043      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b09      	cmp	r3, #9
 80030d6:	d03f      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b0a      	cmp	r3, #10
 80030de:	d03b      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b0a      	cmp	r3, #10
 80030e6:	d037      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	2b0a      	cmp	r3, #10
 80030ee:	d033      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b0a      	cmp	r3, #10
 80030f6:	d02f      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2b0b      	cmp	r3, #11
 80030fe:	d02b      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	2b0a      	cmp	r3, #10
 8003106:	d027      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	2b0b      	cmp	r3, #11
 800310e:	d023      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b0b      	cmp	r3, #11
 8003116:	d01f      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	2b0c      	cmp	r3, #12
 800311e:	d01b      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b0c      	cmp	r3, #12
 8003126:	d017      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b0c      	cmp	r3, #12
 800312e:	d013      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	2b0f      	cmp	r3, #15
 8003136:	d00f      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b0d      	cmp	r3, #13
 800313e:	d00b      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b0e      	cmp	r3, #14
 8003146:	d007      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b0d      	cmp	r3, #13
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x4c8>
 8003150:	21de      	movs	r1, #222	; 0xde
 8003152:	4888      	ldr	r0, [pc, #544]	; (8003374 <HAL_GPIO_Init+0x6e4>)
 8003154:	f7fe fd23 	bl	8001b9e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	08da      	lsrs	r2, r3, #3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3208      	adds	r2, #8
 8003160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	220f      	movs	r2, #15
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	08da      	lsrs	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3208      	adds	r2, #8
 800319a:	69b9      	ldr	r1, [r7, #24]
 800319c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	2203      	movs	r2, #3
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0203 	and.w	r2, r3, #3
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80be 	beq.w	800335e <HAL_GPIO_Init+0x6ce>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e2:	4b65      	ldr	r3, [pc, #404]	; (8003378 <HAL_GPIO_Init+0x6e8>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	4a64      	ldr	r2, [pc, #400]	; (8003378 <HAL_GPIO_Init+0x6e8>)
 80031e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ec:	6453      	str	r3, [r2, #68]	; 0x44
 80031ee:	4b62      	ldr	r3, [pc, #392]	; (8003378 <HAL_GPIO_Init+0x6e8>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031fa:	4a60      	ldr	r2, [pc, #384]	; (800337c <HAL_GPIO_Init+0x6ec>)
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	089b      	lsrs	r3, r3, #2
 8003200:	3302      	adds	r3, #2
 8003202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	220f      	movs	r2, #15
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a57      	ldr	r2, [pc, #348]	; (8003380 <HAL_GPIO_Init+0x6f0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d037      	beq.n	8003296 <HAL_GPIO_Init+0x606>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a56      	ldr	r2, [pc, #344]	; (8003384 <HAL_GPIO_Init+0x6f4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d031      	beq.n	8003292 <HAL_GPIO_Init+0x602>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a55      	ldr	r2, [pc, #340]	; (8003388 <HAL_GPIO_Init+0x6f8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d02b      	beq.n	800328e <HAL_GPIO_Init+0x5fe>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a54      	ldr	r2, [pc, #336]	; (800338c <HAL_GPIO_Init+0x6fc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d025      	beq.n	800328a <HAL_GPIO_Init+0x5fa>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a53      	ldr	r2, [pc, #332]	; (8003390 <HAL_GPIO_Init+0x700>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d01f      	beq.n	8003286 <HAL_GPIO_Init+0x5f6>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a52      	ldr	r2, [pc, #328]	; (8003394 <HAL_GPIO_Init+0x704>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d019      	beq.n	8003282 <HAL_GPIO_Init+0x5f2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a51      	ldr	r2, [pc, #324]	; (8003398 <HAL_GPIO_Init+0x708>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d013      	beq.n	800327e <HAL_GPIO_Init+0x5ee>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a50      	ldr	r2, [pc, #320]	; (800339c <HAL_GPIO_Init+0x70c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00d      	beq.n	800327a <HAL_GPIO_Init+0x5ea>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a4f      	ldr	r2, [pc, #316]	; (80033a0 <HAL_GPIO_Init+0x710>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d007      	beq.n	8003276 <HAL_GPIO_Init+0x5e6>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a4e      	ldr	r2, [pc, #312]	; (80033a4 <HAL_GPIO_Init+0x714>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d101      	bne.n	8003272 <HAL_GPIO_Init+0x5e2>
 800326e:	2309      	movs	r3, #9
 8003270:	e012      	b.n	8003298 <HAL_GPIO_Init+0x608>
 8003272:	230a      	movs	r3, #10
 8003274:	e010      	b.n	8003298 <HAL_GPIO_Init+0x608>
 8003276:	2308      	movs	r3, #8
 8003278:	e00e      	b.n	8003298 <HAL_GPIO_Init+0x608>
 800327a:	2307      	movs	r3, #7
 800327c:	e00c      	b.n	8003298 <HAL_GPIO_Init+0x608>
 800327e:	2306      	movs	r3, #6
 8003280:	e00a      	b.n	8003298 <HAL_GPIO_Init+0x608>
 8003282:	2305      	movs	r3, #5
 8003284:	e008      	b.n	8003298 <HAL_GPIO_Init+0x608>
 8003286:	2304      	movs	r3, #4
 8003288:	e006      	b.n	8003298 <HAL_GPIO_Init+0x608>
 800328a:	2303      	movs	r3, #3
 800328c:	e004      	b.n	8003298 <HAL_GPIO_Init+0x608>
 800328e:	2302      	movs	r3, #2
 8003290:	e002      	b.n	8003298 <HAL_GPIO_Init+0x608>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_GPIO_Init+0x608>
 8003296:	2300      	movs	r3, #0
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	f002 0203 	and.w	r2, r2, #3
 800329e:	0092      	lsls	r2, r2, #2
 80032a0:	4093      	lsls	r3, r2
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032a8:	4934      	ldr	r1, [pc, #208]	; (800337c <HAL_GPIO_Init+0x6ec>)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	3302      	adds	r3, #2
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032b6:	4b3c      	ldr	r3, [pc, #240]	; (80033a8 <HAL_GPIO_Init+0x718>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x64a>
        {
          temp |= iocurrent;
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032da:	4a33      	ldr	r2, [pc, #204]	; (80033a8 <HAL_GPIO_Init+0x718>)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032e0:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <HAL_GPIO_Init+0x718>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x674>
        {
          temp |= iocurrent;
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003304:	4a28      	ldr	r2, [pc, #160]	; (80033a8 <HAL_GPIO_Init+0x718>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800330a:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <HAL_GPIO_Init+0x718>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x69e>
        {
          temp |= iocurrent;
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800332e:	4a1e      	ldr	r2, [pc, #120]	; (80033a8 <HAL_GPIO_Init+0x718>)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003334:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <HAL_GPIO_Init+0x718>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0x6c8>
        {
          temp |= iocurrent;
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003358:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <HAL_GPIO_Init+0x718>)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3301      	adds	r3, #1
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b0f      	cmp	r3, #15
 8003368:	f67f ad4a 	bls.w	8002e00 <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 800336c:	bf00      	nop
 800336e:	3720      	adds	r7, #32
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	08007fd8 	.word	0x08007fd8
 8003378:	40023800 	.word	0x40023800
 800337c:	40013800 	.word	0x40013800
 8003380:	40020000 	.word	0x40020000
 8003384:	40020400 	.word	0x40020400
 8003388:	40020800 	.word	0x40020800
 800338c:	40020c00 	.word	0x40020c00
 8003390:	40021000 	.word	0x40021000
 8003394:	40021400 	.word	0x40021400
 8003398:	40021800 	.word	0x40021800
 800339c:	40021c00 	.word	0x40021c00
 80033a0:	40022000 	.word	0x40022000
 80033a4:	40022400 	.word	0x40022400
 80033a8:	40013c00 	.word	0x40013c00

080033ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d104      	bne.n	80033c8 <HAL_GPIO_ReadPin+0x1c>
 80033be:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80033c2:	4809      	ldr	r0, [pc, #36]	; (80033e8 <HAL_GPIO_ReadPin+0x3c>)
 80033c4:	f7fe fbeb 	bl	8001b9e <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
 80033d8:	e001      	b.n	80033de <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033de:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	08007fd8 	.word	0x08007fd8

080033ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
 80033f8:	4613      	mov	r3, r2
 80033fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80033fc:	887b      	ldrh	r3, [r7, #2]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d104      	bne.n	800340c <HAL_GPIO_WritePin+0x20>
 8003402:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8003406:	480e      	ldr	r0, [pc, #56]	; (8003440 <HAL_GPIO_WritePin+0x54>)
 8003408:	f7fe fbc9 	bl	8001b9e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800340c:	787b      	ldrb	r3, [r7, #1]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_GPIO_WritePin+0x36>
 8003412:	787b      	ldrb	r3, [r7, #1]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d004      	beq.n	8003422 <HAL_GPIO_WritePin+0x36>
 8003418:	f240 119b 	movw	r1, #411	; 0x19b
 800341c:	4808      	ldr	r0, [pc, #32]	; (8003440 <HAL_GPIO_WritePin+0x54>)
 800341e:	f7fe fbbe 	bl	8001b9e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003422:	787b      	ldrb	r3, [r7, #1]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003428:	887a      	ldrh	r2, [r7, #2]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800342e:	e003      	b.n	8003438 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003430:	887b      	ldrh	r3, [r7, #2]
 8003432:	041a      	lsls	r2, r3, #16
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	619a      	str	r2, [r3, #24]
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	08007fd8 	.word	0x08007fd8

08003444 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003450:	887b      	ldrh	r3, [r7, #2]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d104      	bne.n	8003460 <HAL_GPIO_TogglePin+0x1c>
 8003456:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800345a:	480a      	ldr	r0, [pc, #40]	; (8003484 <HAL_GPIO_TogglePin+0x40>)
 800345c:	f7fe fb9f 	bl	8001b9e <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	887b      	ldrh	r3, [r7, #2]
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d004      	beq.n	8003476 <HAL_GPIO_TogglePin+0x32>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800346c:	887b      	ldrh	r3, [r7, #2]
 800346e:	041a      	lsls	r2, r3, #16
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003474:	e002      	b.n	800347c <HAL_GPIO_TogglePin+0x38>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	619a      	str	r2, [r3, #24]
}
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	08007fd8 	.word	0x08007fd8

08003488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d006      	beq.n	80034ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800349e:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034a4:	88fb      	ldrh	r3, [r7, #6]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f806 	bl	80034b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40013c00 	.word	0x40013c00

080034b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80034da:	4b23      	ldr	r3, [pc, #140]	; (8003568 <HAL_PWREx_EnableOverDrive+0x98>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	4a22      	ldr	r2, [pc, #136]	; (8003568 <HAL_PWREx_EnableOverDrive+0x98>)
 80034e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e4:	6413      	str	r3, [r2, #64]	; 0x40
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <HAL_PWREx_EnableOverDrive+0x98>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80034f2:	4b1e      	ldr	r3, [pc, #120]	; (800356c <HAL_PWREx_EnableOverDrive+0x9c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1d      	ldr	r2, [pc, #116]	; (800356c <HAL_PWREx_EnableOverDrive+0x9c>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034fe:	f7ff f8e7 	bl	80026d0 <HAL_GetTick>
 8003502:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003504:	e009      	b.n	800351a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003506:	f7ff f8e3 	bl	80026d0 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003514:	d901      	bls.n	800351a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e022      	b.n	8003560 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800351a:	4b14      	ldr	r3, [pc, #80]	; (800356c <HAL_PWREx_EnableOverDrive+0x9c>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003526:	d1ee      	bne.n	8003506 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003528:	4b10      	ldr	r3, [pc, #64]	; (800356c <HAL_PWREx_EnableOverDrive+0x9c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0f      	ldr	r2, [pc, #60]	; (800356c <HAL_PWREx_EnableOverDrive+0x9c>)
 800352e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003532:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003534:	f7ff f8cc 	bl	80026d0 <HAL_GetTick>
 8003538:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800353a:	e009      	b.n	8003550 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800353c:	f7ff f8c8 	bl	80026d0 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800354a:	d901      	bls.n	8003550 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e007      	b.n	8003560 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800355c:	d1ee      	bne.n	800353c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40023800 	.word	0x40023800
 800356c:	40007000 	.word	0x40007000

08003570 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003578:	2300      	movs	r3, #0
 800357a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e35c      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b0f      	cmp	r3, #15
 800358c:	d904      	bls.n	8003598 <HAL_RCC_OscConfig+0x28>
 800358e:	f240 1165 	movw	r1, #357	; 0x165
 8003592:	4892      	ldr	r0, [pc, #584]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003594:	f7fe fb03 	bl	8001b9e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 809a 	beq.w	80036da <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00e      	beq.n	80035cc <HAL_RCC_OscConfig+0x5c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b6:	d009      	beq.n	80035cc <HAL_RCC_OscConfig+0x5c>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c0:	d004      	beq.n	80035cc <HAL_RCC_OscConfig+0x5c>
 80035c2:	f240 116b 	movw	r1, #363	; 0x16b
 80035c6:	4885      	ldr	r0, [pc, #532]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80035c8:	f7fe fae9 	bl	8001b9e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035cc:	4b84      	ldr	r3, [pc, #528]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 030c 	and.w	r3, r3, #12
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d00c      	beq.n	80035f2 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d8:	4b81      	ldr	r3, [pc, #516]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 030c 	and.w	r3, r3, #12
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d112      	bne.n	800360a <HAL_RCC_OscConfig+0x9a>
 80035e4:	4b7e      	ldr	r3, [pc, #504]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f0:	d10b      	bne.n	800360a <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f2:	4b7b      	ldr	r3, [pc, #492]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d06c      	beq.n	80036d8 <HAL_RCC_OscConfig+0x168>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d168      	bne.n	80036d8 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e31a      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0xb2>
 8003614:	4b72      	ldr	r3, [pc, #456]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a71      	ldr	r2, [pc, #452]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800361a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	e02e      	b.n	8003680 <HAL_RCC_OscConfig+0x110>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0xd4>
 800362a:	4b6d      	ldr	r3, [pc, #436]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a6c      	ldr	r2, [pc, #432]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	4b6a      	ldr	r3, [pc, #424]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a69      	ldr	r2, [pc, #420]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800363c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e01d      	b.n	8003680 <HAL_RCC_OscConfig+0x110>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0xf8>
 800364e:	4b64      	ldr	r3, [pc, #400]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a63      	ldr	r2, [pc, #396]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	4b61      	ldr	r3, [pc, #388]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a60      	ldr	r2, [pc, #384]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e00b      	b.n	8003680 <HAL_RCC_OscConfig+0x110>
 8003668:	4b5d      	ldr	r3, [pc, #372]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a5c      	ldr	r2, [pc, #368]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800366e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	4b5a      	ldr	r3, [pc, #360]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a59      	ldr	r2, [pc, #356]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800367a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7ff f822 	bl	80026d0 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003690:	f7ff f81e 	bl	80026d0 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	; 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e2ce      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	4b4f      	ldr	r3, [pc, #316]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0x120>
 80036ae:	e014      	b.n	80036da <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7ff f80e 	bl	80026d0 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b8:	f7ff f80a 	bl	80026d0 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e2ba      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ca:	4b45      	ldr	r3, [pc, #276]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x148>
 80036d6:	e000      	b.n	80036da <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8084 	beq.w	80037f0 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCC_OscConfig+0x192>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d004      	beq.n	8003702 <HAL_RCC_OscConfig+0x192>
 80036f8:	f240 119d 	movw	r1, #413	; 0x19d
 80036fc:	4837      	ldr	r0, [pc, #220]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 80036fe:	f7fe fa4e 	bl	8001b9e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b1f      	cmp	r3, #31
 8003708:	d904      	bls.n	8003714 <HAL_RCC_OscConfig+0x1a4>
 800370a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800370e:	4833      	ldr	r0, [pc, #204]	; (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003710:	f7fe fa45 	bl	8001b9e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003714:	4b32      	ldr	r3, [pc, #200]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00b      	beq.n	8003738 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003720:	4b2f      	ldr	r3, [pc, #188]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b08      	cmp	r3, #8
 800372a:	d11c      	bne.n	8003766 <HAL_RCC_OscConfig+0x1f6>
 800372c:	4b2c      	ldr	r3, [pc, #176]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d116      	bne.n	8003766 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003738:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_OscConfig+0x1e0>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d001      	beq.n	8003750 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e277      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003750:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4920      	ldr	r1, [pc, #128]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003760:	4313      	orrs	r3, r2
 8003762:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003764:	e044      	b.n	80037f0 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d023      	beq.n	80037b6 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800376e:	4b1c      	ldr	r3, [pc, #112]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377a:	f7fe ffa9 	bl	80026d0 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003782:	f7fe ffa5 	bl	80026d0 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e255      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	490c      	ldr	r1, [pc, #48]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	600b      	str	r3, [r1, #0]
 80037b4:	e01c      	b.n	80037f0 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b6:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a09      	ldr	r2, [pc, #36]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fe ff85 	bl	80026d0 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c8:	e00c      	b.n	80037e4 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ca:	f7fe ff81 	bl	80026d0 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d905      	bls.n	80037e4 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e231      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
 80037dc:	08008014 	.word	0x08008014
 80037e0:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e4:	4b7e      	ldr	r3, [pc, #504]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1ec      	bne.n	80037ca <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d043      	beq.n	8003884 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_RCC_OscConfig+0x2a6>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d004      	beq.n	8003816 <HAL_RCC_OscConfig+0x2a6>
 800380c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003810:	4874      	ldr	r0, [pc, #464]	; (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003812:	f7fe f9c4 	bl	8001b9e <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d019      	beq.n	8003852 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381e:	4b70      	ldr	r3, [pc, #448]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003822:	4a6f      	ldr	r2, [pc, #444]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fe ff51 	bl	80026d0 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003832:	f7fe ff4d 	bl	80026d0 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e1fd      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003844:	4b66      	ldr	r3, [pc, #408]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x2c2>
 8003850:	e018      	b.n	8003884 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003852:	4b63      	ldr	r3, [pc, #396]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003856:	4a62      	ldr	r2, [pc, #392]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385e:	f7fe ff37 	bl	80026d0 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003866:	f7fe ff33 	bl	80026d0 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e1e3      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003878:	4b59      	ldr	r3, [pc, #356]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800387a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1f0      	bne.n	8003866 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80bc 	beq.w	8003a0a <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00c      	beq.n	80038b4 <HAL_RCC_OscConfig+0x344>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d008      	beq.n	80038b4 <HAL_RCC_OscConfig+0x344>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d004      	beq.n	80038b4 <HAL_RCC_OscConfig+0x344>
 80038aa:	f44f 7102 	mov.w	r1, #520	; 0x208
 80038ae:	484d      	ldr	r0, [pc, #308]	; (80039e4 <HAL_RCC_OscConfig+0x474>)
 80038b0:	f7fe f975 	bl	8001b9e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b4:	4b4a      	ldr	r3, [pc, #296]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10d      	bne.n	80038dc <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c0:	4b47      	ldr	r3, [pc, #284]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	4a46      	ldr	r2, [pc, #280]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ca:	6413      	str	r3, [r2, #64]	; 0x40
 80038cc:	4b44      	ldr	r3, [pc, #272]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d8:	2301      	movs	r3, #1
 80038da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038dc:	4b42      	ldr	r3, [pc, #264]	; (80039e8 <HAL_RCC_OscConfig+0x478>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d118      	bne.n	800391a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038e8:	4b3f      	ldr	r3, [pc, #252]	; (80039e8 <HAL_RCC_OscConfig+0x478>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a3e      	ldr	r2, [pc, #248]	; (80039e8 <HAL_RCC_OscConfig+0x478>)
 80038ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f4:	f7fe feec 	bl	80026d0 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fc:	f7fe fee8 	bl	80026d0 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e198      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800390e:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <HAL_RCC_OscConfig+0x478>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d106      	bne.n	8003930 <HAL_RCC_OscConfig+0x3c0>
 8003922:	4b2f      	ldr	r3, [pc, #188]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	4a2e      	ldr	r2, [pc, #184]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6713      	str	r3, [r2, #112]	; 0x70
 800392e:	e02d      	b.n	800398c <HAL_RCC_OscConfig+0x41c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10c      	bne.n	8003952 <HAL_RCC_OscConfig+0x3e2>
 8003938:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	4a28      	ldr	r2, [pc, #160]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	6713      	str	r3, [r2, #112]	; 0x70
 8003944:	4b26      	ldr	r3, [pc, #152]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	4a25      	ldr	r2, [pc, #148]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800394a:	f023 0304 	bic.w	r3, r3, #4
 800394e:	6713      	str	r3, [r2, #112]	; 0x70
 8003950:	e01c      	b.n	800398c <HAL_RCC_OscConfig+0x41c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b05      	cmp	r3, #5
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0x404>
 800395a:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	4a20      	ldr	r2, [pc, #128]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	6713      	str	r3, [r2, #112]	; 0x70
 8003966:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	6713      	str	r3, [r2, #112]	; 0x70
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0x41c>
 8003974:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	4a19      	ldr	r2, [pc, #100]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	6713      	str	r3, [r2, #112]	; 0x70
 8003980:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003986:	f023 0304 	bic.w	r3, r3, #4
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d015      	beq.n	80039c0 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003994:	f7fe fe9c 	bl	80026d0 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399c:	f7fe fe98 	bl	80026d0 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e146      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0ee      	beq.n	800399c <HAL_RCC_OscConfig+0x42c>
 80039be:	e01b      	b.n	80039f8 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7fe fe86 	bl	80026d0 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c6:	e011      	b.n	80039ec <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7fe fe82 	bl	80026d0 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d908      	bls.n	80039ec <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e130      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800
 80039e4:	08008014 	.word	0x08008014
 80039e8:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ec:	4b96      	ldr	r3, [pc, #600]	; (8003c48 <HAL_RCC_OscConfig+0x6d8>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e7      	bne.n	80039c8 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d105      	bne.n	8003a0a <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fe:	4b92      	ldr	r3, [pc, #584]	; (8003c48 <HAL_RCC_OscConfig+0x6d8>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	4a91      	ldr	r2, [pc, #580]	; (8003c48 <HAL_RCC_OscConfig+0x6d8>)
 8003a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00c      	beq.n	8003a2c <HAL_RCC_OscConfig+0x4bc>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d008      	beq.n	8003a2c <HAL_RCC_OscConfig+0x4bc>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d004      	beq.n	8003a2c <HAL_RCC_OscConfig+0x4bc>
 8003a22:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8003a26:	4889      	ldr	r0, [pc, #548]	; (8003c4c <HAL_RCC_OscConfig+0x6dc>)
 8003a28:	f7fe f8b9 	bl	8001b9e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8104 	beq.w	8003c3e <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a36:	4b84      	ldr	r3, [pc, #528]	; (8003c48 <HAL_RCC_OscConfig+0x6d8>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	f000 80c3 	beq.w	8003bca <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	f040 80a4 	bne.w	8003b96 <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_RCC_OscConfig+0x4fa>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a5e:	d004      	beq.n	8003a6a <HAL_RCC_OscConfig+0x4fa>
 8003a60:	f240 2155 	movw	r1, #597	; 0x255
 8003a64:	4879      	ldr	r0, [pc, #484]	; (8003c4c <HAL_RCC_OscConfig+0x6dc>)
 8003a66:	f7fe f89a 	bl	8001b9e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d903      	bls.n	8003a7a <HAL_RCC_OscConfig+0x50a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	2b3f      	cmp	r3, #63	; 0x3f
 8003a78:	d904      	bls.n	8003a84 <HAL_RCC_OscConfig+0x514>
 8003a7a:	f240 2156 	movw	r1, #598	; 0x256
 8003a7e:	4873      	ldr	r0, [pc, #460]	; (8003c4c <HAL_RCC_OscConfig+0x6dc>)
 8003a80:	f7fe f88d 	bl	8001b9e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	2b31      	cmp	r3, #49	; 0x31
 8003a8a:	d904      	bls.n	8003a96 <HAL_RCC_OscConfig+0x526>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003a94:	d904      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x530>
 8003a96:	f240 2157 	movw	r1, #599	; 0x257
 8003a9a:	486c      	ldr	r0, [pc, #432]	; (8003c4c <HAL_RCC_OscConfig+0x6dc>)
 8003a9c:	f7fe f87f 	bl	8001b9e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d010      	beq.n	8003aca <HAL_RCC_OscConfig+0x55a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d00c      	beq.n	8003aca <HAL_RCC_OscConfig+0x55a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	2b06      	cmp	r3, #6
 8003ab6:	d008      	beq.n	8003aca <HAL_RCC_OscConfig+0x55a>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d004      	beq.n	8003aca <HAL_RCC_OscConfig+0x55a>
 8003ac0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003ac4:	4861      	ldr	r0, [pc, #388]	; (8003c4c <HAL_RCC_OscConfig+0x6dc>)
 8003ac6:	f7fe f86a 	bl	8001b9e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d903      	bls.n	8003ada <HAL_RCC_OscConfig+0x56a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	2b0f      	cmp	r3, #15
 8003ad8:	d904      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x574>
 8003ada:	f240 2159 	movw	r1, #601	; 0x259
 8003ade:	485b      	ldr	r0, [pc, #364]	; (8003c4c <HAL_RCC_OscConfig+0x6dc>)
 8003ae0:	f7fe f85d 	bl	8001b9e <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d903      	bls.n	8003af4 <HAL_RCC_OscConfig+0x584>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	2b07      	cmp	r3, #7
 8003af2:	d904      	bls.n	8003afe <HAL_RCC_OscConfig+0x58e>
 8003af4:	f240 215b 	movw	r1, #603	; 0x25b
 8003af8:	4854      	ldr	r0, [pc, #336]	; (8003c4c <HAL_RCC_OscConfig+0x6dc>)
 8003afa:	f7fe f850 	bl	8001b9e <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afe:	4b52      	ldr	r3, [pc, #328]	; (8003c48 <HAL_RCC_OscConfig+0x6d8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a51      	ldr	r2, [pc, #324]	; (8003c48 <HAL_RCC_OscConfig+0x6d8>)
 8003b04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fe fde1 	bl	80026d0 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fe fddd 	bl	80026d0 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e08d      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b24:	4b48      	ldr	r3, [pc, #288]	; (8003c48 <HAL_RCC_OscConfig+0x6d8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f0      	bne.n	8003b12 <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	019b      	lsls	r3, r3, #6
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	061b      	lsls	r3, r3, #24
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	071b      	lsls	r3, r3, #28
 8003b5c:	493a      	ldr	r1, [pc, #232]	; (8003c48 <HAL_RCC_OscConfig+0x6d8>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b62:	4b39      	ldr	r3, [pc, #228]	; (8003c48 <HAL_RCC_OscConfig+0x6d8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a38      	ldr	r2, [pc, #224]	; (8003c48 <HAL_RCC_OscConfig+0x6d8>)
 8003b68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6e:	f7fe fdaf 	bl	80026d0 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b76:	f7fe fdab 	bl	80026d0 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e05b      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b88:	4b2f      	ldr	r3, [pc, #188]	; (8003c48 <HAL_RCC_OscConfig+0x6d8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x606>
 8003b94:	e053      	b.n	8003c3e <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b96:	4b2c      	ldr	r3, [pc, #176]	; (8003c48 <HAL_RCC_OscConfig+0x6d8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2b      	ldr	r2, [pc, #172]	; (8003c48 <HAL_RCC_OscConfig+0x6d8>)
 8003b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba2:	f7fe fd95 	bl	80026d0 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003baa:	f7fe fd91 	bl	80026d0 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e041      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbc:	4b22      	ldr	r3, [pc, #136]	; (8003c48 <HAL_RCC_OscConfig+0x6d8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f0      	bne.n	8003baa <HAL_RCC_OscConfig+0x63a>
 8003bc8:	e039      	b.n	8003c3e <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003bca:	4b1f      	ldr	r3, [pc, #124]	; (8003c48 <HAL_RCC_OscConfig+0x6d8>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d030      	beq.n	8003c3a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d129      	bne.n	8003c3a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d122      	bne.n	8003c3a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c00:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d119      	bne.n	8003c3a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	085b      	lsrs	r3, r3, #1
 8003c12:	3b01      	subs	r3, #1
 8003c14:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d10f      	bne.n	8003c3a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d001      	beq.n	8003c3e <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	08008014 	.word	0x08008014

08003c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e18c      	b.n	8003f82 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x28>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b0f      	cmp	r3, #15
 8003c76:	d904      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x32>
 8003c78:	f240 21df 	movw	r1, #735	; 0x2df
 8003c7c:	4887      	ldr	r0, [pc, #540]	; (8003e9c <HAL_RCC_ClockConfig+0x24c>)
 8003c7e:	f7fd ff8e 	bl	8001b9e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d031      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d02e      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d02b      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d028      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d025      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b05      	cmp	r3, #5
 8003ca4:	d022      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b06      	cmp	r3, #6
 8003caa:	d01f      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b07      	cmp	r3, #7
 8003cb0:	d01c      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d019      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b09      	cmp	r3, #9
 8003cbc:	d016      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b0a      	cmp	r3, #10
 8003cc2:	d013      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b0b      	cmp	r3, #11
 8003cc8:	d010      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b0c      	cmp	r3, #12
 8003cce:	d00d      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b0d      	cmp	r3, #13
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b0e      	cmp	r3, #14
 8003cda:	d007      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b0f      	cmp	r3, #15
 8003ce0:	d004      	beq.n	8003cec <HAL_RCC_ClockConfig+0x9c>
 8003ce2:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8003ce6:	486d      	ldr	r0, [pc, #436]	; (8003e9c <HAL_RCC_ClockConfig+0x24c>)
 8003ce8:	f7fd ff59 	bl	8001b9e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cec:	4b6c      	ldr	r3, [pc, #432]	; (8003ea0 <HAL_RCC_ClockConfig+0x250>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d910      	bls.n	8003d1c <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfa:	4b69      	ldr	r3, [pc, #420]	; (8003ea0 <HAL_RCC_ClockConfig+0x250>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 020f 	bic.w	r2, r3, #15
 8003d02:	4967      	ldr	r1, [pc, #412]	; (8003ea0 <HAL_RCC_ClockConfig+0x250>)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b65      	ldr	r3, [pc, #404]	; (8003ea0 <HAL_RCC_ClockConfig+0x250>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e132      	b.n	8003f82 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d049      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d34:	4b5b      	ldr	r3, [pc, #364]	; (8003ea4 <HAL_RCC_ClockConfig+0x254>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a5a      	ldr	r2, [pc, #360]	; (8003ea4 <HAL_RCC_ClockConfig+0x254>)
 8003d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d4c:	4b55      	ldr	r3, [pc, #340]	; (8003ea4 <HAL_RCC_ClockConfig+0x254>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4a54      	ldr	r2, [pc, #336]	; (8003ea4 <HAL_RCC_ClockConfig+0x254>)
 8003d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d024      	beq.n	8003daa <HAL_RCC_ClockConfig+0x15a>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b80      	cmp	r3, #128	; 0x80
 8003d66:	d020      	beq.n	8003daa <HAL_RCC_ClockConfig+0x15a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b90      	cmp	r3, #144	; 0x90
 8003d6e:	d01c      	beq.n	8003daa <HAL_RCC_ClockConfig+0x15a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2ba0      	cmp	r3, #160	; 0xa0
 8003d76:	d018      	beq.n	8003daa <HAL_RCC_ClockConfig+0x15a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2bb0      	cmp	r3, #176	; 0xb0
 8003d7e:	d014      	beq.n	8003daa <HAL_RCC_ClockConfig+0x15a>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2bc0      	cmp	r3, #192	; 0xc0
 8003d86:	d010      	beq.n	8003daa <HAL_RCC_ClockConfig+0x15a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2bd0      	cmp	r3, #208	; 0xd0
 8003d8e:	d00c      	beq.n	8003daa <HAL_RCC_ClockConfig+0x15a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2be0      	cmp	r3, #224	; 0xe0
 8003d96:	d008      	beq.n	8003daa <HAL_RCC_ClockConfig+0x15a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2bf0      	cmp	r3, #240	; 0xf0
 8003d9e:	d004      	beq.n	8003daa <HAL_RCC_ClockConfig+0x15a>
 8003da0:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003da4:	483d      	ldr	r0, [pc, #244]	; (8003e9c <HAL_RCC_ClockConfig+0x24c>)
 8003da6:	f7fd fefa 	bl	8001b9e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003daa:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <HAL_RCC_ClockConfig+0x254>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	493b      	ldr	r1, [pc, #236]	; (8003ea4 <HAL_RCC_ClockConfig+0x254>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d051      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00c      	beq.n	8003dea <HAL_RCC_ClockConfig+0x19a>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d008      	beq.n	8003dea <HAL_RCC_ClockConfig+0x19a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d004      	beq.n	8003dea <HAL_RCC_ClockConfig+0x19a>
 8003de0:	f240 310b 	movw	r1, #779	; 0x30b
 8003de4:	482d      	ldr	r0, [pc, #180]	; (8003e9c <HAL_RCC_ClockConfig+0x24c>)
 8003de6:	f7fd feda 	bl	8001b9e <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <HAL_RCC_ClockConfig+0x254>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d115      	bne.n	8003e2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e0bf      	b.n	8003f82 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d107      	bne.n	8003e1a <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0a:	4b26      	ldr	r3, [pc, #152]	; (8003ea4 <HAL_RCC_ClockConfig+0x254>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e0b3      	b.n	8003f82 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1a:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <HAL_RCC_ClockConfig+0x254>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e0ab      	b.n	8003f82 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <HAL_RCC_ClockConfig+0x254>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f023 0203 	bic.w	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	491b      	ldr	r1, [pc, #108]	; (8003ea4 <HAL_RCC_ClockConfig+0x254>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3c:	f7fe fc48 	bl	80026d0 <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e44:	f7fe fc44 	bl	80026d0 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e093      	b.n	8003f82 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <HAL_RCC_ClockConfig+0x254>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 020c 	and.w	r2, r3, #12
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d1eb      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <HAL_RCC_ClockConfig+0x250>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d216      	bcs.n	8003ea8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <HAL_RCC_ClockConfig+0x250>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 020f 	bic.w	r2, r3, #15
 8003e82:	4907      	ldr	r1, [pc, #28]	; (8003ea0 <HAL_RCC_ClockConfig+0x250>)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <HAL_RCC_ClockConfig+0x250>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d007      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e072      	b.n	8003f82 <HAL_RCC_ClockConfig+0x332>
 8003e9c:	08008014 	.word	0x08008014
 8003ea0:	40023c00 	.word	0x40023c00
 8003ea4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d025      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d018      	beq.n	8003eee <HAL_RCC_ClockConfig+0x29e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec4:	d013      	beq.n	8003eee <HAL_RCC_ClockConfig+0x29e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ece:	d00e      	beq.n	8003eee <HAL_RCC_ClockConfig+0x29e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003ed8:	d009      	beq.n	8003eee <HAL_RCC_ClockConfig+0x29e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003ee2:	d004      	beq.n	8003eee <HAL_RCC_ClockConfig+0x29e>
 8003ee4:	f44f 7152 	mov.w	r1, #840	; 0x348
 8003ee8:	4828      	ldr	r0, [pc, #160]	; (8003f8c <HAL_RCC_ClockConfig+0x33c>)
 8003eea:	f7fd fe58 	bl	8001b9e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eee:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <HAL_RCC_ClockConfig+0x340>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	4925      	ldr	r1, [pc, #148]	; (8003f90 <HAL_RCC_ClockConfig+0x340>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d026      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d018      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x2f6>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1c:	d013      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x2f6>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f26:	d00e      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x2f6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003f30:	d009      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x2f6>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003f3a:	d004      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x2f6>
 8003f3c:	f240 314f 	movw	r1, #847	; 0x34f
 8003f40:	4812      	ldr	r0, [pc, #72]	; (8003f8c <HAL_RCC_ClockConfig+0x33c>)
 8003f42:	f7fd fe2c 	bl	8001b9e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_RCC_ClockConfig+0x340>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	490e      	ldr	r1, [pc, #56]	; (8003f90 <HAL_RCC_ClockConfig+0x340>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f5a:	f000 f821 	bl	8003fa0 <HAL_RCC_GetSysClockFreq>
 8003f5e:	4601      	mov	r1, r0
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_RCC_ClockConfig+0x340>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <HAL_RCC_ClockConfig+0x344>)
 8003f6c:	5cd3      	ldrb	r3, [r2, r3]
 8003f6e:	fa21 f303 	lsr.w	r3, r1, r3
 8003f72:	4a09      	ldr	r2, [pc, #36]	; (8003f98 <HAL_RCC_ClockConfig+0x348>)
 8003f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f76:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_RCC_ClockConfig+0x34c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe fb64 	bl	8002648 <HAL_InitTick>

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	08008014 	.word	0x08008014
 8003f90:	40023800 	.word	0x40023800
 8003f94:	080080fc 	.word	0x080080fc
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	20000004 	.word	0x20000004

08003fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	607b      	str	r3, [r7, #4]
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fb6:	4b50      	ldr	r3, [pc, #320]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d007      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x32>
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d008      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x38>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 808d 	bne.w	80040e6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fcc:	4b4b      	ldr	r3, [pc, #300]	; (80040fc <HAL_RCC_GetSysClockFreq+0x15c>)
 8003fce:	60bb      	str	r3, [r7, #8]
      break;
 8003fd0:	e08c      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fd2:	4b4b      	ldr	r3, [pc, #300]	; (8004100 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fd4:	60bb      	str	r3, [r7, #8]
      break;
 8003fd6:	e089      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fd8:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003fe2:	4b45      	ldr	r3, [pc, #276]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d023      	beq.n	8004036 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fee:	4b42      	ldr	r3, [pc, #264]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	099b      	lsrs	r3, r3, #6
 8003ff4:	f04f 0400 	mov.w	r4, #0
 8003ff8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	ea03 0501 	and.w	r5, r3, r1
 8004004:	ea04 0602 	and.w	r6, r4, r2
 8004008:	4a3d      	ldr	r2, [pc, #244]	; (8004100 <HAL_RCC_GetSysClockFreq+0x160>)
 800400a:	fb02 f106 	mul.w	r1, r2, r6
 800400e:	2200      	movs	r2, #0
 8004010:	fb02 f205 	mul.w	r2, r2, r5
 8004014:	440a      	add	r2, r1
 8004016:	493a      	ldr	r1, [pc, #232]	; (8004100 <HAL_RCC_GetSysClockFreq+0x160>)
 8004018:	fba5 0101 	umull	r0, r1, r5, r1
 800401c:	1853      	adds	r3, r2, r1
 800401e:	4619      	mov	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f04f 0400 	mov.w	r4, #0
 8004026:	461a      	mov	r2, r3
 8004028:	4623      	mov	r3, r4
 800402a:	f7fc f961 	bl	80002f0 <__aeabi_uldivmod>
 800402e:	4603      	mov	r3, r0
 8004030:	460c      	mov	r4, r1
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	e049      	b.n	80040ca <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004036:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	099b      	lsrs	r3, r3, #6
 800403c:	f04f 0400 	mov.w	r4, #0
 8004040:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	ea03 0501 	and.w	r5, r3, r1
 800404c:	ea04 0602 	and.w	r6, r4, r2
 8004050:	4629      	mov	r1, r5
 8004052:	4632      	mov	r2, r6
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	f04f 0400 	mov.w	r4, #0
 800405c:	0154      	lsls	r4, r2, #5
 800405e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004062:	014b      	lsls	r3, r1, #5
 8004064:	4619      	mov	r1, r3
 8004066:	4622      	mov	r2, r4
 8004068:	1b49      	subs	r1, r1, r5
 800406a:	eb62 0206 	sbc.w	r2, r2, r6
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	f04f 0400 	mov.w	r4, #0
 8004076:	0194      	lsls	r4, r2, #6
 8004078:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800407c:	018b      	lsls	r3, r1, #6
 800407e:	1a5b      	subs	r3, r3, r1
 8004080:	eb64 0402 	sbc.w	r4, r4, r2
 8004084:	f04f 0100 	mov.w	r1, #0
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	00e2      	lsls	r2, r4, #3
 800408e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004092:	00d9      	lsls	r1, r3, #3
 8004094:	460b      	mov	r3, r1
 8004096:	4614      	mov	r4, r2
 8004098:	195b      	adds	r3, r3, r5
 800409a:	eb44 0406 	adc.w	r4, r4, r6
 800409e:	f04f 0100 	mov.w	r1, #0
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	02a2      	lsls	r2, r4, #10
 80040a8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040ac:	0299      	lsls	r1, r3, #10
 80040ae:	460b      	mov	r3, r1
 80040b0:	4614      	mov	r4, r2
 80040b2:	4618      	mov	r0, r3
 80040b4:	4621      	mov	r1, r4
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f04f 0400 	mov.w	r4, #0
 80040bc:	461a      	mov	r2, r3
 80040be:	4623      	mov	r3, r4
 80040c0:	f7fc f916 	bl	80002f0 <__aeabi_uldivmod>
 80040c4:	4603      	mov	r3, r0
 80040c6:	460c      	mov	r4, r1
 80040c8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80040ca:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	0c1b      	lsrs	r3, r3, #16
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	3301      	adds	r3, #1
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e2:	60bb      	str	r3, [r7, #8]
      break;
 80040e4:	e002      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_RCC_GetSysClockFreq+0x15c>)
 80040e8:	60bb      	str	r3, [r7, #8]
      break;
 80040ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ec:	68bb      	ldr	r3, [r7, #8]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40023800 	.word	0x40023800
 80040fc:	00f42400 	.word	0x00f42400
 8004100:	017d7840 	.word	0x017d7840

08004104 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <HAL_RCC_GetHCLKFreq+0x14>)
 800410a:	681b      	ldr	r3, [r3, #0]
}
 800410c:	4618      	mov	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000000 	.word	0x20000000

0800411c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004120:	f7ff fff0 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 8004124:	4601      	mov	r1, r0
 8004126:	4b05      	ldr	r3, [pc, #20]	; (800413c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	0a9b      	lsrs	r3, r3, #10
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	4a03      	ldr	r2, [pc, #12]	; (8004140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004132:	5cd3      	ldrb	r3, [r2, r3]
 8004134:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004138:	4618      	mov	r0, r3
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40023800 	.word	0x40023800
 8004140:	0800810c 	.word	0x0800810c

08004144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004148:	f7ff ffdc 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 800414c:	4601      	mov	r1, r0
 800414e:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	0b5b      	lsrs	r3, r3, #13
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4a03      	ldr	r2, [pc, #12]	; (8004168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800415a:	5cd3      	ldrb	r3, [r2, r3]
 800415c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004160:	4618      	mov	r0, r3
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40023800 	.word	0x40023800
 8004168:	0800810c 	.word	0x0800810c

0800416c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 809e 	bne.w	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f040 8097 	bne.w	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f040 8090 	bne.w	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f040 8089 	bne.w	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f040 8082 	bne.w	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d17b      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d175      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d16f      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d169      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d163      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d15d      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d157      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d151      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d14b      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d145      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d13f      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d139      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d133      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d12d      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d127      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d121      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d11b      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d115      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10f      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d103      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042ca:	2174      	movs	r1, #116	; 0x74
 80042cc:	48a2      	ldr	r0, [pc, #648]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80042ce:	f7fd fc66 	bl	8001b9e <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01f      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042ee:	d003      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80042f0:	217a      	movs	r1, #122	; 0x7a
 80042f2:	4899      	ldr	r0, [pc, #612]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80042f4:	f7fd fc53 	bl	8001b9e <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042f8:	4b98      	ldr	r3, [pc, #608]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4a97      	ldr	r2, [pc, #604]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80042fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004302:	6093      	str	r3, [r2, #8]
 8004304:	4b95      	ldr	r3, [pc, #596]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430c:	4993      	ldr	r1, [pc, #588]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 800431a:	2301      	movs	r3, #1
 800431c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d02e      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d012      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800433a:	d00d      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004340:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004344:	d008      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800434e:	d003      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8004350:	218a      	movs	r1, #138	; 0x8a
 8004352:	4881      	ldr	r0, [pc, #516]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004354:	f7fd fc23 	bl	8001b9e <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004358:	4b80      	ldr	r3, [pc, #512]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800435a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	497d      	ldr	r1, [pc, #500]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004376:	d101      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 8004378:	2301      	movs	r3, #1
 800437a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 8004384:	2301      	movs	r3, #1
 8004386:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d02e      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d012      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a4:	d00d      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043ae:	d008      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043b8:	d003      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80043ba:	219e      	movs	r1, #158	; 0x9e
 80043bc:	4866      	ldr	r0, [pc, #408]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80043be:	f7fd fbee 	bl	8001b9e <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043c2:	4b66      	ldr	r3, [pc, #408]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80043c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	4962      	ldr	r1, [pc, #392]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e0:	d101      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 80043e2:	2301      	movs	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 80043ee:	2301      	movs	r3, #1
 80043f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 80043fe:	2301      	movs	r3, #1
 8004400:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8187 	beq.w	800471e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004418:	f000 80eb 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004424:	f000 80e5 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	4a4c      	ldr	r2, [pc, #304]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	f000 80df 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	4a4a      	ldr	r2, [pc, #296]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	f000 80d9 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	4a48      	ldr	r2, [pc, #288]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	f000 80d3 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	4a46      	ldr	r2, [pc, #280]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004452:	4293      	cmp	r3, r2
 8004454:	f000 80cd 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	4a44      	ldr	r2, [pc, #272]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 800445e:	4293      	cmp	r3, r2
 8004460:	f000 80c7 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	4a42      	ldr	r2, [pc, #264]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 800446a:	4293      	cmp	r3, r2
 800446c:	f000 80c1 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	4a40      	ldr	r2, [pc, #256]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	f000 80bb 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004480:	4a3e      	ldr	r2, [pc, #248]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x410>)
 8004482:	4293      	cmp	r3, r2
 8004484:	f000 80b5 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	4a3c      	ldr	r2, [pc, #240]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 800448e:	4293      	cmp	r3, r2
 8004490:	f000 80af 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	4a3a      	ldr	r2, [pc, #232]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 800449a:	4293      	cmp	r3, r2
 800449c:	f000 80a9 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	4a38      	ldr	r2, [pc, #224]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	f000 80a3 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	4a36      	ldr	r2, [pc, #216]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x420>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	f000 809d 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	4a34      	ldr	r2, [pc, #208]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	f000 8097 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	4a32      	ldr	r2, [pc, #200]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	f000 8091 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	4a30      	ldr	r2, [pc, #192]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	f000 808b 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	4a2e      	ldr	r2, [pc, #184]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	f000 8085 	beq.w	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	4a2c      	ldr	r2, [pc, #176]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d07f      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	4a2b      	ldr	r2, [pc, #172]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d07a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	4a29      	ldr	r2, [pc, #164]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d075      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	4a28      	ldr	r2, [pc, #160]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d070      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	4a26      	ldr	r2, [pc, #152]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d06b      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	4a25      	ldr	r2, [pc, #148]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d066      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	4a23      	ldr	r2, [pc, #140]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d061      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	4a22      	ldr	r2, [pc, #136]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d05c      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	4a20      	ldr	r2, [pc, #128]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d057      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	4a1f      	ldr	r2, [pc, #124]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d052      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	4a1d      	ldr	r2, [pc, #116]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d04d      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004556:	e039      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004558:	0800804c 	.word	0x0800804c
 800455c:	40023800 	.word	0x40023800
 8004560:	00020300 	.word	0x00020300
 8004564:	00030300 	.word	0x00030300
 8004568:	00040300 	.word	0x00040300
 800456c:	00050300 	.word	0x00050300
 8004570:	00060300 	.word	0x00060300
 8004574:	00070300 	.word	0x00070300
 8004578:	00080300 	.word	0x00080300
 800457c:	00090300 	.word	0x00090300
 8004580:	000a0300 	.word	0x000a0300
 8004584:	000b0300 	.word	0x000b0300
 8004588:	000c0300 	.word	0x000c0300
 800458c:	000d0300 	.word	0x000d0300
 8004590:	000e0300 	.word	0x000e0300
 8004594:	000f0300 	.word	0x000f0300
 8004598:	00100300 	.word	0x00100300
 800459c:	00110300 	.word	0x00110300
 80045a0:	00120300 	.word	0x00120300
 80045a4:	00130300 	.word	0x00130300
 80045a8:	00140300 	.word	0x00140300
 80045ac:	00150300 	.word	0x00150300
 80045b0:	00160300 	.word	0x00160300
 80045b4:	00170300 	.word	0x00170300
 80045b8:	00180300 	.word	0x00180300
 80045bc:	00190300 	.word	0x00190300
 80045c0:	001a0300 	.word	0x001a0300
 80045c4:	001b0300 	.word	0x001b0300
 80045c8:	001c0300 	.word	0x001c0300
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	4a44      	ldr	r2, [pc, #272]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00d      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	4a43      	ldr	r2, [pc, #268]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d008      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	4a41      	ldr	r2, [pc, #260]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d003      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80045ea:	21b9      	movs	r1, #185	; 0xb9
 80045ec:	4840      	ldr	r0, [pc, #256]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80045ee:	f7fd fad6 	bl	8001b9e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045f2:	4b40      	ldr	r3, [pc, #256]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	4a3f      	ldr	r2, [pc, #252]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80045f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fc:	6413      	str	r3, [r2, #64]	; 0x40
 80045fe:	4b3d      	ldr	r3, [pc, #244]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800460a:	4b3b      	ldr	r3, [pc, #236]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a3a      	ldr	r2, [pc, #232]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004616:	f7fe f85b 	bl	80026d0 <HAL_GetTick>
 800461a:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800461c:	e009      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461e:	f7fe f857 	bl	80026d0 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b64      	cmp	r3, #100	; 0x64
 800462a:	d902      	bls.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      {
        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	f000 be00 	b.w	8005232 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004632:	4b31      	ldr	r3, [pc, #196]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0ef      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800463e:	4b2d      	ldr	r3, [pc, #180]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004646:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d036      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x550>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	429a      	cmp	r2, r3
 800465a:	d02f      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800465c:	4b25      	ldr	r3, [pc, #148]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004664:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004666:	4b23      	ldr	r3, [pc, #140]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	4a22      	ldr	r2, [pc, #136]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800466c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004670:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004672:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800467c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800467e:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004684:	4b1b      	ldr	r3, [pc, #108]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b01      	cmp	r3, #1
 800468e:	d115      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x550>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fe f81e 	bl	80026d0 <HAL_GetTick>
 8004694:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004696:	e00b      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004698:	f7fe f81a 	bl	80026d0 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d902      	bls.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	f000 bdc1 	b.w	8005232 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b0:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0ed      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x52c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c8:	d11a      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80046ca:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80046d8:	400b      	ands	r3, r1
 80046da:	4906      	ldr	r1, [pc, #24]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	608b      	str	r3, [r1, #8]
 80046e0:	e014      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 80046e2:	bf00      	nop
 80046e4:	001d0300 	.word	0x001d0300
 80046e8:	001e0300 	.word	0x001e0300
 80046ec:	001f0300 	.word	0x001f0300
 80046f0:	0800804c 	.word	0x0800804c
 80046f4:	40023800 	.word	0x40023800
 80046f8:	40007000 	.word	0x40007000
 80046fc:	0ffffcff 	.word	0x0ffffcff
 8004700:	4ba7      	ldr	r3, [pc, #668]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	4aa6      	ldr	r2, [pc, #664]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004706:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800470a:	6093      	str	r3, [r2, #8]
 800470c:	4ba4      	ldr	r3, [pc, #656]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800470e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004718:	49a1      	ldr	r1, [pc, #644]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800471a:	4313      	orrs	r3, r2
 800471c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	d01d      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	2b00      	cmp	r3, #0
 8004730:	d008      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800473a:	d003      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 800473c:	21f3      	movs	r1, #243	; 0xf3
 800473e:	4899      	ldr	r0, [pc, #612]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004740:	f7fd fa2d 	bl	8001b9e <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004744:	4b96      	ldr	r3, [pc, #600]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800474a:	4a95      	ldr	r2, [pc, #596]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800474c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004750:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004754:	4b92      	ldr	r3, [pc, #584]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004756:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	4990      	ldr	r1, [pc, #576]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d01c      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800477e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004782:	d008      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800478c:	d003      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800478e:	21fd      	movs	r1, #253	; 0xfd
 8004790:	4884      	ldr	r0, [pc, #528]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004792:	f7fd fa04 	bl	8001b9e <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004796:	4b82      	ldr	r3, [pc, #520]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047a4:	497e      	ldr	r1, [pc, #504]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d01d      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00e      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x672>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047c8:	d009      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x672>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047d2:	d004      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x672>
 80047d4:	f240 1107 	movw	r1, #263	; 0x107
 80047d8:	4872      	ldr	r0, [pc, #456]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80047da:	f7fd f9e0 	bl	8001b9e <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047de:	4b70      	ldr	r3, [pc, #448]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ec:	496c      	ldr	r1, [pc, #432]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01d      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00e      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800480c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004810:	d009      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800481a:	d004      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 800481c:	f240 1111 	movw	r1, #273	; 0x111
 8004820:	4860      	ldr	r0, [pc, #384]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004822:	f7fd f9bc 	bl	8001b9e <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004826:	4b5e      	ldr	r3, [pc, #376]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004834:	495a      	ldr	r1, [pc, #360]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01d      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x718>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00e      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004858:	d009      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x702>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004862:	d004      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004864:	f240 111b 	movw	r1, #283	; 0x11b
 8004868:	484e      	ldr	r0, [pc, #312]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800486a:	f7fd f998 	bl	8001b9e <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800486e:	4b4c      	ldr	r3, [pc, #304]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004874:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	4948      	ldr	r1, [pc, #288]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01f      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004894:	2b00      	cmp	r3, #0
 8004896:	d010      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489c:	2b01      	cmp	r3, #1
 800489e:	d00c      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d008      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d004      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80048b0:	f240 1125 	movw	r1, #293	; 0x125
 80048b4:	483b      	ldr	r0, [pc, #236]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80048b6:	f7fd f972 	bl	8001b9e <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ba:	4b39      	ldr	r3, [pc, #228]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c0:	f023 0203 	bic.w	r2, r3, #3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c8:	4935      	ldr	r1, [pc, #212]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01f      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d010      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d00c      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f0:	2b0c      	cmp	r3, #12
 80048f2:	d008      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d004      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80048fc:	f240 112f 	movw	r1, #303	; 0x12f
 8004900:	4828      	ldr	r0, [pc, #160]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004902:	f7fd f94c 	bl	8001b9e <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004906:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490c:	f023 020c 	bic.w	r2, r3, #12
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004914:	4922      	ldr	r1, [pc, #136]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01f      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d010      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004934:	2b10      	cmp	r3, #16
 8004936:	d00c      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493c:	2b30      	cmp	r3, #48	; 0x30
 800493e:	d008      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004944:	2b20      	cmp	r3, #32
 8004946:	d004      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004948:	f240 1139 	movw	r1, #313	; 0x139
 800494c:	4815      	ldr	r0, [pc, #84]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800494e:	f7fd f926 	bl	8001b9e <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004952:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004958:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004960:	490f      	ldr	r1, [pc, #60]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004970:	2b00      	cmp	r3, #0
 8004972:	d024      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004978:	2b00      	cmp	r3, #0
 800497a:	d015      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004980:	2b40      	cmp	r3, #64	; 0x40
 8004982:	d011      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004988:	2bc0      	cmp	r3, #192	; 0xc0
 800498a:	d00d      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004990:	2b80      	cmp	r3, #128	; 0x80
 8004992:	d009      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004994:	f240 1143 	movw	r1, #323	; 0x143
 8004998:	4802      	ldr	r0, [pc, #8]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800499a:	f7fd f900 	bl	8001b9e <assert_failed>
 800499e:	e003      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80049a0:	40023800 	.word	0x40023800
 80049a4:	0800804c 	.word	0x0800804c

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049a8:	4bae      	ldr	r3, [pc, #696]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b6:	49ab      	ldr	r1, [pc, #684]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d022      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d013      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x88e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049da:	d00e      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x88e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049e4:	d009      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x88e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ee:	d004      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x88e>
 80049f0:	f240 114d 	movw	r1, #333	; 0x14d
 80049f4:	489c      	ldr	r0, [pc, #624]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80049f6:	f7fd f8d2 	bl	8001b9e <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049fa:	4b9a      	ldr	r3, [pc, #616]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80049fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a08:	4996      	ldr	r1, [pc, #600]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d022      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d013      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2c:	d00e      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a36:	d009      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a40:	d004      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004a42:	f240 1157 	movw	r1, #343	; 0x157
 8004a46:	4888      	ldr	r0, [pc, #544]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004a48:	f7fd f8a9 	bl	8001b9e <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a4c:	4b85      	ldr	r3, [pc, #532]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5a:	4982      	ldr	r1, [pc, #520]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d022      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d013      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7e:	d00e      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a88:	d009      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a92:	d004      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004a94:	f240 1161 	movw	r1, #353	; 0x161
 8004a98:	4873      	ldr	r0, [pc, #460]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004a9a:	f7fd f880 	bl	8001b9e <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a9e:	4b71      	ldr	r3, [pc, #452]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aac:	496d      	ldr	r1, [pc, #436]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d022      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d013      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ad0:	d00e      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ada:	d009      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae4:	d004      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004ae6:	f240 116b 	movw	r1, #363	; 0x16b
 8004aea:	485f      	ldr	r0, [pc, #380]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004aec:	f7fd f857 	bl	8001b9e <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004af0:	4b5c      	ldr	r3, [pc, #368]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afe:	4959      	ldr	r1, [pc, #356]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d018      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b1a:	d008      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004b24:	f240 1175 	movw	r1, #373	; 0x175
 8004b28:	484f      	ldr	r0, [pc, #316]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004b2a:	f7fd f838 	bl	8001b9e <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b2e:	4b4d      	ldr	r3, [pc, #308]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b34:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3c:	4949      	ldr	r1, [pc, #292]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01f      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b58:	d008      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d004      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004b62:	f240 117f 	movw	r1, #383	; 0x17f
 8004b66:	4840      	ldr	r0, [pc, #256]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004b68:	f7fd f819 	bl	8001b9e <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b6c:	4b3d      	ldr	r3, [pc, #244]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b72:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b7a:	493a      	ldr	r1, [pc, #232]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      pllsaiused = 1;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    pllsaiused = 1;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d022      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d013      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bbc:	d00e      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bc6:	d009      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bcc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bd0:	d004      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004bd2:	f240 1197 	movw	r1, #407	; 0x197
 8004bd6:	4824      	ldr	r0, [pc, #144]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004bd8:	f7fc ffe1 	bl	8001b9e <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bdc:	4b21      	ldr	r3, [pc, #132]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bea:	491e      	ldr	r1, [pc, #120]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d01b      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xaca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c08:	d009      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d004      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004c14:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004c18:	4813      	ldr	r0, [pc, #76]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004c1a:	f7fc ffc0 	bl	8001b9e <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c1e:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c24:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c2e:	490d      	ldr	r1, [pc, #52]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d020      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c4c:	d00e      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d009      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004c58:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004c5c:	4802      	ldr	r0, [pc, #8]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004c5e:	f7fc ff9e 	bl	8001b9e <assert_failed>
 8004c62:	e003      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004c64:	40023800 	.word	0x40023800
 8004c68:	0800804c 	.word	0x0800804c

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004c6c:	4b35      	ldr	r3, [pc, #212]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c72:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c7c:	4931      	ldr	r1, [pc, #196]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01b      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ca4:	d004      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004ca6:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8004caa:	4827      	ldr	r0, [pc, #156]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004cac:	f7fc ff77 	bl	8001b9e <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cb0:	4b24      	ldr	r3, [pc, #144]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc0:	4920      	ldr	r1, [pc, #128]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ce8:	d004      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004cea:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004cee:	4816      	ldr	r0, [pc, #88]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004cf0:	f7fc ff55 	bl	8001b9e <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004cf4:	4b13      	ldr	r3, [pc, #76]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cfa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d04:	490f      	ldr	r1, [pc, #60]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d005      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d1a:	f040 8153 	bne.w	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a08      	ldr	r2, [pc, #32]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004d24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2a:	f7fd fcd1 	bl	80026d0 <HAL_GetTick>
 8004d2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d30:	e00c      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d32:	f7fd fccd 	bl	80026d0 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b64      	cmp	r3, #100	; 0x64
 8004d3e:	d905      	bls.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e276      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8004d44:	40023800 	.word	0x40023800
 8004d48:	0800804c 	.word	0x0800804c
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d4c:	4ba9      	ldr	r3, [pc, #676]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1ec      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b31      	cmp	r3, #49	; 0x31
 8004d5e:	d904      	bls.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004d68:	d904      	bls.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004d6a:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004d6e:	48a2      	ldr	r0, [pc, #648]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004d70:	f7fc ff15 	bl	8001b9e <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d02e      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d12a      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d903      	bls.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b07      	cmp	r3, #7
 8004d96:	d904      	bls.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8004d98:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004d9c:	4896      	ldr	r0, [pc, #600]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004d9e:	f7fc fefe 	bl	8001b9e <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004da2:	4b94      	ldr	r3, [pc, #592]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da8:	0c1b      	lsrs	r3, r3, #16
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004db0:	4b90      	ldr	r3, [pc, #576]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db6:	0e1b      	lsrs	r3, r3, #24
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	019a      	lsls	r2, r3, #6
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	061b      	lsls	r3, r3, #24
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	071b      	lsls	r3, r3, #28
 8004dd6:	4987      	ldr	r1, [pc, #540]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d004      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xc88>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004df2:	d00a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d048      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e08:	d143      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d903      	bls.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xcae>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	2b0f      	cmp	r3, #15
 8004e18:	d904      	bls.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 8004e1a:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8004e1e:	4876      	ldr	r0, [pc, #472]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004e20:	f7fc febd 	bl	8001b9e <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d904      	bls.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8004e34:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004e38:	486f      	ldr	r0, [pc, #444]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004e3a:	f7fc feb0 	bl	8001b9e <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e3e:	4b6d      	ldr	r3, [pc, #436]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e4c:	4b69      	ldr	r3, [pc, #420]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e52:	0f1b      	lsrs	r3, r3, #28
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	019a      	lsls	r2, r3, #6
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	041b      	lsls	r3, r3, #16
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	061b      	lsls	r3, r3, #24
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	071b      	lsls	r3, r3, #28
 8004e72:	4960      	ldr	r1, [pc, #384]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e7a:	4b5e      	ldr	r3, [pc, #376]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e80:	f023 021f 	bic.w	r2, r3, #31
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	495a      	ldr	r1, [pc, #360]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d032      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d010      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d00c      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d008      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d004      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004ebe:	f240 2107 	movw	r1, #519	; 0x207
 8004ec2:	484d      	ldr	r0, [pc, #308]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004ec4:	f7fc fe6b 	bl	8001b9e <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ec8:	4b4a      	ldr	r3, [pc, #296]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ece:	0e1b      	lsrs	r3, r3, #24
 8004ed0:	f003 030f 	and.w	r3, r3, #15
 8004ed4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ed6:	4b47      	ldr	r3, [pc, #284]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004edc:	0f1b      	lsrs	r3, r3, #28
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	019a      	lsls	r2, r3, #6
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	041b      	lsls	r3, r3, #16
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	061b      	lsls	r3, r3, #24
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	071b      	lsls	r3, r3, #28
 8004efc:	493d      	ldr	r1, [pc, #244]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d040      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d010      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d00c      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d008      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d004      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004f30:	f240 2116 	movw	r1, #534	; 0x216
 8004f34:	4830      	ldr	r0, [pc, #192]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004f36:	f7fc fe32 	bl	8001b9e <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d903      	bls.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2b07      	cmp	r3, #7
 8004f48:	d904      	bls.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 8004f4a:	f240 2117 	movw	r1, #535	; 0x217
 8004f4e:	482a      	ldr	r0, [pc, #168]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004f50:	f7fc fe25 	bl	8001b9e <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d903      	bls.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	2b0f      	cmp	r3, #15
 8004f62:	d904      	bls.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xe02>
 8004f64:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004f68:	4823      	ldr	r0, [pc, #140]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004f6a:	f7fc fe18 	bl	8001b9e <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	019a      	lsls	r2, r3, #6
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	041b      	lsls	r3, r3, #16
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	061b      	lsls	r3, r3, #24
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	071b      	lsls	r3, r3, #28
 8004f8a:	491a      	ldr	r1, [pc, #104]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f92:	4b18      	ldr	r3, [pc, #96]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a17      	ldr	r2, [pc, #92]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9e:	f7fd fb97 	bl	80026d0 <HAL_GetTick>
 8004fa2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fa6:	f7fd fb93 	bl	80026d0 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b64      	cmp	r3, #100	; 0x64
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e13c      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	f040 8132 	bne.w	8005230 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fcc:	4b09      	ldr	r3, [pc, #36]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a08      	ldr	r2, [pc, #32]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fd8:	f7fd fb7a 	bl	80026d0 <HAL_GetTick>
 8004fdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fde:	e00d      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe90>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fe0:	f7fd fb76 	bl	80026d0 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b64      	cmp	r3, #100	; 0x64
 8004fec:	d906      	bls.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe90>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e11f      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8004ff2:	bf00      	nop
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	0800804c 	.word	0x0800804c
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ffc:	4b8f      	ldr	r3, [pc, #572]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005008:	d0ea      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	2b31      	cmp	r3, #49	; 0x31
 8005010:	d904      	bls.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xeb0>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800501a:	d904      	bls.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xeba>
 800501c:	f240 2146 	movw	r1, #582	; 0x246
 8005020:	4887      	ldr	r0, [pc, #540]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8005022:	f7fc fdbc 	bl	8001b9e <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xece>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	2b00      	cmp	r3, #0
 8005038:	d009      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xee2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005042:	2b00      	cmp	r3, #0
 8005044:	d048      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	2b00      	cmp	r3, #0
 800504c:	d144      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d903      	bls.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xef2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b0f      	cmp	r3, #15
 800505c:	d904      	bls.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xefc>
 800505e:	f240 214d 	movw	r1, #589	; 0x24d
 8005062:	4877      	ldr	r0, [pc, #476]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8005064:	f7fc fd9b 	bl	8001b9e <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005074:	2b20      	cmp	r3, #32
 8005076:	d904      	bls.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005078:	f240 214f 	movw	r1, #591	; 0x24f
 800507c:	4870      	ldr	r0, [pc, #448]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 800507e:	f7fc fd8e 	bl	8001b9e <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005082:	4b6e      	ldr	r3, [pc, #440]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005088:	0c1b      	lsrs	r3, r3, #16
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005090:	4b6a      	ldr	r3, [pc, #424]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	0f1b      	lsrs	r3, r3, #28
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	019a      	lsls	r2, r3, #6
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	041b      	lsls	r3, r3, #16
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	061b      	lsls	r3, r3, #24
 80050b0:	431a      	orrs	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	071b      	lsls	r3, r3, #28
 80050b6:	4961      	ldr	r1, [pc, #388]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050be:	4b5f      	ldr	r3, [pc, #380]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80050c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	3b01      	subs	r3, #1
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	495a      	ldr	r1, [pc, #360]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d037      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ec:	d132      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d010      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d00c      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d008      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	2b03      	cmp	r3, #3
 800510c:	d004      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 800510e:	f240 2162 	movw	r1, #610	; 0x262
 8005112:	484b      	ldr	r0, [pc, #300]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8005114:	f7fc fd43 	bl	8001b9e <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005118:	4b48      	ldr	r3, [pc, #288]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	0e1b      	lsrs	r3, r3, #24
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005126:	4b45      	ldr	r3, [pc, #276]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512c:	0f1b      	lsrs	r3, r3, #28
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	019a      	lsls	r2, r3, #6
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	041b      	lsls	r3, r3, #16
 8005140:	431a      	orrs	r2, r3
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	061b      	lsls	r3, r3, #24
 8005146:	431a      	orrs	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	071b      	lsls	r3, r3, #28
 800514c:	493b      	ldr	r1, [pc, #236]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d04d      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1090>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d903      	bls.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1004>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	2b07      	cmp	r3, #7
 800516e:	d904      	bls.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x100e>
 8005170:	f240 2171 	movw	r1, #625	; 0x271
 8005174:	4832      	ldr	r0, [pc, #200]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8005176:	f7fc fd12 	bl	8001b9e <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d013      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518a:	d00e      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x103e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005194:	d009      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800519e:	d004      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x103e>
 80051a0:	f240 2172 	movw	r1, #626	; 0x272
 80051a4:	4826      	ldr	r0, [pc, #152]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80051a6:	f7fc fcfa 	bl	8001b9e <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051aa:	4b24      	ldr	r3, [pc, #144]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b0:	0e1b      	lsrs	r3, r3, #24
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051b8:	4b20      	ldr	r3, [pc, #128]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051be:	0c1b      	lsrs	r3, r3, #16
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	019a      	lsls	r2, r3, #6
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	041b      	lsls	r3, r3, #16
 80051d0:	431a      	orrs	r2, r3
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	061b      	lsls	r3, r3, #24
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	071b      	lsls	r3, r3, #28
 80051de:	4917      	ldr	r1, [pc, #92]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051e6:	4b15      	ldr	r3, [pc, #84]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80051e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	4911      	ldr	r1, [pc, #68]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051fc:	4b0f      	ldr	r3, [pc, #60]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a0e      	ldr	r2, [pc, #56]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005208:	f7fd fa62 	bl	80026d0 <HAL_GetTick>
 800520c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005210:	f7fd fa5e 	bl	80026d0 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b64      	cmp	r3, #100	; 0x64
 800521c:	d901      	bls.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e007      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005222:	4b06      	ldr	r3, [pc, #24]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800522a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800522e:	d1ef      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
      }
    }
  }
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40023800 	.word	0x40023800
 8005240:	0800804c 	.word	0x0800804c

08005244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e199      	b.n	800558a <HAL_SPI_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a94      	ldr	r2, [pc, #592]	; (80054ac <HAL_SPI_Init+0x268>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d01d      	beq.n	800529c <HAL_SPI_Init+0x58>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a92      	ldr	r2, [pc, #584]	; (80054b0 <HAL_SPI_Init+0x26c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d018      	beq.n	800529c <HAL_SPI_Init+0x58>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a91      	ldr	r2, [pc, #580]	; (80054b4 <HAL_SPI_Init+0x270>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d013      	beq.n	800529c <HAL_SPI_Init+0x58>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a8f      	ldr	r2, [pc, #572]	; (80054b8 <HAL_SPI_Init+0x274>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00e      	beq.n	800529c <HAL_SPI_Init+0x58>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a8e      	ldr	r2, [pc, #568]	; (80054bc <HAL_SPI_Init+0x278>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d009      	beq.n	800529c <HAL_SPI_Init+0x58>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a8c      	ldr	r2, [pc, #560]	; (80054c0 <HAL_SPI_Init+0x27c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d004      	beq.n	800529c <HAL_SPI_Init+0x58>
 8005292:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005296:	488b      	ldr	r0, [pc, #556]	; (80054c4 <HAL_SPI_Init+0x280>)
 8005298:	f7fc fc81 	bl	8001b9e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d009      	beq.n	80052b8 <HAL_SPI_Init+0x74>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ac:	d004      	beq.n	80052b8 <HAL_SPI_Init+0x74>
 80052ae:	f240 1145 	movw	r1, #325	; 0x145
 80052b2:	4884      	ldr	r0, [pc, #528]	; (80054c4 <HAL_SPI_Init+0x280>)
 80052b4:	f7fc fc73 	bl	8001b9e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00e      	beq.n	80052de <HAL_SPI_Init+0x9a>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c8:	d009      	beq.n	80052de <HAL_SPI_Init+0x9a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d2:	d004      	beq.n	80052de <HAL_SPI_Init+0x9a>
 80052d4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80052d8:	487a      	ldr	r0, [pc, #488]	; (80054c4 <HAL_SPI_Init+0x280>)
 80052da:	f7fc fc60 	bl	8001b9e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052e6:	d040      	beq.n	800536a <HAL_SPI_Init+0x126>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80052f0:	d03b      	beq.n	800536a <HAL_SPI_Init+0x126>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80052fa:	d036      	beq.n	800536a <HAL_SPI_Init+0x126>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005304:	d031      	beq.n	800536a <HAL_SPI_Init+0x126>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800530e:	d02c      	beq.n	800536a <HAL_SPI_Init+0x126>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005318:	d027      	beq.n	800536a <HAL_SPI_Init+0x126>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8005322:	d022      	beq.n	800536a <HAL_SPI_Init+0x126>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800532c:	d01d      	beq.n	800536a <HAL_SPI_Init+0x126>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005336:	d018      	beq.n	800536a <HAL_SPI_Init+0x126>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005340:	d013      	beq.n	800536a <HAL_SPI_Init+0x126>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800534a:	d00e      	beq.n	800536a <HAL_SPI_Init+0x126>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005354:	d009      	beq.n	800536a <HAL_SPI_Init+0x126>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800535e:	d004      	beq.n	800536a <HAL_SPI_Init+0x126>
 8005360:	f240 1147 	movw	r1, #327	; 0x147
 8005364:	4857      	ldr	r0, [pc, #348]	; (80054c4 <HAL_SPI_Init+0x280>)
 8005366:	f7fc fc1a 	bl	8001b9e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005372:	d00d      	beq.n	8005390 <HAL_SPI_Init+0x14c>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d009      	beq.n	8005390 <HAL_SPI_Init+0x14c>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005384:	d004      	beq.n	8005390 <HAL_SPI_Init+0x14c>
 8005386:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800538a:	484e      	ldr	r0, [pc, #312]	; (80054c4 <HAL_SPI_Init+0x280>)
 800538c:	f7fc fc07 	bl	8001b9e <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005394:	2b08      	cmp	r3, #8
 8005396:	d008      	beq.n	80053aa <HAL_SPI_Init+0x166>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539c:	2b00      	cmp	r3, #0
 800539e:	d004      	beq.n	80053aa <HAL_SPI_Init+0x166>
 80053a0:	f240 1149 	movw	r1, #329	; 0x149
 80053a4:	4847      	ldr	r0, [pc, #284]	; (80054c4 <HAL_SPI_Init+0x280>)
 80053a6:	f7fc fbfa 	bl	8001b9e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d020      	beq.n	80053f4 <HAL_SPI_Init+0x1b0>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d01c      	beq.n	80053f4 <HAL_SPI_Init+0x1b0>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d018      	beq.n	80053f4 <HAL_SPI_Init+0x1b0>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	2b18      	cmp	r3, #24
 80053c8:	d014      	beq.n	80053f4 <HAL_SPI_Init+0x1b0>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d010      	beq.n	80053f4 <HAL_SPI_Init+0x1b0>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	2b28      	cmp	r3, #40	; 0x28
 80053d8:	d00c      	beq.n	80053f4 <HAL_SPI_Init+0x1b0>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	2b30      	cmp	r3, #48	; 0x30
 80053e0:	d008      	beq.n	80053f4 <HAL_SPI_Init+0x1b0>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	2b38      	cmp	r3, #56	; 0x38
 80053e8:	d004      	beq.n	80053f4 <HAL_SPI_Init+0x1b0>
 80053ea:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80053ee:	4835      	ldr	r0, [pc, #212]	; (80054c4 <HAL_SPI_Init+0x280>)
 80053f0:	f7fc fbd5 	bl	8001b9e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <HAL_SPI_Init+0x1ca>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	2b80      	cmp	r3, #128	; 0x80
 8005402:	d004      	beq.n	800540e <HAL_SPI_Init+0x1ca>
 8005404:	f240 114b 	movw	r1, #331	; 0x14b
 8005408:	482e      	ldr	r0, [pc, #184]	; (80054c4 <HAL_SPI_Init+0x280>)
 800540a:	f7fc fbc8 	bl	8001b9e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <HAL_SPI_Init+0x1e4>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	2b10      	cmp	r3, #16
 800541c:	d004      	beq.n	8005428 <HAL_SPI_Init+0x1e4>
 800541e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005422:	4828      	ldr	r0, [pc, #160]	; (80054c4 <HAL_SPI_Init+0x280>)
 8005424:	f7fc fbbb 	bl	8001b9e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	2b00      	cmp	r3, #0
 800542e:	d119      	bne.n	8005464 <HAL_SPI_Init+0x220>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d008      	beq.n	800544a <HAL_SPI_Init+0x206>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2b02      	cmp	r3, #2
 800543e:	d004      	beq.n	800544a <HAL_SPI_Init+0x206>
 8005440:	f240 114f 	movw	r1, #335	; 0x14f
 8005444:	481f      	ldr	r0, [pc, #124]	; (80054c4 <HAL_SPI_Init+0x280>)
 8005446:	f7fc fbaa 	bl	8001b9e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d008      	beq.n	8005464 <HAL_SPI_Init+0x220>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d004      	beq.n	8005464 <HAL_SPI_Init+0x220>
 800545a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800545e:	4819      	ldr	r0, [pc, #100]	; (80054c4 <HAL_SPI_Init+0x280>)
 8005460:	f7fc fb9d 	bl	8001b9e <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <HAL_SPI_Init+0x240>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7fc fcce 	bl	8001e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054a4:	d910      	bls.n	80054c8 <HAL_SPI_Init+0x284>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e010      	b.n	80054ce <HAL_SPI_Init+0x28a>
 80054ac:	40013000 	.word	0x40013000
 80054b0:	40003800 	.word	0x40003800
 80054b4:	40003c00 	.word	0x40003c00
 80054b8:	40013400 	.word	0x40013400
 80054bc:	40015000 	.word	0x40015000
 80054c0:	40015400 	.word	0x40015400
 80054c4:	08008088 	.word	0x08008088
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80054d6:	d007      	beq.n	80054e8 <HAL_SPI_Init+0x2a4>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054e0:	d002      	beq.n	80054e8 <HAL_SPI_Init+0x2a4>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10b      	bne.n	8005508 <HAL_SPI_Init+0x2c4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054f8:	d903      	bls.n	8005502 <HAL_SPI_Init+0x2be>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2202      	movs	r2, #2
 80054fe:	631a      	str	r2, [r3, #48]	; 0x30
 8005500:	e002      	b.n	8005508 <HAL_SPI_Init+0x2c4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	431a      	orrs	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	ea42 0103 	orr.w	r1, r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	0c1b      	lsrs	r3, r3, #16
 8005548:	f003 0204 	and.w	r2, r3, #4
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	ea42 0103 	orr.w	r1, r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69da      	ldr	r2, [r3, #28]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005578:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop

08005594 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	4613      	mov	r3, r2
 80055a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055a4:	2300      	movs	r3, #0
 80055a6:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d009      	beq.n	80055c4 <HAL_SPI_Transmit+0x30>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b8:	d004      	beq.n	80055c4 <HAL_SPI_Transmit+0x30>
 80055ba:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80055be:	4895      	ldr	r0, [pc, #596]	; (8005814 <HAL_SPI_Transmit+0x280>)
 80055c0:	f7fc faed 	bl	8001b9e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_SPI_Transmit+0x3e>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e152      	b.n	8005878 <HAL_SPI_Transmit+0x2e4>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055da:	f7fd f879 	bl	80026d0 <HAL_GetTick>
 80055de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055e0:	88fb      	ldrh	r3, [r7, #6]
 80055e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d002      	beq.n	80055f6 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80055f0:	2302      	movs	r3, #2
 80055f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055f4:	e137      	b.n	8005866 <HAL_SPI_Transmit+0x2d2>
  }

  if ((pData == NULL) || (Size == 0U))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_SPI_Transmit+0x6e>
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005606:	e12e      	b.n	8005866 <HAL_SPI_Transmit+0x2d2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2203      	movs	r2, #3
 800560c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	88fa      	ldrh	r2, [r7, #6]
 8005620:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	88fa      	ldrh	r2, [r7, #6]
 8005626:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005652:	d107      	bne.n	8005664 <HAL_SPI_Transmit+0xd0>
  {
    SPI_1LINE_TX(hspi);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005662:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d007      	beq.n	8005682 <HAL_SPI_Transmit+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005680:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800568a:	d94b      	bls.n	8005724 <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <HAL_SPI_Transmit+0x106>
 8005694:	8afb      	ldrh	r3, [r7, #22]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d13e      	bne.n	8005718 <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569e:	881a      	ldrh	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	1c9a      	adds	r2, r3, #2
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056be:	e02b      	b.n	8005718 <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d112      	bne.n	80056f4 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d2:	881a      	ldrh	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	1c9a      	adds	r2, r3, #2
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056f2:	e011      	b.n	8005718 <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056f4:	f7fc ffec 	bl	80026d0 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d803      	bhi.n	800570c <HAL_SPI_Transmit+0x178>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570a:	d102      	bne.n	8005712 <HAL_SPI_Transmit+0x17e>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d102      	bne.n	8005718 <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005716:	e0a6      	b.n	8005866 <HAL_SPI_Transmit+0x2d2>
    while (hspi->TxXferCount > 0U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1ce      	bne.n	80056c0 <HAL_SPI_Transmit+0x12c>
 8005722:	e07e      	b.n	8005822 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <HAL_SPI_Transmit+0x19e>
 800572c:	8afb      	ldrh	r3, [r7, #22]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d172      	bne.n	8005818 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d912      	bls.n	8005762 <HAL_SPI_Transmit+0x1ce>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	881a      	ldrh	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	1c9a      	adds	r2, r3, #2
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b02      	subs	r3, #2
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005760:	e05a      	b.n	8005818 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	330c      	adds	r3, #12
 800576c:	7812      	ldrb	r2, [r2, #0]
 800576e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005788:	e046      	b.n	8005818 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b02      	cmp	r3, #2
 8005796:	d12b      	bne.n	80057f0 <HAL_SPI_Transmit+0x25c>
      {
        if (hspi->TxXferCount > 1U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d912      	bls.n	80057c8 <HAL_SPI_Transmit+0x234>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	881a      	ldrh	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	1c9a      	adds	r2, r3, #2
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b02      	subs	r3, #2
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057c6:	e027      	b.n	8005818 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	7812      	ldrb	r2, [r2, #0]
 80057d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057ee:	e013      	b.n	8005818 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057f0:	f7fc ff6e 	bl	80026d0 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d803      	bhi.n	8005808 <HAL_SPI_Transmit+0x274>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005806:	d102      	bne.n	800580e <HAL_SPI_Transmit+0x27a>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d104      	bne.n	8005818 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005812:	e028      	b.n	8005866 <HAL_SPI_Transmit+0x2d2>
 8005814:	08008088 	.word	0x08008088
    while (hspi->TxXferCount > 0U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1b3      	bne.n	800578a <HAL_SPI_Transmit+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fdbe 	bl	80063a8 <SPI_EndRxTxTransaction>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2220      	movs	r2, #32
 8005836:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005840:	2300      	movs	r3, #0
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	77fb      	strb	r3, [r7, #31]
 8005862:	e000      	b.n	8005866 <HAL_SPI_Transmit+0x2d2>
  }

error:
 8005864:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005876:	7ffb      	ldrb	r3, [r7, #31]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3720      	adds	r7, #32
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	4613      	mov	r3, r2
 800588e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800589c:	d112      	bne.n	80058c4 <HAL_SPI_Receive+0x44>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10e      	bne.n	80058c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2204      	movs	r2, #4
 80058aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	4613      	mov	r3, r2
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	68b9      	ldr	r1, [r7, #8]
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 f908 	bl	8005ad0 <HAL_SPI_TransmitReceive>
 80058c0:	4603      	mov	r3, r0
 80058c2:	e101      	b.n	8005ac8 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d101      	bne.n	80058d2 <HAL_SPI_Receive+0x52>
 80058ce:	2302      	movs	r3, #2
 80058d0:	e0fa      	b.n	8005ac8 <HAL_SPI_Receive+0x248>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058da:	f7fc fef9 	bl	80026d0 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d002      	beq.n	80058f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80058ec:	2302      	movs	r3, #2
 80058ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058f0:	e0e1      	b.n	8005ab6 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <HAL_SPI_Receive+0x7e>
 80058f8:	88fb      	ldrh	r3, [r7, #6]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d102      	bne.n	8005904 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005902:	e0d8      	b.n	8005ab6 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2204      	movs	r2, #4
 8005908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	88fa      	ldrh	r2, [r7, #6]
 800591c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	88fa      	ldrh	r2, [r7, #6]
 8005924:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800594e:	d908      	bls.n	8005962 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800595e:	605a      	str	r2, [r3, #4]
 8005960:	e007      	b.n	8005972 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005970:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800597a:	d107      	bne.n	800598c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800598a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	d007      	beq.n	80059aa <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059b2:	d867      	bhi.n	8005a84 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80059b4:	e030      	b.n	8005a18 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d117      	bne.n	80059f4 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f103 020c 	add.w	r2, r3, #12
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	7812      	ldrb	r2, [r2, #0]
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80059f2:	e011      	b.n	8005a18 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059f4:	f7fc fe6c 	bl	80026d0 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d803      	bhi.n	8005a0c <HAL_SPI_Receive+0x18c>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0a:	d102      	bne.n	8005a12 <HAL_SPI_Receive+0x192>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d102      	bne.n	8005a18 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a16:	e04e      	b.n	8005ab6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1c8      	bne.n	80059b6 <HAL_SPI_Receive+0x136>
 8005a24:	e034      	b.n	8005a90 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d115      	bne.n	8005a60 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	b292      	uxth	r2, r2
 8005a40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	1c9a      	adds	r2, r3, #2
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005a5e:	e011      	b.n	8005a84 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a60:	f7fc fe36 	bl	80026d0 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d803      	bhi.n	8005a78 <HAL_SPI_Receive+0x1f8>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d102      	bne.n	8005a7e <HAL_SPI_Receive+0x1fe>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d102      	bne.n	8005a84 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a82:	e018      	b.n	8005ab6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1ca      	bne.n	8005a26 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fc2f 	bl	80062f8 <SPI_EndRxTransaction>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	75fb      	strb	r3, [r7, #23]
 8005ab2:	e000      	b.n	8005ab6 <HAL_SPI_Receive+0x236>
  }

error :
 8005ab4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	; 0x28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d004      	beq.n	8005afa <HAL_SPI_TransmitReceive+0x2a>
 8005af0:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8005af4:	4895      	ldr	r0, [pc, #596]	; (8005d4c <HAL_SPI_TransmitReceive+0x27c>)
 8005af6:	f7fc f852 	bl	8001b9e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_SPI_TransmitReceive+0x38>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e1fd      	b.n	8005f04 <HAL_SPI_TransmitReceive+0x434>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b10:	f7fc fdde 	bl	80026d0 <HAL_GetTick>
 8005b14:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b1c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005b24:	887b      	ldrh	r3, [r7, #2]
 8005b26:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005b28:	887b      	ldrh	r3, [r7, #2]
 8005b2a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b2c:	7efb      	ldrb	r3, [r7, #27]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d00e      	beq.n	8005b50 <HAL_SPI_TransmitReceive+0x80>
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b38:	d106      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x78>
 8005b42:	7efb      	ldrb	r3, [r7, #27]
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d003      	beq.n	8005b50 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8005b48:	2302      	movs	r3, #2
 8005b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005b4e:	e1cf      	b.n	8005ef0 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d005      	beq.n	8005b62 <HAL_SPI_TransmitReceive+0x92>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_SPI_TransmitReceive+0x92>
 8005b5c:	887b      	ldrh	r3, [r7, #2]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d103      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005b68:	e1c2      	b.n	8005ef0 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d003      	beq.n	8005b7e <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2205      	movs	r2, #5
 8005b7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	887a      	ldrh	r2, [r7, #2]
 8005b8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	887a      	ldrh	r2, [r7, #2]
 8005b96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	887a      	ldrh	r2, [r7, #2]
 8005ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	887a      	ldrh	r2, [r7, #2]
 8005baa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bc0:	d802      	bhi.n	8005bc8 <HAL_SPI_TransmitReceive+0xf8>
 8005bc2:	8a3b      	ldrh	r3, [r7, #16]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d908      	bls.n	8005bda <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bd6:	605a      	str	r2, [r3, #4]
 8005bd8:	e007      	b.n	8005bea <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005be8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf4:	2b40      	cmp	r3, #64	; 0x40
 8005bf6:	d007      	beq.n	8005c08 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c10:	d97c      	bls.n	8005d0c <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x150>
 8005c1a:	8a7b      	ldrh	r3, [r7, #18]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d169      	bne.n	8005cf4 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	881a      	ldrh	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c30:	1c9a      	adds	r2, r3, #2
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c44:	e056      	b.n	8005cf4 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d11b      	bne.n	8005c8c <HAL_SPI_TransmitReceive+0x1bc>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d016      	beq.n	8005c8c <HAL_SPI_TransmitReceive+0x1bc>
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d113      	bne.n	8005c8c <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	881a      	ldrh	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	1c9a      	adds	r2, r3, #2
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d11c      	bne.n	8005cd4 <HAL_SPI_TransmitReceive+0x204>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d016      	beq.n	8005cd4 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	b292      	uxth	r2, r2
 8005cb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	1c9a      	adds	r2, r3, #2
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005cd4:	f7fc fcfc 	bl	80026d0 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d807      	bhi.n	8005cf4 <HAL_SPI_TransmitReceive+0x224>
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cea:	d003      	beq.n	8005cf4 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005cf2:	e0fd      	b.n	8005ef0 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1a3      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x176>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d19d      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x176>
 8005d0a:	e0e1      	b.n	8005ed0 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <HAL_SPI_TransmitReceive+0x24c>
 8005d14:	8a7b      	ldrh	r3, [r7, #18]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	f040 80cd 	bne.w	8005eb6 <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d914      	bls.n	8005d50 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	881a      	ldrh	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	1c9a      	adds	r2, r3, #2
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3b02      	subs	r3, #2
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d4a:	e0b4      	b.n	8005eb6 <HAL_SPI_TransmitReceive+0x3e6>
 8005d4c:	08008088 	.word	0x08008088
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	7812      	ldrb	r2, [r2, #0]
 8005d5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d76:	e09e      	b.n	8005eb6 <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d134      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x320>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d02f      	beq.n	8005df0 <HAL_SPI_TransmitReceive+0x320>
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d12c      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d912      	bls.n	8005dc6 <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	881a      	ldrh	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	1c9a      	adds	r2, r3, #2
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b02      	subs	r3, #2
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dc4:	e012      	b.n	8005dec <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	7812      	ldrb	r2, [r2, #0]
 8005dd2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d148      	bne.n	8005e90 <HAL_SPI_TransmitReceive+0x3c0>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d042      	beq.n	8005e90 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d923      	bls.n	8005e5e <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	b292      	uxth	r2, r2
 8005e22:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	1c9a      	adds	r2, r3, #2
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b02      	subs	r3, #2
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d81f      	bhi.n	8005e8c <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e5a:	605a      	str	r2, [r3, #4]
 8005e5c:	e016      	b.n	8005e8c <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f103 020c 	add.w	r2, r3, #12
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	7812      	ldrb	r2, [r2, #0]
 8005e6c:	b2d2      	uxtb	r2, r2
 8005e6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e90:	f7fc fc1e 	bl	80026d0 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d803      	bhi.n	8005ea8 <HAL_SPI_TransmitReceive+0x3d8>
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d102      	bne.n	8005eae <HAL_SPI_TransmitReceive+0x3de>
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005eb4:	e01c      	b.n	8005ef0 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f47f af5b 	bne.w	8005d78 <HAL_SPI_TransmitReceive+0x2a8>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f47f af54 	bne.w	8005d78 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ed0:	69fa      	ldr	r2, [r7, #28]
 8005ed2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 fa67 	bl	80063a8 <SPI_EndRxTxTransaction>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d006      	beq.n	8005eee <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	661a      	str	r2, [r3, #96]	; 0x60
 8005eec:	e000      	b.n	8005ef0 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 8005eee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3728      	adds	r7, #40	; 0x28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	099b      	lsrs	r3, r3, #6
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10f      	bne.n	8005f50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	099b      	lsrs	r3, r3, #6
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	4798      	blx	r3
    return;
 8005f4e:	e0d8      	b.n	8006102 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	085b      	lsrs	r3, r3, #1
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <HAL_SPI_IRQHandler+0x66>
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	09db      	lsrs	r3, r3, #7
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d004      	beq.n	8005f72 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	4798      	blx	r3
    return;
 8005f70:	e0c7      	b.n	8006102 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10c      	bne.n	8005f98 <HAL_SPI_IRQHandler+0x8c>
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	099b      	lsrs	r3, r3, #6
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_SPI_IRQHandler+0x8c>
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	0a1b      	lsrs	r3, r3, #8
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 80b5 	beq.w	8006102 <HAL_SPI_IRQHandler+0x1f6>
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 80ae 	beq.w	8006102 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	099b      	lsrs	r3, r3, #6
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d023      	beq.n	8005ffa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d011      	beq.n	8005fe2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc2:	f043 0204 	orr.w	r2, r3, #4
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fca:	2300      	movs	r3, #0
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	e00b      	b.n	8005ffa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	613b      	str	r3, [r7, #16]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	693b      	ldr	r3, [r7, #16]
        return;
 8005ff8:	e083      	b.n	8006102 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	095b      	lsrs	r3, r3, #5
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d014      	beq.n	8006030 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600a:	f043 0201 	orr.w	r2, r3, #1
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00c      	beq.n	8006056 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006040:	f043 0208 	orr.w	r2, r3, #8
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006048:	2300      	movs	r3, #0
 800604a:	60bb      	str	r3, [r7, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	60bb      	str	r3, [r7, #8]
 8006054:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800605a:	2b00      	cmp	r3, #0
 800605c:	d050      	beq.n	8006100 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800606c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d104      	bne.n	800608a <HAL_SPI_IRQHandler+0x17e>
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d034      	beq.n	80060f4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0203 	bic.w	r2, r2, #3
 8006098:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d011      	beq.n	80060c6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a6:	4a18      	ldr	r2, [pc, #96]	; (8006108 <HAL_SPI_IRQHandler+0x1fc>)
 80060a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fc fdcc 	bl	8002c4c <HAL_DMA_Abort_IT>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d016      	beq.n	80060fc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d2:	4a0d      	ldr	r2, [pc, #52]	; (8006108 <HAL_SPI_IRQHandler+0x1fc>)
 80060d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fc fdb6 	bl	8002c4c <HAL_DMA_Abort_IT>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80060f2:	e003      	b.n	80060fc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f809 	bl	800610c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80060fa:	e000      	b.n	80060fe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80060fc:	bf00      	nop
    return;
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
  }
}
 8006102:	3720      	adds	r7, #32
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	08006121 	.word	0x08006121

0800610c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7ff ffe5 	bl	800610c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006142:	bf00      	nop
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	603b      	str	r3, [r7, #0]
 8006156:	4613      	mov	r3, r2
 8006158:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800615a:	e04c      	b.n	80061f6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006162:	d048      	beq.n	80061f6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006164:	f7fc fab4 	bl	80026d0 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d902      	bls.n	800617a <SPI_WaitFlagStateUntilTimeout+0x30>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d13d      	bne.n	80061f6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006192:	d111      	bne.n	80061b8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619c:	d004      	beq.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a6:	d107      	bne.n	80061b8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061c0:	d10f      	bne.n	80061e2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e00f      	b.n	8006216 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4013      	ands	r3, r2
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	429a      	cmp	r2, r3
 8006204:	bf0c      	ite	eq
 8006206:	2301      	moveq	r3, #1
 8006208:	2300      	movne	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	429a      	cmp	r2, r3
 8006212:	d1a3      	bne.n	800615c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
 800622a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800622c:	e057      	b.n	80062de <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006234:	d106      	bne.n	8006244 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d103      	bne.n	8006244 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	330c      	adds	r3, #12
 8006242:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624a:	d048      	beq.n	80062de <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800624c:	f7fc fa40 	bl	80026d0 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d902      	bls.n	8006262 <SPI_WaitFifoStateUntilTimeout+0x44>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d13d      	bne.n	80062de <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006270:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800627a:	d111      	bne.n	80062a0 <SPI_WaitFifoStateUntilTimeout+0x82>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006284:	d004      	beq.n	8006290 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800628e:	d107      	bne.n	80062a0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800629e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a8:	d10f      	bne.n	80062ca <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e008      	b.n	80062f0 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4013      	ands	r3, r2
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d19f      	bne.n	800622e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800630c:	d111      	bne.n	8006332 <SPI_EndRxTransaction+0x3a>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006316:	d004      	beq.n	8006322 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006320:	d107      	bne.n	8006332 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006330:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2200      	movs	r2, #0
 800633a:	2180      	movs	r1, #128	; 0x80
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7ff ff04 	bl	800614a <SPI_WaitFlagStateUntilTimeout>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d007      	beq.n	8006358 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800634c:	f043 0220 	orr.w	r2, r3, #32
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e023      	b.n	80063a0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006360:	d11d      	bne.n	800639e <SPI_EndRxTransaction+0xa6>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800636a:	d004      	beq.n	8006376 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006374:	d113      	bne.n	800639e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2200      	movs	r2, #0
 800637e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f7ff ff4b 	bl	800621e <SPI_WaitFifoStateUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d007      	beq.n	800639e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006392:	f043 0220 	orr.w	r2, r3, #32
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e000      	b.n	80063a0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f7ff ff2c 	bl	800621e <SPI_WaitFifoStateUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d0:	f043 0220 	orr.w	r2, r3, #32
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e027      	b.n	800642c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2200      	movs	r2, #0
 80063e4:	2180      	movs	r1, #128	; 0x80
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f7ff feaf 	bl	800614a <SPI_WaitFlagStateUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d007      	beq.n	8006402 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f6:	f043 0220 	orr.w	r2, r3, #32
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e014      	b.n	800642c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2200      	movs	r2, #0
 800640a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f7ff ff05 	bl	800621e <SPI_WaitFifoStateUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d007      	beq.n	800642a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641e:	f043 0220 	orr.w	r2, r3, #32
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e000      	b.n	800642c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e09f      	b.n	8006586 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d02d      	beq.n	80064aa <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a4f      	ldr	r2, [pc, #316]	; (8006590 <HAL_UART_Init+0x15c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d055      	beq.n	8006504 <HAL_UART_Init+0xd0>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a4d      	ldr	r2, [pc, #308]	; (8006594 <HAL_UART_Init+0x160>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d050      	beq.n	8006504 <HAL_UART_Init+0xd0>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a4c      	ldr	r2, [pc, #304]	; (8006598 <HAL_UART_Init+0x164>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d04b      	beq.n	8006504 <HAL_UART_Init+0xd0>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a4a      	ldr	r2, [pc, #296]	; (800659c <HAL_UART_Init+0x168>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d046      	beq.n	8006504 <HAL_UART_Init+0xd0>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a49      	ldr	r2, [pc, #292]	; (80065a0 <HAL_UART_Init+0x16c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d041      	beq.n	8006504 <HAL_UART_Init+0xd0>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a47      	ldr	r2, [pc, #284]	; (80065a4 <HAL_UART_Init+0x170>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d03c      	beq.n	8006504 <HAL_UART_Init+0xd0>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a46      	ldr	r2, [pc, #280]	; (80065a8 <HAL_UART_Init+0x174>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d037      	beq.n	8006504 <HAL_UART_Init+0xd0>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a44      	ldr	r2, [pc, #272]	; (80065ac <HAL_UART_Init+0x178>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d032      	beq.n	8006504 <HAL_UART_Init+0xd0>
 800649e:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80064a2:	4843      	ldr	r0, [pc, #268]	; (80065b0 <HAL_UART_Init+0x17c>)
 80064a4:	f7fb fb7b 	bl	8001b9e <assert_failed>
 80064a8:	e02c      	b.n	8006504 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a38      	ldr	r2, [pc, #224]	; (8006590 <HAL_UART_Init+0x15c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d027      	beq.n	8006504 <HAL_UART_Init+0xd0>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a36      	ldr	r2, [pc, #216]	; (8006594 <HAL_UART_Init+0x160>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d022      	beq.n	8006504 <HAL_UART_Init+0xd0>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a35      	ldr	r2, [pc, #212]	; (8006598 <HAL_UART_Init+0x164>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d01d      	beq.n	8006504 <HAL_UART_Init+0xd0>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a33      	ldr	r2, [pc, #204]	; (800659c <HAL_UART_Init+0x168>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d018      	beq.n	8006504 <HAL_UART_Init+0xd0>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a32      	ldr	r2, [pc, #200]	; (80065a0 <HAL_UART_Init+0x16c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d013      	beq.n	8006504 <HAL_UART_Init+0xd0>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a30      	ldr	r2, [pc, #192]	; (80065a4 <HAL_UART_Init+0x170>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00e      	beq.n	8006504 <HAL_UART_Init+0xd0>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2f      	ldr	r2, [pc, #188]	; (80065a8 <HAL_UART_Init+0x174>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d009      	beq.n	8006504 <HAL_UART_Init+0xd0>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a2d      	ldr	r2, [pc, #180]	; (80065ac <HAL_UART_Init+0x178>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d004      	beq.n	8006504 <HAL_UART_Init+0xd0>
 80064fa:	f240 112f 	movw	r1, #303	; 0x12f
 80064fe:	482c      	ldr	r0, [pc, #176]	; (80065b0 <HAL_UART_Init+0x17c>)
 8006500:	f7fb fb4d 	bl	8001b9e <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006508:	2b00      	cmp	r3, #0
 800650a:	d106      	bne.n	800651a <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7fb ff63 	bl	80023e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2224      	movs	r2, #36	; 0x24
 800651e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0201 	bic.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fb01 	bl	8006b38 <UART_SetConfig>
 8006536:	4603      	mov	r3, r0
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e022      	b.n	8006586 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fe31 	bl	80071b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800655c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800656c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0201 	orr.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 ff6a 	bl	8007458 <UART_CheckIdleState>
 8006584:	4603      	mov	r3, r0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	40011000 	.word	0x40011000
 8006594:	40004400 	.word	0x40004400
 8006598:	40004800 	.word	0x40004800
 800659c:	40004c00 	.word	0x40004c00
 80065a0:	40005000 	.word	0x40005000
 80065a4:	40011400 	.word	0x40011400
 80065a8:	40007800 	.word	0x40007800
 80065ac:	40007c00 	.word	0x40007c00
 80065b0:	080080c0 	.word	0x080080c0

080065b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08a      	sub	sp, #40	; 0x28
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	603b      	str	r3, [r7, #0]
 80065c0:	4613      	mov	r3, r2
 80065c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c8:	2b20      	cmp	r3, #32
 80065ca:	d17f      	bne.n	80066cc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_UART_Transmit+0x24>
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e078      	b.n	80066ce <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <HAL_UART_Transmit+0x36>
 80065e6:	2302      	movs	r3, #2
 80065e8:	e071      	b.n	80066ce <HAL_UART_Transmit+0x11a>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2221      	movs	r2, #33	; 0x21
 80065fc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80065fe:	f7fc f867 	bl	80026d0 <HAL_GetTick>
 8006602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	88fa      	ldrh	r2, [r7, #6]
 8006608:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	88fa      	ldrh	r2, [r7, #6]
 8006610:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661c:	d108      	bne.n	8006630 <HAL_UART_Transmit+0x7c>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d104      	bne.n	8006630 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8006626:	2300      	movs	r3, #0
 8006628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	61bb      	str	r3, [r7, #24]
 800662e:	e003      	b.n	8006638 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006640:	e02c      	b.n	800669c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2200      	movs	r2, #0
 800664a:	2180      	movs	r1, #128	; 0x80
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 ff48 	bl	80074e2 <UART_WaitOnFlagUntilTimeout>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e038      	b.n	80066ce <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10b      	bne.n	800667a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006670:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	3302      	adds	r3, #2
 8006676:	61bb      	str	r3, [r7, #24]
 8006678:	e007      	b.n	800668a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	781a      	ldrb	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	3301      	adds	r3, #1
 8006688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006690:	b29b      	uxth	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1cc      	bne.n	8006642 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2200      	movs	r2, #0
 80066b0:	2140      	movs	r1, #64	; 0x40
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 ff15 	bl	80074e2 <UART_WaitOnFlagUntilTimeout>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e005      	b.n	80066ce <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2220      	movs	r2, #32
 80066c6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	e000      	b.n	80066ce <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80066cc:	2302      	movs	r3, #2
  }
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3720      	adds	r7, #32
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b08a      	sub	sp, #40	; 0x28
 80066da:	af02      	add	r7, sp, #8
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	603b      	str	r3, [r7, #0]
 80066e2:	4613      	mov	r3, r2
 80066e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	f040 80ba 	bne.w	8006864 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <HAL_UART_Receive+0x26>
 80066f6:	88fb      	ldrh	r3, [r7, #6]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e0b2      	b.n	8006866 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006706:	2b01      	cmp	r3, #1
 8006708:	d101      	bne.n	800670e <HAL_UART_Receive+0x38>
 800670a:	2302      	movs	r3, #2
 800670c:	e0ab      	b.n	8006866 <HAL_UART_Receive+0x190>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2222      	movs	r2, #34	; 0x22
 8006720:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006722:	f7fb ffd5 	bl	80026d0 <HAL_GetTick>
 8006726:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	88fa      	ldrh	r2, [r7, #6]
 800672c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	88fa      	ldrh	r2, [r7, #6]
 8006734:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006740:	d10e      	bne.n	8006760 <HAL_UART_Receive+0x8a>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d105      	bne.n	8006756 <HAL_UART_Receive+0x80>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006750:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006754:	e02d      	b.n	80067b2 <HAL_UART_Receive+0xdc>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	22ff      	movs	r2, #255	; 0xff
 800675a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800675e:	e028      	b.n	80067b2 <HAL_UART_Receive+0xdc>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10d      	bne.n	8006784 <HAL_UART_Receive+0xae>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d104      	bne.n	800677a <HAL_UART_Receive+0xa4>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	22ff      	movs	r2, #255	; 0xff
 8006774:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006778:	e01b      	b.n	80067b2 <HAL_UART_Receive+0xdc>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	227f      	movs	r2, #127	; 0x7f
 800677e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006782:	e016      	b.n	80067b2 <HAL_UART_Receive+0xdc>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800678c:	d10d      	bne.n	80067aa <HAL_UART_Receive+0xd4>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d104      	bne.n	80067a0 <HAL_UART_Receive+0xca>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	227f      	movs	r2, #127	; 0x7f
 800679a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800679e:	e008      	b.n	80067b2 <HAL_UART_Receive+0xdc>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	223f      	movs	r2, #63	; 0x3f
 80067a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067a8:	e003      	b.n	80067b2 <HAL_UART_Receive+0xdc>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067b8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c2:	d108      	bne.n	80067d6 <HAL_UART_Receive+0x100>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d104      	bne.n	80067d6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	61bb      	str	r3, [r7, #24]
 80067d4:	e003      	b.n	80067de <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80067e6:	e032      	b.n	800684e <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2200      	movs	r2, #0
 80067f0:	2120      	movs	r1, #32
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 fe75 	bl	80074e2 <UART_WaitOnFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e031      	b.n	8006866 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10c      	bne.n	8006822 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	b29a      	uxth	r2, r3
 8006810:	8a7b      	ldrh	r3, [r7, #18]
 8006812:	4013      	ands	r3, r2
 8006814:	b29a      	uxth	r2, r3
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	3302      	adds	r3, #2
 800681e:	61bb      	str	r3, [r7, #24]
 8006820:	e00c      	b.n	800683c <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	b2da      	uxtb	r2, r3
 800682a:	8a7b      	ldrh	r3, [r7, #18]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	4013      	ands	r3, r2
 8006830:	b2da      	uxtb	r2, r3
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	3301      	adds	r3, #1
 800683a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006842:	b29b      	uxth	r3, r3
 8006844:	3b01      	subs	r3, #1
 8006846:	b29a      	uxth	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006854:	b29b      	uxth	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1c6      	bne.n	80067e8 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2220      	movs	r2, #32
 800685e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	e000      	b.n	8006866 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8006864:	2302      	movs	r3, #2
  }
}
 8006866:	4618      	mov	r0, r3
 8006868:	3720      	adds	r7, #32
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006890:	69fa      	ldr	r2, [r7, #28]
 8006892:	f640 030f 	movw	r3, #2063	; 0x80f
 8006896:	4013      	ands	r3, r2
 8006898:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d113      	bne.n	80068c8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00e      	beq.n	80068c8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	f003 0320 	and.w	r3, r3, #32
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8114 	beq.w	8006ae6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
      }
      return;
 80068c6:	e10e      	b.n	8006ae6 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 80d6 	beq.w	8006a7c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d105      	bne.n	80068e6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 80cb 	beq.w	8006a7c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00e      	beq.n	800690e <HAL_UART_IRQHandler+0x9e>
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d009      	beq.n	800690e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2201      	movs	r2, #1
 8006900:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006906:	f043 0201 	orr.w	r2, r3, #1
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00e      	beq.n	8006936 <HAL_UART_IRQHandler+0xc6>
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2202      	movs	r2, #2
 8006928:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800692e:	f043 0204 	orr.w	r2, r3, #4
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00e      	beq.n	800695e <HAL_UART_IRQHandler+0xee>
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2204      	movs	r2, #4
 8006950:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006956:	f043 0202 	orr.w	r2, r3, #2
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	f003 0308 	and.w	r3, r3, #8
 8006964:	2b00      	cmp	r3, #0
 8006966:	d013      	beq.n	8006990 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	d104      	bne.n	800697c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006978:	2b00      	cmp	r3, #0
 800697a:	d009      	beq.n	8006990 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2208      	movs	r2, #8
 8006982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006988:	f043 0208 	orr.w	r2, r3, #8
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00f      	beq.n	80069ba <HAL_UART_IRQHandler+0x14a>
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069b2:	f043 0220 	orr.w	r2, r3, #32
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 8093 	beq.w	8006aea <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00c      	beq.n	80069e8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	f003 0320 	and.w	r3, r3, #32
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f8:	2b40      	cmp	r3, #64	; 0x40
 80069fa:	d004      	beq.n	8006a06 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d031      	beq.n	8006a6a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fde6 	bl	80075d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a16:	2b40      	cmp	r3, #64	; 0x40
 8006a18:	d123      	bne.n	8006a62 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a28:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d013      	beq.n	8006a5a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a36:	4a30      	ldr	r2, [pc, #192]	; (8006af8 <HAL_UART_IRQHandler+0x288>)
 8006a38:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fc f904 	bl	8002c4c <HAL_DMA_Abort_IT>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d016      	beq.n	8006a78 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006a54:	4610      	mov	r0, r2
 8006a56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a58:	e00e      	b.n	8006a78 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f858 	bl	8006b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a60:	e00a      	b.n	8006a78 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f854 	bl	8006b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a68:	e006      	b.n	8006a78 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f850 	bl	8006b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006a76:	e038      	b.n	8006aea <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a78:	bf00      	nop
    return;
 8006a7a:	e036      	b.n	8006aea <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00d      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x232>
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d008      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f842 	bl	8006b24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006aa0:	e026      	b.n	8006af0 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00d      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d008      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d017      	beq.n	8006aee <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	4798      	blx	r3
    }
    return;
 8006ac6:	e012      	b.n	8006aee <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00e      	beq.n	8006af0 <HAL_UART_IRQHandler+0x280>
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d009      	beq.n	8006af0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fdb1 	bl	8007644 <UART_EndTransmit_IT>
    return;
 8006ae2:	bf00      	nop
 8006ae4:	e004      	b.n	8006af0 <HAL_UART_IRQHandler+0x280>
      return;
 8006ae6:	bf00      	nop
 8006ae8:	e002      	b.n	8006af0 <HAL_UART_IRQHandler+0x280>
    return;
 8006aea:	bf00      	nop
 8006aec:	e000      	b.n	8006af0 <HAL_UART_IRQHandler+0x280>
    return;
 8006aee:	bf00      	nop
  }

}
 8006af0:	3720      	adds	r7, #32
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	08007619 	.word	0x08007619

08006afc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	4aaa      	ldr	r2, [pc, #680]	; (8006df8 <UART_SetConfig+0x2c0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d904      	bls.n	8006b5c <UART_SetConfig+0x24>
 8006b52:	f640 21be 	movw	r1, #2750	; 0xabe
 8006b56:	48a9      	ldr	r0, [pc, #676]	; (8006dfc <UART_SetConfig+0x2c4>)
 8006b58:	f7fb f821 	bl	8001b9e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b64:	d00d      	beq.n	8006b82 <UART_SetConfig+0x4a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <UART_SetConfig+0x4a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b76:	d004      	beq.n	8006b82 <UART_SetConfig+0x4a>
 8006b78:	f640 21bf 	movw	r1, #2751	; 0xabf
 8006b7c:	489f      	ldr	r0, [pc, #636]	; (8006dfc <UART_SetConfig+0x2c4>)
 8006b7e:	f7fb f80e 	bl	8001b9e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8a:	d012      	beq.n	8006bb2 <UART_SetConfig+0x7a>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00e      	beq.n	8006bb2 <UART_SetConfig+0x7a>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b9c:	d009      	beq.n	8006bb2 <UART_SetConfig+0x7a>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba6:	d004      	beq.n	8006bb2 <UART_SetConfig+0x7a>
 8006ba8:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 8006bac:	4893      	ldr	r0, [pc, #588]	; (8006dfc <UART_SetConfig+0x2c4>)
 8006bae:	f7fa fff6 	bl	8001b9e <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <UART_SetConfig+0x96>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bc2:	d004      	beq.n	8006bce <UART_SetConfig+0x96>
 8006bc4:	f640 21c1 	movw	r1, #2753	; 0xac1
 8006bc8:	488c      	ldr	r0, [pc, #560]	; (8006dfc <UART_SetConfig+0x2c4>)
 8006bca:	f7fa ffe8 	bl	8001b9e <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00e      	beq.n	8006bf4 <UART_SetConfig+0xbc>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bde:	d009      	beq.n	8006bf4 <UART_SetConfig+0xbc>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006be8:	d004      	beq.n	8006bf4 <UART_SetConfig+0xbc>
 8006bea:	f640 21c3 	movw	r1, #2755	; 0xac3
 8006bee:	4883      	ldr	r0, [pc, #524]	; (8006dfc <UART_SetConfig+0x2c4>)
 8006bf0:	f7fa ffd5 	bl	8001b9e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	f023 030c 	bic.w	r3, r3, #12
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d103      	bne.n	8006c08 <UART_SetConfig+0xd0>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <UART_SetConfig+0xda>
 8006c08:	f640 21c4 	movw	r1, #2756	; 0xac4
 8006c0c:	487b      	ldr	r0, [pc, #492]	; (8006dfc <UART_SetConfig+0x2c4>)
 8006c0e:	f7fa ffc6 	bl	8001b9e <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d013      	beq.n	8006c42 <UART_SetConfig+0x10a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c22:	d00e      	beq.n	8006c42 <UART_SetConfig+0x10a>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c2c:	d009      	beq.n	8006c42 <UART_SetConfig+0x10a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c36:	d004      	beq.n	8006c42 <UART_SetConfig+0x10a>
 8006c38:	f640 21c5 	movw	r1, #2757	; 0xac5
 8006c3c:	486f      	ldr	r0, [pc, #444]	; (8006dfc <UART_SetConfig+0x2c4>)
 8006c3e:	f7fa ffae 	bl	8001b9e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d009      	beq.n	8006c5e <UART_SetConfig+0x126>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c52:	d004      	beq.n	8006c5e <UART_SetConfig+0x126>
 8006c54:	f640 21c6 	movw	r1, #2758	; 0xac6
 8006c58:	4868      	ldr	r0, [pc, #416]	; (8006dfc <UART_SetConfig+0x2c4>)
 8006c5a:	f7fa ffa0 	bl	8001b9e <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	689a      	ldr	r2, [r3, #8]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	431a      	orrs	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	4b60      	ldr	r3, [pc, #384]	; (8006e00 <UART_SetConfig+0x2c8>)
 8006c7e:	4013      	ands	r3, r2
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6812      	ldr	r2, [r2, #0]
 8006c84:	6939      	ldr	r1, [r7, #16]
 8006c86:	430b      	orrs	r3, r1
 8006c88:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a4e      	ldr	r2, [pc, #312]	; (8006e04 <UART_SetConfig+0x2cc>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d122      	bne.n	8006d14 <UART_SetConfig+0x1dc>
 8006cce:	4b4e      	ldr	r3, [pc, #312]	; (8006e08 <UART_SetConfig+0x2d0>)
 8006cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd4:	f003 0303 	and.w	r3, r3, #3
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d817      	bhi.n	8006d0c <UART_SetConfig+0x1d4>
 8006cdc:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <UART_SetConfig+0x1ac>)
 8006cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce2:	bf00      	nop
 8006ce4:	08006cf5 	.word	0x08006cf5
 8006ce8:	08006d01 	.word	0x08006d01
 8006cec:	08006cfb 	.word	0x08006cfb
 8006cf0:	08006d07 	.word	0x08006d07
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	77fb      	strb	r3, [r7, #31]
 8006cf8:	e14d      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	77fb      	strb	r3, [r7, #31]
 8006cfe:	e14a      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006d00:	2304      	movs	r3, #4
 8006d02:	77fb      	strb	r3, [r7, #31]
 8006d04:	e147      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006d06:	2308      	movs	r3, #8
 8006d08:	77fb      	strb	r3, [r7, #31]
 8006d0a:	e144      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006d0c:	2310      	movs	r3, #16
 8006d0e:	77fb      	strb	r3, [r7, #31]
 8006d10:	bf00      	nop
 8006d12:	e140      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a3c      	ldr	r2, [pc, #240]	; (8006e0c <UART_SetConfig+0x2d4>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d134      	bne.n	8006d88 <UART_SetConfig+0x250>
 8006d1e:	4b3a      	ldr	r3, [pc, #232]	; (8006e08 <UART_SetConfig+0x2d0>)
 8006d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d24:	f003 030c 	and.w	r3, r3, #12
 8006d28:	2b0c      	cmp	r3, #12
 8006d2a:	d829      	bhi.n	8006d80 <UART_SetConfig+0x248>
 8006d2c:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <UART_SetConfig+0x1fc>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d69 	.word	0x08006d69
 8006d38:	08006d81 	.word	0x08006d81
 8006d3c:	08006d81 	.word	0x08006d81
 8006d40:	08006d81 	.word	0x08006d81
 8006d44:	08006d75 	.word	0x08006d75
 8006d48:	08006d81 	.word	0x08006d81
 8006d4c:	08006d81 	.word	0x08006d81
 8006d50:	08006d81 	.word	0x08006d81
 8006d54:	08006d6f 	.word	0x08006d6f
 8006d58:	08006d81 	.word	0x08006d81
 8006d5c:	08006d81 	.word	0x08006d81
 8006d60:	08006d81 	.word	0x08006d81
 8006d64:	08006d7b 	.word	0x08006d7b
 8006d68:	2300      	movs	r3, #0
 8006d6a:	77fb      	strb	r3, [r7, #31]
 8006d6c:	e113      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	77fb      	strb	r3, [r7, #31]
 8006d72:	e110      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006d74:	2304      	movs	r3, #4
 8006d76:	77fb      	strb	r3, [r7, #31]
 8006d78:	e10d      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006d7a:	2308      	movs	r3, #8
 8006d7c:	77fb      	strb	r3, [r7, #31]
 8006d7e:	e10a      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006d80:	2310      	movs	r3, #16
 8006d82:	77fb      	strb	r3, [r7, #31]
 8006d84:	bf00      	nop
 8006d86:	e106      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a20      	ldr	r2, [pc, #128]	; (8006e10 <UART_SetConfig+0x2d8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d120      	bne.n	8006dd4 <UART_SetConfig+0x29c>
 8006d92:	4b1d      	ldr	r3, [pc, #116]	; (8006e08 <UART_SetConfig+0x2d0>)
 8006d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d9c:	2b10      	cmp	r3, #16
 8006d9e:	d00f      	beq.n	8006dc0 <UART_SetConfig+0x288>
 8006da0:	2b10      	cmp	r3, #16
 8006da2:	d802      	bhi.n	8006daa <UART_SetConfig+0x272>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d005      	beq.n	8006db4 <UART_SetConfig+0x27c>
 8006da8:	e010      	b.n	8006dcc <UART_SetConfig+0x294>
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	d005      	beq.n	8006dba <UART_SetConfig+0x282>
 8006dae:	2b30      	cmp	r3, #48	; 0x30
 8006db0:	d009      	beq.n	8006dc6 <UART_SetConfig+0x28e>
 8006db2:	e00b      	b.n	8006dcc <UART_SetConfig+0x294>
 8006db4:	2300      	movs	r3, #0
 8006db6:	77fb      	strb	r3, [r7, #31]
 8006db8:	e0ed      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	77fb      	strb	r3, [r7, #31]
 8006dbe:	e0ea      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006dc0:	2304      	movs	r3, #4
 8006dc2:	77fb      	strb	r3, [r7, #31]
 8006dc4:	e0e7      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006dc6:	2308      	movs	r3, #8
 8006dc8:	77fb      	strb	r3, [r7, #31]
 8006dca:	e0e4      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006dcc:	2310      	movs	r3, #16
 8006dce:	77fb      	strb	r3, [r7, #31]
 8006dd0:	bf00      	nop
 8006dd2:	e0e0      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a0e      	ldr	r2, [pc, #56]	; (8006e14 <UART_SetConfig+0x2dc>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d131      	bne.n	8006e42 <UART_SetConfig+0x30a>
 8006dde:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <UART_SetConfig+0x2d0>)
 8006de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006de8:	2b40      	cmp	r3, #64	; 0x40
 8006dea:	d020      	beq.n	8006e2e <UART_SetConfig+0x2f6>
 8006dec:	2b40      	cmp	r3, #64	; 0x40
 8006dee:	d813      	bhi.n	8006e18 <UART_SetConfig+0x2e0>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d016      	beq.n	8006e22 <UART_SetConfig+0x2ea>
 8006df4:	e021      	b.n	8006e3a <UART_SetConfig+0x302>
 8006df6:	bf00      	nop
 8006df8:	019bfcc0 	.word	0x019bfcc0
 8006dfc:	080080c0 	.word	0x080080c0
 8006e00:	efff69f3 	.word	0xefff69f3
 8006e04:	40011000 	.word	0x40011000
 8006e08:	40023800 	.word	0x40023800
 8006e0c:	40004400 	.word	0x40004400
 8006e10:	40004800 	.word	0x40004800
 8006e14:	40004c00 	.word	0x40004c00
 8006e18:	2b80      	cmp	r3, #128	; 0x80
 8006e1a:	d005      	beq.n	8006e28 <UART_SetConfig+0x2f0>
 8006e1c:	2bc0      	cmp	r3, #192	; 0xc0
 8006e1e:	d009      	beq.n	8006e34 <UART_SetConfig+0x2fc>
 8006e20:	e00b      	b.n	8006e3a <UART_SetConfig+0x302>
 8006e22:	2300      	movs	r3, #0
 8006e24:	77fb      	strb	r3, [r7, #31]
 8006e26:	e0b6      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	77fb      	strb	r3, [r7, #31]
 8006e2c:	e0b3      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006e2e:	2304      	movs	r3, #4
 8006e30:	77fb      	strb	r3, [r7, #31]
 8006e32:	e0b0      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006e34:	2308      	movs	r3, #8
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e0ad      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006e3a:	2310      	movs	r3, #16
 8006e3c:	77fb      	strb	r3, [r7, #31]
 8006e3e:	bf00      	nop
 8006e40:	e0a9      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4aaa      	ldr	r2, [pc, #680]	; (80070f0 <UART_SetConfig+0x5b8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d124      	bne.n	8006e96 <UART_SetConfig+0x35e>
 8006e4c:	4ba9      	ldr	r3, [pc, #676]	; (80070f4 <UART_SetConfig+0x5bc>)
 8006e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e5a:	d012      	beq.n	8006e82 <UART_SetConfig+0x34a>
 8006e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e60:	d802      	bhi.n	8006e68 <UART_SetConfig+0x330>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d007      	beq.n	8006e76 <UART_SetConfig+0x33e>
 8006e66:	e012      	b.n	8006e8e <UART_SetConfig+0x356>
 8006e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e6c:	d006      	beq.n	8006e7c <UART_SetConfig+0x344>
 8006e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e72:	d009      	beq.n	8006e88 <UART_SetConfig+0x350>
 8006e74:	e00b      	b.n	8006e8e <UART_SetConfig+0x356>
 8006e76:	2300      	movs	r3, #0
 8006e78:	77fb      	strb	r3, [r7, #31]
 8006e7a:	e08c      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e089      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006e82:	2304      	movs	r3, #4
 8006e84:	77fb      	strb	r3, [r7, #31]
 8006e86:	e086      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006e88:	2308      	movs	r3, #8
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e083      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006e8e:	2310      	movs	r3, #16
 8006e90:	77fb      	strb	r3, [r7, #31]
 8006e92:	bf00      	nop
 8006e94:	e07f      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a97      	ldr	r2, [pc, #604]	; (80070f8 <UART_SetConfig+0x5c0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d124      	bne.n	8006eea <UART_SetConfig+0x3b2>
 8006ea0:	4b94      	ldr	r3, [pc, #592]	; (80070f4 <UART_SetConfig+0x5bc>)
 8006ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eae:	d012      	beq.n	8006ed6 <UART_SetConfig+0x39e>
 8006eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb4:	d802      	bhi.n	8006ebc <UART_SetConfig+0x384>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d007      	beq.n	8006eca <UART_SetConfig+0x392>
 8006eba:	e012      	b.n	8006ee2 <UART_SetConfig+0x3aa>
 8006ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ec0:	d006      	beq.n	8006ed0 <UART_SetConfig+0x398>
 8006ec2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ec6:	d009      	beq.n	8006edc <UART_SetConfig+0x3a4>
 8006ec8:	e00b      	b.n	8006ee2 <UART_SetConfig+0x3aa>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	77fb      	strb	r3, [r7, #31]
 8006ece:	e062      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	77fb      	strb	r3, [r7, #31]
 8006ed4:	e05f      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	77fb      	strb	r3, [r7, #31]
 8006eda:	e05c      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006edc:	2308      	movs	r3, #8
 8006ede:	77fb      	strb	r3, [r7, #31]
 8006ee0:	e059      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006ee2:	2310      	movs	r3, #16
 8006ee4:	77fb      	strb	r3, [r7, #31]
 8006ee6:	bf00      	nop
 8006ee8:	e055      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a83      	ldr	r2, [pc, #524]	; (80070fc <UART_SetConfig+0x5c4>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d124      	bne.n	8006f3e <UART_SetConfig+0x406>
 8006ef4:	4b7f      	ldr	r3, [pc, #508]	; (80070f4 <UART_SetConfig+0x5bc>)
 8006ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f02:	d012      	beq.n	8006f2a <UART_SetConfig+0x3f2>
 8006f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f08:	d802      	bhi.n	8006f10 <UART_SetConfig+0x3d8>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d007      	beq.n	8006f1e <UART_SetConfig+0x3e6>
 8006f0e:	e012      	b.n	8006f36 <UART_SetConfig+0x3fe>
 8006f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f14:	d006      	beq.n	8006f24 <UART_SetConfig+0x3ec>
 8006f16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f1a:	d009      	beq.n	8006f30 <UART_SetConfig+0x3f8>
 8006f1c:	e00b      	b.n	8006f36 <UART_SetConfig+0x3fe>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	77fb      	strb	r3, [r7, #31]
 8006f22:	e038      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006f24:	2302      	movs	r3, #2
 8006f26:	77fb      	strb	r3, [r7, #31]
 8006f28:	e035      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006f2a:	2304      	movs	r3, #4
 8006f2c:	77fb      	strb	r3, [r7, #31]
 8006f2e:	e032      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006f30:	2308      	movs	r3, #8
 8006f32:	77fb      	strb	r3, [r7, #31]
 8006f34:	e02f      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006f36:	2310      	movs	r3, #16
 8006f38:	77fb      	strb	r3, [r7, #31]
 8006f3a:	bf00      	nop
 8006f3c:	e02b      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a6f      	ldr	r2, [pc, #444]	; (8007100 <UART_SetConfig+0x5c8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d124      	bne.n	8006f92 <UART_SetConfig+0x45a>
 8006f48:	4b6a      	ldr	r3, [pc, #424]	; (80070f4 <UART_SetConfig+0x5bc>)
 8006f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f56:	d012      	beq.n	8006f7e <UART_SetConfig+0x446>
 8006f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f5c:	d802      	bhi.n	8006f64 <UART_SetConfig+0x42c>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d007      	beq.n	8006f72 <UART_SetConfig+0x43a>
 8006f62:	e012      	b.n	8006f8a <UART_SetConfig+0x452>
 8006f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f68:	d006      	beq.n	8006f78 <UART_SetConfig+0x440>
 8006f6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f6e:	d009      	beq.n	8006f84 <UART_SetConfig+0x44c>
 8006f70:	e00b      	b.n	8006f8a <UART_SetConfig+0x452>
 8006f72:	2300      	movs	r3, #0
 8006f74:	77fb      	strb	r3, [r7, #31]
 8006f76:	e00e      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	77fb      	strb	r3, [r7, #31]
 8006f7c:	e00b      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006f7e:	2304      	movs	r3, #4
 8006f80:	77fb      	strb	r3, [r7, #31]
 8006f82:	e008      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006f84:	2308      	movs	r3, #8
 8006f86:	77fb      	strb	r3, [r7, #31]
 8006f88:	e005      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006f8a:	2310      	movs	r3, #16
 8006f8c:	77fb      	strb	r3, [r7, #31]
 8006f8e:	bf00      	nop
 8006f90:	e001      	b.n	8006f96 <UART_SetConfig+0x45e>
 8006f92:	2310      	movs	r3, #16
 8006f94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f9e:	d17f      	bne.n	80070a0 <UART_SetConfig+0x568>
  {
    switch (clocksource)
 8006fa0:	7ffb      	ldrb	r3, [r7, #31]
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d85c      	bhi.n	8007060 <UART_SetConfig+0x528>
 8006fa6:	a201      	add	r2, pc, #4	; (adr r2, 8006fac <UART_SetConfig+0x474>)
 8006fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fac:	08006fd1 	.word	0x08006fd1
 8006fb0:	08006ff1 	.word	0x08006ff1
 8006fb4:	08007011 	.word	0x08007011
 8006fb8:	08007061 	.word	0x08007061
 8006fbc:	08007029 	.word	0x08007029
 8006fc0:	08007061 	.word	0x08007061
 8006fc4:	08007061 	.word	0x08007061
 8006fc8:	08007061 	.word	0x08007061
 8006fcc:	08007049 	.word	0x08007049
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd0:	f7fd f8a4 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 8006fd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	005a      	lsls	r2, r3, #1
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	085b      	lsrs	r3, r3, #1
 8006fe0:	441a      	add	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	61bb      	str	r3, [r7, #24]
        break;
 8006fee:	e03a      	b.n	8007066 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ff0:	f7fd f8a8 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 8006ff4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	005a      	lsls	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	085b      	lsrs	r3, r3, #1
 8007000:	441a      	add	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	fbb2 f3f3 	udiv	r3, r2, r3
 800700a:	b29b      	uxth	r3, r3
 800700c:	61bb      	str	r3, [r7, #24]
        break;
 800700e:	e02a      	b.n	8007066 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	085a      	lsrs	r2, r3, #1
 8007016:	4b3b      	ldr	r3, [pc, #236]	; (8007104 <UART_SetConfig+0x5cc>)
 8007018:	4413      	add	r3, r2
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6852      	ldr	r2, [r2, #4]
 800701e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007022:	b29b      	uxth	r3, r3
 8007024:	61bb      	str	r3, [r7, #24]
        break;
 8007026:	e01e      	b.n	8007066 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007028:	f7fc ffba 	bl	8003fa0 <HAL_RCC_GetSysClockFreq>
 800702c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	005a      	lsls	r2, r3, #1
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	085b      	lsrs	r3, r3, #1
 8007038:	441a      	add	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007042:	b29b      	uxth	r3, r3
 8007044:	61bb      	str	r3, [r7, #24]
        break;
 8007046:	e00e      	b.n	8007066 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	085b      	lsrs	r3, r3, #1
 800704e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	fbb2 f3f3 	udiv	r3, r2, r3
 800705a:	b29b      	uxth	r3, r3
 800705c:	61bb      	str	r3, [r7, #24]
        break;
 800705e:	e002      	b.n	8007066 <UART_SetConfig+0x52e>
      default:
        ret = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	75fb      	strb	r3, [r7, #23]
        break;
 8007064:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b0f      	cmp	r3, #15
 800706a:	d916      	bls.n	800709a <UART_SetConfig+0x562>
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007072:	d212      	bcs.n	800709a <UART_SetConfig+0x562>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	b29b      	uxth	r3, r3
 8007078:	f023 030f 	bic.w	r3, r3, #15
 800707c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	085b      	lsrs	r3, r3, #1
 8007082:	b29b      	uxth	r3, r3
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	b29a      	uxth	r2, r3
 800708a:	897b      	ldrh	r3, [r7, #10]
 800708c:	4313      	orrs	r3, r2
 800708e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	897a      	ldrh	r2, [r7, #10]
 8007096:	60da      	str	r2, [r3, #12]
 8007098:	e07d      	b.n	8007196 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	75fb      	strb	r3, [r7, #23]
 800709e:	e07a      	b.n	8007196 <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 80070a0:	7ffb      	ldrb	r3, [r7, #31]
 80070a2:	2b08      	cmp	r3, #8
 80070a4:	d866      	bhi.n	8007174 <UART_SetConfig+0x63c>
 80070a6:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <UART_SetConfig+0x574>)
 80070a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ac:	080070d1 	.word	0x080070d1
 80070b0:	08007109 	.word	0x08007109
 80070b4:	08007127 	.word	0x08007127
 80070b8:	08007175 	.word	0x08007175
 80070bc:	0800713f 	.word	0x0800713f
 80070c0:	08007175 	.word	0x08007175
 80070c4:	08007175 	.word	0x08007175
 80070c8:	08007175 	.word	0x08007175
 80070cc:	0800715d 	.word	0x0800715d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d0:	f7fd f824 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 80070d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	085a      	lsrs	r2, r3, #1
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	441a      	add	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	61bb      	str	r3, [r7, #24]
        break;
 80070ec:	e045      	b.n	800717a <UART_SetConfig+0x642>
 80070ee:	bf00      	nop
 80070f0:	40005000 	.word	0x40005000
 80070f4:	40023800 	.word	0x40023800
 80070f8:	40011400 	.word	0x40011400
 80070fc:	40007800 	.word	0x40007800
 8007100:	40007c00 	.word	0x40007c00
 8007104:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007108:	f7fd f81c 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 800710c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	085a      	lsrs	r2, r3, #1
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	441a      	add	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007120:	b29b      	uxth	r3, r3
 8007122:	61bb      	str	r3, [r7, #24]
        break;
 8007124:	e029      	b.n	800717a <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	085a      	lsrs	r2, r3, #1
 800712c:	4b1f      	ldr	r3, [pc, #124]	; (80071ac <UART_SetConfig+0x674>)
 800712e:	4413      	add	r3, r2
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	6852      	ldr	r2, [r2, #4]
 8007134:	fbb3 f3f2 	udiv	r3, r3, r2
 8007138:	b29b      	uxth	r3, r3
 800713a:	61bb      	str	r3, [r7, #24]
        break;
 800713c:	e01d      	b.n	800717a <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800713e:	f7fc ff2f 	bl	8003fa0 <HAL_RCC_GetSysClockFreq>
 8007142:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	085a      	lsrs	r2, r3, #1
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	441a      	add	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	fbb2 f3f3 	udiv	r3, r2, r3
 8007156:	b29b      	uxth	r3, r3
 8007158:	61bb      	str	r3, [r7, #24]
        break;
 800715a:	e00e      	b.n	800717a <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	085b      	lsrs	r3, r3, #1
 8007162:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	fbb2 f3f3 	udiv	r3, r2, r3
 800716e:	b29b      	uxth	r3, r3
 8007170:	61bb      	str	r3, [r7, #24]
        break;
 8007172:	e002      	b.n	800717a <UART_SetConfig+0x642>
      default:
        ret = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	75fb      	strb	r3, [r7, #23]
        break;
 8007178:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	2b0f      	cmp	r3, #15
 800717e:	d908      	bls.n	8007192 <UART_SetConfig+0x65a>
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007186:	d204      	bcs.n	8007192 <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	60da      	str	r2, [r3, #12]
 8007190:	e001      	b.n	8007196 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3720      	adds	r7, #32
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	00f42400 	.word	0x00f42400

080071b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	2bff      	cmp	r3, #255	; 0xff
 80071be:	d904      	bls.n	80071ca <UART_AdvFeatureConfig+0x1a>
 80071c0:	f640 3143 	movw	r1, #2883	; 0xb43
 80071c4:	489f      	ldr	r0, [pc, #636]	; (8007444 <UART_AdvFeatureConfig+0x294>)
 80071c6:	f7fa fcea 	bl	8001b9e <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d018      	beq.n	8007208 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d009      	beq.n	80071f2 <UART_AdvFeatureConfig+0x42>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071e6:	d004      	beq.n	80071f2 <UART_AdvFeatureConfig+0x42>
 80071e8:	f640 3148 	movw	r1, #2888	; 0xb48
 80071ec:	4895      	ldr	r0, [pc, #596]	; (8007444 <UART_AdvFeatureConfig+0x294>)
 80071ee:	f7fa fcd6 	bl	8001b9e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d018      	beq.n	8007246 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	2b00      	cmp	r3, #0
 800721a:	d009      	beq.n	8007230 <UART_AdvFeatureConfig+0x80>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007224:	d004      	beq.n	8007230 <UART_AdvFeatureConfig+0x80>
 8007226:	f640 314f 	movw	r1, #2895	; 0xb4f
 800722a:	4886      	ldr	r0, [pc, #536]	; (8007444 <UART_AdvFeatureConfig+0x294>)
 800722c:	f7fa fcb7 	bl	8001b9e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	f003 0304 	and.w	r3, r3, #4
 800724e:	2b00      	cmp	r3, #0
 8007250:	d018      	beq.n	8007284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007256:	2b00      	cmp	r3, #0
 8007258:	d009      	beq.n	800726e <UART_AdvFeatureConfig+0xbe>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007262:	d004      	beq.n	800726e <UART_AdvFeatureConfig+0xbe>
 8007264:	f640 3156 	movw	r1, #2902	; 0xb56
 8007268:	4876      	ldr	r0, [pc, #472]	; (8007444 <UART_AdvFeatureConfig+0x294>)
 800726a:	f7fa fc98 	bl	8001b9e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b00      	cmp	r3, #0
 800728e:	d018      	beq.n	80072c2 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007294:	2b00      	cmp	r3, #0
 8007296:	d009      	beq.n	80072ac <UART_AdvFeatureConfig+0xfc>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a0:	d004      	beq.n	80072ac <UART_AdvFeatureConfig+0xfc>
 80072a2:	f640 315d 	movw	r1, #2909	; 0xb5d
 80072a6:	4867      	ldr	r0, [pc, #412]	; (8007444 <UART_AdvFeatureConfig+0x294>)
 80072a8:	f7fa fc79 	bl	8001b9e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	f003 0310 	and.w	r3, r3, #16
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d018      	beq.n	8007300 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d009      	beq.n	80072ea <UART_AdvFeatureConfig+0x13a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072de:	d004      	beq.n	80072ea <UART_AdvFeatureConfig+0x13a>
 80072e0:	f640 3164 	movw	r1, #2916	; 0xb64
 80072e4:	4857      	ldr	r0, [pc, #348]	; (8007444 <UART_AdvFeatureConfig+0x294>)
 80072e6:	f7fa fc5a 	bl	8001b9e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	f003 0320 	and.w	r3, r3, #32
 8007308:	2b00      	cmp	r3, #0
 800730a:	d018      	beq.n	800733e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007310:	2b00      	cmp	r3, #0
 8007312:	d009      	beq.n	8007328 <UART_AdvFeatureConfig+0x178>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800731c:	d004      	beq.n	8007328 <UART_AdvFeatureConfig+0x178>
 800731e:	f640 316b 	movw	r1, #2923	; 0xb6b
 8007322:	4848      	ldr	r0, [pc, #288]	; (8007444 <UART_AdvFeatureConfig+0x294>)
 8007324:	f7fa fc3b 	bl	8001b9e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007346:	2b00      	cmp	r3, #0
 8007348:	d059      	beq.n	80073fe <UART_AdvFeatureConfig+0x24e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a3e      	ldr	r2, [pc, #248]	; (8007448 <UART_AdvFeatureConfig+0x298>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d013      	beq.n	800737c <UART_AdvFeatureConfig+0x1cc>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a3c      	ldr	r2, [pc, #240]	; (800744c <UART_AdvFeatureConfig+0x29c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00e      	beq.n	800737c <UART_AdvFeatureConfig+0x1cc>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a3b      	ldr	r2, [pc, #236]	; (8007450 <UART_AdvFeatureConfig+0x2a0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d009      	beq.n	800737c <UART_AdvFeatureConfig+0x1cc>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a39      	ldr	r2, [pc, #228]	; (8007454 <UART_AdvFeatureConfig+0x2a4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d004      	beq.n	800737c <UART_AdvFeatureConfig+0x1cc>
 8007372:	f640 3172 	movw	r1, #2930	; 0xb72
 8007376:	4833      	ldr	r0, [pc, #204]	; (8007444 <UART_AdvFeatureConfig+0x294>)
 8007378:	f7fa fc11 	bl	8001b9e <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	2b00      	cmp	r3, #0
 8007382:	d009      	beq.n	8007398 <UART_AdvFeatureConfig+0x1e8>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800738c:	d004      	beq.n	8007398 <UART_AdvFeatureConfig+0x1e8>
 800738e:	f640 3173 	movw	r1, #2931	; 0xb73
 8007392:	482c      	ldr	r0, [pc, #176]	; (8007444 <UART_AdvFeatureConfig+0x294>)
 8007394:	f7fa fc03 	bl	8001b9e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073b6:	d122      	bne.n	80073fe <UART_AdvFeatureConfig+0x24e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d013      	beq.n	80073e8 <UART_AdvFeatureConfig+0x238>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073c8:	d00e      	beq.n	80073e8 <UART_AdvFeatureConfig+0x238>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073d2:	d009      	beq.n	80073e8 <UART_AdvFeatureConfig+0x238>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80073dc:	d004      	beq.n	80073e8 <UART_AdvFeatureConfig+0x238>
 80073de:	f640 3178 	movw	r1, #2936	; 0xb78
 80073e2:	4818      	ldr	r0, [pc, #96]	; (8007444 <UART_AdvFeatureConfig+0x294>)
 80073e4:	f7fa fbdb 	bl	8001b9e <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007406:	2b00      	cmp	r3, #0
 8007408:	d018      	beq.n	800743c <UART_AdvFeatureConfig+0x28c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800740e:	2b00      	cmp	r3, #0
 8007410:	d009      	beq.n	8007426 <UART_AdvFeatureConfig+0x276>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007416:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800741a:	d004      	beq.n	8007426 <UART_AdvFeatureConfig+0x276>
 800741c:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 8007420:	4808      	ldr	r0, [pc, #32]	; (8007444 <UART_AdvFeatureConfig+0x294>)
 8007422:	f7fa fbbc 	bl	8001b9e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	605a      	str	r2, [r3, #4]
  }
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	080080c0 	.word	0x080080c0
 8007448:	40011000 	.word	0x40011000
 800744c:	40004400 	.word	0x40004400
 8007450:	40004800 	.word	0x40004800
 8007454:	40011400 	.word	0x40011400

08007458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af02      	add	r7, sp, #8
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007466:	f7fb f933 	bl	80026d0 <HAL_GetTick>
 800746a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b08      	cmp	r3, #8
 8007478:	d10e      	bne.n	8007498 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800747a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f82a 	bl	80074e2 <UART_WaitOnFlagUntilTimeout>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e020      	b.n	80074da <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d10e      	bne.n	80074c4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f814 	bl	80074e2 <UART_WaitOnFlagUntilTimeout>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e00a      	b.n	80074da <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2220      	movs	r2, #32
 80074c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2220      	movs	r2, #32
 80074ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	603b      	str	r3, [r7, #0]
 80074ee:	4613      	mov	r3, r2
 80074f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074f2:	e05d      	b.n	80075b0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fa:	d059      	beq.n	80075b0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074fc:	f7fb f8e8 	bl	80026d0 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	429a      	cmp	r2, r3
 800750a:	d302      	bcc.n	8007512 <UART_WaitOnFlagUntilTimeout+0x30>
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d11b      	bne.n	800754a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007520:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0201 	bic.w	r2, r2, #1
 8007530:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2220      	movs	r2, #32
 8007536:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2220      	movs	r2, #32
 800753c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e042      	b.n	80075d0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	d02b      	beq.n	80075b0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007566:	d123      	bne.n	80075b0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007570:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007580:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0201 	bic.w	r2, r2, #1
 8007590:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2220      	movs	r2, #32
 8007596:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2220      	movs	r2, #32
 800759c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2220      	movs	r2, #32
 80075a2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e00f      	b.n	80075d0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	69da      	ldr	r2, [r3, #28]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	4013      	ands	r3, r2
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	429a      	cmp	r2, r3
 80075be:	bf0c      	ite	eq
 80075c0:	2301      	moveq	r3, #1
 80075c2:	2300      	movne	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	461a      	mov	r2, r3
 80075c8:	79fb      	ldrb	r3, [r7, #7]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d092      	beq.n	80074f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075ee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0201 	bic.w	r2, r2, #1
 80075fe:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2220      	movs	r2, #32
 8007604:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f7ff fa6a 	bl	8006b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800763c:	bf00      	nop
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800765a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2220      	movs	r2, #32
 8007660:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff fa47 	bl	8006afc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <__errno>:
 8007678:	4b01      	ldr	r3, [pc, #4]	; (8007680 <__errno+0x8>)
 800767a:	6818      	ldr	r0, [r3, #0]
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	2000000c 	.word	0x2000000c

08007684 <__libc_init_array>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	4e0d      	ldr	r6, [pc, #52]	; (80076bc <__libc_init_array+0x38>)
 8007688:	4c0d      	ldr	r4, [pc, #52]	; (80076c0 <__libc_init_array+0x3c>)
 800768a:	1ba4      	subs	r4, r4, r6
 800768c:	10a4      	asrs	r4, r4, #2
 800768e:	2500      	movs	r5, #0
 8007690:	42a5      	cmp	r5, r4
 8007692:	d109      	bne.n	80076a8 <__libc_init_array+0x24>
 8007694:	4e0b      	ldr	r6, [pc, #44]	; (80076c4 <__libc_init_array+0x40>)
 8007696:	4c0c      	ldr	r4, [pc, #48]	; (80076c8 <__libc_init_array+0x44>)
 8007698:	f000 fc26 	bl	8007ee8 <_init>
 800769c:	1ba4      	subs	r4, r4, r6
 800769e:	10a4      	asrs	r4, r4, #2
 80076a0:	2500      	movs	r5, #0
 80076a2:	42a5      	cmp	r5, r4
 80076a4:	d105      	bne.n	80076b2 <__libc_init_array+0x2e>
 80076a6:	bd70      	pop	{r4, r5, r6, pc}
 80076a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076ac:	4798      	blx	r3
 80076ae:	3501      	adds	r5, #1
 80076b0:	e7ee      	b.n	8007690 <__libc_init_array+0xc>
 80076b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076b6:	4798      	blx	r3
 80076b8:	3501      	adds	r5, #1
 80076ba:	e7f2      	b.n	80076a2 <__libc_init_array+0x1e>
 80076bc:	08008150 	.word	0x08008150
 80076c0:	08008150 	.word	0x08008150
 80076c4:	08008150 	.word	0x08008150
 80076c8:	08008154 	.word	0x08008154

080076cc <memset>:
 80076cc:	4402      	add	r2, r0
 80076ce:	4603      	mov	r3, r0
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d100      	bne.n	80076d6 <memset+0xa>
 80076d4:	4770      	bx	lr
 80076d6:	f803 1b01 	strb.w	r1, [r3], #1
 80076da:	e7f9      	b.n	80076d0 <memset+0x4>

080076dc <siprintf>:
 80076dc:	b40e      	push	{r1, r2, r3}
 80076de:	b500      	push	{lr}
 80076e0:	b09c      	sub	sp, #112	; 0x70
 80076e2:	ab1d      	add	r3, sp, #116	; 0x74
 80076e4:	9002      	str	r0, [sp, #8]
 80076e6:	9006      	str	r0, [sp, #24]
 80076e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076ec:	4809      	ldr	r0, [pc, #36]	; (8007714 <siprintf+0x38>)
 80076ee:	9107      	str	r1, [sp, #28]
 80076f0:	9104      	str	r1, [sp, #16]
 80076f2:	4909      	ldr	r1, [pc, #36]	; (8007718 <siprintf+0x3c>)
 80076f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076f8:	9105      	str	r1, [sp, #20]
 80076fa:	6800      	ldr	r0, [r0, #0]
 80076fc:	9301      	str	r3, [sp, #4]
 80076fe:	a902      	add	r1, sp, #8
 8007700:	f000 f866 	bl	80077d0 <_svfiprintf_r>
 8007704:	9b02      	ldr	r3, [sp, #8]
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	b01c      	add	sp, #112	; 0x70
 800770c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007710:	b003      	add	sp, #12
 8007712:	4770      	bx	lr
 8007714:	2000000c 	.word	0x2000000c
 8007718:	ffff0208 	.word	0xffff0208

0800771c <__ssputs_r>:
 800771c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007720:	688e      	ldr	r6, [r1, #8]
 8007722:	429e      	cmp	r6, r3
 8007724:	4682      	mov	sl, r0
 8007726:	460c      	mov	r4, r1
 8007728:	4690      	mov	r8, r2
 800772a:	4699      	mov	r9, r3
 800772c:	d837      	bhi.n	800779e <__ssputs_r+0x82>
 800772e:	898a      	ldrh	r2, [r1, #12]
 8007730:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007734:	d031      	beq.n	800779a <__ssputs_r+0x7e>
 8007736:	6825      	ldr	r5, [r4, #0]
 8007738:	6909      	ldr	r1, [r1, #16]
 800773a:	1a6f      	subs	r7, r5, r1
 800773c:	6965      	ldr	r5, [r4, #20]
 800773e:	2302      	movs	r3, #2
 8007740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007744:	fb95 f5f3 	sdiv	r5, r5, r3
 8007748:	f109 0301 	add.w	r3, r9, #1
 800774c:	443b      	add	r3, r7
 800774e:	429d      	cmp	r5, r3
 8007750:	bf38      	it	cc
 8007752:	461d      	movcc	r5, r3
 8007754:	0553      	lsls	r3, r2, #21
 8007756:	d530      	bpl.n	80077ba <__ssputs_r+0x9e>
 8007758:	4629      	mov	r1, r5
 800775a:	f000 fb2b 	bl	8007db4 <_malloc_r>
 800775e:	4606      	mov	r6, r0
 8007760:	b950      	cbnz	r0, 8007778 <__ssputs_r+0x5c>
 8007762:	230c      	movs	r3, #12
 8007764:	f8ca 3000 	str.w	r3, [sl]
 8007768:	89a3      	ldrh	r3, [r4, #12]
 800776a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800776e:	81a3      	strh	r3, [r4, #12]
 8007770:	f04f 30ff 	mov.w	r0, #4294967295
 8007774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007778:	463a      	mov	r2, r7
 800777a:	6921      	ldr	r1, [r4, #16]
 800777c:	f000 faa8 	bl	8007cd0 <memcpy>
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800778a:	81a3      	strh	r3, [r4, #12]
 800778c:	6126      	str	r6, [r4, #16]
 800778e:	6165      	str	r5, [r4, #20]
 8007790:	443e      	add	r6, r7
 8007792:	1bed      	subs	r5, r5, r7
 8007794:	6026      	str	r6, [r4, #0]
 8007796:	60a5      	str	r5, [r4, #8]
 8007798:	464e      	mov	r6, r9
 800779a:	454e      	cmp	r6, r9
 800779c:	d900      	bls.n	80077a0 <__ssputs_r+0x84>
 800779e:	464e      	mov	r6, r9
 80077a0:	4632      	mov	r2, r6
 80077a2:	4641      	mov	r1, r8
 80077a4:	6820      	ldr	r0, [r4, #0]
 80077a6:	f000 fa9e 	bl	8007ce6 <memmove>
 80077aa:	68a3      	ldr	r3, [r4, #8]
 80077ac:	1b9b      	subs	r3, r3, r6
 80077ae:	60a3      	str	r3, [r4, #8]
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	441e      	add	r6, r3
 80077b4:	6026      	str	r6, [r4, #0]
 80077b6:	2000      	movs	r0, #0
 80077b8:	e7dc      	b.n	8007774 <__ssputs_r+0x58>
 80077ba:	462a      	mov	r2, r5
 80077bc:	f000 fb54 	bl	8007e68 <_realloc_r>
 80077c0:	4606      	mov	r6, r0
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d1e2      	bne.n	800778c <__ssputs_r+0x70>
 80077c6:	6921      	ldr	r1, [r4, #16]
 80077c8:	4650      	mov	r0, sl
 80077ca:	f000 faa5 	bl	8007d18 <_free_r>
 80077ce:	e7c8      	b.n	8007762 <__ssputs_r+0x46>

080077d0 <_svfiprintf_r>:
 80077d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	461d      	mov	r5, r3
 80077d6:	898b      	ldrh	r3, [r1, #12]
 80077d8:	061f      	lsls	r7, r3, #24
 80077da:	b09d      	sub	sp, #116	; 0x74
 80077dc:	4680      	mov	r8, r0
 80077de:	460c      	mov	r4, r1
 80077e0:	4616      	mov	r6, r2
 80077e2:	d50f      	bpl.n	8007804 <_svfiprintf_r+0x34>
 80077e4:	690b      	ldr	r3, [r1, #16]
 80077e6:	b96b      	cbnz	r3, 8007804 <_svfiprintf_r+0x34>
 80077e8:	2140      	movs	r1, #64	; 0x40
 80077ea:	f000 fae3 	bl	8007db4 <_malloc_r>
 80077ee:	6020      	str	r0, [r4, #0]
 80077f0:	6120      	str	r0, [r4, #16]
 80077f2:	b928      	cbnz	r0, 8007800 <_svfiprintf_r+0x30>
 80077f4:	230c      	movs	r3, #12
 80077f6:	f8c8 3000 	str.w	r3, [r8]
 80077fa:	f04f 30ff 	mov.w	r0, #4294967295
 80077fe:	e0c8      	b.n	8007992 <_svfiprintf_r+0x1c2>
 8007800:	2340      	movs	r3, #64	; 0x40
 8007802:	6163      	str	r3, [r4, #20]
 8007804:	2300      	movs	r3, #0
 8007806:	9309      	str	r3, [sp, #36]	; 0x24
 8007808:	2320      	movs	r3, #32
 800780a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800780e:	2330      	movs	r3, #48	; 0x30
 8007810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007814:	9503      	str	r5, [sp, #12]
 8007816:	f04f 0b01 	mov.w	fp, #1
 800781a:	4637      	mov	r7, r6
 800781c:	463d      	mov	r5, r7
 800781e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007822:	b10b      	cbz	r3, 8007828 <_svfiprintf_r+0x58>
 8007824:	2b25      	cmp	r3, #37	; 0x25
 8007826:	d13e      	bne.n	80078a6 <_svfiprintf_r+0xd6>
 8007828:	ebb7 0a06 	subs.w	sl, r7, r6
 800782c:	d00b      	beq.n	8007846 <_svfiprintf_r+0x76>
 800782e:	4653      	mov	r3, sl
 8007830:	4632      	mov	r2, r6
 8007832:	4621      	mov	r1, r4
 8007834:	4640      	mov	r0, r8
 8007836:	f7ff ff71 	bl	800771c <__ssputs_r>
 800783a:	3001      	adds	r0, #1
 800783c:	f000 80a4 	beq.w	8007988 <_svfiprintf_r+0x1b8>
 8007840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007842:	4453      	add	r3, sl
 8007844:	9309      	str	r3, [sp, #36]	; 0x24
 8007846:	783b      	ldrb	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 809d 	beq.w	8007988 <_svfiprintf_r+0x1b8>
 800784e:	2300      	movs	r3, #0
 8007850:	f04f 32ff 	mov.w	r2, #4294967295
 8007854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007858:	9304      	str	r3, [sp, #16]
 800785a:	9307      	str	r3, [sp, #28]
 800785c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007860:	931a      	str	r3, [sp, #104]	; 0x68
 8007862:	462f      	mov	r7, r5
 8007864:	2205      	movs	r2, #5
 8007866:	f817 1b01 	ldrb.w	r1, [r7], #1
 800786a:	4850      	ldr	r0, [pc, #320]	; (80079ac <_svfiprintf_r+0x1dc>)
 800786c:	f7f8 fcf0 	bl	8000250 <memchr>
 8007870:	9b04      	ldr	r3, [sp, #16]
 8007872:	b9d0      	cbnz	r0, 80078aa <_svfiprintf_r+0xda>
 8007874:	06d9      	lsls	r1, r3, #27
 8007876:	bf44      	itt	mi
 8007878:	2220      	movmi	r2, #32
 800787a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800787e:	071a      	lsls	r2, r3, #28
 8007880:	bf44      	itt	mi
 8007882:	222b      	movmi	r2, #43	; 0x2b
 8007884:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007888:	782a      	ldrb	r2, [r5, #0]
 800788a:	2a2a      	cmp	r2, #42	; 0x2a
 800788c:	d015      	beq.n	80078ba <_svfiprintf_r+0xea>
 800788e:	9a07      	ldr	r2, [sp, #28]
 8007890:	462f      	mov	r7, r5
 8007892:	2000      	movs	r0, #0
 8007894:	250a      	movs	r5, #10
 8007896:	4639      	mov	r1, r7
 8007898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800789c:	3b30      	subs	r3, #48	; 0x30
 800789e:	2b09      	cmp	r3, #9
 80078a0:	d94d      	bls.n	800793e <_svfiprintf_r+0x16e>
 80078a2:	b1b8      	cbz	r0, 80078d4 <_svfiprintf_r+0x104>
 80078a4:	e00f      	b.n	80078c6 <_svfiprintf_r+0xf6>
 80078a6:	462f      	mov	r7, r5
 80078a8:	e7b8      	b.n	800781c <_svfiprintf_r+0x4c>
 80078aa:	4a40      	ldr	r2, [pc, #256]	; (80079ac <_svfiprintf_r+0x1dc>)
 80078ac:	1a80      	subs	r0, r0, r2
 80078ae:	fa0b f000 	lsl.w	r0, fp, r0
 80078b2:	4318      	orrs	r0, r3
 80078b4:	9004      	str	r0, [sp, #16]
 80078b6:	463d      	mov	r5, r7
 80078b8:	e7d3      	b.n	8007862 <_svfiprintf_r+0x92>
 80078ba:	9a03      	ldr	r2, [sp, #12]
 80078bc:	1d11      	adds	r1, r2, #4
 80078be:	6812      	ldr	r2, [r2, #0]
 80078c0:	9103      	str	r1, [sp, #12]
 80078c2:	2a00      	cmp	r2, #0
 80078c4:	db01      	blt.n	80078ca <_svfiprintf_r+0xfa>
 80078c6:	9207      	str	r2, [sp, #28]
 80078c8:	e004      	b.n	80078d4 <_svfiprintf_r+0x104>
 80078ca:	4252      	negs	r2, r2
 80078cc:	f043 0302 	orr.w	r3, r3, #2
 80078d0:	9207      	str	r2, [sp, #28]
 80078d2:	9304      	str	r3, [sp, #16]
 80078d4:	783b      	ldrb	r3, [r7, #0]
 80078d6:	2b2e      	cmp	r3, #46	; 0x2e
 80078d8:	d10c      	bne.n	80078f4 <_svfiprintf_r+0x124>
 80078da:	787b      	ldrb	r3, [r7, #1]
 80078dc:	2b2a      	cmp	r3, #42	; 0x2a
 80078de:	d133      	bne.n	8007948 <_svfiprintf_r+0x178>
 80078e0:	9b03      	ldr	r3, [sp, #12]
 80078e2:	1d1a      	adds	r2, r3, #4
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	9203      	str	r2, [sp, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bfb8      	it	lt
 80078ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80078f0:	3702      	adds	r7, #2
 80078f2:	9305      	str	r3, [sp, #20]
 80078f4:	4d2e      	ldr	r5, [pc, #184]	; (80079b0 <_svfiprintf_r+0x1e0>)
 80078f6:	7839      	ldrb	r1, [r7, #0]
 80078f8:	2203      	movs	r2, #3
 80078fa:	4628      	mov	r0, r5
 80078fc:	f7f8 fca8 	bl	8000250 <memchr>
 8007900:	b138      	cbz	r0, 8007912 <_svfiprintf_r+0x142>
 8007902:	2340      	movs	r3, #64	; 0x40
 8007904:	1b40      	subs	r0, r0, r5
 8007906:	fa03 f000 	lsl.w	r0, r3, r0
 800790a:	9b04      	ldr	r3, [sp, #16]
 800790c:	4303      	orrs	r3, r0
 800790e:	3701      	adds	r7, #1
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	7839      	ldrb	r1, [r7, #0]
 8007914:	4827      	ldr	r0, [pc, #156]	; (80079b4 <_svfiprintf_r+0x1e4>)
 8007916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800791a:	2206      	movs	r2, #6
 800791c:	1c7e      	adds	r6, r7, #1
 800791e:	f7f8 fc97 	bl	8000250 <memchr>
 8007922:	2800      	cmp	r0, #0
 8007924:	d038      	beq.n	8007998 <_svfiprintf_r+0x1c8>
 8007926:	4b24      	ldr	r3, [pc, #144]	; (80079b8 <_svfiprintf_r+0x1e8>)
 8007928:	bb13      	cbnz	r3, 8007970 <_svfiprintf_r+0x1a0>
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	3307      	adds	r3, #7
 800792e:	f023 0307 	bic.w	r3, r3, #7
 8007932:	3308      	adds	r3, #8
 8007934:	9303      	str	r3, [sp, #12]
 8007936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007938:	444b      	add	r3, r9
 800793a:	9309      	str	r3, [sp, #36]	; 0x24
 800793c:	e76d      	b.n	800781a <_svfiprintf_r+0x4a>
 800793e:	fb05 3202 	mla	r2, r5, r2, r3
 8007942:	2001      	movs	r0, #1
 8007944:	460f      	mov	r7, r1
 8007946:	e7a6      	b.n	8007896 <_svfiprintf_r+0xc6>
 8007948:	2300      	movs	r3, #0
 800794a:	3701      	adds	r7, #1
 800794c:	9305      	str	r3, [sp, #20]
 800794e:	4619      	mov	r1, r3
 8007950:	250a      	movs	r5, #10
 8007952:	4638      	mov	r0, r7
 8007954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007958:	3a30      	subs	r2, #48	; 0x30
 800795a:	2a09      	cmp	r2, #9
 800795c:	d903      	bls.n	8007966 <_svfiprintf_r+0x196>
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0c8      	beq.n	80078f4 <_svfiprintf_r+0x124>
 8007962:	9105      	str	r1, [sp, #20]
 8007964:	e7c6      	b.n	80078f4 <_svfiprintf_r+0x124>
 8007966:	fb05 2101 	mla	r1, r5, r1, r2
 800796a:	2301      	movs	r3, #1
 800796c:	4607      	mov	r7, r0
 800796e:	e7f0      	b.n	8007952 <_svfiprintf_r+0x182>
 8007970:	ab03      	add	r3, sp, #12
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	4622      	mov	r2, r4
 8007976:	4b11      	ldr	r3, [pc, #68]	; (80079bc <_svfiprintf_r+0x1ec>)
 8007978:	a904      	add	r1, sp, #16
 800797a:	4640      	mov	r0, r8
 800797c:	f3af 8000 	nop.w
 8007980:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007984:	4681      	mov	r9, r0
 8007986:	d1d6      	bne.n	8007936 <_svfiprintf_r+0x166>
 8007988:	89a3      	ldrh	r3, [r4, #12]
 800798a:	065b      	lsls	r3, r3, #25
 800798c:	f53f af35 	bmi.w	80077fa <_svfiprintf_r+0x2a>
 8007990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007992:	b01d      	add	sp, #116	; 0x74
 8007994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007998:	ab03      	add	r3, sp, #12
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	4622      	mov	r2, r4
 800799e:	4b07      	ldr	r3, [pc, #28]	; (80079bc <_svfiprintf_r+0x1ec>)
 80079a0:	a904      	add	r1, sp, #16
 80079a2:	4640      	mov	r0, r8
 80079a4:	f000 f882 	bl	8007aac <_printf_i>
 80079a8:	e7ea      	b.n	8007980 <_svfiprintf_r+0x1b0>
 80079aa:	bf00      	nop
 80079ac:	08008114 	.word	0x08008114
 80079b0:	0800811a 	.word	0x0800811a
 80079b4:	0800811e 	.word	0x0800811e
 80079b8:	00000000 	.word	0x00000000
 80079bc:	0800771d 	.word	0x0800771d

080079c0 <_printf_common>:
 80079c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c4:	4691      	mov	r9, r2
 80079c6:	461f      	mov	r7, r3
 80079c8:	688a      	ldr	r2, [r1, #8]
 80079ca:	690b      	ldr	r3, [r1, #16]
 80079cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079d0:	4293      	cmp	r3, r2
 80079d2:	bfb8      	it	lt
 80079d4:	4613      	movlt	r3, r2
 80079d6:	f8c9 3000 	str.w	r3, [r9]
 80079da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079de:	4606      	mov	r6, r0
 80079e0:	460c      	mov	r4, r1
 80079e2:	b112      	cbz	r2, 80079ea <_printf_common+0x2a>
 80079e4:	3301      	adds	r3, #1
 80079e6:	f8c9 3000 	str.w	r3, [r9]
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	0699      	lsls	r1, r3, #26
 80079ee:	bf42      	ittt	mi
 80079f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80079f4:	3302      	addmi	r3, #2
 80079f6:	f8c9 3000 	strmi.w	r3, [r9]
 80079fa:	6825      	ldr	r5, [r4, #0]
 80079fc:	f015 0506 	ands.w	r5, r5, #6
 8007a00:	d107      	bne.n	8007a12 <_printf_common+0x52>
 8007a02:	f104 0a19 	add.w	sl, r4, #25
 8007a06:	68e3      	ldr	r3, [r4, #12]
 8007a08:	f8d9 2000 	ldr.w	r2, [r9]
 8007a0c:	1a9b      	subs	r3, r3, r2
 8007a0e:	42ab      	cmp	r3, r5
 8007a10:	dc28      	bgt.n	8007a64 <_printf_common+0xa4>
 8007a12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	3300      	adds	r3, #0
 8007a1a:	bf18      	it	ne
 8007a1c:	2301      	movne	r3, #1
 8007a1e:	0692      	lsls	r2, r2, #26
 8007a20:	d42d      	bmi.n	8007a7e <_printf_common+0xbe>
 8007a22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a26:	4639      	mov	r1, r7
 8007a28:	4630      	mov	r0, r6
 8007a2a:	47c0      	blx	r8
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d020      	beq.n	8007a72 <_printf_common+0xb2>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	68e5      	ldr	r5, [r4, #12]
 8007a34:	f8d9 2000 	ldr.w	r2, [r9]
 8007a38:	f003 0306 	and.w	r3, r3, #6
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	bf08      	it	eq
 8007a40:	1aad      	subeq	r5, r5, r2
 8007a42:	68a3      	ldr	r3, [r4, #8]
 8007a44:	6922      	ldr	r2, [r4, #16]
 8007a46:	bf0c      	ite	eq
 8007a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a4c:	2500      	movne	r5, #0
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	bfc4      	itt	gt
 8007a52:	1a9b      	subgt	r3, r3, r2
 8007a54:	18ed      	addgt	r5, r5, r3
 8007a56:	f04f 0900 	mov.w	r9, #0
 8007a5a:	341a      	adds	r4, #26
 8007a5c:	454d      	cmp	r5, r9
 8007a5e:	d11a      	bne.n	8007a96 <_printf_common+0xd6>
 8007a60:	2000      	movs	r0, #0
 8007a62:	e008      	b.n	8007a76 <_printf_common+0xb6>
 8007a64:	2301      	movs	r3, #1
 8007a66:	4652      	mov	r2, sl
 8007a68:	4639      	mov	r1, r7
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	47c0      	blx	r8
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d103      	bne.n	8007a7a <_printf_common+0xba>
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295
 8007a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7a:	3501      	adds	r5, #1
 8007a7c:	e7c3      	b.n	8007a06 <_printf_common+0x46>
 8007a7e:	18e1      	adds	r1, r4, r3
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	2030      	movs	r0, #48	; 0x30
 8007a84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a88:	4422      	add	r2, r4
 8007a8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a92:	3302      	adds	r3, #2
 8007a94:	e7c5      	b.n	8007a22 <_printf_common+0x62>
 8007a96:	2301      	movs	r3, #1
 8007a98:	4622      	mov	r2, r4
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	47c0      	blx	r8
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d0e6      	beq.n	8007a72 <_printf_common+0xb2>
 8007aa4:	f109 0901 	add.w	r9, r9, #1
 8007aa8:	e7d8      	b.n	8007a5c <_printf_common+0x9c>
	...

08007aac <_printf_i>:
 8007aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ab0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ab4:	460c      	mov	r4, r1
 8007ab6:	7e09      	ldrb	r1, [r1, #24]
 8007ab8:	b085      	sub	sp, #20
 8007aba:	296e      	cmp	r1, #110	; 0x6e
 8007abc:	4617      	mov	r7, r2
 8007abe:	4606      	mov	r6, r0
 8007ac0:	4698      	mov	r8, r3
 8007ac2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ac4:	f000 80b3 	beq.w	8007c2e <_printf_i+0x182>
 8007ac8:	d822      	bhi.n	8007b10 <_printf_i+0x64>
 8007aca:	2963      	cmp	r1, #99	; 0x63
 8007acc:	d036      	beq.n	8007b3c <_printf_i+0x90>
 8007ace:	d80a      	bhi.n	8007ae6 <_printf_i+0x3a>
 8007ad0:	2900      	cmp	r1, #0
 8007ad2:	f000 80b9 	beq.w	8007c48 <_printf_i+0x19c>
 8007ad6:	2958      	cmp	r1, #88	; 0x58
 8007ad8:	f000 8083 	beq.w	8007be2 <_printf_i+0x136>
 8007adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ae0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007ae4:	e032      	b.n	8007b4c <_printf_i+0xa0>
 8007ae6:	2964      	cmp	r1, #100	; 0x64
 8007ae8:	d001      	beq.n	8007aee <_printf_i+0x42>
 8007aea:	2969      	cmp	r1, #105	; 0x69
 8007aec:	d1f6      	bne.n	8007adc <_printf_i+0x30>
 8007aee:	6820      	ldr	r0, [r4, #0]
 8007af0:	6813      	ldr	r3, [r2, #0]
 8007af2:	0605      	lsls	r5, r0, #24
 8007af4:	f103 0104 	add.w	r1, r3, #4
 8007af8:	d52a      	bpl.n	8007b50 <_printf_i+0xa4>
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6011      	str	r1, [r2, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	da03      	bge.n	8007b0a <_printf_i+0x5e>
 8007b02:	222d      	movs	r2, #45	; 0x2d
 8007b04:	425b      	negs	r3, r3
 8007b06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b0a:	486f      	ldr	r0, [pc, #444]	; (8007cc8 <_printf_i+0x21c>)
 8007b0c:	220a      	movs	r2, #10
 8007b0e:	e039      	b.n	8007b84 <_printf_i+0xd8>
 8007b10:	2973      	cmp	r1, #115	; 0x73
 8007b12:	f000 809d 	beq.w	8007c50 <_printf_i+0x1a4>
 8007b16:	d808      	bhi.n	8007b2a <_printf_i+0x7e>
 8007b18:	296f      	cmp	r1, #111	; 0x6f
 8007b1a:	d020      	beq.n	8007b5e <_printf_i+0xb2>
 8007b1c:	2970      	cmp	r1, #112	; 0x70
 8007b1e:	d1dd      	bne.n	8007adc <_printf_i+0x30>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	f043 0320 	orr.w	r3, r3, #32
 8007b26:	6023      	str	r3, [r4, #0]
 8007b28:	e003      	b.n	8007b32 <_printf_i+0x86>
 8007b2a:	2975      	cmp	r1, #117	; 0x75
 8007b2c:	d017      	beq.n	8007b5e <_printf_i+0xb2>
 8007b2e:	2978      	cmp	r1, #120	; 0x78
 8007b30:	d1d4      	bne.n	8007adc <_printf_i+0x30>
 8007b32:	2378      	movs	r3, #120	; 0x78
 8007b34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b38:	4864      	ldr	r0, [pc, #400]	; (8007ccc <_printf_i+0x220>)
 8007b3a:	e055      	b.n	8007be8 <_printf_i+0x13c>
 8007b3c:	6813      	ldr	r3, [r2, #0]
 8007b3e:	1d19      	adds	r1, r3, #4
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6011      	str	r1, [r2, #0]
 8007b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e08c      	b.n	8007c6a <_printf_i+0x1be>
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6011      	str	r1, [r2, #0]
 8007b54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b58:	bf18      	it	ne
 8007b5a:	b21b      	sxthne	r3, r3
 8007b5c:	e7cf      	b.n	8007afe <_printf_i+0x52>
 8007b5e:	6813      	ldr	r3, [r2, #0]
 8007b60:	6825      	ldr	r5, [r4, #0]
 8007b62:	1d18      	adds	r0, r3, #4
 8007b64:	6010      	str	r0, [r2, #0]
 8007b66:	0628      	lsls	r0, r5, #24
 8007b68:	d501      	bpl.n	8007b6e <_printf_i+0xc2>
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	e002      	b.n	8007b74 <_printf_i+0xc8>
 8007b6e:	0668      	lsls	r0, r5, #25
 8007b70:	d5fb      	bpl.n	8007b6a <_printf_i+0xbe>
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	4854      	ldr	r0, [pc, #336]	; (8007cc8 <_printf_i+0x21c>)
 8007b76:	296f      	cmp	r1, #111	; 0x6f
 8007b78:	bf14      	ite	ne
 8007b7a:	220a      	movne	r2, #10
 8007b7c:	2208      	moveq	r2, #8
 8007b7e:	2100      	movs	r1, #0
 8007b80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b84:	6865      	ldr	r5, [r4, #4]
 8007b86:	60a5      	str	r5, [r4, #8]
 8007b88:	2d00      	cmp	r5, #0
 8007b8a:	f2c0 8095 	blt.w	8007cb8 <_printf_i+0x20c>
 8007b8e:	6821      	ldr	r1, [r4, #0]
 8007b90:	f021 0104 	bic.w	r1, r1, #4
 8007b94:	6021      	str	r1, [r4, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d13d      	bne.n	8007c16 <_printf_i+0x16a>
 8007b9a:	2d00      	cmp	r5, #0
 8007b9c:	f040 808e 	bne.w	8007cbc <_printf_i+0x210>
 8007ba0:	4665      	mov	r5, ip
 8007ba2:	2a08      	cmp	r2, #8
 8007ba4:	d10b      	bne.n	8007bbe <_printf_i+0x112>
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	07db      	lsls	r3, r3, #31
 8007baa:	d508      	bpl.n	8007bbe <_printf_i+0x112>
 8007bac:	6923      	ldr	r3, [r4, #16]
 8007bae:	6862      	ldr	r2, [r4, #4]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	bfde      	ittt	le
 8007bb4:	2330      	movle	r3, #48	; 0x30
 8007bb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bbe:	ebac 0305 	sub.w	r3, ip, r5
 8007bc2:	6123      	str	r3, [r4, #16]
 8007bc4:	f8cd 8000 	str.w	r8, [sp]
 8007bc8:	463b      	mov	r3, r7
 8007bca:	aa03      	add	r2, sp, #12
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f7ff fef6 	bl	80079c0 <_printf_common>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d14d      	bne.n	8007c74 <_printf_i+0x1c8>
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	b005      	add	sp, #20
 8007bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007be2:	4839      	ldr	r0, [pc, #228]	; (8007cc8 <_printf_i+0x21c>)
 8007be4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007be8:	6813      	ldr	r3, [r2, #0]
 8007bea:	6821      	ldr	r1, [r4, #0]
 8007bec:	1d1d      	adds	r5, r3, #4
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6015      	str	r5, [r2, #0]
 8007bf2:	060a      	lsls	r2, r1, #24
 8007bf4:	d50b      	bpl.n	8007c0e <_printf_i+0x162>
 8007bf6:	07ca      	lsls	r2, r1, #31
 8007bf8:	bf44      	itt	mi
 8007bfa:	f041 0120 	orrmi.w	r1, r1, #32
 8007bfe:	6021      	strmi	r1, [r4, #0]
 8007c00:	b91b      	cbnz	r3, 8007c0a <_printf_i+0x15e>
 8007c02:	6822      	ldr	r2, [r4, #0]
 8007c04:	f022 0220 	bic.w	r2, r2, #32
 8007c08:	6022      	str	r2, [r4, #0]
 8007c0a:	2210      	movs	r2, #16
 8007c0c:	e7b7      	b.n	8007b7e <_printf_i+0xd2>
 8007c0e:	064d      	lsls	r5, r1, #25
 8007c10:	bf48      	it	mi
 8007c12:	b29b      	uxthmi	r3, r3
 8007c14:	e7ef      	b.n	8007bf6 <_printf_i+0x14a>
 8007c16:	4665      	mov	r5, ip
 8007c18:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c1c:	fb02 3311 	mls	r3, r2, r1, r3
 8007c20:	5cc3      	ldrb	r3, [r0, r3]
 8007c22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c26:	460b      	mov	r3, r1
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	d1f5      	bne.n	8007c18 <_printf_i+0x16c>
 8007c2c:	e7b9      	b.n	8007ba2 <_printf_i+0xf6>
 8007c2e:	6813      	ldr	r3, [r2, #0]
 8007c30:	6825      	ldr	r5, [r4, #0]
 8007c32:	6961      	ldr	r1, [r4, #20]
 8007c34:	1d18      	adds	r0, r3, #4
 8007c36:	6010      	str	r0, [r2, #0]
 8007c38:	0628      	lsls	r0, r5, #24
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	d501      	bpl.n	8007c42 <_printf_i+0x196>
 8007c3e:	6019      	str	r1, [r3, #0]
 8007c40:	e002      	b.n	8007c48 <_printf_i+0x19c>
 8007c42:	066a      	lsls	r2, r5, #25
 8007c44:	d5fb      	bpl.n	8007c3e <_printf_i+0x192>
 8007c46:	8019      	strh	r1, [r3, #0]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	6123      	str	r3, [r4, #16]
 8007c4c:	4665      	mov	r5, ip
 8007c4e:	e7b9      	b.n	8007bc4 <_printf_i+0x118>
 8007c50:	6813      	ldr	r3, [r2, #0]
 8007c52:	1d19      	adds	r1, r3, #4
 8007c54:	6011      	str	r1, [r2, #0]
 8007c56:	681d      	ldr	r5, [r3, #0]
 8007c58:	6862      	ldr	r2, [r4, #4]
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f7f8 faf7 	bl	8000250 <memchr>
 8007c62:	b108      	cbz	r0, 8007c68 <_printf_i+0x1bc>
 8007c64:	1b40      	subs	r0, r0, r5
 8007c66:	6060      	str	r0, [r4, #4]
 8007c68:	6863      	ldr	r3, [r4, #4]
 8007c6a:	6123      	str	r3, [r4, #16]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c72:	e7a7      	b.n	8007bc4 <_printf_i+0x118>
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	462a      	mov	r2, r5
 8007c78:	4639      	mov	r1, r7
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	47c0      	blx	r8
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d0aa      	beq.n	8007bd8 <_printf_i+0x12c>
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	079b      	lsls	r3, r3, #30
 8007c86:	d413      	bmi.n	8007cb0 <_printf_i+0x204>
 8007c88:	68e0      	ldr	r0, [r4, #12]
 8007c8a:	9b03      	ldr	r3, [sp, #12]
 8007c8c:	4298      	cmp	r0, r3
 8007c8e:	bfb8      	it	lt
 8007c90:	4618      	movlt	r0, r3
 8007c92:	e7a3      	b.n	8007bdc <_printf_i+0x130>
 8007c94:	2301      	movs	r3, #1
 8007c96:	464a      	mov	r2, r9
 8007c98:	4639      	mov	r1, r7
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	47c0      	blx	r8
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d09a      	beq.n	8007bd8 <_printf_i+0x12c>
 8007ca2:	3501      	adds	r5, #1
 8007ca4:	68e3      	ldr	r3, [r4, #12]
 8007ca6:	9a03      	ldr	r2, [sp, #12]
 8007ca8:	1a9b      	subs	r3, r3, r2
 8007caa:	42ab      	cmp	r3, r5
 8007cac:	dcf2      	bgt.n	8007c94 <_printf_i+0x1e8>
 8007cae:	e7eb      	b.n	8007c88 <_printf_i+0x1dc>
 8007cb0:	2500      	movs	r5, #0
 8007cb2:	f104 0919 	add.w	r9, r4, #25
 8007cb6:	e7f5      	b.n	8007ca4 <_printf_i+0x1f8>
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1ac      	bne.n	8007c16 <_printf_i+0x16a>
 8007cbc:	7803      	ldrb	r3, [r0, #0]
 8007cbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cc6:	e76c      	b.n	8007ba2 <_printf_i+0xf6>
 8007cc8:	08008125 	.word	0x08008125
 8007ccc:	08008136 	.word	0x08008136

08007cd0 <memcpy>:
 8007cd0:	b510      	push	{r4, lr}
 8007cd2:	1e43      	subs	r3, r0, #1
 8007cd4:	440a      	add	r2, r1
 8007cd6:	4291      	cmp	r1, r2
 8007cd8:	d100      	bne.n	8007cdc <memcpy+0xc>
 8007cda:	bd10      	pop	{r4, pc}
 8007cdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ce0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ce4:	e7f7      	b.n	8007cd6 <memcpy+0x6>

08007ce6 <memmove>:
 8007ce6:	4288      	cmp	r0, r1
 8007ce8:	b510      	push	{r4, lr}
 8007cea:	eb01 0302 	add.w	r3, r1, r2
 8007cee:	d807      	bhi.n	8007d00 <memmove+0x1a>
 8007cf0:	1e42      	subs	r2, r0, #1
 8007cf2:	4299      	cmp	r1, r3
 8007cf4:	d00a      	beq.n	8007d0c <memmove+0x26>
 8007cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cfa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007cfe:	e7f8      	b.n	8007cf2 <memmove+0xc>
 8007d00:	4283      	cmp	r3, r0
 8007d02:	d9f5      	bls.n	8007cf0 <memmove+0xa>
 8007d04:	1881      	adds	r1, r0, r2
 8007d06:	1ad2      	subs	r2, r2, r3
 8007d08:	42d3      	cmn	r3, r2
 8007d0a:	d100      	bne.n	8007d0e <memmove+0x28>
 8007d0c:	bd10      	pop	{r4, pc}
 8007d0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d12:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007d16:	e7f7      	b.n	8007d08 <memmove+0x22>

08007d18 <_free_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	2900      	cmp	r1, #0
 8007d1e:	d045      	beq.n	8007dac <_free_r+0x94>
 8007d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d24:	1f0c      	subs	r4, r1, #4
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	bfb8      	it	lt
 8007d2a:	18e4      	addlt	r4, r4, r3
 8007d2c:	f000 f8d2 	bl	8007ed4 <__malloc_lock>
 8007d30:	4a1f      	ldr	r2, [pc, #124]	; (8007db0 <_free_r+0x98>)
 8007d32:	6813      	ldr	r3, [r2, #0]
 8007d34:	4610      	mov	r0, r2
 8007d36:	b933      	cbnz	r3, 8007d46 <_free_r+0x2e>
 8007d38:	6063      	str	r3, [r4, #4]
 8007d3a:	6014      	str	r4, [r2, #0]
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d42:	f000 b8c8 	b.w	8007ed6 <__malloc_unlock>
 8007d46:	42a3      	cmp	r3, r4
 8007d48:	d90c      	bls.n	8007d64 <_free_r+0x4c>
 8007d4a:	6821      	ldr	r1, [r4, #0]
 8007d4c:	1862      	adds	r2, r4, r1
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	bf04      	itt	eq
 8007d52:	681a      	ldreq	r2, [r3, #0]
 8007d54:	685b      	ldreq	r3, [r3, #4]
 8007d56:	6063      	str	r3, [r4, #4]
 8007d58:	bf04      	itt	eq
 8007d5a:	1852      	addeq	r2, r2, r1
 8007d5c:	6022      	streq	r2, [r4, #0]
 8007d5e:	6004      	str	r4, [r0, #0]
 8007d60:	e7ec      	b.n	8007d3c <_free_r+0x24>
 8007d62:	4613      	mov	r3, r2
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	b10a      	cbz	r2, 8007d6c <_free_r+0x54>
 8007d68:	42a2      	cmp	r2, r4
 8007d6a:	d9fa      	bls.n	8007d62 <_free_r+0x4a>
 8007d6c:	6819      	ldr	r1, [r3, #0]
 8007d6e:	1858      	adds	r0, r3, r1
 8007d70:	42a0      	cmp	r0, r4
 8007d72:	d10b      	bne.n	8007d8c <_free_r+0x74>
 8007d74:	6820      	ldr	r0, [r4, #0]
 8007d76:	4401      	add	r1, r0
 8007d78:	1858      	adds	r0, r3, r1
 8007d7a:	4282      	cmp	r2, r0
 8007d7c:	6019      	str	r1, [r3, #0]
 8007d7e:	d1dd      	bne.n	8007d3c <_free_r+0x24>
 8007d80:	6810      	ldr	r0, [r2, #0]
 8007d82:	6852      	ldr	r2, [r2, #4]
 8007d84:	605a      	str	r2, [r3, #4]
 8007d86:	4401      	add	r1, r0
 8007d88:	6019      	str	r1, [r3, #0]
 8007d8a:	e7d7      	b.n	8007d3c <_free_r+0x24>
 8007d8c:	d902      	bls.n	8007d94 <_free_r+0x7c>
 8007d8e:	230c      	movs	r3, #12
 8007d90:	602b      	str	r3, [r5, #0]
 8007d92:	e7d3      	b.n	8007d3c <_free_r+0x24>
 8007d94:	6820      	ldr	r0, [r4, #0]
 8007d96:	1821      	adds	r1, r4, r0
 8007d98:	428a      	cmp	r2, r1
 8007d9a:	bf04      	itt	eq
 8007d9c:	6811      	ldreq	r1, [r2, #0]
 8007d9e:	6852      	ldreq	r2, [r2, #4]
 8007da0:	6062      	str	r2, [r4, #4]
 8007da2:	bf04      	itt	eq
 8007da4:	1809      	addeq	r1, r1, r0
 8007da6:	6021      	streq	r1, [r4, #0]
 8007da8:	605c      	str	r4, [r3, #4]
 8007daa:	e7c7      	b.n	8007d3c <_free_r+0x24>
 8007dac:	bd38      	pop	{r3, r4, r5, pc}
 8007dae:	bf00      	nop
 8007db0:	20000094 	.word	0x20000094

08007db4 <_malloc_r>:
 8007db4:	b570      	push	{r4, r5, r6, lr}
 8007db6:	1ccd      	adds	r5, r1, #3
 8007db8:	f025 0503 	bic.w	r5, r5, #3
 8007dbc:	3508      	adds	r5, #8
 8007dbe:	2d0c      	cmp	r5, #12
 8007dc0:	bf38      	it	cc
 8007dc2:	250c      	movcc	r5, #12
 8007dc4:	2d00      	cmp	r5, #0
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	db01      	blt.n	8007dce <_malloc_r+0x1a>
 8007dca:	42a9      	cmp	r1, r5
 8007dcc:	d903      	bls.n	8007dd6 <_malloc_r+0x22>
 8007dce:	230c      	movs	r3, #12
 8007dd0:	6033      	str	r3, [r6, #0]
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	bd70      	pop	{r4, r5, r6, pc}
 8007dd6:	f000 f87d 	bl	8007ed4 <__malloc_lock>
 8007dda:	4a21      	ldr	r2, [pc, #132]	; (8007e60 <_malloc_r+0xac>)
 8007ddc:	6814      	ldr	r4, [r2, #0]
 8007dde:	4621      	mov	r1, r4
 8007de0:	b991      	cbnz	r1, 8007e08 <_malloc_r+0x54>
 8007de2:	4c20      	ldr	r4, [pc, #128]	; (8007e64 <_malloc_r+0xb0>)
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	b91b      	cbnz	r3, 8007df0 <_malloc_r+0x3c>
 8007de8:	4630      	mov	r0, r6
 8007dea:	f000 f863 	bl	8007eb4 <_sbrk_r>
 8007dee:	6020      	str	r0, [r4, #0]
 8007df0:	4629      	mov	r1, r5
 8007df2:	4630      	mov	r0, r6
 8007df4:	f000 f85e 	bl	8007eb4 <_sbrk_r>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d124      	bne.n	8007e46 <_malloc_r+0x92>
 8007dfc:	230c      	movs	r3, #12
 8007dfe:	6033      	str	r3, [r6, #0]
 8007e00:	4630      	mov	r0, r6
 8007e02:	f000 f868 	bl	8007ed6 <__malloc_unlock>
 8007e06:	e7e4      	b.n	8007dd2 <_malloc_r+0x1e>
 8007e08:	680b      	ldr	r3, [r1, #0]
 8007e0a:	1b5b      	subs	r3, r3, r5
 8007e0c:	d418      	bmi.n	8007e40 <_malloc_r+0x8c>
 8007e0e:	2b0b      	cmp	r3, #11
 8007e10:	d90f      	bls.n	8007e32 <_malloc_r+0x7e>
 8007e12:	600b      	str	r3, [r1, #0]
 8007e14:	50cd      	str	r5, [r1, r3]
 8007e16:	18cc      	adds	r4, r1, r3
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f000 f85c 	bl	8007ed6 <__malloc_unlock>
 8007e1e:	f104 000b 	add.w	r0, r4, #11
 8007e22:	1d23      	adds	r3, r4, #4
 8007e24:	f020 0007 	bic.w	r0, r0, #7
 8007e28:	1ac3      	subs	r3, r0, r3
 8007e2a:	d0d3      	beq.n	8007dd4 <_malloc_r+0x20>
 8007e2c:	425a      	negs	r2, r3
 8007e2e:	50e2      	str	r2, [r4, r3]
 8007e30:	e7d0      	b.n	8007dd4 <_malloc_r+0x20>
 8007e32:	428c      	cmp	r4, r1
 8007e34:	684b      	ldr	r3, [r1, #4]
 8007e36:	bf16      	itet	ne
 8007e38:	6063      	strne	r3, [r4, #4]
 8007e3a:	6013      	streq	r3, [r2, #0]
 8007e3c:	460c      	movne	r4, r1
 8007e3e:	e7eb      	b.n	8007e18 <_malloc_r+0x64>
 8007e40:	460c      	mov	r4, r1
 8007e42:	6849      	ldr	r1, [r1, #4]
 8007e44:	e7cc      	b.n	8007de0 <_malloc_r+0x2c>
 8007e46:	1cc4      	adds	r4, r0, #3
 8007e48:	f024 0403 	bic.w	r4, r4, #3
 8007e4c:	42a0      	cmp	r0, r4
 8007e4e:	d005      	beq.n	8007e5c <_malloc_r+0xa8>
 8007e50:	1a21      	subs	r1, r4, r0
 8007e52:	4630      	mov	r0, r6
 8007e54:	f000 f82e 	bl	8007eb4 <_sbrk_r>
 8007e58:	3001      	adds	r0, #1
 8007e5a:	d0cf      	beq.n	8007dfc <_malloc_r+0x48>
 8007e5c:	6025      	str	r5, [r4, #0]
 8007e5e:	e7db      	b.n	8007e18 <_malloc_r+0x64>
 8007e60:	20000094 	.word	0x20000094
 8007e64:	20000098 	.word	0x20000098

08007e68 <_realloc_r>:
 8007e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6a:	4607      	mov	r7, r0
 8007e6c:	4614      	mov	r4, r2
 8007e6e:	460e      	mov	r6, r1
 8007e70:	b921      	cbnz	r1, 8007e7c <_realloc_r+0x14>
 8007e72:	4611      	mov	r1, r2
 8007e74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e78:	f7ff bf9c 	b.w	8007db4 <_malloc_r>
 8007e7c:	b922      	cbnz	r2, 8007e88 <_realloc_r+0x20>
 8007e7e:	f7ff ff4b 	bl	8007d18 <_free_r>
 8007e82:	4625      	mov	r5, r4
 8007e84:	4628      	mov	r0, r5
 8007e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e88:	f000 f826 	bl	8007ed8 <_malloc_usable_size_r>
 8007e8c:	42a0      	cmp	r0, r4
 8007e8e:	d20f      	bcs.n	8007eb0 <_realloc_r+0x48>
 8007e90:	4621      	mov	r1, r4
 8007e92:	4638      	mov	r0, r7
 8007e94:	f7ff ff8e 	bl	8007db4 <_malloc_r>
 8007e98:	4605      	mov	r5, r0
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d0f2      	beq.n	8007e84 <_realloc_r+0x1c>
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	f7ff ff15 	bl	8007cd0 <memcpy>
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	f7ff ff35 	bl	8007d18 <_free_r>
 8007eae:	e7e9      	b.n	8007e84 <_realloc_r+0x1c>
 8007eb0:	4635      	mov	r5, r6
 8007eb2:	e7e7      	b.n	8007e84 <_realloc_r+0x1c>

08007eb4 <_sbrk_r>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	4c06      	ldr	r4, [pc, #24]	; (8007ed0 <_sbrk_r+0x1c>)
 8007eb8:	2300      	movs	r3, #0
 8007eba:	4605      	mov	r5, r0
 8007ebc:	4608      	mov	r0, r1
 8007ebe:	6023      	str	r3, [r4, #0]
 8007ec0:	f7fa f9b2 	bl	8002228 <_sbrk>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d102      	bne.n	8007ece <_sbrk_r+0x1a>
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	b103      	cbz	r3, 8007ece <_sbrk_r+0x1a>
 8007ecc:	602b      	str	r3, [r5, #0]
 8007ece:	bd38      	pop	{r3, r4, r5, pc}
 8007ed0:	2000043c 	.word	0x2000043c

08007ed4 <__malloc_lock>:
 8007ed4:	4770      	bx	lr

08007ed6 <__malloc_unlock>:
 8007ed6:	4770      	bx	lr

08007ed8 <_malloc_usable_size_r>:
 8007ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007edc:	1f18      	subs	r0, r3, #4
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	bfbc      	itt	lt
 8007ee2:	580b      	ldrlt	r3, [r1, r0]
 8007ee4:	18c0      	addlt	r0, r0, r3
 8007ee6:	4770      	bx	lr

08007ee8 <_init>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	bf00      	nop
 8007eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eee:	bc08      	pop	{r3}
 8007ef0:	469e      	mov	lr, r3
 8007ef2:	4770      	bx	lr

08007ef4 <_fini>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	bf00      	nop
 8007ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efa:	bc08      	pop	{r3}
 8007efc:	469e      	mov	lr, r3
 8007efe:	4770      	bx	lr
