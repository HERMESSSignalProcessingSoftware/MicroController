
F746StampTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007890  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08007a60  08007a60  00017a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b48  08007b48  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b50  08007b50  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b50  08007b50  00017b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b54  08007b54  00017b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ecc  20000010  08007b68  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004edc  08007b68  00024edc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002087f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003be0  00000000  00000000  000408bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019c8  00000000  00000000  000444a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001810  00000000  00000000  00045e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029c5c  00000000  00000000  00047678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014b65  00000000  00000000  000712d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00108087  00000000  00000000  00085e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018dec0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d74  00000000  00000000  0018df3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007a48 	.word	0x08007a48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08007a48 	.word	0x08007a48

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 fcea 	bl	8000eee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	2000      	movs	r0, #0
 800051c:	f007 f998 	bl	8007850 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f006 ffce 	bl	80074c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_IncTick+0x20>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_IncTick+0x24>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4413      	add	r3, r2
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <HAL_IncTick+0x24>)
 800053e:	6013      	str	r3, [r2, #0]
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000004 	.word	0x20000004
 8000550:	20004934 	.word	0x20004934

08000554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return uwTick;
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <HAL_GetTick+0x14>)
 800055a:	681b      	ldr	r3, [r3, #0]
}
 800055c:	4618      	mov	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20004934 	.word	0x20004934

0800056c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000574:	f7ff ffee 	bl	8000554 <HAL_GetTick>
 8000578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000584:	d005      	beq.n	8000592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_Delay+0x40>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4413      	add	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000592:	bf00      	nop
 8000594:	f7ff ffde 	bl	8000554 <HAL_GetTick>
 8000598:	4602      	mov	r2, r0
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d8f7      	bhi.n	8000594 <HAL_Delay+0x28>
  {
  }
}
 80005a4:	bf00      	nop
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000004 	.word	0x20000004

080005b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d101      	bne.n	80005c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e031      	b.n	800062a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d109      	bne.n	80005e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f006 ff9e 	bl	8007510 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e6:	f003 0310 	and.w	r3, r3, #16
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d116      	bne.n	800061c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <HAL_ADC_Init+0x84>)
 80005f4:	4013      	ands	r3, r2
 80005f6:	f043 0202 	orr.w	r2, r3, #2
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 fac4 	bl	8000b8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	f023 0303 	bic.w	r3, r3, #3
 8000612:	f043 0201 	orr.w	r2, r3, #1
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	641a      	str	r2, [r3, #64]	; 0x40
 800061a:	e001      	b.n	8000620 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800061c:	2301      	movs	r3, #1
 800061e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2200      	movs	r2, #0
 8000624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	ffffeefd 	.word	0xffffeefd

08000638 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	2b02      	cmp	r3, #2
 8000654:	bf0c      	ite	eq
 8000656:	2301      	moveq	r3, #1
 8000658:	2300      	movne	r3, #0
 800065a:	b2db      	uxtb	r3, r3
 800065c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	f003 0320 	and.w	r3, r3, #32
 8000668:	2b20      	cmp	r3, #32
 800066a:	bf0c      	ite	eq
 800066c:	2301      	moveq	r3, #1
 800066e:	2300      	movne	r3, #0
 8000670:	b2db      	uxtb	r3, r3
 8000672:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d049      	beq.n	800070e <HAL_ADC_IRQHandler+0xd6>
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d046      	beq.n	800070e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 0310 	and.w	r3, r3, #16
 8000688:	2b00      	cmp	r3, #0
 800068a:	d105      	bne.n	8000698 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d12b      	bne.n	80006fe <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d127      	bne.n	80006fe <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d006      	beq.n	80006ca <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d119      	bne.n	80006fe <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	685a      	ldr	r2, [r3, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f022 0220 	bic.w	r2, r2, #32
 80006d8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d105      	bne.n	80006fe <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	f043 0201 	orr.w	r2, r3, #1
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f8db 	bl	80008ba <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f06f 0212 	mvn.w	r2, #18
 800070c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	2b04      	cmp	r3, #4
 800071a:	bf0c      	ite	eq
 800071c:	2301      	moveq	r3, #1
 800071e:	2300      	movne	r3, #0
 8000720:	b2db      	uxtb	r3, r3
 8000722:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	2b80      	cmp	r3, #128	; 0x80
 8000730:	bf0c      	ite	eq
 8000732:	2301      	moveq	r3, #1
 8000734:	2300      	movne	r3, #0
 8000736:	b2db      	uxtb	r3, r3
 8000738:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d057      	beq.n	80007f0 <HAL_ADC_IRQHandler+0x1b8>
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d054      	beq.n	80007f0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	2b00      	cmp	r3, #0
 8000750:	d105      	bne.n	800075e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000768:	2b00      	cmp	r3, #0
 800076a:	d139      	bne.n	80007e0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000772:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000776:	2b00      	cmp	r3, #0
 8000778:	d006      	beq.n	8000788 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000784:	2b00      	cmp	r3, #0
 8000786:	d12b      	bne.n	80007e0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000792:	2b00      	cmp	r3, #0
 8000794:	d124      	bne.n	80007e0 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d11d      	bne.n	80007e0 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d119      	bne.n	80007e0 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	685a      	ldr	r2, [r3, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d105      	bne.n	80007e0 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	f043 0201 	orr.w	r2, r3, #1
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 facd 	bl	8000d80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f06f 020c 	mvn.w	r2, #12
 80007ee:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	bf0c      	ite	eq
 80007fe:	2301      	moveq	r3, #1
 8000800:	2300      	movne	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000810:	2b40      	cmp	r3, #64	; 0x40
 8000812:	bf0c      	ite	eq
 8000814:	2301      	moveq	r3, #1
 8000816:	2300      	movne	r3, #0
 8000818:	b2db      	uxtb	r3, r3
 800081a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d017      	beq.n	8000852 <HAL_ADC_IRQHandler+0x21a>
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d014      	beq.n	8000852 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	2b01      	cmp	r3, #1
 8000834:	d10d      	bne.n	8000852 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f000 f843 	bl	80008ce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f06f 0201 	mvn.w	r2, #1
 8000850:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	2b20      	cmp	r3, #32
 800085e:	bf0c      	ite	eq
 8000860:	2301      	moveq	r3, #1
 8000862:	2300      	movne	r3, #0
 8000864:	b2db      	uxtb	r3, r3
 8000866:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000872:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000876:	bf0c      	ite	eq
 8000878:	2301      	moveq	r3, #1
 800087a:	2300      	movne	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d015      	beq.n	80008b2 <HAL_ADC_IRQHandler+0x27a>
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d012      	beq.n	80008b2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000890:	f043 0202 	orr.w	r2, r3, #2
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f06f 0220 	mvn.w	r2, #32
 80008a0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 f81d 	bl	80008e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f06f 0220 	mvn.w	r2, #32
 80008b0:	601a      	str	r2, [r3, #0]
  }
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800090c:	2b01      	cmp	r3, #1
 800090e:	d101      	bne.n	8000914 <HAL_ADC_ConfigChannel+0x1c>
 8000910:	2302      	movs	r3, #2
 8000912:	e12a      	b.n	8000b6a <HAL_ADC_ConfigChannel+0x272>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2201      	movs	r2, #1
 8000918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b09      	cmp	r3, #9
 8000922:	d93a      	bls.n	800099a <HAL_ADC_ConfigChannel+0xa2>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800092c:	d035      	beq.n	800099a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	68d9      	ldr	r1, [r3, #12]
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	b29b      	uxth	r3, r3
 800093a:	461a      	mov	r2, r3
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	3b1e      	subs	r3, #30
 8000944:	2207      	movs	r2, #7
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43da      	mvns	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	400a      	ands	r2, r1
 8000952:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a87      	ldr	r2, [pc, #540]	; (8000b78 <HAL_ADC_ConfigChannel+0x280>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d10a      	bne.n	8000974 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	68d9      	ldr	r1, [r3, #12]
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	061a      	lsls	r2, r3, #24
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	430a      	orrs	r2, r1
 8000970:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000972:	e035      	b.n	80009e0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	68d9      	ldr	r1, [r3, #12]
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	689a      	ldr	r2, [r3, #8]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	b29b      	uxth	r3, r3
 8000984:	4618      	mov	r0, r3
 8000986:	4603      	mov	r3, r0
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	4403      	add	r3, r0
 800098c:	3b1e      	subs	r3, #30
 800098e:	409a      	lsls	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	430a      	orrs	r2, r1
 8000996:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000998:	e022      	b.n	80009e0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	6919      	ldr	r1, [r3, #16]
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	2207      	movs	r2, #7
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	43da      	mvns	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	400a      	ands	r2, r1
 80009bc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6919      	ldr	r1, [r3, #16]
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	689a      	ldr	r2, [r3, #8]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	4603      	mov	r3, r0
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4403      	add	r3, r0
 80009d6:	409a      	lsls	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	430a      	orrs	r2, r1
 80009de:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	2b06      	cmp	r3, #6
 80009e6:	d824      	bhi.n	8000a32 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685a      	ldr	r2, [r3, #4]
 80009f2:	4613      	mov	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	3b05      	subs	r3, #5
 80009fa:	221f      	movs	r2, #31
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43da      	mvns	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	400a      	ands	r2, r1
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	3b05      	subs	r3, #5
 8000a24:	fa00 f203 	lsl.w	r2, r0, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	635a      	str	r2, [r3, #52]	; 0x34
 8000a30:	e04c      	b.n	8000acc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2b0c      	cmp	r3, #12
 8000a38:	d824      	bhi.n	8000a84 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	4613      	mov	r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	3b23      	subs	r3, #35	; 0x23
 8000a4c:	221f      	movs	r2, #31
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43da      	mvns	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	400a      	ands	r2, r1
 8000a5a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	4618      	mov	r0, r3
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	3b23      	subs	r3, #35	; 0x23
 8000a76:	fa00 f203 	lsl.w	r2, r0, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	631a      	str	r2, [r3, #48]	; 0x30
 8000a82:	e023      	b.n	8000acc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685a      	ldr	r2, [r3, #4]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	3b41      	subs	r3, #65	; 0x41
 8000a96:	221f      	movs	r2, #31
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	43da      	mvns	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	400a      	ands	r2, r1
 8000aa4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	3b41      	subs	r3, #65	; 0x41
 8000ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a2a      	ldr	r2, [pc, #168]	; (8000b7c <HAL_ADC_ConfigChannel+0x284>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d10a      	bne.n	8000aec <HAL_ADC_ConfigChannel+0x1f4>
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ade:	d105      	bne.n	8000aec <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <HAL_ADC_ConfigChannel+0x288>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	4a26      	ldr	r2, [pc, #152]	; (8000b80 <HAL_ADC_ConfigChannel+0x288>)
 8000ae6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000aea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_ConfigChannel+0x284>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d109      	bne.n	8000b0a <HAL_ADC_ConfigChannel+0x212>
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b12      	cmp	r3, #18
 8000afc:	d105      	bne.n	8000b0a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <HAL_ADC_ConfigChannel+0x288>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <HAL_ADC_ConfigChannel+0x288>)
 8000b04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b08:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <HAL_ADC_ConfigChannel+0x284>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d125      	bne.n	8000b60 <HAL_ADC_ConfigChannel+0x268>
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_ADC_ConfigChannel+0x280>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d003      	beq.n	8000b26 <HAL_ADC_ConfigChannel+0x22e>
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b11      	cmp	r3, #17
 8000b24:	d11c      	bne.n	8000b60 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_ADC_ConfigChannel+0x288>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <HAL_ADC_ConfigChannel+0x288>)
 8000b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b30:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_ADC_ConfigChannel+0x280>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d111      	bne.n	8000b60 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_ADC_ConfigChannel+0x28c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <HAL_ADC_ConfigChannel+0x290>)
 8000b42:	fba2 2303 	umull	r2, r3, r2, r3
 8000b46:	0c9a      	lsrs	r2, r3, #18
 8000b48:	4613      	mov	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4413      	add	r3, r2
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000b52:	e002      	b.n	8000b5a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1f9      	bne.n	8000b54 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	10000012 	.word	0x10000012
 8000b7c:	40012000 	.word	0x40012000
 8000b80:	40012300 	.word	0x40012300
 8000b84:	2000000c 	.word	0x2000000c
 8000b88:	431bde83 	.word	0x431bde83

08000b8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000b94:	4b78      	ldr	r3, [pc, #480]	; (8000d78 <ADC_Init+0x1ec>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	4a77      	ldr	r2, [pc, #476]	; (8000d78 <ADC_Init+0x1ec>)
 8000b9a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000b9e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000ba0:	4b75      	ldr	r3, [pc, #468]	; (8000d78 <ADC_Init+0x1ec>)
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	4973      	ldr	r1, [pc, #460]	; (8000d78 <ADC_Init+0x1ec>)
 8000baa:	4313      	orrs	r3, r2
 8000bac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	6859      	ldr	r1, [r3, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	021a      	lsls	r2, r3, #8
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000be0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	6859      	ldr	r1, [r3, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6899      	ldr	r1, [r3, #8]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68da      	ldr	r2, [r3, #12]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	430a      	orrs	r2, r1
 8000c14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1a:	4a58      	ldr	r2, [pc, #352]	; (8000d7c <ADC_Init+0x1f0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d022      	beq.n	8000c66 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6899      	ldr	r1, [r3, #8]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6899      	ldr	r1, [r3, #8]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	430a      	orrs	r2, r1
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	e00f      	b.n	8000c86 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f022 0202 	bic.w	r2, r2, #2
 8000c94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6899      	ldr	r1, [r3, #8]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	005a      	lsls	r2, r3, #1
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d01b      	beq.n	8000cec <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000cc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000cd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6859      	ldr	r1, [r3, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	035a      	lsls	r2, r3, #13
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	e007      	b.n	8000cfc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	051a      	lsls	r2, r3, #20
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6899      	ldr	r1, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d3e:	025a      	lsls	r2, r3, #9
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6899      	ldr	r1, [r3, #8]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	029a      	lsls	r2, r3, #10
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	609a      	str	r2, [r3, #8]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	40012300 	.word	0x40012300
 8000d7c:	0f000001 	.word	0x0f000001

08000d80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc2:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	60d3      	str	r3, [r2, #12]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00
 8000dd8:	05fa0000 	.word	0x05fa0000

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <__NVIC_EnableIRQ+0x38>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	; (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
         );
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff4c 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f16:	f7ff ff61 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	6978      	ldr	r0, [r7, #20]
 8000f22:	f7ff ffb1 	bl	8000e88 <NVIC_EncodePriority>
 8000f26:	4602      	mov	r2, r0
 8000f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff80 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff54 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000f68:	4ba9      	ldr	r3, [pc, #676]	; (8001210 <HAL_ETH_Init+0x2b8>)
 8000f6a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e183      	b.n	8001286 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d106      	bne.n	8000f98 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f006 fb04 	bl	80075a0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f98:	4b9e      	ldr	r3, [pc, #632]	; (8001214 <HAL_ETH_Init+0x2bc>)
 8000f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9c:	4a9d      	ldr	r2, [pc, #628]	; (8001214 <HAL_ETH_Init+0x2bc>)
 8000f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa2:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa4:	4b9b      	ldr	r3, [pc, #620]	; (8001214 <HAL_ETH_Init+0x2bc>)
 8000fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000fb0:	4b99      	ldr	r3, [pc, #612]	; (8001218 <HAL_ETH_Init+0x2c0>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	4a98      	ldr	r2, [pc, #608]	; (8001218 <HAL_ETH_Init+0x2c0>)
 8000fb6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fba:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000fbc:	4b96      	ldr	r3, [pc, #600]	; (8001218 <HAL_ETH_Init+0x2c0>)
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	4994      	ldr	r1, [pc, #592]	; (8001218 <HAL_ETH_Init+0x2c0>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 0201 	orr.w	r2, r2, #1
 8000fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fe0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000fe2:	f7ff fab7 	bl	8000554 <HAL_GetTick>
 8000fe6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000fe8:	e011      	b.n	800100e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000fea:	f7ff fab3 	bl	8000554 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ff8:	d909      	bls.n	800100e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e13b      	b.n	8001286 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1e4      	bne.n	8000fea <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f023 031c 	bic.w	r3, r3, #28
 800102e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001030:	f001 fb9c 	bl	800276c <HAL_RCC_GetHCLKFreq>
 8001034:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	4a78      	ldr	r2, [pc, #480]	; (800121c <HAL_ETH_Init+0x2c4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d908      	bls.n	8001050 <HAL_ETH_Init+0xf8>
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	4a77      	ldr	r2, [pc, #476]	; (8001220 <HAL_ETH_Init+0x2c8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d804      	bhi.n	8001050 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	e027      	b.n	80010a0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	4a73      	ldr	r2, [pc, #460]	; (8001220 <HAL_ETH_Init+0x2c8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d908      	bls.n	800106a <HAL_ETH_Init+0x112>
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	4a72      	ldr	r2, [pc, #456]	; (8001224 <HAL_ETH_Init+0x2cc>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d804      	bhi.n	800106a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f043 030c 	orr.w	r3, r3, #12
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	e01a      	b.n	80010a0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4a6d      	ldr	r2, [pc, #436]	; (8001224 <HAL_ETH_Init+0x2cc>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d903      	bls.n	800107a <HAL_ETH_Init+0x122>
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4a6c      	ldr	r2, [pc, #432]	; (8001228 <HAL_ETH_Init+0x2d0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d911      	bls.n	800109e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4a6a      	ldr	r2, [pc, #424]	; (8001228 <HAL_ETH_Init+0x2d0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d908      	bls.n	8001094 <HAL_ETH_Init+0x13c>
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4a69      	ldr	r2, [pc, #420]	; (800122c <HAL_ETH_Init+0x2d4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d804      	bhi.n	8001094 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e005      	b.n	80010a0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f043 0310 	orr.w	r3, r3, #16
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	e000      	b.n	80010a0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800109e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80010a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010ac:	2100      	movs	r1, #0
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f956 	bl	8001360 <HAL_ETH_WritePHYRegister>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00b      	beq.n	80010d2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80010be:	6939      	ldr	r1, [r7, #16]
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f9b3 	bl	800142c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e0d9      	b.n	8001286 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80010d2:	20ff      	movs	r0, #255	; 0xff
 80010d4:	f7ff fa4a 	bl	800056c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80a7 	beq.w	8001230 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80010e2:	f7ff fa37 	bl	8000554 <HAL_GetTick>
 80010e6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	461a      	mov	r2, r3
 80010ee:	2101      	movs	r1, #1
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f8cd 	bl	8001290 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80010f6:	f7ff fa2d 	bl	8000554 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	f241 3288 	movw	r2, #5000	; 0x1388
 8001104:	4293      	cmp	r3, r2
 8001106:	d90f      	bls.n	8001128 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800110c:	6939      	ldr	r1, [r7, #16]
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f98c 	bl	800142c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e0ae      	b.n	8001286 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0da      	beq.n	80010e8 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001132:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001136:	2100      	movs	r1, #0
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f911 	bl	8001360 <HAL_ETH_WritePHYRegister>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00b      	beq.n	800115c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001148:	6939      	ldr	r1, [r7, #16]
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f96e 	bl	800142c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001158:	2301      	movs	r3, #1
 800115a:	e094      	b.n	8001286 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800115c:	f7ff f9fa 	bl	8000554 <HAL_GetTick>
 8001160:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	461a      	mov	r2, r3
 8001168:	2101      	movs	r1, #1
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f890 	bl	8001290 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001170:	f7ff f9f0 	bl	8000554 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	f241 3288 	movw	r2, #5000	; 0x1388
 800117e:	4293      	cmp	r3, r2
 8001180:	d90f      	bls.n	80011a2 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001186:	6939      	ldr	r1, [r7, #16]
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 f94f 	bl	800142c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e071      	b.n	8001286 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0da      	beq.n	8001162 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	461a      	mov	r2, r3
 80011b2:	211f      	movs	r1, #31
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f86b 	bl	8001290 <HAL_ETH_ReadPHYRegister>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00b      	beq.n	80011d8 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011c4:	6939      	ldr	r1, [r7, #16]
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f930 	bl	800142c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80011d4:	2301      	movs	r3, #1
 80011d6:	e056      	b.n	8001286 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d004      	beq.n	80011ec <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	e002      	b.n	80011f2 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	e037      	b.n	8001274 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	e032      	b.n	8001274 <HAL_ETH_Init+0x31c>
 800120e:	bf00      	nop
 8001210:	03938700 	.word	0x03938700
 8001214:	40023800 	.word	0x40023800
 8001218:	40013800 	.word	0x40013800
 800121c:	01312cff 	.word	0x01312cff
 8001220:	02160ebf 	.word	0x02160ebf
 8001224:	039386ff 	.word	0x039386ff
 8001228:	05f5e0ff 	.word	0x05f5e0ff
 800122c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	085b      	lsrs	r3, r3, #1
 800123e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001240:	4313      	orrs	r3, r2
 8001242:	b29b      	uxth	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	2100      	movs	r1, #0
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 f889 	bl	8001360 <HAL_ETH_WritePHYRegister>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00b      	beq.n	800126c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001258:	6939      	ldr	r1, [r7, #16]
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f8e6 	bl	800142c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e00c      	b.n	8001286 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800126c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001270:	f7ff f97c 	bl	800056c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001274:	6939      	ldr	r1, [r7, #16]
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f8d8 	bl	800142c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop

08001290 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	460b      	mov	r3, r1
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b82      	cmp	r3, #130	; 0x82
 80012b0:	d101      	bne.n	80012b6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80012b2:	2302      	movs	r3, #2
 80012b4:	e050      	b.n	8001358 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2282      	movs	r2, #130	; 0x82
 80012ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f003 031c 	and.w	r3, r3, #28
 80012cc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	8a1b      	ldrh	r3, [r3, #16]
 80012d2:	02db      	lsls	r3, r3, #11
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4313      	orrs	r3, r2
 80012da:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80012dc:	897b      	ldrh	r3, [r7, #10]
 80012de:	019b      	lsls	r3, r3, #6
 80012e0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f023 0302 	bic.w	r3, r3, #2
 80012f0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001302:	f7ff f927 	bl	8000554 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001308:	e015      	b.n	8001336 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800130a:	f7ff f923 	bl	8000554 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001318:	d309      	bcc.n	800132e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e014      	b.n	8001358 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1e4      	bne.n	800130a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	b29b      	uxth	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	460b      	mov	r3, r1
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b42      	cmp	r3, #66	; 0x42
 8001380:	d101      	bne.n	8001386 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001382:	2302      	movs	r3, #2
 8001384:	e04e      	b.n	8001424 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2242      	movs	r2, #66	; 0x42
 800138a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f003 031c 	and.w	r3, r3, #28
 800139c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	8a1b      	ldrh	r3, [r3, #16]
 80013a2:	02db      	lsls	r3, r3, #11
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80013ac:	897b      	ldrh	r3, [r7, #10]
 80013ae:	019b      	lsls	r3, r3, #6
 80013b0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013dc:	f7ff f8ba 	bl	8000554 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80013e2:	e015      	b.n	8001410 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80013e4:	f7ff f8b6 	bl	8000554 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f2:	d309      	bcc.n	8001408 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e00d      	b.n	8001424 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1e4      	bne.n	80013e4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b0b0      	sub	sp, #192	; 0xc0
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d007      	beq.n	8001452 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001448:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001450:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800145a:	2300      	movs	r3, #0
 800145c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d103      	bne.n	800147a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001476:	663b      	str	r3, [r7, #96]	; 0x60
 8001478:	e001      	b.n	800147e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800147e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001482:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001488:	2300      	movs	r3, #0
 800148a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001498:	2340      	movs	r3, #64	; 0x40
 800149a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001500:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001504:	4bab      	ldr	r3, [pc, #684]	; (80017b4 <ETH_MACDMAConfig+0x388>)
 8001506:	4013      	ands	r3, r2
 8001508:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800150c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800150e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001510:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001514:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001518:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800151e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001522:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001526:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800152c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800152e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001530:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001534:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001536:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001538:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800153a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800153c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800153e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001540:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001542:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001546:	4313      	orrs	r3, r2
 8001548:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001554:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001560:	2001      	movs	r0, #1
 8001562:	f7ff f803 	bl	800056c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800156e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001570:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001574:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001576:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001578:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800157a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800157e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001584:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001586:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800158a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800158c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001590:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001594:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800159c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800159e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7fe ffde 	bl	800056c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015b8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80015c2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80015cc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80015d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015dc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80015e0:	4013      	ands	r3, r2
 80015e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80015e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015ea:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80015ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80015f0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80015f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80015f6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80015f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80015fc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80015fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001602:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001604:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001608:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800160a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800160e:	4313      	orrs	r3, r2
 8001610:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800161c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001628:	2001      	movs	r0, #1
 800162a:	f7fe ff9f 	bl	800056c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001636:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001638:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800163c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001652:	2001      	movs	r0, #1
 8001654:	f7fe ff8a 	bl	800056c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001660:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800166a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001670:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001674:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001686:	2304      	movs	r3, #4
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800168a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800169c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	f241 0318 	movw	r3, #4120	; 0x1018
 80016b6:	4413      	add	r3, r2
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80016be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016c2:	4b3d      	ldr	r3, [pc, #244]	; (80017b8 <ETH_MACDMAConfig+0x38c>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80016ca:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80016cc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80016ce:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80016d0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80016d2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80016d4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80016d6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80016d8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80016da:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80016dc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80016de:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80016e0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80016e2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80016e6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80016e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80016ea:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80016ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016f0:	4313      	orrs	r3, r2
 80016f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	f241 0318 	movw	r3, #4120	; 0x1018
 80016fe:	4413      	add	r3, r2
 8001700:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001704:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	f241 0318 	movw	r3, #4120	; 0x1018
 800170e:	4413      	add	r3, r2
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001716:	2001      	movs	r0, #1
 8001718:	f7fe ff28 	bl	800056c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	f241 0318 	movw	r3, #4120	; 0x1018
 8001724:	4413      	add	r3, r2
 8001726:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800172a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800172c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800172e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001730:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001734:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001738:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800173a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800173c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800173e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001740:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001742:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001746:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001754:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001764:	2001      	movs	r0, #1
 8001766:	f7fe ff01 	bl	800056c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001772:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001776:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d10d      	bne.n	800179c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	f241 031c 	movw	r3, #4124	; 0x101c
 8001788:	4413      	add	r3, r2
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6811      	ldr	r1, [r2, #0]
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <ETH_MACDMAConfig+0x390>)
 8001792:	431a      	orrs	r2, r3
 8001794:	f241 031c 	movw	r3, #4124	; 0x101c
 8001798:	440b      	add	r3, r1
 800179a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	461a      	mov	r2, r3
 80017a2:	2100      	movs	r1, #0
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f80b 	bl	80017c0 <ETH_MACAddressConfig>
}
 80017aa:	bf00      	nop
 80017ac:	37c0      	adds	r7, #192	; 0xc0
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	ff20810f 	.word	0xff20810f
 80017b8:	f8de3f23 	.word	0xf8de3f23
 80017bc:	00010040 	.word	0x00010040

080017c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3305      	adds	r3, #5
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	3204      	adds	r2, #4
 80017d8:	7812      	ldrb	r2, [r2, #0]
 80017da:	4313      	orrs	r3, r2
 80017dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <ETH_MACAddressConfig+0x68>)
 80017e2:	4413      	add	r3, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3303      	adds	r3, #3
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	061a      	lsls	r2, r3, #24
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3302      	adds	r3, #2
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	041b      	lsls	r3, r3, #16
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3301      	adds	r3, #1
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	4313      	orrs	r3, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	7812      	ldrb	r2, [r2, #0]
 800180a:	4313      	orrs	r3, r2
 800180c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <ETH_MACAddressConfig+0x6c>)
 8001812:	4413      	add	r3, r2
 8001814:	461a      	mov	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	6013      	str	r3, [r2, #0]
}
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40028040 	.word	0x40028040
 800182c:	40028044 	.word	0x40028044

08001830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	e175      	b.n	8001b3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001850:	2201      	movs	r2, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	429a      	cmp	r2, r3
 800186a:	f040 8164 	bne.w	8001b36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d00b      	beq.n	800188e <HAL_GPIO_Init+0x5e>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d007      	beq.n	800188e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001882:	2b11      	cmp	r3, #17
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b12      	cmp	r3, #18
 800188c:	d130      	bne.n	80018f0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2203      	movs	r2, #3
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c4:	2201      	movs	r2, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	f003 0201 	and.w	r2, r3, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x100>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b12      	cmp	r3, #18
 800192e:	d123      	bne.n	8001978 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	08da      	lsrs	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	08da      	lsrs	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3208      	adds	r2, #8
 8001972:	69b9      	ldr	r1, [r7, #24]
 8001974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0203 	and.w	r2, r3, #3
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80be 	beq.w	8001b36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	4b65      	ldr	r3, [pc, #404]	; (8001b50 <HAL_GPIO_Init+0x320>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a64      	ldr	r2, [pc, #400]	; (8001b50 <HAL_GPIO_Init+0x320>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b62      	ldr	r3, [pc, #392]	; (8001b50 <HAL_GPIO_Init+0x320>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019d2:	4a60      	ldr	r2, [pc, #384]	; (8001b54 <HAL_GPIO_Init+0x324>)
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3302      	adds	r3, #2
 80019da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a57      	ldr	r2, [pc, #348]	; (8001b58 <HAL_GPIO_Init+0x328>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d037      	beq.n	8001a6e <HAL_GPIO_Init+0x23e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a56      	ldr	r2, [pc, #344]	; (8001b5c <HAL_GPIO_Init+0x32c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d031      	beq.n	8001a6a <HAL_GPIO_Init+0x23a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a55      	ldr	r2, [pc, #340]	; (8001b60 <HAL_GPIO_Init+0x330>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d02b      	beq.n	8001a66 <HAL_GPIO_Init+0x236>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a54      	ldr	r2, [pc, #336]	; (8001b64 <HAL_GPIO_Init+0x334>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d025      	beq.n	8001a62 <HAL_GPIO_Init+0x232>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a53      	ldr	r2, [pc, #332]	; (8001b68 <HAL_GPIO_Init+0x338>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d01f      	beq.n	8001a5e <HAL_GPIO_Init+0x22e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_GPIO_Init+0x33c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d019      	beq.n	8001a5a <HAL_GPIO_Init+0x22a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a51      	ldr	r2, [pc, #324]	; (8001b70 <HAL_GPIO_Init+0x340>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d013      	beq.n	8001a56 <HAL_GPIO_Init+0x226>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a50      	ldr	r2, [pc, #320]	; (8001b74 <HAL_GPIO_Init+0x344>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d00d      	beq.n	8001a52 <HAL_GPIO_Init+0x222>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4f      	ldr	r2, [pc, #316]	; (8001b78 <HAL_GPIO_Init+0x348>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d007      	beq.n	8001a4e <HAL_GPIO_Init+0x21e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4e      	ldr	r2, [pc, #312]	; (8001b7c <HAL_GPIO_Init+0x34c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d101      	bne.n	8001a4a <HAL_GPIO_Init+0x21a>
 8001a46:	2309      	movs	r3, #9
 8001a48:	e012      	b.n	8001a70 <HAL_GPIO_Init+0x240>
 8001a4a:	230a      	movs	r3, #10
 8001a4c:	e010      	b.n	8001a70 <HAL_GPIO_Init+0x240>
 8001a4e:	2308      	movs	r3, #8
 8001a50:	e00e      	b.n	8001a70 <HAL_GPIO_Init+0x240>
 8001a52:	2307      	movs	r3, #7
 8001a54:	e00c      	b.n	8001a70 <HAL_GPIO_Init+0x240>
 8001a56:	2306      	movs	r3, #6
 8001a58:	e00a      	b.n	8001a70 <HAL_GPIO_Init+0x240>
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	e008      	b.n	8001a70 <HAL_GPIO_Init+0x240>
 8001a5e:	2304      	movs	r3, #4
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x240>
 8001a62:	2303      	movs	r3, #3
 8001a64:	e004      	b.n	8001a70 <HAL_GPIO_Init+0x240>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e002      	b.n	8001a70 <HAL_GPIO_Init+0x240>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_GPIO_Init+0x240>
 8001a6e:	2300      	movs	r3, #0
 8001a70:	69fa      	ldr	r2, [r7, #28]
 8001a72:	f002 0203 	and.w	r2, r2, #3
 8001a76:	0092      	lsls	r2, r2, #2
 8001a78:	4093      	lsls	r3, r2
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a80:	4934      	ldr	r1, [pc, #208]	; (8001b54 <HAL_GPIO_Init+0x324>)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	089b      	lsrs	r3, r3, #2
 8001a86:	3302      	adds	r3, #2
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8e:	4b3c      	ldr	r3, [pc, #240]	; (8001b80 <HAL_GPIO_Init+0x350>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab2:	4a33      	ldr	r2, [pc, #204]	; (8001b80 <HAL_GPIO_Init+0x350>)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ab8:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <HAL_GPIO_Init+0x350>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001adc:	4a28      	ldr	r2, [pc, #160]	; (8001b80 <HAL_GPIO_Init+0x350>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ae2:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <HAL_GPIO_Init+0x350>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b06:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <HAL_GPIO_Init+0x350>)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <HAL_GPIO_Init+0x350>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b30:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <HAL_GPIO_Init+0x350>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	61fb      	str	r3, [r7, #28]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	2b0f      	cmp	r3, #15
 8001b40:	f67f ae86 	bls.w	8001850 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b44:	bf00      	nop
 8001b46:	3724      	adds	r7, #36	; 0x24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40013800 	.word	0x40013800
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	40020800 	.word	0x40020800
 8001b64:	40020c00 	.word	0x40020c00
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40021400 	.word	0x40021400
 8001b70:	40021800 	.word	0x40021800
 8001b74:	40021c00 	.word	0x40021c00
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	40022400 	.word	0x40022400
 8001b80:	40013c00 	.word	0x40013c00

08001b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
 8001b90:	4613      	mov	r3, r2
 8001b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ba0:	e003      	b.n	8001baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ba2:	887b      	ldrh	r3, [r7, #2]
 8001ba4:	041a      	lsls	r2, r3, #16
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	619a      	str	r2, [r3, #24]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	887b      	ldrh	r3, [r7, #2]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d004      	beq.n	8001bd8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	041a      	lsls	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd6:	e002      	b.n	8001bde <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bd8:	887a      	ldrh	r2, [r7, #2]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	619a      	str	r2, [r3, #24]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bec:	b08f      	sub	sp, #60	; 0x3c
 8001bee:	af0a      	add	r7, sp, #40	; 0x28
 8001bf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e116      	b.n	8001e2a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d106      	bne.n	8001c1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f005 fdbe 	bl	8007798 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2203      	movs	r2, #3
 8001c20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 f8ec 	bl	8003e18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	687e      	ldr	r6, [r7, #4]
 8001c48:	466d      	mov	r5, sp
 8001c4a:	f106 0410 	add.w	r4, r6, #16
 8001c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c5e:	1d33      	adds	r3, r6, #4
 8001c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c62:	6838      	ldr	r0, [r7, #0]
 8001c64:	f002 f880 	bl	8003d68 <USB_CoreInit>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2202      	movs	r2, #2
 8001c72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0d7      	b.n	8001e2a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f002 f8da 	bl	8003e3a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	e04a      	b.n	8001d22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	1a9b      	subs	r3, r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	333d      	adds	r3, #61	; 0x3d
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	1a9b      	subs	r3, r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	333c      	adds	r3, #60	; 0x3c
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	b298      	uxth	r0, r3
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3342      	adds	r3, #66	; 0x42
 8001cc8:	4602      	mov	r2, r0
 8001cca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	1a9b      	subs	r3, r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	333f      	adds	r3, #63	; 0x3f
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	1a9b      	subs	r3, r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	3344      	adds	r3, #68	; 0x44
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	3348      	adds	r3, #72	; 0x48
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	3350      	adds	r3, #80	; 0x50
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	73fb      	strb	r3, [r7, #15]
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d3af      	bcc.n	8001c8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	e044      	b.n	8001dbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	1a9b      	subs	r3, r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	1a9b      	subs	r3, r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	3301      	adds	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d3b5      	bcc.n	8001d32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	687e      	ldr	r6, [r7, #4]
 8001dce:	466d      	mov	r5, sp
 8001dd0:	f106 0410 	add.w	r4, r6, #16
 8001dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ddc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001de0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001de4:	1d33      	adds	r3, r6, #4
 8001de6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001de8:	6838      	ldr	r0, [r7, #0]
 8001dea:	f002 f851 	bl	8003e90 <USB_DevInit>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e014      	b.n	8001e2a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d102      	bne.n	8001e1e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f80b 	bl	8001e34 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f002 fa03 	bl	800422e <USB_DevDisconnect>

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_PCDEx_ActivateLPM+0x44>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	10000003 	.word	0x10000003

08001e7c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40007000 	.word	0x40007000

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e291      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8087 	beq.w	8001fce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec0:	4b96      	ldr	r3, [pc, #600]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d00c      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ecc:	4b93      	ldr	r3, [pc, #588]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d112      	bne.n	8001efe <HAL_RCC_OscConfig+0x62>
 8001ed8:	4b90      	ldr	r3, [pc, #576]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee4:	d10b      	bne.n	8001efe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee6:	4b8d      	ldr	r3, [pc, #564]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d06c      	beq.n	8001fcc <HAL_RCC_OscConfig+0x130>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d168      	bne.n	8001fcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e26b      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x7a>
 8001f08:	4b84      	ldr	r3, [pc, #528]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a83      	ldr	r2, [pc, #524]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	e02e      	b.n	8001f74 <HAL_RCC_OscConfig+0xd8>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x9c>
 8001f1e:	4b7f      	ldr	r3, [pc, #508]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a7e      	ldr	r2, [pc, #504]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b7c      	ldr	r3, [pc, #496]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a7b      	ldr	r2, [pc, #492]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e01d      	b.n	8001f74 <HAL_RCC_OscConfig+0xd8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0xc0>
 8001f42:	4b76      	ldr	r3, [pc, #472]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a75      	ldr	r2, [pc, #468]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b73      	ldr	r3, [pc, #460]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a72      	ldr	r2, [pc, #456]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCC_OscConfig+0xd8>
 8001f5c:	4b6f      	ldr	r3, [pc, #444]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a6e      	ldr	r2, [pc, #440]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b6c      	ldr	r3, [pc, #432]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a6b      	ldr	r2, [pc, #428]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d013      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe faea 	bl	8000554 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7fe fae6 	bl	8000554 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e21f      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b61      	ldr	r3, [pc, #388]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0xe8>
 8001fa2:	e014      	b.n	8001fce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fad6 	bl	8000554 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fac:	f7fe fad2 	bl	8000554 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e20b      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbe:	4b57      	ldr	r3, [pc, #348]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x110>
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d069      	beq.n	80020ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fda:	4b50      	ldr	r3, [pc, #320]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00b      	beq.n	8001ffe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe6:	4b4d      	ldr	r3, [pc, #308]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d11c      	bne.n	800202c <HAL_RCC_OscConfig+0x190>
 8001ff2:	4b4a      	ldr	r3, [pc, #296]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d116      	bne.n	800202c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	4b47      	ldr	r3, [pc, #284]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d005      	beq.n	8002016 <HAL_RCC_OscConfig+0x17a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d001      	beq.n	8002016 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e1df      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002016:	4b41      	ldr	r3, [pc, #260]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	493d      	ldr	r1, [pc, #244]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202a:	e040      	b.n	80020ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d023      	beq.n	800207c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002034:	4b39      	ldr	r3, [pc, #228]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a38      	ldr	r2, [pc, #224]	; (800211c <HAL_RCC_OscConfig+0x280>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7fe fa88 	bl	8000554 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002048:	f7fe fa84 	bl	8000554 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1bd      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205a:	4b30      	ldr	r3, [pc, #192]	; (800211c <HAL_RCC_OscConfig+0x280>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4929      	ldr	r1, [pc, #164]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
 800207a:	e018      	b.n	80020ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <HAL_RCC_OscConfig+0x280>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <HAL_RCC_OscConfig+0x280>)
 8002082:	f023 0301 	bic.w	r3, r3, #1
 8002086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7fe fa64 	bl	8000554 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002090:	f7fe fa60 	bl	8000554 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e199      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	4b1e      	ldr	r3, [pc, #120]	; (800211c <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d038      	beq.n	800212c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d019      	beq.n	80020f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c2:	4b16      	ldr	r3, [pc, #88]	; (800211c <HAL_RCC_OscConfig+0x280>)
 80020c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c6:	4a15      	ldr	r2, [pc, #84]	; (800211c <HAL_RCC_OscConfig+0x280>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ce:	f7fe fa41 	bl	8000554 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d6:	f7fe fa3d 	bl	8000554 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e176      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <HAL_RCC_OscConfig+0x280>)
 80020ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x23a>
 80020f4:	e01a      	b.n	800212c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_RCC_OscConfig+0x280>)
 80020f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <HAL_RCC_OscConfig+0x280>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002102:	f7fe fa27 	bl	8000554 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210a:	f7fe fa23 	bl	8000554 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d903      	bls.n	8002120 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e15c      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
 800211c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	4b91      	ldr	r3, [pc, #580]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1ee      	bne.n	800210a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a4 	beq.w	8002282 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213a:	4b8b      	ldr	r3, [pc, #556]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10d      	bne.n	8002162 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	4b88      	ldr	r3, [pc, #544]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	4a87      	ldr	r2, [pc, #540]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002150:	6413      	str	r3, [r2, #64]	; 0x40
 8002152:	4b85      	ldr	r3, [pc, #532]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215e:	2301      	movs	r3, #1
 8002160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002162:	4b82      	ldr	r3, [pc, #520]	; (800236c <HAL_RCC_OscConfig+0x4d0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d118      	bne.n	80021a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800216e:	4b7f      	ldr	r3, [pc, #508]	; (800236c <HAL_RCC_OscConfig+0x4d0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a7e      	ldr	r2, [pc, #504]	; (800236c <HAL_RCC_OscConfig+0x4d0>)
 8002174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217a:	f7fe f9eb 	bl	8000554 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002182:	f7fe f9e7 	bl	8000554 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b64      	cmp	r3, #100	; 0x64
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e120      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002194:	4b75      	ldr	r3, [pc, #468]	; (800236c <HAL_RCC_OscConfig+0x4d0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x31a>
 80021a8:	4b6f      	ldr	r3, [pc, #444]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a6e      	ldr	r2, [pc, #440]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	e02d      	b.n	8002212 <HAL_RCC_OscConfig+0x376>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x33c>
 80021be:	4b6a      	ldr	r3, [pc, #424]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	4a69      	ldr	r2, [pc, #420]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ca:	4b67      	ldr	r3, [pc, #412]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	4a66      	ldr	r2, [pc, #408]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021d0:	f023 0304 	bic.w	r3, r3, #4
 80021d4:	6713      	str	r3, [r2, #112]	; 0x70
 80021d6:	e01c      	b.n	8002212 <HAL_RCC_OscConfig+0x376>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b05      	cmp	r3, #5
 80021de:	d10c      	bne.n	80021fa <HAL_RCC_OscConfig+0x35e>
 80021e0:	4b61      	ldr	r3, [pc, #388]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e4:	4a60      	ldr	r2, [pc, #384]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	6713      	str	r3, [r2, #112]	; 0x70
 80021ec:	4b5e      	ldr	r3, [pc, #376]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	4a5d      	ldr	r2, [pc, #372]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6713      	str	r3, [r2, #112]	; 0x70
 80021f8:	e00b      	b.n	8002212 <HAL_RCC_OscConfig+0x376>
 80021fa:	4b5b      	ldr	r3, [pc, #364]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	4a5a      	ldr	r2, [pc, #360]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	6713      	str	r3, [r2, #112]	; 0x70
 8002206:	4b58      	ldr	r3, [pc, #352]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	4a57      	ldr	r2, [pc, #348]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d015      	beq.n	8002246 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221a:	f7fe f99b 	bl	8000554 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7fe f997 	bl	8000554 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0ce      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	4b4b      	ldr	r3, [pc, #300]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ee      	beq.n	8002222 <HAL_RCC_OscConfig+0x386>
 8002244:	e014      	b.n	8002270 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002246:	f7fe f985 	bl	8000554 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7fe f981 	bl	8000554 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	; 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e0b8      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002264:	4b40      	ldr	r3, [pc, #256]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1ee      	bne.n	800224e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002270:	7dfb      	ldrb	r3, [r7, #23]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d105      	bne.n	8002282 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002276:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a3b      	ldr	r2, [pc, #236]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800227c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 80a4 	beq.w	80023d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800228c:	4b36      	ldr	r3, [pc, #216]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b08      	cmp	r3, #8
 8002296:	d06b      	beq.n	8002370 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d149      	bne.n	8002334 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a0:	4b31      	ldr	r3, [pc, #196]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a30      	ldr	r2, [pc, #192]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80022a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe f952 	bl	8000554 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b4:	f7fe f94e 	bl	8000554 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e087      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	4b28      	ldr	r3, [pc, #160]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69da      	ldr	r2, [r3, #28]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	019b      	lsls	r3, r3, #6
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	3b01      	subs	r3, #1
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	061b      	lsls	r3, r3, #24
 80022f6:	4313      	orrs	r3, r2
 80022f8:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80022fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022fe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a18      	ldr	r2, [pc, #96]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7fe f922 	bl	8000554 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7fe f91e 	bl	8000554 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e057      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x478>
 8002332:	e04f      	b.n	80023d4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0b      	ldr	r2, [pc, #44]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800233a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800233e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe f908 	bl	8000554 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7fe f904 	bl	8000554 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e03d      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235a:	4b03      	ldr	r3, [pc, #12]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x4ac>
 8002366:	e035      	b.n	80023d4 <HAL_RCC_OscConfig+0x538>
 8002368:	40023800 	.word	0x40023800
 800236c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <HAL_RCC_OscConfig+0x544>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d028      	beq.n	80023d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d121      	bne.n	80023d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d11a      	bne.n	80023d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023a0:	4013      	ands	r3, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d111      	bne.n	80023d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	3b01      	subs	r3, #1
 80023ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800

080023e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0d0      	b.n	800259e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023fc:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d910      	bls.n	800242c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 020f 	bic.w	r2, r3, #15
 8002412:	4965      	ldr	r1, [pc, #404]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b63      	ldr	r3, [pc, #396]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0b8      	b.n	800259e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002444:	4b59      	ldr	r3, [pc, #356]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a58      	ldr	r2, [pc, #352]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 800244a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800244e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800245c:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a52      	ldr	r2, [pc, #328]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002466:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b50      	ldr	r3, [pc, #320]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	494d      	ldr	r1, [pc, #308]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d040      	beq.n	8002508 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b47      	ldr	r3, [pc, #284]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d115      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e07f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a6:	4b41      	ldr	r3, [pc, #260]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e073      	b.n	800259e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e06b      	b.n	800259e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	4b39      	ldr	r3, [pc, #228]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f023 0203 	bic.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4936      	ldr	r1, [pc, #216]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d8:	f7fe f83c 	bl	8000554 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7fe f838 	bl	8000554 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e053      	b.n	800259e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 020c 	and.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	d1eb      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d210      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 020f 	bic.w	r2, r3, #15
 800251e:	4922      	ldr	r1, [pc, #136]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e032      	b.n	800259e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002544:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4916      	ldr	r1, [pc, #88]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	490e      	ldr	r1, [pc, #56]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002576:	f000 f821 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800257a:	4601      	mov	r1, r0
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <HAL_RCC_ClockConfig+0x1cc>)
 8002588:	5cd3      	ldrb	r3, [r2, r3]
 800258a:	fa21 f303 	lsr.w	r3, r1, r3
 800258e:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_RCC_ClockConfig+0x1d4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f005 f95a 	bl	8007850 <HAL_InitTick>

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023c00 	.word	0x40023c00
 80025ac:	40023800 	.word	0x40023800
 80025b0:	08007b30 	.word	0x08007b30
 80025b4:	2000000c 	.word	0x2000000c
 80025b8:	20000000 	.word	0x20000000

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	2300      	movs	r3, #0
 80025cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d2:	4b63      	ldr	r3, [pc, #396]	; (8002760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d007      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0x32>
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d008      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x38>
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 80b4 	bne.w	8002750 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025e8:	4b5e      	ldr	r3, [pc, #376]	; (8002764 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025ea:	60bb      	str	r3, [r7, #8]
      break;
 80025ec:	e0b3      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ee:	4b5e      	ldr	r3, [pc, #376]	; (8002768 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80025f0:	60bb      	str	r3, [r7, #8]
      break;
 80025f2:	e0b0      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f4:	4b5a      	ldr	r3, [pc, #360]	; (8002760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025fc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025fe:	4b58      	ldr	r3, [pc, #352]	; (8002760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d04a      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260a:	4b55      	ldr	r3, [pc, #340]	; (8002760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	099b      	lsrs	r3, r3, #6
 8002610:	f04f 0400 	mov.w	r4, #0
 8002614:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	ea03 0501 	and.w	r5, r3, r1
 8002620:	ea04 0602 	and.w	r6, r4, r2
 8002624:	4629      	mov	r1, r5
 8002626:	4632      	mov	r2, r6
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	f04f 0400 	mov.w	r4, #0
 8002630:	0154      	lsls	r4, r2, #5
 8002632:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002636:	014b      	lsls	r3, r1, #5
 8002638:	4619      	mov	r1, r3
 800263a:	4622      	mov	r2, r4
 800263c:	1b49      	subs	r1, r1, r5
 800263e:	eb62 0206 	sbc.w	r2, r2, r6
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	f04f 0400 	mov.w	r4, #0
 800264a:	0194      	lsls	r4, r2, #6
 800264c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002650:	018b      	lsls	r3, r1, #6
 8002652:	1a5b      	subs	r3, r3, r1
 8002654:	eb64 0402 	sbc.w	r4, r4, r2
 8002658:	f04f 0100 	mov.w	r1, #0
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	00e2      	lsls	r2, r4, #3
 8002662:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002666:	00d9      	lsls	r1, r3, #3
 8002668:	460b      	mov	r3, r1
 800266a:	4614      	mov	r4, r2
 800266c:	195b      	adds	r3, r3, r5
 800266e:	eb44 0406 	adc.w	r4, r4, r6
 8002672:	f04f 0100 	mov.w	r1, #0
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	0262      	lsls	r2, r4, #9
 800267c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002680:	0259      	lsls	r1, r3, #9
 8002682:	460b      	mov	r3, r1
 8002684:	4614      	mov	r4, r2
 8002686:	4618      	mov	r0, r3
 8002688:	4621      	mov	r1, r4
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f04f 0400 	mov.w	r4, #0
 8002690:	461a      	mov	r2, r3
 8002692:	4623      	mov	r3, r4
 8002694:	f7fd fdbc 	bl	8000210 <__aeabi_uldivmod>
 8002698:	4603      	mov	r3, r0
 800269a:	460c      	mov	r4, r1
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	e049      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a0:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	f04f 0400 	mov.w	r4, #0
 80026aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	ea03 0501 	and.w	r5, r3, r1
 80026b6:	ea04 0602 	and.w	r6, r4, r2
 80026ba:	4629      	mov	r1, r5
 80026bc:	4632      	mov	r2, r6
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	f04f 0400 	mov.w	r4, #0
 80026c6:	0154      	lsls	r4, r2, #5
 80026c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026cc:	014b      	lsls	r3, r1, #5
 80026ce:	4619      	mov	r1, r3
 80026d0:	4622      	mov	r2, r4
 80026d2:	1b49      	subs	r1, r1, r5
 80026d4:	eb62 0206 	sbc.w	r2, r2, r6
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	f04f 0400 	mov.w	r4, #0
 80026e0:	0194      	lsls	r4, r2, #6
 80026e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026e6:	018b      	lsls	r3, r1, #6
 80026e8:	1a5b      	subs	r3, r3, r1
 80026ea:	eb64 0402 	sbc.w	r4, r4, r2
 80026ee:	f04f 0100 	mov.w	r1, #0
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	00e2      	lsls	r2, r4, #3
 80026f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026fc:	00d9      	lsls	r1, r3, #3
 80026fe:	460b      	mov	r3, r1
 8002700:	4614      	mov	r4, r2
 8002702:	195b      	adds	r3, r3, r5
 8002704:	eb44 0406 	adc.w	r4, r4, r6
 8002708:	f04f 0100 	mov.w	r1, #0
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	02a2      	lsls	r2, r4, #10
 8002712:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002716:	0299      	lsls	r1, r3, #10
 8002718:	460b      	mov	r3, r1
 800271a:	4614      	mov	r4, r2
 800271c:	4618      	mov	r0, r3
 800271e:	4621      	mov	r1, r4
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f04f 0400 	mov.w	r4, #0
 8002726:	461a      	mov	r2, r3
 8002728:	4623      	mov	r3, r4
 800272a:	f7fd fd71 	bl	8000210 <__aeabi_uldivmod>
 800272e:	4603      	mov	r3, r0
 8002730:	460c      	mov	r4, r1
 8002732:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	3301      	adds	r3, #1
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	60bb      	str	r3, [r7, #8]
      break;
 800274e:	e002      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002752:	60bb      	str	r3, [r7, #8]
      break;
 8002754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002756:	68bb      	ldr	r3, [r7, #8]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002760:	40023800 	.word	0x40023800
 8002764:	00f42400 	.word	0x00f42400
 8002768:	007a1200 	.word	0x007a1200

0800276c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <HAL_RCC_GetHCLKFreq+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	2000000c 	.word	0x2000000c

08002784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002788:	f7ff fff0 	bl	800276c <HAL_RCC_GetHCLKFreq>
 800278c:	4601      	mov	r1, r0
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0a9b      	lsrs	r3, r3, #10
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4a03      	ldr	r2, [pc, #12]	; (80027a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40023800 	.word	0x40023800
 80027a8:	08007b40 	.word	0x08007b40

080027ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027b0:	f7ff ffdc 	bl	800276c <HAL_RCC_GetHCLKFreq>
 80027b4:	4601      	mov	r1, r0
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	0b5b      	lsrs	r3, r3, #13
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	4a03      	ldr	r2, [pc, #12]	; (80027d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c2:	5cd3      	ldrb	r3, [r2, r3]
 80027c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40023800 	.word	0x40023800
 80027d0:	08007b40 	.word	0x08007b40

080027d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	220f      	movs	r2, #15
 80027e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_RCC_GetClockConfig+0x5c>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0203 	and.w	r2, r3, #3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <HAL_RCC_GetClockConfig+0x5c>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <HAL_RCC_GetClockConfig+0x5c>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_RCC_GetClockConfig+0x5c>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	08db      	lsrs	r3, r3, #3
 800280e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <HAL_RCC_GetClockConfig+0x60>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 020f 	and.w	r2, r3, #15
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	601a      	str	r2, [r3, #0]
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	40023c00 	.word	0x40023c00

08002838 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002860:	4b69      	ldr	r3, [pc, #420]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a68      	ldr	r2, [pc, #416]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002866:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800286a:	6093      	str	r3, [r2, #8]
 800286c:	4b66      	ldr	r3, [pc, #408]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002874:	4964      	ldr	r1, [pc, #400]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002882:	2301      	movs	r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d017      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002892:	4b5d      	ldr	r3, [pc, #372]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002898:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a0:	4959      	ldr	r1, [pc, #356]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028b0:	d101      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028b2:	2301      	movs	r3, #1
 80028b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028be:	2301      	movs	r3, #1
 80028c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d017      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028ce:	4b4e      	ldr	r3, [pc, #312]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	494a      	ldr	r1, [pc, #296]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ec:	d101      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028ee:	2301      	movs	r3, #1
 80028f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028fa:	2301      	movs	r3, #1
 80028fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800290a:	2301      	movs	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 808b 	beq.w	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800291c:	4b3a      	ldr	r3, [pc, #232]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	4a39      	ldr	r2, [pc, #228]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002926:	6413      	str	r3, [r2, #64]	; 0x40
 8002928:	4b37      	ldr	r3, [pc, #220]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a34      	ldr	r2, [pc, #208]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800293a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002940:	f7fd fe08 	bl	8000554 <HAL_GetTick>
 8002944:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002948:	f7fd fe04 	bl	8000554 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e355      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800295a:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002966:	4b28      	ldr	r3, [pc, #160]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d035      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	429a      	cmp	r2, r3
 8002982:	d02e      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002984:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800298e:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002998:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	4a1a      	ldr	r2, [pc, #104]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029a6:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d114      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fd fdcc 	bl	8000554 <HAL_GetTick>
 80029bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	e00a      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f7fd fdc8 	bl	8000554 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e317      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d6:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ee      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029ee:	d111      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029fe:	400b      	ands	r3, r1
 8002a00:	4901      	ldr	r1, [pc, #4]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
 8002a06:	e00b      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	0ffffcff 	.word	0x0ffffcff
 8002a14:	4bb0      	ldr	r3, [pc, #704]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4aaf      	ldr	r2, [pc, #700]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a1e:	6093      	str	r3, [r2, #8]
 8002a20:	4bad      	ldr	r3, [pc, #692]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2c:	49aa      	ldr	r1, [pc, #680]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d010      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a3e:	4ba6      	ldr	r3, [pc, #664]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a44:	4aa4      	ldr	r2, [pc, #656]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a4e:	4ba2      	ldr	r3, [pc, #648]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	499f      	ldr	r1, [pc, #636]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a6c:	4b9a      	ldr	r3, [pc, #616]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a7a:	4997      	ldr	r1, [pc, #604]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a8e:	4b92      	ldr	r3, [pc, #584]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a9c:	498e      	ldr	r1, [pc, #568]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ab0:	4b89      	ldr	r3, [pc, #548]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002abe:	4986      	ldr	r1, [pc, #536]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ad2:	4b81      	ldr	r3, [pc, #516]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	497d      	ldr	r1, [pc, #500]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002af4:	4b78      	ldr	r3, [pc, #480]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	4975      	ldr	r1, [pc, #468]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b16:	4b70      	ldr	r3, [pc, #448]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	f023 020c 	bic.w	r2, r3, #12
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b24:	496c      	ldr	r1, [pc, #432]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b38:	4b67      	ldr	r3, [pc, #412]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	4964      	ldr	r1, [pc, #400]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b5a:	4b5f      	ldr	r3, [pc, #380]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b68:	495b      	ldr	r1, [pc, #364]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b7c:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8a:	4953      	ldr	r1, [pc, #332]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b9e:	4b4e      	ldr	r3, [pc, #312]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	494a      	ldr	r1, [pc, #296]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bc0:	4b45      	ldr	r3, [pc, #276]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	4942      	ldr	r1, [pc, #264]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002be2:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf0:	4939      	ldr	r1, [pc, #228]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c04:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c12:	4931      	ldr	r1, [pc, #196]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d011      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c26:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c34:	4928      	ldr	r1, [pc, #160]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c44:	d101      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c56:	2301      	movs	r3, #1
 8002c58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c66:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c74:	4918      	ldr	r1, [pc, #96]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00b      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c88:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c98:	490f      	ldr	r1, [pc, #60]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d005      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cae:	f040 80d8 	bne.w	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cbe:	f7fd fc49 	bl	8000554 <HAL_GetTick>
 8002cc2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cc6:	f7fd fc45 	bl	8000554 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b64      	cmp	r3, #100	; 0x64
 8002cd2:	d903      	bls.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e196      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002cd8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cdc:	4b6c      	ldr	r3, [pc, #432]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1ee      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d021      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d11d      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cfc:	4b64      	ldr	r3, [pc, #400]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d02:	0c1b      	lsrs	r3, r3, #16
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d0a:	4b61      	ldr	r3, [pc, #388]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d10:	0e1b      	lsrs	r3, r3, #24
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	019a      	lsls	r2, r3, #6
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	431a      	orrs	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	061b      	lsls	r3, r3, #24
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	071b      	lsls	r3, r3, #28
 8002d30:	4957      	ldr	r1, [pc, #348]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4c:	d00a      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d02e      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d62:	d129      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d64:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d6a:	0c1b      	lsrs	r3, r3, #16
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d72:	4b47      	ldr	r3, [pc, #284]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d78:	0f1b      	lsrs	r3, r3, #28
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	019a      	lsls	r2, r3, #6
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	431a      	orrs	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	071b      	lsls	r3, r3, #28
 8002d98:	493d      	ldr	r1, [pc, #244]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002da0:	4b3b      	ldr	r3, [pc, #236]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da6:	f023 021f 	bic.w	r2, r3, #31
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	3b01      	subs	r3, #1
 8002db0:	4937      	ldr	r1, [pc, #220]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01d      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dc4:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dca:	0e1b      	lsrs	r3, r3, #24
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd8:	0f1b      	lsrs	r3, r3, #28
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	019a      	lsls	r2, r3, #6
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	041b      	lsls	r3, r3, #16
 8002dec:	431a      	orrs	r2, r3
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	061b      	lsls	r3, r3, #24
 8002df2:	431a      	orrs	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	071b      	lsls	r3, r3, #28
 8002df8:	4925      	ldr	r1, [pc, #148]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d011      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	019a      	lsls	r2, r3, #6
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	041b      	lsls	r3, r3, #16
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	061b      	lsls	r3, r3, #24
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	071b      	lsls	r3, r3, #28
 8002e28:	4919      	ldr	r1, [pc, #100]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e30:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a16      	ldr	r2, [pc, #88]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002e36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e3c:	f7fd fb8a 	bl	8000554 <HAL_GetTick>
 8002e40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e44:	f7fd fb86 	bl	8000554 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e0d7      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	f040 80cd 	bne.w	8003004 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e76:	f7fd fb6d 	bl	8000554 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e7e:	f7fd fb69 	bl	8000554 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b64      	cmp	r3, #100	; 0x64
 8002e8a:	d903      	bls.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0ba      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002e90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e94:	4b5e      	ldr	r3, [pc, #376]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ea0:	d0ed      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d02e      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d12a      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002eca:	4b51      	ldr	r3, [pc, #324]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	0c1b      	lsrs	r3, r3, #16
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ed8:	4b4d      	ldr	r3, [pc, #308]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	0f1b      	lsrs	r3, r3, #28
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	019a      	lsls	r2, r3, #6
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	041b      	lsls	r3, r3, #16
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	061b      	lsls	r3, r3, #24
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	071b      	lsls	r3, r3, #28
 8002efe:	4944      	ldr	r1, [pc, #272]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f06:	4b42      	ldr	r3, [pc, #264]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	3b01      	subs	r3, #1
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	493d      	ldr	r1, [pc, #244]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d022      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f34:	d11d      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f36:	4b36      	ldr	r3, [pc, #216]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	0e1b      	lsrs	r3, r3, #24
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f44:	4b32      	ldr	r3, [pc, #200]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	0f1b      	lsrs	r3, r3, #28
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	019a      	lsls	r2, r3, #6
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	041b      	lsls	r3, r3, #16
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	061b      	lsls	r3, r3, #24
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	071b      	lsls	r3, r3, #28
 8002f6a:	4929      	ldr	r1, [pc, #164]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d028      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f7e:	4b24      	ldr	r3, [pc, #144]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f84:	0e1b      	lsrs	r3, r3, #24
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f8c:	4b20      	ldr	r3, [pc, #128]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	0c1b      	lsrs	r3, r3, #16
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	019a      	lsls	r2, r3, #6
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	041b      	lsls	r3, r3, #16
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	071b      	lsls	r3, r3, #28
 8002fb2:	4917      	ldr	r1, [pc, #92]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	4911      	ldr	r1, [pc, #68]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fdc:	f7fd faba 	bl	8000554 <HAL_GetTick>
 8002fe0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fe4:	f7fd fab6 	bl	8000554 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e007      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003002:	d1ef      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800

08003014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e01d      	b.n	8003062 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f815 	bl	800306a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3304      	adds	r3, #4
 8003050:	4619      	mov	r1, r3
 8003052:	4610      	mov	r0, r2
 8003054:	f000 f986 	bl	8003364 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <HAL_TIM_Base_Start_IT+0x50>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d00b      	beq.n	80030c2 <HAL_TIM_Base_Start_IT+0x42>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b0:	d007      	beq.n	80030c2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f042 0201 	orr.w	r2, r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	00010007 	.word	0x00010007

080030d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d122      	bne.n	8003130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d11b      	bne.n	8003130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0202 	mvn.w	r2, #2
 8003100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f905 	bl	8003326 <HAL_TIM_IC_CaptureCallback>
 800311c:	e005      	b.n	800312a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f8f7 	bl	8003312 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f908 	bl	800333a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b04      	cmp	r3, #4
 800313c:	d122      	bne.n	8003184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b04      	cmp	r3, #4
 800314a:	d11b      	bne.n	8003184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0204 	mvn.w	r2, #4
 8003154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2202      	movs	r2, #2
 800315a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f8db 	bl	8003326 <HAL_TIM_IC_CaptureCallback>
 8003170:	e005      	b.n	800317e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f8cd 	bl	8003312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f8de 	bl	800333a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b08      	cmp	r3, #8
 8003190:	d122      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b08      	cmp	r3, #8
 800319e:	d11b      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0208 	mvn.w	r2, #8
 80031a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2204      	movs	r2, #4
 80031ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f8b1 	bl	8003326 <HAL_TIM_IC_CaptureCallback>
 80031c4:	e005      	b.n	80031d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8a3 	bl	8003312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f8b4 	bl	800333a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	d122      	bne.n	800322c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	d11b      	bne.n	800322c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0210 	mvn.w	r2, #16
 80031fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2208      	movs	r2, #8
 8003202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f887 	bl	8003326 <HAL_TIM_IC_CaptureCallback>
 8003218:	e005      	b.n	8003226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f879 	bl	8003312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f88a 	bl	800333a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b01      	cmp	r3, #1
 8003238:	d10e      	bne.n	8003258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0201 	mvn.w	r2, #1
 8003250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f004 f91a 	bl	800748c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003262:	2b80      	cmp	r3, #128	; 0x80
 8003264:	d10e      	bne.n	8003284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003270:	2b80      	cmp	r3, #128	; 0x80
 8003272:	d107      	bne.n	8003284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800327c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f91a 	bl	80034b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003292:	d10e      	bne.n	80032b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329e:	2b80      	cmp	r3, #128	; 0x80
 80032a0:	d107      	bne.n	80032b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f90d 	bl	80034cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b40      	cmp	r3, #64	; 0x40
 80032be:	d10e      	bne.n	80032de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d107      	bne.n	80032de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f838 	bl	800334e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d10e      	bne.n	800330a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d107      	bne.n	800330a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f06f 0220 	mvn.w	r2, #32
 8003302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f8cd 	bl	80034a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a40      	ldr	r2, [pc, #256]	; (8003478 <TIM_Base_SetConfig+0x114>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d013      	beq.n	80033a4 <TIM_Base_SetConfig+0x40>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003382:	d00f      	beq.n	80033a4 <TIM_Base_SetConfig+0x40>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3d      	ldr	r2, [pc, #244]	; (800347c <TIM_Base_SetConfig+0x118>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00b      	beq.n	80033a4 <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a3c      	ldr	r2, [pc, #240]	; (8003480 <TIM_Base_SetConfig+0x11c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d007      	beq.n	80033a4 <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a3b      	ldr	r2, [pc, #236]	; (8003484 <TIM_Base_SetConfig+0x120>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d003      	beq.n	80033a4 <TIM_Base_SetConfig+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a3a      	ldr	r2, [pc, #232]	; (8003488 <TIM_Base_SetConfig+0x124>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d108      	bne.n	80033b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a2f      	ldr	r2, [pc, #188]	; (8003478 <TIM_Base_SetConfig+0x114>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d02b      	beq.n	8003416 <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c4:	d027      	beq.n	8003416 <TIM_Base_SetConfig+0xb2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2c      	ldr	r2, [pc, #176]	; (800347c <TIM_Base_SetConfig+0x118>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d023      	beq.n	8003416 <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a2b      	ldr	r2, [pc, #172]	; (8003480 <TIM_Base_SetConfig+0x11c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01f      	beq.n	8003416 <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a2a      	ldr	r2, [pc, #168]	; (8003484 <TIM_Base_SetConfig+0x120>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d01b      	beq.n	8003416 <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a29      	ldr	r2, [pc, #164]	; (8003488 <TIM_Base_SetConfig+0x124>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d017      	beq.n	8003416 <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a28      	ldr	r2, [pc, #160]	; (800348c <TIM_Base_SetConfig+0x128>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a27      	ldr	r2, [pc, #156]	; (8003490 <TIM_Base_SetConfig+0x12c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00f      	beq.n	8003416 <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a26      	ldr	r2, [pc, #152]	; (8003494 <TIM_Base_SetConfig+0x130>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00b      	beq.n	8003416 <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a25      	ldr	r2, [pc, #148]	; (8003498 <TIM_Base_SetConfig+0x134>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d007      	beq.n	8003416 <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a24      	ldr	r2, [pc, #144]	; (800349c <TIM_Base_SetConfig+0x138>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d003      	beq.n	8003416 <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <TIM_Base_SetConfig+0x13c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d108      	bne.n	8003428 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800341c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <TIM_Base_SetConfig+0x114>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d003      	beq.n	800345c <TIM_Base_SetConfig+0xf8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a0c      	ldr	r2, [pc, #48]	; (8003488 <TIM_Base_SetConfig+0x124>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d103      	bne.n	8003464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	615a      	str	r2, [r3, #20]
}
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40010000 	.word	0x40010000
 800347c:	40000400 	.word	0x40000400
 8003480:	40000800 	.word	0x40000800
 8003484:	40000c00 	.word	0x40000c00
 8003488:	40010400 	.word	0x40010400
 800348c:	40014000 	.word	0x40014000
 8003490:	40014400 	.word	0x40014400
 8003494:	40014800 	.word	0x40014800
 8003498:	40001800 	.word	0x40001800
 800349c:	40001c00 	.word	0x40001c00
 80034a0:	40002000 	.word	0x40002000

080034a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e040      	b.n	8003574 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f004 f904 	bl	8007710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2224      	movs	r2, #36	; 0x24
 800350c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0201 	bic.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f82c 	bl	800357c <UART_SetConfig>
 8003524:	4603      	mov	r3, r0
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e022      	b.n	8003574 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 faca 	bl	8003ad0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800354a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800355a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fb51 	bl	8003c14 <UART_CheckIdleState>
 8003572:	4603      	mov	r3, r0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	4bb1      	ldr	r3, [pc, #708]	; (8003870 <UART_SetConfig+0x2f4>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	6939      	ldr	r1, [r7, #16]
 80035b4:	430b      	orrs	r3, r1
 80035b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a9f      	ldr	r2, [pc, #636]	; (8003874 <UART_SetConfig+0x2f8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d121      	bne.n	8003640 <UART_SetConfig+0xc4>
 80035fc:	4b9e      	ldr	r3, [pc, #632]	; (8003878 <UART_SetConfig+0x2fc>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	2b03      	cmp	r3, #3
 8003608:	d816      	bhi.n	8003638 <UART_SetConfig+0xbc>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <UART_SetConfig+0x94>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	08003621 	.word	0x08003621
 8003614:	0800362d 	.word	0x0800362d
 8003618:	08003627 	.word	0x08003627
 800361c:	08003633 	.word	0x08003633
 8003620:	2301      	movs	r3, #1
 8003622:	77fb      	strb	r3, [r7, #31]
 8003624:	e151      	b.n	80038ca <UART_SetConfig+0x34e>
 8003626:	2302      	movs	r3, #2
 8003628:	77fb      	strb	r3, [r7, #31]
 800362a:	e14e      	b.n	80038ca <UART_SetConfig+0x34e>
 800362c:	2304      	movs	r3, #4
 800362e:	77fb      	strb	r3, [r7, #31]
 8003630:	e14b      	b.n	80038ca <UART_SetConfig+0x34e>
 8003632:	2308      	movs	r3, #8
 8003634:	77fb      	strb	r3, [r7, #31]
 8003636:	e148      	b.n	80038ca <UART_SetConfig+0x34e>
 8003638:	2310      	movs	r3, #16
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	bf00      	nop
 800363e:	e144      	b.n	80038ca <UART_SetConfig+0x34e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a8d      	ldr	r2, [pc, #564]	; (800387c <UART_SetConfig+0x300>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d134      	bne.n	80036b4 <UART_SetConfig+0x138>
 800364a:	4b8b      	ldr	r3, [pc, #556]	; (8003878 <UART_SetConfig+0x2fc>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b0c      	cmp	r3, #12
 8003656:	d829      	bhi.n	80036ac <UART_SetConfig+0x130>
 8003658:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <UART_SetConfig+0xe4>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	08003695 	.word	0x08003695
 8003664:	080036ad 	.word	0x080036ad
 8003668:	080036ad 	.word	0x080036ad
 800366c:	080036ad 	.word	0x080036ad
 8003670:	080036a1 	.word	0x080036a1
 8003674:	080036ad 	.word	0x080036ad
 8003678:	080036ad 	.word	0x080036ad
 800367c:	080036ad 	.word	0x080036ad
 8003680:	0800369b 	.word	0x0800369b
 8003684:	080036ad 	.word	0x080036ad
 8003688:	080036ad 	.word	0x080036ad
 800368c:	080036ad 	.word	0x080036ad
 8003690:	080036a7 	.word	0x080036a7
 8003694:	2300      	movs	r3, #0
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e117      	b.n	80038ca <UART_SetConfig+0x34e>
 800369a:	2302      	movs	r3, #2
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e114      	b.n	80038ca <UART_SetConfig+0x34e>
 80036a0:	2304      	movs	r3, #4
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e111      	b.n	80038ca <UART_SetConfig+0x34e>
 80036a6:	2308      	movs	r3, #8
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e10e      	b.n	80038ca <UART_SetConfig+0x34e>
 80036ac:	2310      	movs	r3, #16
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	bf00      	nop
 80036b2:	e10a      	b.n	80038ca <UART_SetConfig+0x34e>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a71      	ldr	r2, [pc, #452]	; (8003880 <UART_SetConfig+0x304>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d120      	bne.n	8003700 <UART_SetConfig+0x184>
 80036be:	4b6e      	ldr	r3, [pc, #440]	; (8003878 <UART_SetConfig+0x2fc>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	d00f      	beq.n	80036ec <UART_SetConfig+0x170>
 80036cc:	2b10      	cmp	r3, #16
 80036ce:	d802      	bhi.n	80036d6 <UART_SetConfig+0x15a>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <UART_SetConfig+0x164>
 80036d4:	e010      	b.n	80036f8 <UART_SetConfig+0x17c>
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d005      	beq.n	80036e6 <UART_SetConfig+0x16a>
 80036da:	2b30      	cmp	r3, #48	; 0x30
 80036dc:	d009      	beq.n	80036f2 <UART_SetConfig+0x176>
 80036de:	e00b      	b.n	80036f8 <UART_SetConfig+0x17c>
 80036e0:	2300      	movs	r3, #0
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	e0f1      	b.n	80038ca <UART_SetConfig+0x34e>
 80036e6:	2302      	movs	r3, #2
 80036e8:	77fb      	strb	r3, [r7, #31]
 80036ea:	e0ee      	b.n	80038ca <UART_SetConfig+0x34e>
 80036ec:	2304      	movs	r3, #4
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e0eb      	b.n	80038ca <UART_SetConfig+0x34e>
 80036f2:	2308      	movs	r3, #8
 80036f4:	77fb      	strb	r3, [r7, #31]
 80036f6:	e0e8      	b.n	80038ca <UART_SetConfig+0x34e>
 80036f8:	2310      	movs	r3, #16
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	bf00      	nop
 80036fe:	e0e4      	b.n	80038ca <UART_SetConfig+0x34e>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a5f      	ldr	r2, [pc, #380]	; (8003884 <UART_SetConfig+0x308>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d120      	bne.n	800374c <UART_SetConfig+0x1d0>
 800370a:	4b5b      	ldr	r3, [pc, #364]	; (8003878 <UART_SetConfig+0x2fc>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003710:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003714:	2b40      	cmp	r3, #64	; 0x40
 8003716:	d00f      	beq.n	8003738 <UART_SetConfig+0x1bc>
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	d802      	bhi.n	8003722 <UART_SetConfig+0x1a6>
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <UART_SetConfig+0x1b0>
 8003720:	e010      	b.n	8003744 <UART_SetConfig+0x1c8>
 8003722:	2b80      	cmp	r3, #128	; 0x80
 8003724:	d005      	beq.n	8003732 <UART_SetConfig+0x1b6>
 8003726:	2bc0      	cmp	r3, #192	; 0xc0
 8003728:	d009      	beq.n	800373e <UART_SetConfig+0x1c2>
 800372a:	e00b      	b.n	8003744 <UART_SetConfig+0x1c8>
 800372c:	2300      	movs	r3, #0
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e0cb      	b.n	80038ca <UART_SetConfig+0x34e>
 8003732:	2302      	movs	r3, #2
 8003734:	77fb      	strb	r3, [r7, #31]
 8003736:	e0c8      	b.n	80038ca <UART_SetConfig+0x34e>
 8003738:	2304      	movs	r3, #4
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e0c5      	b.n	80038ca <UART_SetConfig+0x34e>
 800373e:	2308      	movs	r3, #8
 8003740:	77fb      	strb	r3, [r7, #31]
 8003742:	e0c2      	b.n	80038ca <UART_SetConfig+0x34e>
 8003744:	2310      	movs	r3, #16
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	bf00      	nop
 800374a:	e0be      	b.n	80038ca <UART_SetConfig+0x34e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a4d      	ldr	r2, [pc, #308]	; (8003888 <UART_SetConfig+0x30c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d124      	bne.n	80037a0 <UART_SetConfig+0x224>
 8003756:	4b48      	ldr	r3, [pc, #288]	; (8003878 <UART_SetConfig+0x2fc>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003764:	d012      	beq.n	800378c <UART_SetConfig+0x210>
 8003766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376a:	d802      	bhi.n	8003772 <UART_SetConfig+0x1f6>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d007      	beq.n	8003780 <UART_SetConfig+0x204>
 8003770:	e012      	b.n	8003798 <UART_SetConfig+0x21c>
 8003772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003776:	d006      	beq.n	8003786 <UART_SetConfig+0x20a>
 8003778:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800377c:	d009      	beq.n	8003792 <UART_SetConfig+0x216>
 800377e:	e00b      	b.n	8003798 <UART_SetConfig+0x21c>
 8003780:	2300      	movs	r3, #0
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e0a1      	b.n	80038ca <UART_SetConfig+0x34e>
 8003786:	2302      	movs	r3, #2
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e09e      	b.n	80038ca <UART_SetConfig+0x34e>
 800378c:	2304      	movs	r3, #4
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e09b      	b.n	80038ca <UART_SetConfig+0x34e>
 8003792:	2308      	movs	r3, #8
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e098      	b.n	80038ca <UART_SetConfig+0x34e>
 8003798:	2310      	movs	r3, #16
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	bf00      	nop
 800379e:	e094      	b.n	80038ca <UART_SetConfig+0x34e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a39      	ldr	r2, [pc, #228]	; (800388c <UART_SetConfig+0x310>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d124      	bne.n	80037f4 <UART_SetConfig+0x278>
 80037aa:	4b33      	ldr	r3, [pc, #204]	; (8003878 <UART_SetConfig+0x2fc>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b8:	d012      	beq.n	80037e0 <UART_SetConfig+0x264>
 80037ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037be:	d802      	bhi.n	80037c6 <UART_SetConfig+0x24a>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <UART_SetConfig+0x258>
 80037c4:	e012      	b.n	80037ec <UART_SetConfig+0x270>
 80037c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ca:	d006      	beq.n	80037da <UART_SetConfig+0x25e>
 80037cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037d0:	d009      	beq.n	80037e6 <UART_SetConfig+0x26a>
 80037d2:	e00b      	b.n	80037ec <UART_SetConfig+0x270>
 80037d4:	2301      	movs	r3, #1
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e077      	b.n	80038ca <UART_SetConfig+0x34e>
 80037da:	2302      	movs	r3, #2
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e074      	b.n	80038ca <UART_SetConfig+0x34e>
 80037e0:	2304      	movs	r3, #4
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e071      	b.n	80038ca <UART_SetConfig+0x34e>
 80037e6:	2308      	movs	r3, #8
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e06e      	b.n	80038ca <UART_SetConfig+0x34e>
 80037ec:	2310      	movs	r3, #16
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	bf00      	nop
 80037f2:	e06a      	b.n	80038ca <UART_SetConfig+0x34e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a25      	ldr	r2, [pc, #148]	; (8003890 <UART_SetConfig+0x314>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d124      	bne.n	8003848 <UART_SetConfig+0x2cc>
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <UART_SetConfig+0x2fc>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380c:	d012      	beq.n	8003834 <UART_SetConfig+0x2b8>
 800380e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003812:	d802      	bhi.n	800381a <UART_SetConfig+0x29e>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <UART_SetConfig+0x2ac>
 8003818:	e012      	b.n	8003840 <UART_SetConfig+0x2c4>
 800381a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381e:	d006      	beq.n	800382e <UART_SetConfig+0x2b2>
 8003820:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003824:	d009      	beq.n	800383a <UART_SetConfig+0x2be>
 8003826:	e00b      	b.n	8003840 <UART_SetConfig+0x2c4>
 8003828:	2300      	movs	r3, #0
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e04d      	b.n	80038ca <UART_SetConfig+0x34e>
 800382e:	2302      	movs	r3, #2
 8003830:	77fb      	strb	r3, [r7, #31]
 8003832:	e04a      	b.n	80038ca <UART_SetConfig+0x34e>
 8003834:	2304      	movs	r3, #4
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e047      	b.n	80038ca <UART_SetConfig+0x34e>
 800383a:	2308      	movs	r3, #8
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e044      	b.n	80038ca <UART_SetConfig+0x34e>
 8003840:	2310      	movs	r3, #16
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	bf00      	nop
 8003846:	e040      	b.n	80038ca <UART_SetConfig+0x34e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a11      	ldr	r2, [pc, #68]	; (8003894 <UART_SetConfig+0x318>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d139      	bne.n	80038c6 <UART_SetConfig+0x34a>
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <UART_SetConfig+0x2fc>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800385c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003860:	d027      	beq.n	80038b2 <UART_SetConfig+0x336>
 8003862:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003866:	d817      	bhi.n	8003898 <UART_SetConfig+0x31c>
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01c      	beq.n	80038a6 <UART_SetConfig+0x32a>
 800386c:	e027      	b.n	80038be <UART_SetConfig+0x342>
 800386e:	bf00      	nop
 8003870:	efff69f3 	.word	0xefff69f3
 8003874:	40011000 	.word	0x40011000
 8003878:	40023800 	.word	0x40023800
 800387c:	40004400 	.word	0x40004400
 8003880:	40004800 	.word	0x40004800
 8003884:	40004c00 	.word	0x40004c00
 8003888:	40005000 	.word	0x40005000
 800388c:	40011400 	.word	0x40011400
 8003890:	40007800 	.word	0x40007800
 8003894:	40007c00 	.word	0x40007c00
 8003898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800389c:	d006      	beq.n	80038ac <UART_SetConfig+0x330>
 800389e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038a2:	d009      	beq.n	80038b8 <UART_SetConfig+0x33c>
 80038a4:	e00b      	b.n	80038be <UART_SetConfig+0x342>
 80038a6:	2300      	movs	r3, #0
 80038a8:	77fb      	strb	r3, [r7, #31]
 80038aa:	e00e      	b.n	80038ca <UART_SetConfig+0x34e>
 80038ac:	2302      	movs	r3, #2
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e00b      	b.n	80038ca <UART_SetConfig+0x34e>
 80038b2:	2304      	movs	r3, #4
 80038b4:	77fb      	strb	r3, [r7, #31]
 80038b6:	e008      	b.n	80038ca <UART_SetConfig+0x34e>
 80038b8:	2308      	movs	r3, #8
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e005      	b.n	80038ca <UART_SetConfig+0x34e>
 80038be:	2310      	movs	r3, #16
 80038c0:	77fb      	strb	r3, [r7, #31]
 80038c2:	bf00      	nop
 80038c4:	e001      	b.n	80038ca <UART_SetConfig+0x34e>
 80038c6:	2310      	movs	r3, #16
 80038c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d2:	d17f      	bne.n	80039d4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80038d4:	7ffb      	ldrb	r3, [r7, #31]
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d85c      	bhi.n	8003994 <UART_SetConfig+0x418>
 80038da:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <UART_SetConfig+0x364>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	08003905 	.word	0x08003905
 80038e4:	08003925 	.word	0x08003925
 80038e8:	08003945 	.word	0x08003945
 80038ec:	08003995 	.word	0x08003995
 80038f0:	0800395d 	.word	0x0800395d
 80038f4:	08003995 	.word	0x08003995
 80038f8:	08003995 	.word	0x08003995
 80038fc:	08003995 	.word	0x08003995
 8003900:	0800397d 	.word	0x0800397d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003904:	f7fe ff3e 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8003908:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	005a      	lsls	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	085b      	lsrs	r3, r3, #1
 8003914:	441a      	add	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	fbb2 f3f3 	udiv	r3, r2, r3
 800391e:	b29b      	uxth	r3, r3
 8003920:	61bb      	str	r3, [r7, #24]
        break;
 8003922:	e03a      	b.n	800399a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003924:	f7fe ff42 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 8003928:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	005a      	lsls	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	085b      	lsrs	r3, r3, #1
 8003934:	441a      	add	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	fbb2 f3f3 	udiv	r3, r2, r3
 800393e:	b29b      	uxth	r3, r3
 8003940:	61bb      	str	r3, [r7, #24]
        break;
 8003942:	e02a      	b.n	800399a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	085a      	lsrs	r2, r3, #1
 800394a:	4b5f      	ldr	r3, [pc, #380]	; (8003ac8 <UART_SetConfig+0x54c>)
 800394c:	4413      	add	r3, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6852      	ldr	r2, [r2, #4]
 8003952:	fbb3 f3f2 	udiv	r3, r3, r2
 8003956:	b29b      	uxth	r3, r3
 8003958:	61bb      	str	r3, [r7, #24]
        break;
 800395a:	e01e      	b.n	800399a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800395c:	f7fe fe2e 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8003960:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	005a      	lsls	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	085b      	lsrs	r3, r3, #1
 800396c:	441a      	add	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	b29b      	uxth	r3, r3
 8003978:	61bb      	str	r3, [r7, #24]
        break;
 800397a:	e00e      	b.n	800399a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	085b      	lsrs	r3, r3, #1
 8003982:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	fbb2 f3f3 	udiv	r3, r2, r3
 800398e:	b29b      	uxth	r3, r3
 8003990:	61bb      	str	r3, [r7, #24]
        break;
 8003992:	e002      	b.n	800399a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	75fb      	strb	r3, [r7, #23]
        break;
 8003998:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b0f      	cmp	r3, #15
 800399e:	d916      	bls.n	80039ce <UART_SetConfig+0x452>
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a6:	d212      	bcs.n	80039ce <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	f023 030f 	bic.w	r3, r3, #15
 80039b0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	085b      	lsrs	r3, r3, #1
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	b29a      	uxth	r2, r3
 80039be:	897b      	ldrh	r3, [r7, #10]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	897a      	ldrh	r2, [r7, #10]
 80039ca:	60da      	str	r2, [r3, #12]
 80039cc:	e070      	b.n	8003ab0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	75fb      	strb	r3, [r7, #23]
 80039d2:	e06d      	b.n	8003ab0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80039d4:	7ffb      	ldrb	r3, [r7, #31]
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d859      	bhi.n	8003a8e <UART_SetConfig+0x512>
 80039da:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <UART_SetConfig+0x464>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	08003a05 	.word	0x08003a05
 80039e4:	08003a23 	.word	0x08003a23
 80039e8:	08003a41 	.word	0x08003a41
 80039ec:	08003a8f 	.word	0x08003a8f
 80039f0:	08003a59 	.word	0x08003a59
 80039f4:	08003a8f 	.word	0x08003a8f
 80039f8:	08003a8f 	.word	0x08003a8f
 80039fc:	08003a8f 	.word	0x08003a8f
 8003a00:	08003a77 	.word	0x08003a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a04:	f7fe febe 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8003a08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	085a      	lsrs	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	441a      	add	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	61bb      	str	r3, [r7, #24]
        break;
 8003a20:	e038      	b.n	8003a94 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a22:	f7fe fec3 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 8003a26:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	085a      	lsrs	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	441a      	add	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	61bb      	str	r3, [r7, #24]
        break;
 8003a3e:	e029      	b.n	8003a94 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	085a      	lsrs	r2, r3, #1
 8003a46:	4b21      	ldr	r3, [pc, #132]	; (8003acc <UART_SetConfig+0x550>)
 8003a48:	4413      	add	r3, r2
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6852      	ldr	r2, [r2, #4]
 8003a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	61bb      	str	r3, [r7, #24]
        break;
 8003a56:	e01d      	b.n	8003a94 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a58:	f7fe fdb0 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8003a5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	085a      	lsrs	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	441a      	add	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	61bb      	str	r3, [r7, #24]
        break;
 8003a74:	e00e      	b.n	8003a94 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	61bb      	str	r3, [r7, #24]
        break;
 8003a8c:	e002      	b.n	8003a94 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
        break;
 8003a92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b0f      	cmp	r3, #15
 8003a98:	d908      	bls.n	8003aac <UART_SetConfig+0x530>
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa0:	d204      	bcs.n	8003aac <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	e001      	b.n	8003ab0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	01e84800 	.word	0x01e84800
 8003acc:	00f42400 	.word	0x00f42400

08003ad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01a      	beq.n	8003be6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bce:	d10a      	bne.n	8003be6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
  }
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c22:	f7fc fc97 	bl	8000554 <HAL_GetTick>
 8003c26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d10e      	bne.n	8003c54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f814 	bl	8003c72 <UART_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e00a      	b.n	8003c6a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c82:	e05d      	b.n	8003d40 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	d059      	beq.n	8003d40 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8c:	f7fc fc62 	bl	8000554 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d302      	bcc.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d11b      	bne.n	8003cda <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cb0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e042      	b.n	8003d60 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d02b      	beq.n	8003d40 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf6:	d123      	bne.n	8003d40 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d00:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d10:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0201 	bic.w	r2, r2, #1
 8003d20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e00f      	b.n	8003d60 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69da      	ldr	r2, [r3, #28]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d092      	beq.n	8003c84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d68:	b084      	sub	sp, #16
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	f107 001c 	add.w	r0, r7, #28
 8003d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d120      	bne.n	8003dc2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <USB_CoreInit+0xac>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d105      	bne.n	8003db6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fa52 	bl	8004260 <USB_CoreReset>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	73fb      	strb	r3, [r7, #15]
 8003dc0:	e010      	b.n	8003de4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fa46 	bl	8004260 <USB_CoreReset>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d10b      	bne.n	8003e02 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f043 0206 	orr.w	r2, r3, #6
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f043 0220 	orr.w	r2, r3, #32
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e0e:	b004      	add	sp, #16
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	ffbdffbf 	.word	0xffbdffbf

08003e18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f023 0201 	bic.w	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	460b      	mov	r3, r1
 8003e44:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d106      	bne.n	8003e66 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	60da      	str	r2, [r3, #12]
 8003e64:	e00b      	b.n	8003e7e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d106      	bne.n	8003e7a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]
 8003e78:	e001      	b.n	8003e7e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e003      	b.n	8003e86 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003e7e:	2032      	movs	r0, #50	; 0x32
 8003e80:	f7fc fb74 	bl	800056c <HAL_Delay>

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e90:	b084      	sub	sp, #16
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b086      	sub	sp, #24
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003eaa:	2300      	movs	r3, #0
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	e009      	b.n	8003ec4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	3340      	adds	r3, #64	; 0x40
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	2200      	movs	r2, #0
 8003ebc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b0e      	cmp	r3, #14
 8003ec8:	d9f2      	bls.n	8003eb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d11c      	bne.n	8003f0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ede:	f043 0302 	orr.w	r3, r3, #2
 8003ee2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e005      	b.n	8003f16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2300      	movs	r3, #0
 8003f20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f28:	4619      	mov	r1, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f30:	461a      	mov	r2, r3
 8003f32:	680b      	ldr	r3, [r1, #0]
 8003f34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d10c      	bne.n	8003f56 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d104      	bne.n	8003f4c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f42:	2100      	movs	r1, #0
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f959 	bl	80041fc <USB_SetDevSpeed>
 8003f4a:	e018      	b.n	8003f7e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f954 	bl	80041fc <USB_SetDevSpeed>
 8003f54:	e013      	b.n	8003f7e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d10c      	bne.n	8003f76 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d104      	bne.n	8003f6c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f62:	2100      	movs	r1, #0
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f949 	bl	80041fc <USB_SetDevSpeed>
 8003f6a:	e008      	b.n	8003f7e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f944 	bl	80041fc <USB_SetDevSpeed>
 8003f74:	e003      	b.n	8003f7e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f76:	2103      	movs	r1, #3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f93f 	bl	80041fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f7e:	2110      	movs	r1, #16
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f8f3 	bl	800416c <USB_FlushTxFifo>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f911 	bl	80041b8 <USB_FlushRxFifo>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	e043      	b.n	8004052 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fe0:	d118      	bne.n	8004014 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	e013      	b.n	8004026 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400a:	461a      	mov	r2, r3
 800400c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	e008      	b.n	8004026 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004020:	461a      	mov	r2, r3
 8004022:	2300      	movs	r3, #0
 8004024:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004032:	461a      	mov	r2, r3
 8004034:	2300      	movs	r3, #0
 8004036:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004044:	461a      	mov	r2, r3
 8004046:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800404a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	3301      	adds	r3, #1
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	429a      	cmp	r2, r3
 8004058:	d3b7      	bcc.n	8003fca <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e043      	b.n	80040e8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004072:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004076:	d118      	bne.n	80040aa <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408a:	461a      	mov	r2, r3
 800408c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e013      	b.n	80040bc <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a0:	461a      	mov	r2, r3
 80040a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	e008      	b.n	80040bc <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	461a      	mov	r2, r3
 80040b8:	2300      	movs	r3, #0
 80040ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c8:	461a      	mov	r2, r3
 80040ca:	2300      	movs	r3, #0
 80040cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040da:	461a      	mov	r2, r3
 80040dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	3301      	adds	r3, #1
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d3b7      	bcc.n	8004060 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004102:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004110:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	f043 0210 	orr.w	r2, r3, #16
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <USB_DevInit+0x2d4>)
 800412a:	4313      	orrs	r3, r2
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f043 0208 	orr.w	r2, r3, #8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004144:	2b01      	cmp	r3, #1
 8004146:	d105      	bne.n	8004154 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699a      	ldr	r2, [r3, #24]
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <USB_DevInit+0x2d8>)
 800414e:	4313      	orrs	r3, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004154:	7dfb      	ldrb	r3, [r7, #23]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004160:	b004      	add	sp, #16
 8004162:	4770      	bx	lr
 8004164:	803c3800 	.word	0x803c3800
 8004168:	40000004 	.word	0x40000004

0800416c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	019b      	lsls	r3, r3, #6
 800417e:	f043 0220 	orr.w	r2, r3, #32
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3301      	adds	r3, #1
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <USB_FlushTxFifo+0x48>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e006      	b.n	80041a6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d0f0      	beq.n	8004186 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	00030d40 	.word	0x00030d40

080041b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2210      	movs	r2, #16
 80041c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3301      	adds	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4a09      	ldr	r2, [pc, #36]	; (80041f8 <USB_FlushRxFifo+0x40>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d901      	bls.n	80041dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e006      	b.n	80041ea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b10      	cmp	r3, #16
 80041e6:	d0f0      	beq.n	80041ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	00030d40 	.word	0x00030d40

080041fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	68f9      	ldr	r1, [r7, #12]
 8004218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800421c:	4313      	orrs	r3, r2
 800421e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004248:	f043 0302 	orr.w	r3, r3, #2
 800424c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800424e:	2003      	movs	r0, #3
 8004250:	f7fc f98c 	bl	800056c <HAL_Delay>

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3301      	adds	r3, #1
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4a13      	ldr	r2, [pc, #76]	; (80042c4 <USB_CoreReset+0x64>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e01b      	b.n	80042b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	daf2      	bge.n	800426c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f043 0201 	orr.w	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3301      	adds	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a09      	ldr	r2, [pc, #36]	; (80042c4 <USB_CoreReset+0x64>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e006      	b.n	80042b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d0f0      	beq.n	8004296 <USB_CoreReset+0x36>

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	00030d40 	.word	0x00030d40

080042c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042de:	f3ef 8305 	mrs	r3, IPSR
 80042e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80042e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10f      	bne.n	800430a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ea:	f3ef 8310 	mrs	r3, PRIMASK
 80042ee:	607b      	str	r3, [r7, #4]
  return(result);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d105      	bne.n	8004302 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042f6:	f3ef 8311 	mrs	r3, BASEPRI
 80042fa:	603b      	str	r3, [r7, #0]
  return(result);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <osKernelInitialize+0x3a>
 8004302:	4b0e      	ldr	r3, [pc, #56]	; (800433c <osKernelInitialize+0x64>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d103      	bne.n	8004312 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800430a:	f06f 0305 	mvn.w	r3, #5
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	e00c      	b.n	800432c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004312:	4b0a      	ldr	r3, [pc, #40]	; (800433c <osKernelInitialize+0x64>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d105      	bne.n	8004326 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <osKernelInitialize+0x64>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e002      	b.n	800432c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004326:	f04f 33ff 	mov.w	r3, #4294967295
 800432a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800432c:	68fb      	ldr	r3, [r7, #12]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	2000002c 	.word	0x2000002c

08004340 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004346:	f3ef 8305 	mrs	r3, IPSR
 800434a:	60bb      	str	r3, [r7, #8]
  return(result);
 800434c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10f      	bne.n	8004372 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004352:	f3ef 8310 	mrs	r3, PRIMASK
 8004356:	607b      	str	r3, [r7, #4]
  return(result);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d105      	bne.n	800436a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800435e:	f3ef 8311 	mrs	r3, BASEPRI
 8004362:	603b      	str	r3, [r7, #0]
  return(result);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d007      	beq.n	800437a <osKernelStart+0x3a>
 800436a:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <osKernelStart+0x68>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d103      	bne.n	800437a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004372:	f06f 0305 	mvn.w	r3, #5
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e010      	b.n	800439c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800437a:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <osKernelStart+0x68>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d109      	bne.n	8004396 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004382:	f7ff ffa1 	bl	80042c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004386:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <osKernelStart+0x68>)
 8004388:	2202      	movs	r2, #2
 800438a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800438c:	f001 f964 	bl	8005658 <vTaskStartScheduler>
      stat = osOK;
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	e002      	b.n	800439c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004396:	f04f 33ff 	mov.w	r3, #4294967295
 800439a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800439c:	68fb      	ldr	r3, [r7, #12]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	2000002c 	.word	0x2000002c

080043ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b090      	sub	sp, #64	; 0x40
 80043b0:	af04      	add	r7, sp, #16
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043bc:	f3ef 8305 	mrs	r3, IPSR
 80043c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80043c2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f040 808f 	bne.w	80044e8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ca:	f3ef 8310 	mrs	r3, PRIMASK
 80043ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d105      	bne.n	80043e2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043d6:	f3ef 8311 	mrs	r3, BASEPRI
 80043da:	617b      	str	r3, [r7, #20]
  return(result);
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <osThreadNew+0x3e>
 80043e2:	4b44      	ldr	r3, [pc, #272]	; (80044f4 <osThreadNew+0x148>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d07e      	beq.n	80044e8 <osThreadNew+0x13c>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d07b      	beq.n	80044e8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80043f4:	2318      	movs	r3, #24
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80043fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004400:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d045      	beq.n	8004494 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <osThreadNew+0x6a>
        name = attr->name;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	d008      	beq.n	800443c <osThreadNew+0x90>
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	2b38      	cmp	r3, #56	; 0x38
 800442e:	d805      	bhi.n	800443c <osThreadNew+0x90>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <osThreadNew+0x94>
        return (NULL);
 800443c:	2300      	movs	r3, #0
 800443e:	e054      	b.n	80044ea <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	089b      	lsrs	r3, r3, #2
 800444e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00e      	beq.n	8004476 <osThreadNew+0xca>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	2b5b      	cmp	r3, #91	; 0x5b
 800445e:	d90a      	bls.n	8004476 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004464:	2b00      	cmp	r3, #0
 8004466:	d006      	beq.n	8004476 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <osThreadNew+0xca>
        mem = 1;
 8004470:	2301      	movs	r3, #1
 8004472:	623b      	str	r3, [r7, #32]
 8004474:	e010      	b.n	8004498 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10c      	bne.n	8004498 <osThreadNew+0xec>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d108      	bne.n	8004498 <osThreadNew+0xec>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d104      	bne.n	8004498 <osThreadNew+0xec>
          mem = 0;
 800448e:	2300      	movs	r3, #0
 8004490:	623b      	str	r3, [r7, #32]
 8004492:	e001      	b.n	8004498 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d110      	bne.n	80044c0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044a6:	9202      	str	r2, [sp, #8]
 80044a8:	9301      	str	r3, [sp, #4]
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fef3 	bl	80052a0 <xTaskCreateStatic>
 80044ba:	4603      	mov	r3, r0
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	e013      	b.n	80044e8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d110      	bne.n	80044e8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	f107 0310 	add.w	r3, r7, #16
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 ff41 	bl	8005360 <xTaskCreate>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d001      	beq.n	80044e8 <osThreadNew+0x13c>
          hTask = NULL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80044e8:	693b      	ldr	r3, [r7, #16]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3730      	adds	r7, #48	; 0x30
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	2000002c 	.word	0x2000002c

080044f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004500:	f3ef 8305 	mrs	r3, IPSR
 8004504:	613b      	str	r3, [r7, #16]
  return(result);
 8004506:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10f      	bne.n	800452c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800450c:	f3ef 8310 	mrs	r3, PRIMASK
 8004510:	60fb      	str	r3, [r7, #12]
  return(result);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d105      	bne.n	8004524 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004518:	f3ef 8311 	mrs	r3, BASEPRI
 800451c:	60bb      	str	r3, [r7, #8]
  return(result);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <osDelay+0x3c>
 8004524:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <osDelay+0x58>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d103      	bne.n	8004534 <osDelay+0x3c>
    stat = osErrorISR;
 800452c:	f06f 0305 	mvn.w	r3, #5
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e007      	b.n	8004544 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <osDelay+0x4c>
      vTaskDelay(ticks);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f001 f854 	bl	80055ec <vTaskDelay>
    }
  }

  return (stat);
 8004544:	697b      	ldr	r3, [r7, #20]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	2000002c 	.word	0x2000002c

08004554 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b08c      	sub	sp, #48	; 0x30
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004564:	f3ef 8305 	mrs	r3, IPSR
 8004568:	61bb      	str	r3, [r7, #24]
  return(result);
 800456a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800456c:	2b00      	cmp	r3, #0
 800456e:	d170      	bne.n	8004652 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004570:	f3ef 8310 	mrs	r3, PRIMASK
 8004574:	617b      	str	r3, [r7, #20]
  return(result);
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d105      	bne.n	8004588 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800457c:	f3ef 8311 	mrs	r3, BASEPRI
 8004580:	613b      	str	r3, [r7, #16]
  return(result);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <osMessageQueueNew+0x3c>
 8004588:	4b34      	ldr	r3, [pc, #208]	; (800465c <osMessageQueueNew+0x108>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d060      	beq.n	8004652 <osMessageQueueNew+0xfe>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d05d      	beq.n	8004652 <osMessageQueueNew+0xfe>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d05a      	beq.n	8004652 <osMessageQueueNew+0xfe>
    mem = -1;
 800459c:	f04f 33ff 	mov.w	r3, #4294967295
 80045a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d029      	beq.n	80045fc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d012      	beq.n	80045d6 <osMessageQueueNew+0x82>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b4f      	cmp	r3, #79	; 0x4f
 80045b6:	d90e      	bls.n	80045d6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	695a      	ldr	r2, [r3, #20]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	fb01 f303 	mul.w	r3, r1, r3
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d302      	bcc.n	80045d6 <osMessageQueueNew+0x82>
        mem = 1;
 80045d0:	2301      	movs	r3, #1
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	e014      	b.n	8004600 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d110      	bne.n	8004600 <osMessageQueueNew+0xac>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10c      	bne.n	8004600 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d108      	bne.n	8004600 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d104      	bne.n	8004600 <osMessageQueueNew+0xac>
          mem = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	623b      	str	r3, [r7, #32]
 80045fa:	e001      	b.n	8004600 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d10c      	bne.n	8004620 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6899      	ldr	r1, [r3, #8]
 800460e:	2300      	movs	r3, #0
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	460b      	mov	r3, r1
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f974 	bl	8004904 <xQueueGenericCreateStatic>
 800461c:	6278      	str	r0, [r7, #36]	; 0x24
 800461e:	e008      	b.n	8004632 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d105      	bne.n	8004632 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004626:	2200      	movs	r2, #0
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f9e7 	bl	80049fe <xQueueGenericCreate>
 8004630:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00c      	beq.n	8004652 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <osMessageQueueNew+0xf2>
        name = attr->name;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	61fb      	str	r3, [r7, #28]
 8004644:	e001      	b.n	800464a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800464a:	69f9      	ldr	r1, [r7, #28]
 800464c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800464e:	f000 fdcb 	bl	80051e8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004654:	4618      	mov	r0, r3
 8004656:	3728      	adds	r7, #40	; 0x28
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	2000002c 	.word	0x2000002c

08004660 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4a07      	ldr	r2, [pc, #28]	; (800468c <vApplicationGetIdleTaskMemory+0x2c>)
 8004670:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4a06      	ldr	r2, [pc, #24]	; (8004690 <vApplicationGetIdleTaskMemory+0x30>)
 8004676:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2280      	movs	r2, #128	; 0x80
 800467c:	601a      	str	r2, [r3, #0]
}
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000030 	.word	0x20000030
 8004690:	2000008c 	.word	0x2000008c

08004694 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a07      	ldr	r2, [pc, #28]	; (80046c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80046a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4a06      	ldr	r2, [pc, #24]	; (80046c4 <vApplicationGetTimerTaskMemory+0x30>)
 80046aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046b2:	601a      	str	r2, [r3, #0]
}
 80046b4:	bf00      	nop
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	2000028c 	.word	0x2000028c
 80046c4:	200002e8 	.word	0x200002e8

080046c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f103 0208 	add.w	r2, r3, #8
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f04f 32ff 	mov.w	r2, #4294967295
 80046e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f103 0208 	add.w	r2, r3, #8
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f103 0208 	add.w	r2, r3, #8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004722:	b480      	push	{r7}
 8004724:	b085      	sub	sp, #20
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	601a      	str	r2, [r3, #0]
}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800476a:	b480      	push	{r7}
 800476c:	b085      	sub	sp, #20
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004780:	d103      	bne.n	800478a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e00c      	b.n	80047a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3308      	adds	r3, #8
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	e002      	b.n	8004798 <vListInsert+0x2e>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d2f6      	bcs.n	8004792 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	601a      	str	r2, [r3, #0]
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6892      	ldr	r2, [r2, #8]
 80047f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6852      	ldr	r2, [r2, #4]
 80047fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	429a      	cmp	r2, r3
 8004806:	d103      	bne.n	8004810 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	1e5a      	subs	r2, r3, #1
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10b      	bne.n	800485c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	b672      	cpsid	i
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	b662      	cpsie	i
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	e7fe      	b.n	800485a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800485c:	f002 f884 	bl	8006968 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004868:	68f9      	ldr	r1, [r7, #12]
 800486a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	441a      	add	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	3b01      	subs	r3, #1
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	441a      	add	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	22ff      	movs	r2, #255	; 0xff
 80048a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	22ff      	movs	r2, #255	; 0xff
 80048a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d114      	bne.n	80048dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01a      	beq.n	80048f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3310      	adds	r3, #16
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 f958 	bl	8005b74 <xTaskRemoveFromEventList>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d012      	beq.n	80048f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048ca:	4b0d      	ldr	r3, [pc, #52]	; (8004900 <xQueueGenericReset+0xd0>)
 80048cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	e009      	b.n	80048f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3310      	adds	r3, #16
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fef1 	bl	80046c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3324      	adds	r3, #36	; 0x24
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff feec 	bl	80046c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048f0:	f002 f86c 	bl	80069cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048f4:	2301      	movs	r3, #1
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08e      	sub	sp, #56	; 0x38
 8004908:	af02      	add	r7, sp, #8
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10b      	bne.n	8004930 <xQueueGenericCreateStatic+0x2c>
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	b672      	cpsid	i
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	b662      	cpsie	i
 800492c:	62bb      	str	r3, [r7, #40]	; 0x28
 800492e:	e7fe      	b.n	800492e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10b      	bne.n	800494e <xQueueGenericCreateStatic+0x4a>
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	b672      	cpsid	i
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	b662      	cpsie	i
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
 800494c:	e7fe      	b.n	800494c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <xQueueGenericCreateStatic+0x56>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <xQueueGenericCreateStatic+0x5a>
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <xQueueGenericCreateStatic+0x5c>
 800495e:	2300      	movs	r3, #0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10b      	bne.n	800497c <xQueueGenericCreateStatic+0x78>
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	b672      	cpsid	i
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	b662      	cpsie	i
 8004978:	623b      	str	r3, [r7, #32]
 800497a:	e7fe      	b.n	800497a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <xQueueGenericCreateStatic+0x84>
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <xQueueGenericCreateStatic+0x88>
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <xQueueGenericCreateStatic+0x8a>
 800498c:	2300      	movs	r3, #0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10b      	bne.n	80049aa <xQueueGenericCreateStatic+0xa6>
 8004992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004996:	b672      	cpsid	i
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	b662      	cpsie	i
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	e7fe      	b.n	80049a8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049aa:	2350      	movs	r3, #80	; 0x50
 80049ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b50      	cmp	r3, #80	; 0x50
 80049b2:	d00b      	beq.n	80049cc <xQueueGenericCreateStatic+0xc8>
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	b672      	cpsid	i
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	b662      	cpsie	i
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	e7fe      	b.n	80049ca <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80049d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00d      	beq.n	80049f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049e0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	4613      	mov	r3, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f846 	bl	8004a80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3730      	adds	r7, #48	; 0x30
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b08a      	sub	sp, #40	; 0x28
 8004a02:	af02      	add	r7, sp, #8
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <xQueueGenericCreate+0x2c>
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	b672      	cpsid	i
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	b662      	cpsie	i
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	e7fe      	b.n	8004a28 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d102      	bne.n	8004a36 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	e004      	b.n	8004a40 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	fb02 f303 	mul.w	r3, r2, r3
 8004a3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	3350      	adds	r3, #80	; 0x50
 8004a44:	4618      	mov	r0, r3
 8004a46:	f002 f8b1 	bl	8006bac <pvPortMalloc>
 8004a4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d011      	beq.n	8004a76 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	3350      	adds	r3, #80	; 0x50
 8004a5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a64:	79fa      	ldrb	r2, [r7, #7]
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f805 	bl	8004a80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a76:	69bb      	ldr	r3, [r7, #24]
	}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d103      	bne.n	8004a9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e002      	b.n	8004aa2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004aae:	2101      	movs	r1, #1
 8004ab0:	69b8      	ldr	r0, [r7, #24]
 8004ab2:	f7ff febd 	bl	8004830 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	78fa      	ldrb	r2, [r7, #3]
 8004aba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004abe:	bf00      	nop
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08e      	sub	sp, #56	; 0x38
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10b      	bne.n	8004afc <xQueueGenericSend+0x34>
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	b672      	cpsid	i
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	b662      	cpsie	i
 8004af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004afa:	e7fe      	b.n	8004afa <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d103      	bne.n	8004b0a <xQueueGenericSend+0x42>
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <xQueueGenericSend+0x46>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <xQueueGenericSend+0x48>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <xQueueGenericSend+0x64>
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	b672      	cpsid	i
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	b662      	cpsie	i
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2a:	e7fe      	b.n	8004b2a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d103      	bne.n	8004b3a <xQueueGenericSend+0x72>
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <xQueueGenericSend+0x76>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <xQueueGenericSend+0x78>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <xQueueGenericSend+0x94>
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	b672      	cpsid	i
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	b662      	cpsie	i
 8004b58:	623b      	str	r3, [r7, #32]
 8004b5a:	e7fe      	b.n	8004b5a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b5c:	f001 f9c8 	bl	8005ef0 <xTaskGetSchedulerState>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <xQueueGenericSend+0xa4>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <xQueueGenericSend+0xa8>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <xQueueGenericSend+0xaa>
 8004b70:	2300      	movs	r3, #0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10b      	bne.n	8004b8e <xQueueGenericSend+0xc6>
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	b672      	cpsid	i
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	b662      	cpsie	i
 8004b8a:	61fb      	str	r3, [r7, #28]
 8004b8c:	e7fe      	b.n	8004b8c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b8e:	f001 feeb 	bl	8006968 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d302      	bcc.n	8004ba4 <xQueueGenericSend+0xdc>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d129      	bne.n	8004bf8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004baa:	f000 fa0d 	bl	8004fc8 <prvCopyDataToQueue>
 8004bae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d010      	beq.n	8004bda <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	3324      	adds	r3, #36	; 0x24
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 ffd9 	bl	8005b74 <xTaskRemoveFromEventList>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d013      	beq.n	8004bf0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004bc8:	4b3f      	ldr	r3, [pc, #252]	; (8004cc8 <xQueueGenericSend+0x200>)
 8004bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	e00a      	b.n	8004bf0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004be0:	4b39      	ldr	r3, [pc, #228]	; (8004cc8 <xQueueGenericSend+0x200>)
 8004be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bf0:	f001 feec 	bl	80069cc <vPortExitCritical>
				return pdPASS;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e063      	b.n	8004cc0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d103      	bne.n	8004c06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bfe:	f001 fee5 	bl	80069cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e05c      	b.n	8004cc0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d106      	bne.n	8004c1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c0c:	f107 0314 	add.w	r3, r7, #20
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 f813 	bl	8005c3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c16:	2301      	movs	r3, #1
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c1a:	f001 fed7 	bl	80069cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c1e:	f000 fd83 	bl	8005728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c22:	f001 fea1 	bl	8006968 <vPortEnterCritical>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c2c:	b25b      	sxtb	r3, r3
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d103      	bne.n	8004c3c <xQueueGenericSend+0x174>
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c48:	d103      	bne.n	8004c52 <xQueueGenericSend+0x18a>
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c52:	f001 febb 	bl	80069cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c56:	1d3a      	adds	r2, r7, #4
 8004c58:	f107 0314 	add.w	r3, r7, #20
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f001 f802 	bl	8005c68 <xTaskCheckForTimeOut>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d124      	bne.n	8004cb4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c6c:	f000 faa4 	bl	80051b8 <prvIsQueueFull>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d018      	beq.n	8004ca8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	3310      	adds	r3, #16
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 ff26 	bl	8005ad0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c86:	f000 fa2f 	bl	80050e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c8a:	f000 fd5b 	bl	8005744 <xTaskResumeAll>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f47f af7c 	bne.w	8004b8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004c96:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <xQueueGenericSend+0x200>)
 8004c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	e772      	b.n	8004b8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004caa:	f000 fa1d 	bl	80050e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cae:	f000 fd49 	bl	8005744 <xTaskResumeAll>
 8004cb2:	e76c      	b.n	8004b8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cb6:	f000 fa17 	bl	80050e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cba:	f000 fd43 	bl	8005744 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004cbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3738      	adds	r7, #56	; 0x38
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08e      	sub	sp, #56	; 0x38
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10b      	bne.n	8004cfc <xQueueGenericSendFromISR+0x30>
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	b672      	cpsid	i
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	b662      	cpsie	i
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfa:	e7fe      	b.n	8004cfa <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <xQueueGenericSendFromISR+0x3e>
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <xQueueGenericSendFromISR+0x42>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e000      	b.n	8004d10 <xQueueGenericSendFromISR+0x44>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10b      	bne.n	8004d2c <xQueueGenericSendFromISR+0x60>
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	b672      	cpsid	i
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	b662      	cpsie	i
 8004d28:	623b      	str	r3, [r7, #32]
 8004d2a:	e7fe      	b.n	8004d2a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d103      	bne.n	8004d3a <xQueueGenericSendFromISR+0x6e>
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <xQueueGenericSendFromISR+0x72>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <xQueueGenericSendFromISR+0x74>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10b      	bne.n	8004d5c <xQueueGenericSendFromISR+0x90>
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	b672      	cpsid	i
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	b662      	cpsie	i
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	e7fe      	b.n	8004d5a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d5c:	f001 fee4 	bl	8006b28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d60:	f3ef 8211 	mrs	r2, BASEPRI
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	b672      	cpsid	i
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	b662      	cpsie	i
 8004d78:	61ba      	str	r2, [r7, #24]
 8004d7a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d302      	bcc.n	8004d92 <xQueueGenericSendFromISR+0xc6>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d12c      	bne.n	8004dec <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004da2:	f000 f911 	bl	8004fc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004da6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dae:	d112      	bne.n	8004dd6 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d016      	beq.n	8004de6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dba:	3324      	adds	r3, #36	; 0x24
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fed9 	bl	8005b74 <xTaskRemoveFromEventList>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00e      	beq.n	8004de6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e007      	b.n	8004de6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004dd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dda:	3301      	adds	r3, #1
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	b25a      	sxtb	r2, r3
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004de6:	2301      	movs	r3, #1
 8004de8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004dea:	e001      	b.n	8004df0 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	637b      	str	r3, [r7, #52]	; 0x34
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3738      	adds	r7, #56	; 0x38
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08c      	sub	sp, #48	; 0x30
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10b      	bne.n	8004e36 <xQueueReceive+0x32>
	__asm volatile
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	b672      	cpsid	i
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	b662      	cpsie	i
 8004e32:	623b      	str	r3, [r7, #32]
 8004e34:	e7fe      	b.n	8004e34 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d103      	bne.n	8004e44 <xQueueReceive+0x40>
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <xQueueReceive+0x44>
 8004e44:	2301      	movs	r3, #1
 8004e46:	e000      	b.n	8004e4a <xQueueReceive+0x46>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10b      	bne.n	8004e66 <xQueueReceive+0x62>
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	b672      	cpsid	i
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	b662      	cpsie	i
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	e7fe      	b.n	8004e64 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e66:	f001 f843 	bl	8005ef0 <xTaskGetSchedulerState>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <xQueueReceive+0x72>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <xQueueReceive+0x76>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <xQueueReceive+0x78>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10b      	bne.n	8004e98 <xQueueReceive+0x94>
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	b672      	cpsid	i
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	b662      	cpsie	i
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	e7fe      	b.n	8004e96 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e98:	f001 fd66 	bl	8006968 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01f      	beq.n	8004ee8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eac:	f000 f8f6 	bl	800509c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	1e5a      	subs	r2, r3, #1
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00f      	beq.n	8004ee0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	3310      	adds	r3, #16
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fe55 	bl	8005b74 <xTaskRemoveFromEventList>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d007      	beq.n	8004ee0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ed0:	4b3c      	ldr	r3, [pc, #240]	; (8004fc4 <xQueueReceive+0x1c0>)
 8004ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ee0:	f001 fd74 	bl	80069cc <vPortExitCritical>
				return pdPASS;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e069      	b.n	8004fbc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d103      	bne.n	8004ef6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004eee:	f001 fd6d 	bl	80069cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e062      	b.n	8004fbc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d106      	bne.n	8004f0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004efc:	f107 0310 	add.w	r3, r7, #16
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fe9b 	bl	8005c3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f06:	2301      	movs	r3, #1
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f0a:	f001 fd5f 	bl	80069cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f0e:	f000 fc0b 	bl	8005728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f12:	f001 fd29 	bl	8006968 <vPortEnterCritical>
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f1c:	b25b      	sxtb	r3, r3
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	d103      	bne.n	8004f2c <xQueueReceive+0x128>
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f32:	b25b      	sxtb	r3, r3
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d103      	bne.n	8004f42 <xQueueReceive+0x13e>
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f42:	f001 fd43 	bl	80069cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f46:	1d3a      	adds	r2, r7, #4
 8004f48:	f107 0310 	add.w	r3, r7, #16
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fe8a 	bl	8005c68 <xTaskCheckForTimeOut>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d123      	bne.n	8004fa2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f5c:	f000 f916 	bl	800518c <prvIsQueueEmpty>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d017      	beq.n	8004f96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	3324      	adds	r3, #36	; 0x24
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fdae 	bl	8005ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f76:	f000 f8b7 	bl	80050e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f7a:	f000 fbe3 	bl	8005744 <xTaskResumeAll>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d189      	bne.n	8004e98 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004f84:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <xQueueReceive+0x1c0>)
 8004f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	e780      	b.n	8004e98 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f98:	f000 f8a6 	bl	80050e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f9c:	f000 fbd2 	bl	8005744 <xTaskResumeAll>
 8004fa0:	e77a      	b.n	8004e98 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa4:	f000 f8a0 	bl	80050e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fa8:	f000 fbcc 	bl	8005744 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fae:	f000 f8ed 	bl	800518c <prvIsQueueEmpty>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f43f af6f 	beq.w	8004e98 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3730      	adds	r7, #48	; 0x30
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	e000ed04 	.word	0xe000ed04

08004fc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10d      	bne.n	8005002 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d14d      	bne.n	800508a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 ff9a 	bl	8005f2c <xTaskPriorityDisinherit>
 8004ff8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	609a      	str	r2, [r3, #8]
 8005000:	e043      	b.n	800508a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d119      	bne.n	800503c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6858      	ldr	r0, [r3, #4]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	461a      	mov	r2, r3
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	f002 fd04 	bl	8007a20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	441a      	add	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	429a      	cmp	r2, r3
 8005030:	d32b      	bcc.n	800508a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	605a      	str	r2, [r3, #4]
 800503a:	e026      	b.n	800508a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68d8      	ldr	r0, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	461a      	mov	r2, r3
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	f002 fcea 	bl	8007a20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005054:	425b      	negs	r3, r3
 8005056:	441a      	add	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d207      	bcs.n	8005078 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	425b      	negs	r3, r3
 8005072:	441a      	add	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d105      	bne.n	800508a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	3b01      	subs	r3, #1
 8005088:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005092:	697b      	ldr	r3, [r7, #20]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d018      	beq.n	80050e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	441a      	add	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d303      	bcc.n	80050d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68d9      	ldr	r1, [r3, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	461a      	mov	r2, r3
 80050da:	6838      	ldr	r0, [r7, #0]
 80050dc:	f002 fca0 	bl	8007a20 <memcpy>
	}
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050f0:	f001 fc3a 	bl	8006968 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050fc:	e011      	b.n	8005122 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d012      	beq.n	800512c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3324      	adds	r3, #36	; 0x24
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fd32 	bl	8005b74 <xTaskRemoveFromEventList>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005116:	f000 fe0b 	bl	8005d30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	3b01      	subs	r3, #1
 800511e:	b2db      	uxtb	r3, r3
 8005120:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005126:	2b00      	cmp	r3, #0
 8005128:	dce9      	bgt.n	80050fe <prvUnlockQueue+0x16>
 800512a:	e000      	b.n	800512e <prvUnlockQueue+0x46>
					break;
 800512c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	22ff      	movs	r2, #255	; 0xff
 8005132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005136:	f001 fc49 	bl	80069cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800513a:	f001 fc15 	bl	8006968 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005144:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005146:	e011      	b.n	800516c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d012      	beq.n	8005176 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3310      	adds	r3, #16
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fd0d 	bl	8005b74 <xTaskRemoveFromEventList>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005160:	f000 fde6 	bl	8005d30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005164:	7bbb      	ldrb	r3, [r7, #14]
 8005166:	3b01      	subs	r3, #1
 8005168:	b2db      	uxtb	r3, r3
 800516a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800516c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005170:	2b00      	cmp	r3, #0
 8005172:	dce9      	bgt.n	8005148 <prvUnlockQueue+0x60>
 8005174:	e000      	b.n	8005178 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005176:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	22ff      	movs	r2, #255	; 0xff
 800517c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005180:	f001 fc24 	bl	80069cc <vPortExitCritical>
}
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005194:	f001 fbe8 	bl	8006968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	2b00      	cmp	r3, #0
 800519e:	d102      	bne.n	80051a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051a0:	2301      	movs	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e001      	b.n	80051aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051aa:	f001 fc0f 	bl	80069cc <vPortExitCritical>

	return xReturn;
 80051ae:	68fb      	ldr	r3, [r7, #12]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051c0:	f001 fbd2 	bl	8006968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d102      	bne.n	80051d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051d0:	2301      	movs	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e001      	b.n	80051da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051da:	f001 fbf7 	bl	80069cc <vPortExitCritical>

	return xReturn;
 80051de:	68fb      	ldr	r3, [r7, #12]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051f2:	2300      	movs	r3, #0
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	e014      	b.n	8005222 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051f8:	4a0e      	ldr	r2, [pc, #56]	; (8005234 <vQueueAddToRegistry+0x4c>)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10b      	bne.n	800521c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005204:	490b      	ldr	r1, [pc, #44]	; (8005234 <vQueueAddToRegistry+0x4c>)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800520e:	4a09      	ldr	r2, [pc, #36]	; (8005234 <vQueueAddToRegistry+0x4c>)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	4413      	add	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800521a:	e005      	b.n	8005228 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3301      	adds	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b07      	cmp	r3, #7
 8005226:	d9e7      	bls.n	80051f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	20004938 	.word	0x20004938

08005238 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005248:	f001 fb8e 	bl	8006968 <vPortEnterCritical>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005252:	b25b      	sxtb	r3, r3
 8005254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005258:	d103      	bne.n	8005262 <vQueueWaitForMessageRestricted+0x2a>
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005268:	b25b      	sxtb	r3, r3
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526e:	d103      	bne.n	8005278 <vQueueWaitForMessageRestricted+0x40>
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005278:	f001 fba8 	bl	80069cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	3324      	adds	r3, #36	; 0x24
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	68b9      	ldr	r1, [r7, #8]
 800528c:	4618      	mov	r0, r3
 800528e:	f000 fc45 	bl	8005b1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005292:	6978      	ldr	r0, [r7, #20]
 8005294:	f7ff ff28 	bl	80050e8 <prvUnlockQueue>
	}
 8005298:	bf00      	nop
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08e      	sub	sp, #56	; 0x38
 80052a4:	af04      	add	r7, sp, #16
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10b      	bne.n	80052cc <xTaskCreateStatic+0x2c>
 80052b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b8:	b672      	cpsid	i
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	b662      	cpsie	i
 80052c8:	623b      	str	r3, [r7, #32]
 80052ca:	e7fe      	b.n	80052ca <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10b      	bne.n	80052ea <xTaskCreateStatic+0x4a>
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	b672      	cpsid	i
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	b662      	cpsie	i
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	e7fe      	b.n	80052e8 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052ea:	235c      	movs	r3, #92	; 0x5c
 80052ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2b5c      	cmp	r3, #92	; 0x5c
 80052f2:	d00b      	beq.n	800530c <xTaskCreateStatic+0x6c>
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	b672      	cpsid	i
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	b662      	cpsie	i
 8005308:	61bb      	str	r3, [r7, #24]
 800530a:	e7fe      	b.n	800530a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800530c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800530e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01e      	beq.n	8005352 <xTaskCreateStatic+0xb2>
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01b      	beq.n	8005352 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005322:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	2202      	movs	r2, #2
 8005328:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800532c:	2300      	movs	r3, #0
 800532e:	9303      	str	r3, [sp, #12]
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	9302      	str	r3, [sp, #8]
 8005334:	f107 0314 	add.w	r3, r7, #20
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f850 	bl	80053ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800534a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800534c:	f000 f8de 	bl	800550c <prvAddNewTaskToReadyList>
 8005350:	e001      	b.n	8005356 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005356:	697b      	ldr	r3, [r7, #20]
	}
 8005358:	4618      	mov	r0, r3
 800535a:	3728      	adds	r7, #40	; 0x28
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08c      	sub	sp, #48	; 0x30
 8005364:	af04      	add	r7, sp, #16
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	4613      	mov	r3, r2
 800536e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4618      	mov	r0, r3
 8005376:	f001 fc19 	bl	8006bac <pvPortMalloc>
 800537a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00e      	beq.n	80053a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005382:	205c      	movs	r0, #92	; 0x5c
 8005384:	f001 fc12 	bl	8006bac <pvPortMalloc>
 8005388:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	631a      	str	r2, [r3, #48]	; 0x30
 8005396:	e005      	b.n	80053a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005398:	6978      	ldr	r0, [r7, #20]
 800539a:	f001 fccf 	bl	8006d3c <vPortFree>
 800539e:	e001      	b.n	80053a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d017      	beq.n	80053da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	2300      	movs	r3, #0
 80053b6:	9303      	str	r3, [sp, #12]
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	9302      	str	r3, [sp, #8]
 80053bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f80e 	bl	80053ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053ce:	69f8      	ldr	r0, [r7, #28]
 80053d0:	f000 f89c 	bl	800550c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053d4:	2301      	movs	r3, #1
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	e002      	b.n	80053e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053da:	f04f 33ff 	mov.w	r3, #4294967295
 80053de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053e0:	69bb      	ldr	r3, [r7, #24]
	}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3720      	adds	r7, #32
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b088      	sub	sp, #32
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	461a      	mov	r2, r3
 8005402:	21a5      	movs	r1, #165	; 0xa5
 8005404:	f002 fb17 	bl	8007a36 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005412:	440b      	add	r3, r1
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f023 0307 	bic.w	r3, r3, #7
 8005420:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00b      	beq.n	8005444 <prvInitialiseNewTask+0x5a>
 800542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005430:	b672      	cpsid	i
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	b662      	cpsie	i
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	e7fe      	b.n	8005442 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d01f      	beq.n	800548a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800544a:	2300      	movs	r3, #0
 800544c:	61fb      	str	r3, [r7, #28]
 800544e:	e012      	b.n	8005476 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4413      	add	r3, r2
 8005456:	7819      	ldrb	r1, [r3, #0]
 8005458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	3334      	adds	r3, #52	; 0x34
 8005460:	460a      	mov	r2, r1
 8005462:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	4413      	add	r3, r2
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d006      	beq.n	800547e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	3301      	adds	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b0f      	cmp	r3, #15
 800547a:	d9e9      	bls.n	8005450 <prvInitialiseNewTask+0x66>
 800547c:	e000      	b.n	8005480 <prvInitialiseNewTask+0x96>
			{
				break;
 800547e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005488:	e003      	b.n	8005492 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	2b37      	cmp	r3, #55	; 0x37
 8005496:	d901      	bls.n	800549c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005498:	2337      	movs	r3, #55	; 0x37
 800549a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	2200      	movs	r2, #0
 80054ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	3304      	adds	r3, #4
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff f928 	bl	8004708 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	3318      	adds	r3, #24
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff f923 	bl	8004708 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	2200      	movs	r2, #0
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	68f9      	ldr	r1, [r7, #12]
 80054ea:	69b8      	ldr	r0, [r7, #24]
 80054ec:	f001 f936 	bl	800675c <pxPortInitialiseStack>
 80054f0:	4602      	mov	r2, r0
 80054f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005502:	bf00      	nop
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005514:	f001 fa28 	bl	8006968 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005518:	4b2d      	ldr	r3, [pc, #180]	; (80055d0 <prvAddNewTaskToReadyList+0xc4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3301      	adds	r3, #1
 800551e:	4a2c      	ldr	r2, [pc, #176]	; (80055d0 <prvAddNewTaskToReadyList+0xc4>)
 8005520:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005522:	4b2c      	ldr	r3, [pc, #176]	; (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800552a:	4a2a      	ldr	r2, [pc, #168]	; (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005530:	4b27      	ldr	r3, [pc, #156]	; (80055d0 <prvAddNewTaskToReadyList+0xc4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d110      	bne.n	800555a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005538:	f000 fc1e 	bl	8005d78 <prvInitialiseTaskLists>
 800553c:	e00d      	b.n	800555a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800553e:	4b26      	ldr	r3, [pc, #152]	; (80055d8 <prvAddNewTaskToReadyList+0xcc>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005546:	4b23      	ldr	r3, [pc, #140]	; (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	429a      	cmp	r2, r3
 8005552:	d802      	bhi.n	800555a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005554:	4a1f      	ldr	r2, [pc, #124]	; (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800555a:	4b20      	ldr	r3, [pc, #128]	; (80055dc <prvAddNewTaskToReadyList+0xd0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3301      	adds	r3, #1
 8005560:	4a1e      	ldr	r2, [pc, #120]	; (80055dc <prvAddNewTaskToReadyList+0xd0>)
 8005562:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005564:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <prvAddNewTaskToReadyList+0xd0>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005570:	4b1b      	ldr	r3, [pc, #108]	; (80055e0 <prvAddNewTaskToReadyList+0xd4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d903      	bls.n	8005580 <prvAddNewTaskToReadyList+0x74>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	4a18      	ldr	r2, [pc, #96]	; (80055e0 <prvAddNewTaskToReadyList+0xd4>)
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4a15      	ldr	r2, [pc, #84]	; (80055e4 <prvAddNewTaskToReadyList+0xd8>)
 800558e:	441a      	add	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	4610      	mov	r0, r2
 8005598:	f7ff f8c3 	bl	8004722 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800559c:	f001 fa16 	bl	80069cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055a0:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <prvAddNewTaskToReadyList+0xcc>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00e      	beq.n	80055c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d207      	bcs.n	80055c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055b6:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <prvAddNewTaskToReadyList+0xdc>)
 80055b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000bbc 	.word	0x20000bbc
 80055d4:	200006e8 	.word	0x200006e8
 80055d8:	20000bc8 	.word	0x20000bc8
 80055dc:	20000bd8 	.word	0x20000bd8
 80055e0:	20000bc4 	.word	0x20000bc4
 80055e4:	200006ec 	.word	0x200006ec
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d018      	beq.n	8005630 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055fe:	4b14      	ldr	r3, [pc, #80]	; (8005650 <vTaskDelay+0x64>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <vTaskDelay+0x32>
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	b672      	cpsid	i
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	b662      	cpsie	i
 800561a:	60bb      	str	r3, [r7, #8]
 800561c:	e7fe      	b.n	800561c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800561e:	f000 f883 	bl	8005728 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005622:	2100      	movs	r1, #0
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fcf1 	bl	800600c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800562a:	f000 f88b 	bl	8005744 <xTaskResumeAll>
 800562e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d107      	bne.n	8005646 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005636:	4b07      	ldr	r3, [pc, #28]	; (8005654 <vTaskDelay+0x68>)
 8005638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005646:	bf00      	nop
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000be4 	.word	0x20000be4
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08a      	sub	sp, #40	; 0x28
 800565c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005666:	463a      	mov	r2, r7
 8005668:	1d39      	adds	r1, r7, #4
 800566a:	f107 0308 	add.w	r3, r7, #8
 800566e:	4618      	mov	r0, r3
 8005670:	f7fe fff6 	bl	8004660 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005674:	6839      	ldr	r1, [r7, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	9202      	str	r2, [sp, #8]
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	2300      	movs	r3, #0
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	2300      	movs	r3, #0
 8005684:	460a      	mov	r2, r1
 8005686:	4922      	ldr	r1, [pc, #136]	; (8005710 <vTaskStartScheduler+0xb8>)
 8005688:	4822      	ldr	r0, [pc, #136]	; (8005714 <vTaskStartScheduler+0xbc>)
 800568a:	f7ff fe09 	bl	80052a0 <xTaskCreateStatic>
 800568e:	4602      	mov	r2, r0
 8005690:	4b21      	ldr	r3, [pc, #132]	; (8005718 <vTaskStartScheduler+0xc0>)
 8005692:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005694:	4b20      	ldr	r3, [pc, #128]	; (8005718 <vTaskStartScheduler+0xc0>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800569c:	2301      	movs	r3, #1
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	e001      	b.n	80056a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d102      	bne.n	80056b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056ac:	f000 fd02 	bl	80060b4 <xTimerCreateTimerTask>
 80056b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d117      	bne.n	80056e8 <vTaskStartScheduler+0x90>
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	b672      	cpsid	i
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	b662      	cpsie	i
 80056cc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056ce:	4b13      	ldr	r3, [pc, #76]	; (800571c <vTaskStartScheduler+0xc4>)
 80056d0:	f04f 32ff 	mov.w	r2, #4294967295
 80056d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056d6:	4b12      	ldr	r3, [pc, #72]	; (8005720 <vTaskStartScheduler+0xc8>)
 80056d8:	2201      	movs	r2, #1
 80056da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056dc:	4b11      	ldr	r3, [pc, #68]	; (8005724 <vTaskStartScheduler+0xcc>)
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056e2:	f001 f8c5 	bl	8006870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056e6:	e00f      	b.n	8005708 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d10b      	bne.n	8005708 <vTaskStartScheduler+0xb0>
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	b672      	cpsid	i
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	b662      	cpsie	i
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	e7fe      	b.n	8005706 <vTaskStartScheduler+0xae>
}
 8005708:	bf00      	nop
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	08007a60 	.word	0x08007a60
 8005714:	08005d49 	.word	0x08005d49
 8005718:	20000be0 	.word	0x20000be0
 800571c:	20000bdc 	.word	0x20000bdc
 8005720:	20000bc8 	.word	0x20000bc8
 8005724:	20000bc0 	.word	0x20000bc0

08005728 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800572c:	4b04      	ldr	r3, [pc, #16]	; (8005740 <vTaskSuspendAll+0x18>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3301      	adds	r3, #1
 8005732:	4a03      	ldr	r2, [pc, #12]	; (8005740 <vTaskSuspendAll+0x18>)
 8005734:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005736:	bf00      	nop
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	20000be4 	.word	0x20000be4

08005744 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800574e:	2300      	movs	r3, #0
 8005750:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005752:	4b42      	ldr	r3, [pc, #264]	; (800585c <xTaskResumeAll+0x118>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10b      	bne.n	8005772 <xTaskResumeAll+0x2e>
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	b672      	cpsid	i
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	b662      	cpsie	i
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	e7fe      	b.n	8005770 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005772:	f001 f8f9 	bl	8006968 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005776:	4b39      	ldr	r3, [pc, #228]	; (800585c <xTaskResumeAll+0x118>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3b01      	subs	r3, #1
 800577c:	4a37      	ldr	r2, [pc, #220]	; (800585c <xTaskResumeAll+0x118>)
 800577e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005780:	4b36      	ldr	r3, [pc, #216]	; (800585c <xTaskResumeAll+0x118>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d162      	bne.n	800584e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005788:	4b35      	ldr	r3, [pc, #212]	; (8005860 <xTaskResumeAll+0x11c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d05e      	beq.n	800584e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005790:	e02f      	b.n	80057f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005792:	4b34      	ldr	r3, [pc, #208]	; (8005864 <xTaskResumeAll+0x120>)
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3318      	adds	r3, #24
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff f81c 	bl	80047dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3304      	adds	r3, #4
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff f817 	bl	80047dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b2:	4b2d      	ldr	r3, [pc, #180]	; (8005868 <xTaskResumeAll+0x124>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d903      	bls.n	80057c2 <xTaskResumeAll+0x7e>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	4a2a      	ldr	r2, [pc, #168]	; (8005868 <xTaskResumeAll+0x124>)
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4a27      	ldr	r2, [pc, #156]	; (800586c <xTaskResumeAll+0x128>)
 80057d0:	441a      	add	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f7fe ffa2 	bl	8004722 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e2:	4b23      	ldr	r3, [pc, #140]	; (8005870 <xTaskResumeAll+0x12c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d302      	bcc.n	80057f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80057ec:	4b21      	ldr	r3, [pc, #132]	; (8005874 <xTaskResumeAll+0x130>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057f2:	4b1c      	ldr	r3, [pc, #112]	; (8005864 <xTaskResumeAll+0x120>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1cb      	bne.n	8005792 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005800:	f000 fb56 	bl	8005eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005804:	4b1c      	ldr	r3, [pc, #112]	; (8005878 <xTaskResumeAll+0x134>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d010      	beq.n	8005832 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005810:	f000 f846 	bl	80058a0 <xTaskIncrementTick>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800581a:	4b16      	ldr	r3, [pc, #88]	; (8005874 <xTaskResumeAll+0x130>)
 800581c:	2201      	movs	r2, #1
 800581e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3b01      	subs	r3, #1
 8005824:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1f1      	bne.n	8005810 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800582c:	4b12      	ldr	r3, [pc, #72]	; (8005878 <xTaskResumeAll+0x134>)
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005832:	4b10      	ldr	r3, [pc, #64]	; (8005874 <xTaskResumeAll+0x130>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d009      	beq.n	800584e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800583a:	2301      	movs	r3, #1
 800583c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800583e:	4b0f      	ldr	r3, [pc, #60]	; (800587c <xTaskResumeAll+0x138>)
 8005840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800584e:	f001 f8bd 	bl	80069cc <vPortExitCritical>

	return xAlreadyYielded;
 8005852:	68bb      	ldr	r3, [r7, #8]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000be4 	.word	0x20000be4
 8005860:	20000bbc 	.word	0x20000bbc
 8005864:	20000b7c 	.word	0x20000b7c
 8005868:	20000bc4 	.word	0x20000bc4
 800586c:	200006ec 	.word	0x200006ec
 8005870:	200006e8 	.word	0x200006e8
 8005874:	20000bd0 	.word	0x20000bd0
 8005878:	20000bcc 	.word	0x20000bcc
 800587c:	e000ed04 	.word	0xe000ed04

08005880 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <xTaskGetTickCount+0x1c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800588c:	687b      	ldr	r3, [r7, #4]
}
 800588e:	4618      	mov	r0, r3
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	20000bc0 	.word	0x20000bc0

080058a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058aa:	4b4f      	ldr	r3, [pc, #316]	; (80059e8 <xTaskIncrementTick+0x148>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f040 808a 	bne.w	80059c8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058b4:	4b4d      	ldr	r3, [pc, #308]	; (80059ec <xTaskIncrementTick+0x14c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3301      	adds	r3, #1
 80058ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058bc:	4a4b      	ldr	r2, [pc, #300]	; (80059ec <xTaskIncrementTick+0x14c>)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d121      	bne.n	800590c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80058c8:	4b49      	ldr	r3, [pc, #292]	; (80059f0 <xTaskIncrementTick+0x150>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <xTaskIncrementTick+0x4a>
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	b672      	cpsid	i
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	b662      	cpsie	i
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	e7fe      	b.n	80058e8 <xTaskIncrementTick+0x48>
 80058ea:	4b41      	ldr	r3, [pc, #260]	; (80059f0 <xTaskIncrementTick+0x150>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	4b40      	ldr	r3, [pc, #256]	; (80059f4 <xTaskIncrementTick+0x154>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a3e      	ldr	r2, [pc, #248]	; (80059f0 <xTaskIncrementTick+0x150>)
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	4a3e      	ldr	r2, [pc, #248]	; (80059f4 <xTaskIncrementTick+0x154>)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	4b3e      	ldr	r3, [pc, #248]	; (80059f8 <xTaskIncrementTick+0x158>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	4a3c      	ldr	r2, [pc, #240]	; (80059f8 <xTaskIncrementTick+0x158>)
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	f000 fad2 	bl	8005eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800590c:	4b3b      	ldr	r3, [pc, #236]	; (80059fc <xTaskIncrementTick+0x15c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	429a      	cmp	r2, r3
 8005914:	d349      	bcc.n	80059aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005916:	4b36      	ldr	r3, [pc, #216]	; (80059f0 <xTaskIncrementTick+0x150>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d104      	bne.n	800592a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005920:	4b36      	ldr	r3, [pc, #216]	; (80059fc <xTaskIncrementTick+0x15c>)
 8005922:	f04f 32ff 	mov.w	r2, #4294967295
 8005926:	601a      	str	r2, [r3, #0]
					break;
 8005928:	e03f      	b.n	80059aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800592a:	4b31      	ldr	r3, [pc, #196]	; (80059f0 <xTaskIncrementTick+0x150>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	429a      	cmp	r2, r3
 8005940:	d203      	bcs.n	800594a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005942:	4a2e      	ldr	r2, [pc, #184]	; (80059fc <xTaskIncrementTick+0x15c>)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005948:	e02f      	b.n	80059aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	3304      	adds	r3, #4
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe ff44 	bl	80047dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005958:	2b00      	cmp	r3, #0
 800595a:	d004      	beq.n	8005966 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	3318      	adds	r3, #24
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe ff3b 	bl	80047dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596a:	4b25      	ldr	r3, [pc, #148]	; (8005a00 <xTaskIncrementTick+0x160>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d903      	bls.n	800597a <xTaskIncrementTick+0xda>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	4a22      	ldr	r2, [pc, #136]	; (8005a00 <xTaskIncrementTick+0x160>)
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4a1f      	ldr	r2, [pc, #124]	; (8005a04 <xTaskIncrementTick+0x164>)
 8005988:	441a      	add	r2, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	3304      	adds	r3, #4
 800598e:	4619      	mov	r1, r3
 8005990:	4610      	mov	r0, r2
 8005992:	f7fe fec6 	bl	8004722 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599a:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <xTaskIncrementTick+0x168>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d3b8      	bcc.n	8005916 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80059a4:	2301      	movs	r3, #1
 80059a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059a8:	e7b5      	b.n	8005916 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059aa:	4b17      	ldr	r3, [pc, #92]	; (8005a08 <xTaskIncrementTick+0x168>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b0:	4914      	ldr	r1, [pc, #80]	; (8005a04 <xTaskIncrementTick+0x164>)
 80059b2:	4613      	mov	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d907      	bls.n	80059d2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80059c2:	2301      	movs	r3, #1
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	e004      	b.n	80059d2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80059c8:	4b10      	ldr	r3, [pc, #64]	; (8005a0c <xTaskIncrementTick+0x16c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3301      	adds	r3, #1
 80059ce:	4a0f      	ldr	r2, [pc, #60]	; (8005a0c <xTaskIncrementTick+0x16c>)
 80059d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80059d2:	4b0f      	ldr	r3, [pc, #60]	; (8005a10 <xTaskIncrementTick+0x170>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80059da:	2301      	movs	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80059de:	697b      	ldr	r3, [r7, #20]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20000be4 	.word	0x20000be4
 80059ec:	20000bc0 	.word	0x20000bc0
 80059f0:	20000b74 	.word	0x20000b74
 80059f4:	20000b78 	.word	0x20000b78
 80059f8:	20000bd4 	.word	0x20000bd4
 80059fc:	20000bdc 	.word	0x20000bdc
 8005a00:	20000bc4 	.word	0x20000bc4
 8005a04:	200006ec 	.word	0x200006ec
 8005a08:	200006e8 	.word	0x200006e8
 8005a0c:	20000bcc 	.word	0x20000bcc
 8005a10:	20000bd0 	.word	0x20000bd0

08005a14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a1a:	4b28      	ldr	r3, [pc, #160]	; (8005abc <vTaskSwitchContext+0xa8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a22:	4b27      	ldr	r3, [pc, #156]	; (8005ac0 <vTaskSwitchContext+0xac>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a28:	e042      	b.n	8005ab0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005a2a:	4b25      	ldr	r3, [pc, #148]	; (8005ac0 <vTaskSwitchContext+0xac>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a30:	4b24      	ldr	r3, [pc, #144]	; (8005ac4 <vTaskSwitchContext+0xb0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	e011      	b.n	8005a5c <vTaskSwitchContext+0x48>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10b      	bne.n	8005a56 <vTaskSwitchContext+0x42>
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	b672      	cpsid	i
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	b662      	cpsie	i
 8005a52:	607b      	str	r3, [r7, #4]
 8005a54:	e7fe      	b.n	8005a54 <vTaskSwitchContext+0x40>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	491a      	ldr	r1, [pc, #104]	; (8005ac8 <vTaskSwitchContext+0xb4>)
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	440b      	add	r3, r1
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0e3      	beq.n	8005a38 <vTaskSwitchContext+0x24>
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4613      	mov	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <vTaskSwitchContext+0xb4>)
 8005a7c:	4413      	add	r3, r2
 8005a7e:	60bb      	str	r3, [r7, #8]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	3308      	adds	r3, #8
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d104      	bne.n	8005aa0 <vTaskSwitchContext+0x8c>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	605a      	str	r2, [r3, #4]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	4a09      	ldr	r2, [pc, #36]	; (8005acc <vTaskSwitchContext+0xb8>)
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	4a06      	ldr	r2, [pc, #24]	; (8005ac4 <vTaskSwitchContext+0xb0>)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6013      	str	r3, [r2, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	20000be4 	.word	0x20000be4
 8005ac0:	20000bd0 	.word	0x20000bd0
 8005ac4:	20000bc4 	.word	0x20000bc4
 8005ac8:	200006ec 	.word	0x200006ec
 8005acc:	200006e8 	.word	0x200006e8

08005ad0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10b      	bne.n	8005af8 <vTaskPlaceOnEventList+0x28>
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	b672      	cpsid	i
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	b662      	cpsie	i
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	e7fe      	b.n	8005af6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005af8:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <vTaskPlaceOnEventList+0x48>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3318      	adds	r3, #24
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7fe fe32 	bl	800476a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b06:	2101      	movs	r1, #1
 8005b08:	6838      	ldr	r0, [r7, #0]
 8005b0a:	f000 fa7f 	bl	800600c <prvAddCurrentTaskToDelayedList>
}
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	200006e8 	.word	0x200006e8

08005b1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10b      	bne.n	8005b46 <vTaskPlaceOnEventListRestricted+0x2a>
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	b672      	cpsid	i
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	b662      	cpsie	i
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e7fe      	b.n	8005b44 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b46:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3318      	adds	r3, #24
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f7fe fde7 	bl	8004722 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	68b8      	ldr	r0, [r7, #8]
 8005b64:	f000 fa52 	bl	800600c <prvAddCurrentTaskToDelayedList>
	}
 8005b68:	bf00      	nop
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	200006e8 	.word	0x200006e8

08005b74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <xTaskRemoveFromEventList+0x2e>
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	b672      	cpsid	i
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	b662      	cpsie	i
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	e7fe      	b.n	8005ba0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	3318      	adds	r3, #24
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe fe18 	bl	80047dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bac:	4b1d      	ldr	r3, [pc, #116]	; (8005c24 <xTaskRemoveFromEventList+0xb0>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d11d      	bne.n	8005bf0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe fe0f 	bl	80047dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc2:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <xTaskRemoveFromEventList+0xb4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d903      	bls.n	8005bd2 <xTaskRemoveFromEventList+0x5e>
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	4a16      	ldr	r2, [pc, #88]	; (8005c28 <xTaskRemoveFromEventList+0xb4>)
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <xTaskRemoveFromEventList+0xb8>)
 8005be0:	441a      	add	r2, r3
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4619      	mov	r1, r3
 8005be8:	4610      	mov	r0, r2
 8005bea:	f7fe fd9a 	bl	8004722 <vListInsertEnd>
 8005bee:	e005      	b.n	8005bfc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	3318      	adds	r3, #24
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	480e      	ldr	r0, [pc, #56]	; (8005c30 <xTaskRemoveFromEventList+0xbc>)
 8005bf8:	f7fe fd93 	bl	8004722 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c00:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <xTaskRemoveFromEventList+0xc0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d905      	bls.n	8005c16 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <xTaskRemoveFromEventList+0xc4>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e001      	b.n	8005c1a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c1a:	697b      	ldr	r3, [r7, #20]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20000be4 	.word	0x20000be4
 8005c28:	20000bc4 	.word	0x20000bc4
 8005c2c:	200006ec 	.word	0x200006ec
 8005c30:	20000b7c 	.word	0x20000b7c
 8005c34:	200006e8 	.word	0x200006e8
 8005c38:	20000bd0 	.word	0x20000bd0

08005c3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c44:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <vTaskInternalSetTimeOutState+0x24>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <vTaskInternalSetTimeOutState+0x28>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	605a      	str	r2, [r3, #4]
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	20000bd4 	.word	0x20000bd4
 8005c64:	20000bc0 	.word	0x20000bc0

08005c68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <xTaskCheckForTimeOut+0x28>
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	b672      	cpsid	i
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	b662      	cpsie	i
 8005c8c:	613b      	str	r3, [r7, #16]
 8005c8e:	e7fe      	b.n	8005c8e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <xTaskCheckForTimeOut+0x46>
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	b672      	cpsid	i
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	b662      	cpsie	i
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	e7fe      	b.n	8005cac <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8005cae:	f000 fe5b 	bl	8006968 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cb2:	4b1d      	ldr	r3, [pc, #116]	; (8005d28 <xTaskCheckForTimeOut+0xc0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cca:	d102      	bne.n	8005cd2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	e023      	b.n	8005d1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <xTaskCheckForTimeOut+0xc4>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d007      	beq.n	8005cee <xTaskCheckForTimeOut+0x86>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d302      	bcc.n	8005cee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	61fb      	str	r3, [r7, #28]
 8005cec:	e015      	b.n	8005d1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d20b      	bcs.n	8005d10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff ff99 	bl	8005c3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61fb      	str	r3, [r7, #28]
 8005d0e:	e004      	b.n	8005d1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d16:	2301      	movs	r3, #1
 8005d18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d1a:	f000 fe57 	bl	80069cc <vPortExitCritical>

	return xReturn;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20000bc0 	.word	0x20000bc0
 8005d2c:	20000bd4 	.word	0x20000bd4

08005d30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d34:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <vTaskMissedYield+0x14>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
}
 8005d3a:	bf00      	nop
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	20000bd0 	.word	0x20000bd0

08005d48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d50:	f000 f852 	bl	8005df8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d54:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <prvIdleTask+0x28>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d9f9      	bls.n	8005d50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d5c:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <prvIdleTask+0x2c>)
 8005d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d6c:	e7f0      	b.n	8005d50 <prvIdleTask+0x8>
 8005d6e:	bf00      	nop
 8005d70:	200006ec 	.word	0x200006ec
 8005d74:	e000ed04 	.word	0xe000ed04

08005d78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d7e:	2300      	movs	r3, #0
 8005d80:	607b      	str	r3, [r7, #4]
 8005d82:	e00c      	b.n	8005d9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4a12      	ldr	r2, [pc, #72]	; (8005dd8 <prvInitialiseTaskLists+0x60>)
 8005d90:	4413      	add	r3, r2
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe fc98 	bl	80046c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	607b      	str	r3, [r7, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b37      	cmp	r3, #55	; 0x37
 8005da2:	d9ef      	bls.n	8005d84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005da4:	480d      	ldr	r0, [pc, #52]	; (8005ddc <prvInitialiseTaskLists+0x64>)
 8005da6:	f7fe fc8f 	bl	80046c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005daa:	480d      	ldr	r0, [pc, #52]	; (8005de0 <prvInitialiseTaskLists+0x68>)
 8005dac:	f7fe fc8c 	bl	80046c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005db0:	480c      	ldr	r0, [pc, #48]	; (8005de4 <prvInitialiseTaskLists+0x6c>)
 8005db2:	f7fe fc89 	bl	80046c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005db6:	480c      	ldr	r0, [pc, #48]	; (8005de8 <prvInitialiseTaskLists+0x70>)
 8005db8:	f7fe fc86 	bl	80046c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005dbc:	480b      	ldr	r0, [pc, #44]	; (8005dec <prvInitialiseTaskLists+0x74>)
 8005dbe:	f7fe fc83 	bl	80046c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <prvInitialiseTaskLists+0x78>)
 8005dc4:	4a05      	ldr	r2, [pc, #20]	; (8005ddc <prvInitialiseTaskLists+0x64>)
 8005dc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <prvInitialiseTaskLists+0x7c>)
 8005dca:	4a05      	ldr	r2, [pc, #20]	; (8005de0 <prvInitialiseTaskLists+0x68>)
 8005dcc:	601a      	str	r2, [r3, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	200006ec 	.word	0x200006ec
 8005ddc:	20000b4c 	.word	0x20000b4c
 8005de0:	20000b60 	.word	0x20000b60
 8005de4:	20000b7c 	.word	0x20000b7c
 8005de8:	20000b90 	.word	0x20000b90
 8005dec:	20000ba8 	.word	0x20000ba8
 8005df0:	20000b74 	.word	0x20000b74
 8005df4:	20000b78 	.word	0x20000b78

08005df8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dfe:	e019      	b.n	8005e34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e00:	f000 fdb2 	bl	8006968 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e04:	4b0f      	ldr	r3, [pc, #60]	; (8005e44 <prvCheckTasksWaitingTermination+0x4c>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fe fce3 	bl	80047dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <prvCheckTasksWaitingTermination+0x50>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	4a0a      	ldr	r2, [pc, #40]	; (8005e48 <prvCheckTasksWaitingTermination+0x50>)
 8005e1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e20:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <prvCheckTasksWaitingTermination+0x54>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	4a09      	ldr	r2, [pc, #36]	; (8005e4c <prvCheckTasksWaitingTermination+0x54>)
 8005e28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e2a:	f000 fdcf 	bl	80069cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f80e 	bl	8005e50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e34:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <prvCheckTasksWaitingTermination+0x54>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e1      	bne.n	8005e00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e3c:	bf00      	nop
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20000b90 	.word	0x20000b90
 8005e48:	20000bbc 	.word	0x20000bbc
 8005e4c:	20000ba4 	.word	0x20000ba4

08005e50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d108      	bne.n	8005e74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 ff68 	bl	8006d3c <vPortFree>
				vPortFree( pxTCB );
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 ff65 	bl	8006d3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e72:	e019      	b.n	8005ea8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d103      	bne.n	8005e86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 ff5c 	bl	8006d3c <vPortFree>
	}
 8005e84:	e010      	b.n	8005ea8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d00b      	beq.n	8005ea8 <prvDeleteTCB+0x58>
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	b672      	cpsid	i
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	b662      	cpsie	i
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	e7fe      	b.n	8005ea6 <prvDeleteTCB+0x56>
	}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <prvResetNextTaskUnblockTime+0x38>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <prvResetNextTaskUnblockTime+0x3c>)
 8005ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ec8:	e008      	b.n	8005edc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eca:	4b07      	ldr	r3, [pc, #28]	; (8005ee8 <prvResetNextTaskUnblockTime+0x38>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4a04      	ldr	r2, [pc, #16]	; (8005eec <prvResetNextTaskUnblockTime+0x3c>)
 8005eda:	6013      	str	r3, [r2, #0]
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	20000b74 	.word	0x20000b74
 8005eec:	20000bdc 	.word	0x20000bdc

08005ef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ef6:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <xTaskGetSchedulerState+0x34>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d102      	bne.n	8005f04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005efe:	2301      	movs	r3, #1
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	e008      	b.n	8005f16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f04:	4b08      	ldr	r3, [pc, #32]	; (8005f28 <xTaskGetSchedulerState+0x38>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	607b      	str	r3, [r7, #4]
 8005f10:	e001      	b.n	8005f16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f12:	2300      	movs	r3, #0
 8005f14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f16:	687b      	ldr	r3, [r7, #4]
	}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	20000bc8 	.word	0x20000bc8
 8005f28:	20000be4 	.word	0x20000be4

08005f2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d058      	beq.n	8005ff4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f42:	4b2f      	ldr	r3, [pc, #188]	; (8006000 <xTaskPriorityDisinherit+0xd4>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d00b      	beq.n	8005f64 <xTaskPriorityDisinherit+0x38>
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	b672      	cpsid	i
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	b662      	cpsie	i
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	e7fe      	b.n	8005f62 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10b      	bne.n	8005f84 <xTaskPriorityDisinherit+0x58>
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	b672      	cpsid	i
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	b662      	cpsie	i
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	e7fe      	b.n	8005f82 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f88:	1e5a      	subs	r2, r3, #1
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d02c      	beq.n	8005ff4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d128      	bne.n	8005ff4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe fc18 	bl	80047dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	4b0f      	ldr	r3, [pc, #60]	; (8006004 <xTaskPriorityDisinherit+0xd8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d903      	bls.n	8005fd4 <xTaskPriorityDisinherit+0xa8>
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	4a0c      	ldr	r2, [pc, #48]	; (8006004 <xTaskPriorityDisinherit+0xd8>)
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4a09      	ldr	r2, [pc, #36]	; (8006008 <xTaskPriorityDisinherit+0xdc>)
 8005fe2:	441a      	add	r2, r3
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f7fe fb99 	bl	8004722 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ff4:	697b      	ldr	r3, [r7, #20]
	}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	200006e8 	.word	0x200006e8
 8006004:	20000bc4 	.word	0x20000bc4
 8006008:	200006ec 	.word	0x200006ec

0800600c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006016:	4b21      	ldr	r3, [pc, #132]	; (800609c <prvAddCurrentTaskToDelayedList+0x90>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800601c:	4b20      	ldr	r3, [pc, #128]	; (80060a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3304      	adds	r3, #4
 8006022:	4618      	mov	r0, r3
 8006024:	f7fe fbda 	bl	80047dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602e:	d10a      	bne.n	8006046 <prvAddCurrentTaskToDelayedList+0x3a>
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d007      	beq.n	8006046 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006036:	4b1a      	ldr	r3, [pc, #104]	; (80060a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3304      	adds	r3, #4
 800603c:	4619      	mov	r1, r3
 800603e:	4819      	ldr	r0, [pc, #100]	; (80060a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006040:	f7fe fb6f 	bl	8004722 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006044:	e026      	b.n	8006094 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4413      	add	r3, r2
 800604c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800604e:	4b14      	ldr	r3, [pc, #80]	; (80060a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	429a      	cmp	r2, r3
 800605c:	d209      	bcs.n	8006072 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800605e:	4b12      	ldr	r3, [pc, #72]	; (80060a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3304      	adds	r3, #4
 8006068:	4619      	mov	r1, r3
 800606a:	4610      	mov	r0, r2
 800606c:	f7fe fb7d 	bl	800476a <vListInsert>
}
 8006070:	e010      	b.n	8006094 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006072:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3304      	adds	r3, #4
 800607c:	4619      	mov	r1, r3
 800607e:	4610      	mov	r0, r2
 8006080:	f7fe fb73 	bl	800476a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006084:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	429a      	cmp	r2, r3
 800608c:	d202      	bcs.n	8006094 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800608e:	4a08      	ldr	r2, [pc, #32]	; (80060b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	6013      	str	r3, [r2, #0]
}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20000bc0 	.word	0x20000bc0
 80060a0:	200006e8 	.word	0x200006e8
 80060a4:	20000ba8 	.word	0x20000ba8
 80060a8:	20000b78 	.word	0x20000b78
 80060ac:	20000b74 	.word	0x20000b74
 80060b0:	20000bdc 	.word	0x20000bdc

080060b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08a      	sub	sp, #40	; 0x28
 80060b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060be:	f000 fb0d 	bl	80066dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060c2:	4b1d      	ldr	r3, [pc, #116]	; (8006138 <xTimerCreateTimerTask+0x84>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d021      	beq.n	800610e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060d2:	1d3a      	adds	r2, r7, #4
 80060d4:	f107 0108 	add.w	r1, r7, #8
 80060d8:	f107 030c 	add.w	r3, r7, #12
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe fad9 	bl	8004694 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	9202      	str	r2, [sp, #8]
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	2302      	movs	r3, #2
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	2300      	movs	r3, #0
 80060f2:	460a      	mov	r2, r1
 80060f4:	4911      	ldr	r1, [pc, #68]	; (800613c <xTimerCreateTimerTask+0x88>)
 80060f6:	4812      	ldr	r0, [pc, #72]	; (8006140 <xTimerCreateTimerTask+0x8c>)
 80060f8:	f7ff f8d2 	bl	80052a0 <xTaskCreateStatic>
 80060fc:	4602      	mov	r2, r0
 80060fe:	4b11      	ldr	r3, [pc, #68]	; (8006144 <xTimerCreateTimerTask+0x90>)
 8006100:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006102:	4b10      	ldr	r3, [pc, #64]	; (8006144 <xTimerCreateTimerTask+0x90>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800610a:	2301      	movs	r3, #1
 800610c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10b      	bne.n	800612c <xTimerCreateTimerTask+0x78>
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	b672      	cpsid	i
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	b662      	cpsie	i
 8006128:	613b      	str	r3, [r7, #16]
 800612a:	e7fe      	b.n	800612a <xTimerCreateTimerTask+0x76>
	return xReturn;
 800612c:	697b      	ldr	r3, [r7, #20]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000c18 	.word	0x20000c18
 800613c:	08007a68 	.word	0x08007a68
 8006140:	08006281 	.word	0x08006281
 8006144:	20000c1c 	.word	0x20000c1c

08006148 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	; 0x28
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006156:	2300      	movs	r3, #0
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10b      	bne.n	8006178 <xTimerGenericCommand+0x30>
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	b672      	cpsid	i
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	b662      	cpsie	i
 8006174:	623b      	str	r3, [r7, #32]
 8006176:	e7fe      	b.n	8006176 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006178:	4b19      	ldr	r3, [pc, #100]	; (80061e0 <xTimerGenericCommand+0x98>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d02a      	beq.n	80061d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b05      	cmp	r3, #5
 8006190:	dc18      	bgt.n	80061c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006192:	f7ff fead 	bl	8005ef0 <xTaskGetSchedulerState>
 8006196:	4603      	mov	r3, r0
 8006198:	2b02      	cmp	r3, #2
 800619a:	d109      	bne.n	80061b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800619c:	4b10      	ldr	r3, [pc, #64]	; (80061e0 <xTimerGenericCommand+0x98>)
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	f107 0110 	add.w	r1, r7, #16
 80061a4:	2300      	movs	r3, #0
 80061a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a8:	f7fe fc8e 	bl	8004ac8 <xQueueGenericSend>
 80061ac:	6278      	str	r0, [r7, #36]	; 0x24
 80061ae:	e012      	b.n	80061d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <xTimerGenericCommand+0x98>)
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	f107 0110 	add.w	r1, r7, #16
 80061b8:	2300      	movs	r3, #0
 80061ba:	2200      	movs	r2, #0
 80061bc:	f7fe fc84 	bl	8004ac8 <xQueueGenericSend>
 80061c0:	6278      	str	r0, [r7, #36]	; 0x24
 80061c2:	e008      	b.n	80061d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061c4:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <xTimerGenericCommand+0x98>)
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	f107 0110 	add.w	r1, r7, #16
 80061cc:	2300      	movs	r3, #0
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	f7fe fd7c 	bl	8004ccc <xQueueGenericSendFromISR>
 80061d4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3728      	adds	r7, #40	; 0x28
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20000c18 	.word	0x20000c18

080061e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af02      	add	r7, sp, #8
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ee:	4b23      	ldr	r3, [pc, #140]	; (800627c <prvProcessExpiredTimer+0x98>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	3304      	adds	r3, #4
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe faed 	bl	80047dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d023      	beq.n	8006258 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	699a      	ldr	r2, [r3, #24]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	18d1      	adds	r1, r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	6978      	ldr	r0, [r7, #20]
 800621e:	f000 f8d3 	bl	80063c8 <prvInsertTimerInActiveList>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d020      	beq.n	800626a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006228:	2300      	movs	r3, #0
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	2300      	movs	r3, #0
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	2100      	movs	r1, #0
 8006232:	6978      	ldr	r0, [r7, #20]
 8006234:	f7ff ff88 	bl	8006148 <xTimerGenericCommand>
 8006238:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d114      	bne.n	800626a <prvProcessExpiredTimer+0x86>
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	b672      	cpsid	i
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	b662      	cpsie	i
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	e7fe      	b.n	8006256 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800625e:	f023 0301 	bic.w	r3, r3, #1
 8006262:	b2da      	uxtb	r2, r3
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	6978      	ldr	r0, [r7, #20]
 8006270:	4798      	blx	r3
}
 8006272:	bf00      	nop
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20000c10 	.word	0x20000c10

08006280 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006288:	f107 0308 	add.w	r3, r7, #8
 800628c:	4618      	mov	r0, r3
 800628e:	f000 f857 	bl	8006340 <prvGetNextExpireTime>
 8006292:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4619      	mov	r1, r3
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 f803 	bl	80062a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800629e:	f000 f8d5 	bl	800644c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062a2:	e7f1      	b.n	8006288 <prvTimerTask+0x8>

080062a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062ae:	f7ff fa3b 	bl	8005728 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062b2:	f107 0308 	add.w	r3, r7, #8
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 f866 	bl	8006388 <prvSampleTimeNow>
 80062bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d130      	bne.n	8006326 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10a      	bne.n	80062e0 <prvProcessTimerOrBlockTask+0x3c>
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d806      	bhi.n	80062e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062d2:	f7ff fa37 	bl	8005744 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062d6:	68f9      	ldr	r1, [r7, #12]
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff ff83 	bl	80061e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062de:	e024      	b.n	800632a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d008      	beq.n	80062f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062e6:	4b13      	ldr	r3, [pc, #76]	; (8006334 <prvProcessTimerOrBlockTask+0x90>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <prvProcessTimerOrBlockTask+0x50>
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <prvProcessTimerOrBlockTask+0x52>
 80062f4:	2300      	movs	r3, #0
 80062f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062f8:	4b0f      	ldr	r3, [pc, #60]	; (8006338 <prvProcessTimerOrBlockTask+0x94>)
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	4619      	mov	r1, r3
 8006306:	f7fe ff97 	bl	8005238 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800630a:	f7ff fa1b 	bl	8005744 <xTaskResumeAll>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10a      	bne.n	800632a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006314:	4b09      	ldr	r3, [pc, #36]	; (800633c <prvProcessTimerOrBlockTask+0x98>)
 8006316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	f3bf 8f6f 	isb	sy
}
 8006324:	e001      	b.n	800632a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006326:	f7ff fa0d 	bl	8005744 <xTaskResumeAll>
}
 800632a:	bf00      	nop
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000c14 	.word	0x20000c14
 8006338:	20000c18 	.word	0x20000c18
 800633c:	e000ed04 	.word	0xe000ed04

08006340 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006348:	4b0e      	ldr	r3, [pc, #56]	; (8006384 <prvGetNextExpireTime+0x44>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <prvGetNextExpireTime+0x16>
 8006352:	2201      	movs	r2, #1
 8006354:	e000      	b.n	8006358 <prvGetNextExpireTime+0x18>
 8006356:	2200      	movs	r2, #0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d105      	bne.n	8006370 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006364:	4b07      	ldr	r3, [pc, #28]	; (8006384 <prvGetNextExpireTime+0x44>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	e001      	b.n	8006374 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006374:	68fb      	ldr	r3, [r7, #12]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20000c10 	.word	0x20000c10

08006388 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006390:	f7ff fa76 	bl	8005880 <xTaskGetTickCount>
 8006394:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006396:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <prvSampleTimeNow+0x3c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	429a      	cmp	r2, r3
 800639e:	d205      	bcs.n	80063ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063a0:	f000 f936 	bl	8006610 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	e002      	b.n	80063b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063b2:	4a04      	ldr	r2, [pc, #16]	; (80063c4 <prvSampleTimeNow+0x3c>)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063b8:	68fb      	ldr	r3, [r7, #12]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000c20 	.word	0x20000c20

080063c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063d6:	2300      	movs	r3, #0
 80063d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d812      	bhi.n	8006414 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	1ad2      	subs	r2, r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d302      	bcc.n	8006402 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063fc:	2301      	movs	r3, #1
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	e01b      	b.n	800643a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006402:	4b10      	ldr	r3, [pc, #64]	; (8006444 <prvInsertTimerInActiveList+0x7c>)
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3304      	adds	r3, #4
 800640a:	4619      	mov	r1, r3
 800640c:	4610      	mov	r0, r2
 800640e:	f7fe f9ac 	bl	800476a <vListInsert>
 8006412:	e012      	b.n	800643a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d206      	bcs.n	800642a <prvInsertTimerInActiveList+0x62>
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d302      	bcc.n	800642a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006424:	2301      	movs	r3, #1
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	e007      	b.n	800643a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800642a:	4b07      	ldr	r3, [pc, #28]	; (8006448 <prvInsertTimerInActiveList+0x80>)
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3304      	adds	r3, #4
 8006432:	4619      	mov	r1, r3
 8006434:	4610      	mov	r0, r2
 8006436:	f7fe f998 	bl	800476a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800643a:	697b      	ldr	r3, [r7, #20]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20000c14 	.word	0x20000c14
 8006448:	20000c10 	.word	0x20000c10

0800644c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b08e      	sub	sp, #56	; 0x38
 8006450:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006452:	e0cc      	b.n	80065ee <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	da19      	bge.n	800648e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800645a:	1d3b      	adds	r3, r7, #4
 800645c:	3304      	adds	r3, #4
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10b      	bne.n	800647e <prvProcessReceivedCommands+0x32>
 8006466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646a:	b672      	cpsid	i
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	b662      	cpsie	i
 800647a:	61fb      	str	r3, [r7, #28]
 800647c:	e7fe      	b.n	800647c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006484:	6850      	ldr	r0, [r2, #4]
 8006486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006488:	6892      	ldr	r2, [r2, #8]
 800648a:	4611      	mov	r1, r2
 800648c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f2c0 80ab 	blt.w	80065ec <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	3304      	adds	r3, #4
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fe f998 	bl	80047dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064ac:	463b      	mov	r3, r7
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff ff6a 	bl	8006388 <prvSampleTimeNow>
 80064b4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b09      	cmp	r3, #9
 80064ba:	f200 8098 	bhi.w	80065ee <prvProcessReceivedCommands+0x1a2>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <prvProcessReceivedCommands+0x78>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064ed 	.word	0x080064ed
 80064c8:	080064ed 	.word	0x080064ed
 80064cc:	080064ed 	.word	0x080064ed
 80064d0:	08006563 	.word	0x08006563
 80064d4:	08006577 	.word	0x08006577
 80064d8:	080065c3 	.word	0x080065c3
 80064dc:	080064ed 	.word	0x080064ed
 80064e0:	080064ed 	.word	0x080064ed
 80064e4:	08006563 	.word	0x08006563
 80064e8:	08006577 	.word	0x08006577
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064f2:	f043 0301 	orr.w	r3, r3, #1
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	18d1      	adds	r1, r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800650c:	f7ff ff5c 	bl	80063c8 <prvInsertTimerInActiveList>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d06b      	beq.n	80065ee <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800651c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d060      	beq.n	80065ee <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	441a      	add	r2, r3
 8006534:	2300      	movs	r3, #0
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	2300      	movs	r3, #0
 800653a:	2100      	movs	r1, #0
 800653c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800653e:	f7ff fe03 	bl	8006148 <xTimerGenericCommand>
 8006542:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d151      	bne.n	80065ee <prvProcessReceivedCommands+0x1a2>
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	b672      	cpsid	i
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	b662      	cpsie	i
 800655e:	61bb      	str	r3, [r7, #24]
 8006560:	e7fe      	b.n	8006560 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	b2da      	uxtb	r2, r3
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006574:	e03b      	b.n	80065ee <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800657c:	f043 0301 	orr.w	r3, r3, #1
 8006580:	b2da      	uxtb	r2, r3
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10b      	bne.n	80065ae <prvProcessReceivedCommands+0x162>
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	b672      	cpsid	i
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	b662      	cpsie	i
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	e7fe      	b.n	80065ac <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	18d1      	adds	r1, r2, r3
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065bc:	f7ff ff04 	bl	80063c8 <prvInsertTimerInActiveList>
					break;
 80065c0:	e015      	b.n	80065ee <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d103      	bne.n	80065d8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80065d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d2:	f000 fbb3 	bl	8006d3c <vPortFree>
 80065d6:	e00a      	b.n	80065ee <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065de:	f023 0301 	bic.w	r3, r3, #1
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065ea:	e000      	b.n	80065ee <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80065ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065ee:	4b07      	ldr	r3, [pc, #28]	; (800660c <prvProcessReceivedCommands+0x1c0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	1d39      	adds	r1, r7, #4
 80065f4:	2200      	movs	r2, #0
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe fc04 	bl	8004e04 <xQueueReceive>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f47f af28 	bne.w	8006454 <prvProcessReceivedCommands+0x8>
	}
}
 8006604:	bf00      	nop
 8006606:	3730      	adds	r7, #48	; 0x30
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	20000c18 	.word	0x20000c18

08006610 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006616:	e049      	b.n	80066ac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006618:	4b2e      	ldr	r3, [pc, #184]	; (80066d4 <prvSwitchTimerLists+0xc4>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006622:	4b2c      	ldr	r3, [pc, #176]	; (80066d4 <prvSwitchTimerLists+0xc4>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3304      	adds	r3, #4
 8006630:	4618      	mov	r0, r3
 8006632:	f7fe f8d3 	bl	80047dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b00      	cmp	r3, #0
 800664a:	d02f      	beq.n	80066ac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4413      	add	r3, r2
 8006654:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	429a      	cmp	r2, r3
 800665c:	d90e      	bls.n	800667c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800666a:	4b1a      	ldr	r3, [pc, #104]	; (80066d4 <prvSwitchTimerLists+0xc4>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3304      	adds	r3, #4
 8006672:	4619      	mov	r1, r3
 8006674:	4610      	mov	r0, r2
 8006676:	f7fe f878 	bl	800476a <vListInsert>
 800667a:	e017      	b.n	80066ac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800667c:	2300      	movs	r3, #0
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	2300      	movs	r3, #0
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	2100      	movs	r1, #0
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7ff fd5e 	bl	8006148 <xTimerGenericCommand>
 800668c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10b      	bne.n	80066ac <prvSwitchTimerLists+0x9c>
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	b672      	cpsid	i
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	b662      	cpsie	i
 80066a8:	603b      	str	r3, [r7, #0]
 80066aa:	e7fe      	b.n	80066aa <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066ac:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <prvSwitchTimerLists+0xc4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1b0      	bne.n	8006618 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066b6:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <prvSwitchTimerLists+0xc4>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <prvSwitchTimerLists+0xc8>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a04      	ldr	r2, [pc, #16]	; (80066d4 <prvSwitchTimerLists+0xc4>)
 80066c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066c4:	4a04      	ldr	r2, [pc, #16]	; (80066d8 <prvSwitchTimerLists+0xc8>)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	6013      	str	r3, [r2, #0]
}
 80066ca:	bf00      	nop
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000c10 	.word	0x20000c10
 80066d8:	20000c14 	.word	0x20000c14

080066dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066e2:	f000 f941 	bl	8006968 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066e6:	4b15      	ldr	r3, [pc, #84]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d120      	bne.n	8006730 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066ee:	4814      	ldr	r0, [pc, #80]	; (8006740 <prvCheckForValidListAndQueue+0x64>)
 80066f0:	f7fd ffea 	bl	80046c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066f4:	4813      	ldr	r0, [pc, #76]	; (8006744 <prvCheckForValidListAndQueue+0x68>)
 80066f6:	f7fd ffe7 	bl	80046c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066fa:	4b13      	ldr	r3, [pc, #76]	; (8006748 <prvCheckForValidListAndQueue+0x6c>)
 80066fc:	4a10      	ldr	r2, [pc, #64]	; (8006740 <prvCheckForValidListAndQueue+0x64>)
 80066fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006700:	4b12      	ldr	r3, [pc, #72]	; (800674c <prvCheckForValidListAndQueue+0x70>)
 8006702:	4a10      	ldr	r2, [pc, #64]	; (8006744 <prvCheckForValidListAndQueue+0x68>)
 8006704:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006706:	2300      	movs	r3, #0
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	4b11      	ldr	r3, [pc, #68]	; (8006750 <prvCheckForValidListAndQueue+0x74>)
 800670c:	4a11      	ldr	r2, [pc, #68]	; (8006754 <prvCheckForValidListAndQueue+0x78>)
 800670e:	2110      	movs	r1, #16
 8006710:	200a      	movs	r0, #10
 8006712:	f7fe f8f7 	bl	8004904 <xQueueGenericCreateStatic>
 8006716:	4602      	mov	r2, r0
 8006718:	4b08      	ldr	r3, [pc, #32]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 800671a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800671c:	4b07      	ldr	r3, [pc, #28]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	490b      	ldr	r1, [pc, #44]	; (8006758 <prvCheckForValidListAndQueue+0x7c>)
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fd5c 	bl	80051e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006730:	f000 f94c 	bl	80069cc <vPortExitCritical>
}
 8006734:	bf00      	nop
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20000c18 	.word	0x20000c18
 8006740:	20000be8 	.word	0x20000be8
 8006744:	20000bfc 	.word	0x20000bfc
 8006748:	20000c10 	.word	0x20000c10
 800674c:	20000c14 	.word	0x20000c14
 8006750:	20000cc4 	.word	0x20000cc4
 8006754:	20000c24 	.word	0x20000c24
 8006758:	08007a70 	.word	0x08007a70

0800675c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3b04      	subs	r3, #4
 800676c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3b04      	subs	r3, #4
 800677a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f023 0201 	bic.w	r2, r3, #1
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3b04      	subs	r3, #4
 800678a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800678c:	4a0c      	ldr	r2, [pc, #48]	; (80067c0 <pxPortInitialiseStack+0x64>)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3b14      	subs	r3, #20
 8006796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3b04      	subs	r3, #4
 80067a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f06f 0202 	mvn.w	r2, #2
 80067aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3b20      	subs	r3, #32
 80067b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067b2:	68fb      	ldr	r3, [r7, #12]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	080067c5 	.word	0x080067c5

080067c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067ce:	4b13      	ldr	r3, [pc, #76]	; (800681c <prvTaskExitError+0x58>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	d00b      	beq.n	80067f0 <prvTaskExitError+0x2c>
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	b672      	cpsid	i
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	b662      	cpsie	i
 80067ec:	60fb      	str	r3, [r7, #12]
 80067ee:	e7fe      	b.n	80067ee <prvTaskExitError+0x2a>
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	b672      	cpsid	i
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	b662      	cpsie	i
 8006804:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006806:	bf00      	nop
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0fc      	beq.n	8006808 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	20000008 	.word	0x20000008

08006820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006820:	4b07      	ldr	r3, [pc, #28]	; (8006840 <pxCurrentTCBConst2>)
 8006822:	6819      	ldr	r1, [r3, #0]
 8006824:	6808      	ldr	r0, [r1, #0]
 8006826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	f380 8809 	msr	PSP, r0
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f380 8811 	msr	BASEPRI, r0
 800683a:	4770      	bx	lr
 800683c:	f3af 8000 	nop.w

08006840 <pxCurrentTCBConst2>:
 8006840:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop

08006848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006848:	4808      	ldr	r0, [pc, #32]	; (800686c <prvPortStartFirstTask+0x24>)
 800684a:	6800      	ldr	r0, [r0, #0]
 800684c:	6800      	ldr	r0, [r0, #0]
 800684e:	f380 8808 	msr	MSP, r0
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f380 8814 	msr	CONTROL, r0
 800685a:	b662      	cpsie	i
 800685c:	b661      	cpsie	f
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	df00      	svc	0
 8006868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800686a:	bf00      	nop
 800686c:	e000ed08 	.word	0xe000ed08

08006870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006876:	4b36      	ldr	r3, [pc, #216]	; (8006950 <xPortStartScheduler+0xe0>)
 8006878:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	22ff      	movs	r2, #255	; 0xff
 8006886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006898:	b2da      	uxtb	r2, r3
 800689a:	4b2e      	ldr	r3, [pc, #184]	; (8006954 <xPortStartScheduler+0xe4>)
 800689c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800689e:	4b2e      	ldr	r3, [pc, #184]	; (8006958 <xPortStartScheduler+0xe8>)
 80068a0:	2207      	movs	r2, #7
 80068a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068a4:	e009      	b.n	80068ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80068a6:	4b2c      	ldr	r3, [pc, #176]	; (8006958 <xPortStartScheduler+0xe8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	4a2a      	ldr	r2, [pc, #168]	; (8006958 <xPortStartScheduler+0xe8>)
 80068ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c2:	2b80      	cmp	r3, #128	; 0x80
 80068c4:	d0ef      	beq.n	80068a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068c6:	4b24      	ldr	r3, [pc, #144]	; (8006958 <xPortStartScheduler+0xe8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f1c3 0307 	rsb	r3, r3, #7
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d00b      	beq.n	80068ea <xPortStartScheduler+0x7a>
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	b672      	cpsid	i
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	b662      	cpsie	i
 80068e6:	60bb      	str	r3, [r7, #8]
 80068e8:	e7fe      	b.n	80068e8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068ea:	4b1b      	ldr	r3, [pc, #108]	; (8006958 <xPortStartScheduler+0xe8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	021b      	lsls	r3, r3, #8
 80068f0:	4a19      	ldr	r2, [pc, #100]	; (8006958 <xPortStartScheduler+0xe8>)
 80068f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068f4:	4b18      	ldr	r3, [pc, #96]	; (8006958 <xPortStartScheduler+0xe8>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068fc:	4a16      	ldr	r2, [pc, #88]	; (8006958 <xPortStartScheduler+0xe8>)
 80068fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	b2da      	uxtb	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006908:	4b14      	ldr	r3, [pc, #80]	; (800695c <xPortStartScheduler+0xec>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a13      	ldr	r2, [pc, #76]	; (800695c <xPortStartScheduler+0xec>)
 800690e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006912:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006914:	4b11      	ldr	r3, [pc, #68]	; (800695c <xPortStartScheduler+0xec>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a10      	ldr	r2, [pc, #64]	; (800695c <xPortStartScheduler+0xec>)
 800691a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800691e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006920:	f000 f8d4 	bl	8006acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006924:	4b0e      	ldr	r3, [pc, #56]	; (8006960 <xPortStartScheduler+0xf0>)
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800692a:	f000 f8f3 	bl	8006b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800692e:	4b0d      	ldr	r3, [pc, #52]	; (8006964 <xPortStartScheduler+0xf4>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a0c      	ldr	r2, [pc, #48]	; (8006964 <xPortStartScheduler+0xf4>)
 8006934:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006938:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800693a:	f7ff ff85 	bl	8006848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800693e:	f7ff f869 	bl	8005a14 <vTaskSwitchContext>
	prvTaskExitError();
 8006942:	f7ff ff3f 	bl	80067c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	e000e400 	.word	0xe000e400
 8006954:	20000d14 	.word	0x20000d14
 8006958:	20000d18 	.word	0x20000d18
 800695c:	e000ed20 	.word	0xe000ed20
 8006960:	20000008 	.word	0x20000008
 8006964:	e000ef34 	.word	0xe000ef34

08006968 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	b672      	cpsid	i
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	b662      	cpsie	i
 8006982:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006984:	4b0f      	ldr	r3, [pc, #60]	; (80069c4 <vPortEnterCritical+0x5c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3301      	adds	r3, #1
 800698a:	4a0e      	ldr	r2, [pc, #56]	; (80069c4 <vPortEnterCritical+0x5c>)
 800698c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800698e:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <vPortEnterCritical+0x5c>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d110      	bne.n	80069b8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006996:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <vPortEnterCritical+0x60>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00b      	beq.n	80069b8 <vPortEnterCritical+0x50>
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	b672      	cpsid	i
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	b662      	cpsie	i
 80069b4:	603b      	str	r3, [r7, #0]
 80069b6:	e7fe      	b.n	80069b6 <vPortEnterCritical+0x4e>
	}
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	20000008 	.word	0x20000008
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069d2:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <vPortExitCritical+0x50>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <vPortExitCritical+0x26>
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	b672      	cpsid	i
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	b662      	cpsie	i
 80069ee:	607b      	str	r3, [r7, #4]
 80069f0:	e7fe      	b.n	80069f0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80069f2:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <vPortExitCritical+0x50>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	4a08      	ldr	r2, [pc, #32]	; (8006a1c <vPortExitCritical+0x50>)
 80069fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069fc:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <vPortExitCritical+0x50>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <vPortExitCritical+0x42>
 8006a04:	2300      	movs	r3, #0
 8006a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a0e:	bf00      	nop
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	20000008 	.word	0x20000008

08006a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a20:	f3ef 8009 	mrs	r0, PSP
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <pxCurrentTCBConst>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	f01e 0f10 	tst.w	lr, #16
 8006a30:	bf08      	it	eq
 8006a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3a:	6010      	str	r0, [r2, #0]
 8006a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a44:	b672      	cpsid	i
 8006a46:	f380 8811 	msr	BASEPRI, r0
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	b662      	cpsie	i
 8006a54:	f7fe ffde 	bl	8005a14 <vTaskSwitchContext>
 8006a58:	f04f 0000 	mov.w	r0, #0
 8006a5c:	f380 8811 	msr	BASEPRI, r0
 8006a60:	bc09      	pop	{r0, r3}
 8006a62:	6819      	ldr	r1, [r3, #0]
 8006a64:	6808      	ldr	r0, [r1, #0]
 8006a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6a:	f01e 0f10 	tst.w	lr, #16
 8006a6e:	bf08      	it	eq
 8006a70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a74:	f380 8809 	msr	PSP, r0
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop

08006a80 <pxCurrentTCBConst>:
 8006a80:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop

08006a88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	b672      	cpsid	i
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	b662      	cpsie	i
 8006aa2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006aa4:	f7fe fefc 	bl	80058a0 <xTaskIncrementTick>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aae:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <SysTick_Handler+0x40>)
 8006ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ac0:	bf00      	nop
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	e000ed04 	.word	0xe000ed04

08006acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <vPortSetupTimerInterrupt+0x34>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <vPortSetupTimerInterrupt+0x38>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006adc:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <vPortSetupTimerInterrupt+0x3c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a0a      	ldr	r2, [pc, #40]	; (8006b0c <vPortSetupTimerInterrupt+0x40>)
 8006ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae6:	099b      	lsrs	r3, r3, #6
 8006ae8:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <vPortSetupTimerInterrupt+0x44>)
 8006aea:	3b01      	subs	r3, #1
 8006aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <vPortSetupTimerInterrupt+0x34>)
 8006af0:	2207      	movs	r2, #7
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	e000e010 	.word	0xe000e010
 8006b04:	e000e018 	.word	0xe000e018
 8006b08:	2000000c 	.word	0x2000000c
 8006b0c:	10624dd3 	.word	0x10624dd3
 8006b10:	e000e014 	.word	0xe000e014

08006b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b24 <vPortEnableVFP+0x10>
 8006b18:	6801      	ldr	r1, [r0, #0]
 8006b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b1e:	6001      	str	r1, [r0, #0]
 8006b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b22:	bf00      	nop
 8006b24:	e000ed88 	.word	0xe000ed88

08006b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b2e:	f3ef 8305 	mrs	r3, IPSR
 8006b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b0f      	cmp	r3, #15
 8006b38:	d915      	bls.n	8006b66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b3a:	4a18      	ldr	r2, [pc, #96]	; (8006b9c <vPortValidateInterruptPriority+0x74>)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b44:	4b16      	ldr	r3, [pc, #88]	; (8006ba0 <vPortValidateInterruptPriority+0x78>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	7afa      	ldrb	r2, [r7, #11]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d20b      	bcs.n	8006b66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	b672      	cpsid	i
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	b662      	cpsie	i
 8006b62:	607b      	str	r3, [r7, #4]
 8006b64:	e7fe      	b.n	8006b64 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b66:	4b0f      	ldr	r3, [pc, #60]	; (8006ba4 <vPortValidateInterruptPriority+0x7c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b6e:	4b0e      	ldr	r3, [pc, #56]	; (8006ba8 <vPortValidateInterruptPriority+0x80>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d90b      	bls.n	8006b8e <vPortValidateInterruptPriority+0x66>
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	b672      	cpsid	i
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	b662      	cpsie	i
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	e7fe      	b.n	8006b8c <vPortValidateInterruptPriority+0x64>
	}
 8006b8e:	bf00      	nop
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	e000e3f0 	.word	0xe000e3f0
 8006ba0:	20000d14 	.word	0x20000d14
 8006ba4:	e000ed0c 	.word	0xe000ed0c
 8006ba8:	20000d18 	.word	0x20000d18

08006bac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08a      	sub	sp, #40	; 0x28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bb8:	f7fe fdb6 	bl	8005728 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bbc:	4b5a      	ldr	r3, [pc, #360]	; (8006d28 <pvPortMalloc+0x17c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bc4:	f000 f916 	bl	8006df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bc8:	4b58      	ldr	r3, [pc, #352]	; (8006d2c <pvPortMalloc+0x180>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f040 8090 	bne.w	8006cf6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01e      	beq.n	8006c1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006bdc:	2208      	movs	r2, #8
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4413      	add	r3, r2
 8006be2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d015      	beq.n	8006c1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f023 0307 	bic.w	r3, r3, #7
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00b      	beq.n	8006c1a <pvPortMalloc+0x6e>
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	b672      	cpsid	i
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	b662      	cpsie	i
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	e7fe      	b.n	8006c18 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d06a      	beq.n	8006cf6 <pvPortMalloc+0x14a>
 8006c20:	4b43      	ldr	r3, [pc, #268]	; (8006d30 <pvPortMalloc+0x184>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d865      	bhi.n	8006cf6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c2a:	4b42      	ldr	r3, [pc, #264]	; (8006d34 <pvPortMalloc+0x188>)
 8006c2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c2e:	4b41      	ldr	r3, [pc, #260]	; (8006d34 <pvPortMalloc+0x188>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c34:	e004      	b.n	8006c40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d903      	bls.n	8006c52 <pvPortMalloc+0xa6>
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1f1      	bne.n	8006c36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c52:	4b35      	ldr	r3, [pc, #212]	; (8006d28 <pvPortMalloc+0x17c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d04c      	beq.n	8006cf6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2208      	movs	r2, #8
 8006c62:	4413      	add	r3, r2
 8006c64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	1ad2      	subs	r2, r2, r3
 8006c76:	2308      	movs	r3, #8
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d920      	bls.n	8006cc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4413      	add	r3, r2
 8006c84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	f003 0307 	and.w	r3, r3, #7
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00b      	beq.n	8006ca8 <pvPortMalloc+0xfc>
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	b672      	cpsid	i
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	b662      	cpsie	i
 8006ca4:	613b      	str	r3, [r7, #16]
 8006ca6:	e7fe      	b.n	8006ca6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	1ad2      	subs	r2, r2, r3
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cba:	69b8      	ldr	r0, [r7, #24]
 8006cbc:	f000 f8fc 	bl	8006eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cc0:	4b1b      	ldr	r3, [pc, #108]	; (8006d30 <pvPortMalloc+0x184>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	4a19      	ldr	r2, [pc, #100]	; (8006d30 <pvPortMalloc+0x184>)
 8006ccc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cce:	4b18      	ldr	r3, [pc, #96]	; (8006d30 <pvPortMalloc+0x184>)
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	4b19      	ldr	r3, [pc, #100]	; (8006d38 <pvPortMalloc+0x18c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d203      	bcs.n	8006ce2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cda:	4b15      	ldr	r3, [pc, #84]	; (8006d30 <pvPortMalloc+0x184>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a16      	ldr	r2, [pc, #88]	; (8006d38 <pvPortMalloc+0x18c>)
 8006ce0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <pvPortMalloc+0x180>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	431a      	orrs	r2, r3
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006cf6:	f7fe fd25 	bl	8005744 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <pvPortMalloc+0x170>
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	b672      	cpsid	i
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	b662      	cpsie	i
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	e7fe      	b.n	8006d1a <pvPortMalloc+0x16e>
	return pvReturn;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3728      	adds	r7, #40	; 0x28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20004924 	.word	0x20004924
 8006d2c:	20004930 	.word	0x20004930
 8006d30:	20004928 	.word	0x20004928
 8006d34:	2000491c 	.word	0x2000491c
 8006d38:	2000492c 	.word	0x2000492c

08006d3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d04a      	beq.n	8006de4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d4e:	2308      	movs	r3, #8
 8006d50:	425b      	negs	r3, r3
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4413      	add	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	4b22      	ldr	r3, [pc, #136]	; (8006dec <vPortFree+0xb0>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4013      	ands	r3, r2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10b      	bne.n	8006d82 <vPortFree+0x46>
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	b672      	cpsid	i
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	b662      	cpsie	i
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	e7fe      	b.n	8006d80 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00b      	beq.n	8006da2 <vPortFree+0x66>
 8006d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8e:	b672      	cpsid	i
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	b662      	cpsie	i
 8006d9e:	60bb      	str	r3, [r7, #8]
 8006da0:	e7fe      	b.n	8006da0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	4b11      	ldr	r3, [pc, #68]	; (8006dec <vPortFree+0xb0>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4013      	ands	r3, r2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d019      	beq.n	8006de4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d115      	bne.n	8006de4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	4b0b      	ldr	r3, [pc, #44]	; (8006dec <vPortFree+0xb0>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	43db      	mvns	r3, r3
 8006dc2:	401a      	ands	r2, r3
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006dc8:	f7fe fcae 	bl	8005728 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <vPortFree+0xb4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	4a06      	ldr	r2, [pc, #24]	; (8006df0 <vPortFree+0xb4>)
 8006dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dda:	6938      	ldr	r0, [r7, #16]
 8006ddc:	f000 f86c 	bl	8006eb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006de0:	f7fe fcb0 	bl	8005744 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006de4:	bf00      	nop
 8006de6:	3718      	adds	r7, #24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	20004930 	.word	0x20004930
 8006df0:	20004928 	.word	0x20004928

08006df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006dfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e00:	4b27      	ldr	r3, [pc, #156]	; (8006ea0 <prvHeapInit+0xac>)
 8006e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00c      	beq.n	8006e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3307      	adds	r3, #7
 8006e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 0307 	bic.w	r3, r3, #7
 8006e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	4a1f      	ldr	r2, [pc, #124]	; (8006ea0 <prvHeapInit+0xac>)
 8006e24:	4413      	add	r3, r2
 8006e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ea4 <prvHeapInit+0xb0>)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e32:	4b1c      	ldr	r3, [pc, #112]	; (8006ea4 <prvHeapInit+0xb0>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e40:	2208      	movs	r2, #8
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0307 	bic.w	r3, r3, #7
 8006e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <prvHeapInit+0xb4>)
 8006e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e56:	4b14      	ldr	r3, [pc, #80]	; (8006ea8 <prvHeapInit+0xb4>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e5e:	4b12      	ldr	r3, [pc, #72]	; (8006ea8 <prvHeapInit+0xb4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2200      	movs	r2, #0
 8006e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	1ad2      	subs	r2, r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e74:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <prvHeapInit+0xb4>)
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	4a0a      	ldr	r2, [pc, #40]	; (8006eac <prvHeapInit+0xb8>)
 8006e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <prvHeapInit+0xbc>)
 8006e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e8c:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <prvHeapInit+0xc0>)
 8006e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e92:	601a      	str	r2, [r3, #0]
}
 8006e94:	bf00      	nop
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	20000d1c 	.word	0x20000d1c
 8006ea4:	2000491c 	.word	0x2000491c
 8006ea8:	20004924 	.word	0x20004924
 8006eac:	2000492c 	.word	0x2000492c
 8006eb0:	20004928 	.word	0x20004928
 8006eb4:	20004930 	.word	0x20004930

08006eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ec0:	4b28      	ldr	r3, [pc, #160]	; (8006f64 <prvInsertBlockIntoFreeList+0xac>)
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e002      	b.n	8006ecc <prvInsertBlockIntoFreeList+0x14>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d8f7      	bhi.n	8006ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d108      	bne.n	8006efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	441a      	add	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	441a      	add	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d118      	bne.n	8006f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	4b15      	ldr	r3, [pc, #84]	; (8006f68 <prvInsertBlockIntoFreeList+0xb0>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d00d      	beq.n	8006f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	441a      	add	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	e008      	b.n	8006f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f36:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <prvInsertBlockIntoFreeList+0xb0>)
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	e003      	b.n	8006f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d002      	beq.n	8006f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	2000491c 	.word	0x2000491c
 8006f68:	20004924 	.word	0x20004924

08006f6c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8006f70:	f7f9 face 	bl	8000510 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8006f74:	f000 f846 	bl	8007004 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8006f78:	f000 f9c4 	bl	8007304 <MX_GPIO_Init>
	MX_ADC1_Init();
 8006f7c:	f000 f8d2 	bl	8007124 <MX_ADC1_Init>
	MX_ETH_Init();
 8006f80:	f000 f922 	bl	80071c8 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8006f84:	f000 f960 	bl	8007248 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8006f88:	f000 f98e 	bl	80072a8 <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8006f8c:	f7fd f9a4 	bl	80042d8 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of myQueue01 */
	myQueue01Handle = osMessageQueueNew(128, sizeof(uint32_t),
 8006f90:	4a11      	ldr	r2, [pc, #68]	; (8006fd8 <main+0x6c>)
 8006f92:	2104      	movs	r1, #4
 8006f94:	2080      	movs	r0, #128	; 0x80
 8006f96:	f7fd fadd 	bl	8004554 <osMessageQueueNew>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <main+0x70>)
 8006f9e:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of DataGattering */
	DataGatteringHandle = osThreadNew(DataTask, NULL,
 8006fa0:	4a0f      	ldr	r2, [pc, #60]	; (8006fe0 <main+0x74>)
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	480f      	ldr	r0, [pc, #60]	; (8006fe4 <main+0x78>)
 8006fa6:	f7fd fa01 	bl	80043ac <osThreadNew>
 8006faa:	4602      	mov	r2, r0
 8006fac:	4b0e      	ldr	r3, [pc, #56]	; (8006fe8 <main+0x7c>)
 8006fae:	601a      	str	r2, [r3, #0]
			&DataGattering_attributes);

	/* creation of DataOutput */
	DataOutputHandle = osThreadNew(DataOutputTask, NULL,
 8006fb0:	4a0e      	ldr	r2, [pc, #56]	; (8006fec <main+0x80>)
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	480e      	ldr	r0, [pc, #56]	; (8006ff0 <main+0x84>)
 8006fb6:	f7fd f9f9 	bl	80043ac <osThreadNew>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <main+0x88>)
 8006fbe:	601a      	str	r2, [r3, #0]
			&DataOutput_attributes);

	/* creation of HeartBeat */
	HeartBeatHandle = osThreadNew(HeartBeatTask, NULL, &HeartBeat_attributes);
 8006fc0:	4a0d      	ldr	r2, [pc, #52]	; (8006ff8 <main+0x8c>)
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	480d      	ldr	r0, [pc, #52]	; (8006ffc <main+0x90>)
 8006fc6:	f7fd f9f1 	bl	80043ac <osThreadNew>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	4b0c      	ldr	r3, [pc, #48]	; (8007000 <main+0x94>)
 8006fce:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8006fd0:	f7fd f9b6 	bl	8004340 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8006fd4:	e7fe      	b.n	8006fd4 <main+0x68>
 8006fd6:	bf00      	nop
 8006fd8:	08007b18 	.word	0x08007b18
 8006fdc:	20004e50 	.word	0x20004e50
 8006fe0:	08007aac 	.word	0x08007aac
 8006fe4:	08007449 	.word	0x08007449
 8006fe8:	20004e4c 	.word	0x20004e4c
 8006fec:	08007ad0 	.word	0x08007ad0
 8006ff0:	08007459 	.word	0x08007459
 8006ff4:	20004e48 	.word	0x20004e48
 8006ff8:	08007af4 	.word	0x08007af4
 8006ffc:	08007469 	.word	0x08007469
 8007000:	20004e44 	.word	0x20004e44

08007004 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8007004:	b580      	push	{r7, lr}
 8007006:	b0b4      	sub	sp, #208	; 0xd0
 8007008:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800700a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800700e:	2230      	movs	r2, #48	; 0x30
 8007010:	2100      	movs	r1, #0
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fd0f 	bl	8007a36 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8007018:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800701c:	2200      	movs	r2, #0
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	605a      	str	r2, [r3, #4]
 8007022:	609a      	str	r2, [r3, #8]
 8007024:	60da      	str	r2, [r3, #12]
 8007026:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8007028:	f107 0308 	add.w	r3, r7, #8
 800702c:	2284      	movs	r2, #132	; 0x84
 800702e:	2100      	movs	r1, #0
 8007030:	4618      	mov	r0, r3
 8007032:	f000 fd00 	bl	8007a36 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8007036:	f7fa ff21 	bl	8001e7c <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800703a:	4b37      	ldr	r3, [pc, #220]	; (8007118 <SystemClock_Config+0x114>)
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	4a36      	ldr	r2, [pc, #216]	; (8007118 <SystemClock_Config+0x114>)
 8007040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007044:	6413      	str	r3, [r2, #64]	; 0x40
 8007046:	4b34      	ldr	r3, [pc, #208]	; (8007118 <SystemClock_Config+0x114>)
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800704e:	607b      	str	r3, [r7, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8007052:	4b32      	ldr	r3, [pc, #200]	; (800711c <SystemClock_Config+0x118>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800705a:	4a30      	ldr	r2, [pc, #192]	; (800711c <SystemClock_Config+0x118>)
 800705c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	4b2e      	ldr	r3, [pc, #184]	; (800711c <SystemClock_Config+0x118>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800706e:	2301      	movs	r3, #1
 8007070:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007074:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8007078:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800707c:	2302      	movs	r3, #2
 800707e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007082:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007086:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 4;
 800708a:	2304      	movs	r3, #4
 800708c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 72;
 8007090:	2348      	movs	r3, #72	; 0x48
 8007092:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007096:	2302      	movs	r3, #2
 8007098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 3;
 800709c:	2303      	movs	r3, #3
 800709e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80070a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fa fef8 	bl	8001e9c <HAL_RCC_OscConfig>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <SystemClock_Config+0xb2>
		Error_Handler();
 80070b2:	f000 f9fd 	bl	80074b0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80070b6:	230f      	movs	r3, #15
 80070b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80070bc:	2302      	movs	r3, #2
 80070be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80070c2:	2300      	movs	r3, #0
 80070c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80070c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80070d0:	2300      	movs	r3, #0
 80070d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80070d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80070da:	2102      	movs	r1, #2
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fb f981 	bl	80023e4 <HAL_RCC_ClockConfig>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <SystemClock_Config+0xe8>
		Error_Handler();
 80070e8:	f000 f9e2 	bl	80074b0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3
 80070ec:	4b0c      	ldr	r3, [pc, #48]	; (8007120 <SystemClock_Config+0x11c>)
 80070ee:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80070f0:	2300      	movs	r3, #0
 80070f2:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80070fa:	f107 0308 	add.w	r3, r7, #8
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fb fb9a 	bl	8002838 <HAL_RCCEx_PeriphCLKConfig>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <SystemClock_Config+0x10a>
		Error_Handler();
 800710a:	f000 f9d1 	bl	80074b0 <Error_Handler>
	}
}
 800710e:	bf00      	nop
 8007110:	37d0      	adds	r7, #208	; 0xd0
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	40023800 	.word	0x40023800
 800711c:	40007000 	.word	0x40007000
 8007120:	00200100 	.word	0x00200100

08007124 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800712a:	463b      	mov	r3, r7
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	609a      	str	r2, [r3, #8]
 8007134:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8007136:	4b21      	ldr	r3, [pc, #132]	; (80071bc <MX_ADC1_Init+0x98>)
 8007138:	4a21      	ldr	r2, [pc, #132]	; (80071c0 <MX_ADC1_Init+0x9c>)
 800713a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800713c:	4b1f      	ldr	r3, [pc, #124]	; (80071bc <MX_ADC1_Init+0x98>)
 800713e:	2200      	movs	r2, #0
 8007140:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007142:	4b1e      	ldr	r3, [pc, #120]	; (80071bc <MX_ADC1_Init+0x98>)
 8007144:	2200      	movs	r2, #0
 8007146:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007148:	4b1c      	ldr	r3, [pc, #112]	; (80071bc <MX_ADC1_Init+0x98>)
 800714a:	2200      	movs	r2, #0
 800714c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800714e:	4b1b      	ldr	r3, [pc, #108]	; (80071bc <MX_ADC1_Init+0x98>)
 8007150:	2201      	movs	r2, #1
 8007152:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007154:	4b19      	ldr	r3, [pc, #100]	; (80071bc <MX_ADC1_Init+0x98>)
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800715c:	4b17      	ldr	r3, [pc, #92]	; (80071bc <MX_ADC1_Init+0x98>)
 800715e:	2200      	movs	r2, #0
 8007160:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007162:	4b16      	ldr	r3, [pc, #88]	; (80071bc <MX_ADC1_Init+0x98>)
 8007164:	4a17      	ldr	r2, [pc, #92]	; (80071c4 <MX_ADC1_Init+0xa0>)
 8007166:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007168:	4b14      	ldr	r3, [pc, #80]	; (80071bc <MX_ADC1_Init+0x98>)
 800716a:	2200      	movs	r2, #0
 800716c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800716e:	4b13      	ldr	r3, [pc, #76]	; (80071bc <MX_ADC1_Init+0x98>)
 8007170:	2201      	movs	r2, #1
 8007172:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8007174:	4b11      	ldr	r3, [pc, #68]	; (80071bc <MX_ADC1_Init+0x98>)
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800717c:	4b0f      	ldr	r3, [pc, #60]	; (80071bc <MX_ADC1_Init+0x98>)
 800717e:	2201      	movs	r2, #1
 8007180:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8007182:	480e      	ldr	r0, [pc, #56]	; (80071bc <MX_ADC1_Init+0x98>)
 8007184:	f7f9 fa14 	bl	80005b0 <HAL_ADC_Init>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <MX_ADC1_Init+0x6e>
		Error_Handler();
 800718e:	f000 f98f 	bl	80074b0 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8007192:	2303      	movs	r3, #3
 8007194:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8007196:	2301      	movs	r3, #1
 8007198:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800719a:	2300      	movs	r3, #0
 800719c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800719e:	463b      	mov	r3, r7
 80071a0:	4619      	mov	r1, r3
 80071a2:	4806      	ldr	r0, [pc, #24]	; (80071bc <MX_ADC1_Init+0x98>)
 80071a4:	f7f9 fba8 	bl	80008f8 <HAL_ADC_ConfigChannel>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <MX_ADC1_Init+0x8e>
		Error_Handler();
 80071ae:	f000 f97f 	bl	80074b0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80071b2:	bf00      	nop
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20004dfc 	.word	0x20004dfc
 80071c0:	40012000 	.word	0x40012000
 80071c4:	0f000001 	.word	0x0f000001

080071c8 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
	/* USER CODE END ETH_Init 0 */

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 80071cc:	4b1c      	ldr	r3, [pc, #112]	; (8007240 <MX_ETH_Init+0x78>)
 80071ce:	4a1d      	ldr	r2, [pc, #116]	; (8007244 <MX_ETH_Init+0x7c>)
 80071d0:	601a      	str	r2, [r3, #0]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80071d2:	4b1b      	ldr	r3, [pc, #108]	; (8007240 <MX_ETH_Init+0x78>)
 80071d4:	2201      	movs	r2, #1
 80071d6:	605a      	str	r2, [r3, #4]
	heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80071d8:	4b19      	ldr	r3, [pc, #100]	; (8007240 <MX_ETH_Init+0x78>)
 80071da:	2200      	movs	r2, #0
 80071dc:	821a      	strh	r2, [r3, #16]
	heth.Init.MACAddr[0] = 0x00;
 80071de:	4b18      	ldr	r3, [pc, #96]	; (8007240 <MX_ETH_Init+0x78>)
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	2200      	movs	r2, #0
 80071e4:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[1] = 0x80;
 80071e6:	4b16      	ldr	r3, [pc, #88]	; (8007240 <MX_ETH_Init+0x78>)
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	3301      	adds	r3, #1
 80071ec:	2280      	movs	r2, #128	; 0x80
 80071ee:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[2] = 0xE1;
 80071f0:	4b13      	ldr	r3, [pc, #76]	; (8007240 <MX_ETH_Init+0x78>)
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	3302      	adds	r3, #2
 80071f6:	22e1      	movs	r2, #225	; 0xe1
 80071f8:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[3] = 0x00;
 80071fa:	4b11      	ldr	r3, [pc, #68]	; (8007240 <MX_ETH_Init+0x78>)
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	3303      	adds	r3, #3
 8007200:	2200      	movs	r2, #0
 8007202:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[4] = 0x00;
 8007204:	4b0e      	ldr	r3, [pc, #56]	; (8007240 <MX_ETH_Init+0x78>)
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	3304      	adds	r3, #4
 800720a:	2200      	movs	r2, #0
 800720c:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[5] = 0x00;
 800720e:	4b0c      	ldr	r3, [pc, #48]	; (8007240 <MX_ETH_Init+0x78>)
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	3305      	adds	r3, #5
 8007214:	2200      	movs	r2, #0
 8007216:	701a      	strb	r2, [r3, #0]
	heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8007218:	4b09      	ldr	r3, [pc, #36]	; (8007240 <MX_ETH_Init+0x78>)
 800721a:	2200      	movs	r2, #0
 800721c:	619a      	str	r2, [r3, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800721e:	4b08      	ldr	r3, [pc, #32]	; (8007240 <MX_ETH_Init+0x78>)
 8007220:	2200      	movs	r2, #0
 8007222:	61da      	str	r2, [r3, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007224:	4b06      	ldr	r3, [pc, #24]	; (8007240 <MX_ETH_Init+0x78>)
 8007226:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800722a:	621a      	str	r2, [r3, #32]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 800722c:	4804      	ldr	r0, [pc, #16]	; (8007240 <MX_ETH_Init+0x78>)
 800722e:	f7f9 fe93 	bl	8000f58 <HAL_ETH_Init>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <MX_ETH_Init+0x74>
		Error_Handler();
 8007238:	f000 f93a 	bl	80074b0 <Error_Handler>
	}
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 800723c:	bf00      	nop
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20004e54 	.word	0x20004e54
 8007244:	40028000 	.word	0x40028000

08007248 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800724c:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <MX_USART3_UART_Init+0x58>)
 800724e:	4a15      	ldr	r2, [pc, #84]	; (80072a4 <MX_USART3_UART_Init+0x5c>)
 8007250:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8007252:	4b13      	ldr	r3, [pc, #76]	; (80072a0 <MX_USART3_UART_Init+0x58>)
 8007254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007258:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800725a:	4b11      	ldr	r3, [pc, #68]	; (80072a0 <MX_USART3_UART_Init+0x58>)
 800725c:	2200      	movs	r2, #0
 800725e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8007260:	4b0f      	ldr	r3, [pc, #60]	; (80072a0 <MX_USART3_UART_Init+0x58>)
 8007262:	2200      	movs	r2, #0
 8007264:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8007266:	4b0e      	ldr	r3, [pc, #56]	; (80072a0 <MX_USART3_UART_Init+0x58>)
 8007268:	2200      	movs	r2, #0
 800726a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800726c:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <MX_USART3_UART_Init+0x58>)
 800726e:	220c      	movs	r2, #12
 8007270:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007272:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <MX_USART3_UART_Init+0x58>)
 8007274:	2200      	movs	r2, #0
 8007276:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007278:	4b09      	ldr	r3, [pc, #36]	; (80072a0 <MX_USART3_UART_Init+0x58>)
 800727a:	2200      	movs	r2, #0
 800727c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800727e:	4b08      	ldr	r3, [pc, #32]	; (80072a0 <MX_USART3_UART_Init+0x58>)
 8007280:	2200      	movs	r2, #0
 8007282:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007284:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <MX_USART3_UART_Init+0x58>)
 8007286:	2200      	movs	r2, #0
 8007288:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800728a:	4805      	ldr	r0, [pc, #20]	; (80072a0 <MX_USART3_UART_Init+0x58>)
 800728c:	f7fc f928 	bl	80034e0 <HAL_UART_Init>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8007296:	f000 f90b 	bl	80074b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800729a:	bf00      	nop
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20004978 	.word	0x20004978
 80072a4:	40004800 	.word	0x40004800

080072a8 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 80072a8:	b580      	push	{r7, lr}
 80072aa:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072ac:	4b14      	ldr	r3, [pc, #80]	; (8007300 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80072ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072b2:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80072b4:	4b12      	ldr	r3, [pc, #72]	; (8007300 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80072b6:	2206      	movs	r2, #6
 80072b8:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072ba:	4b11      	ldr	r3, [pc, #68]	; (8007300 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80072bc:	2202      	movs	r2, #2
 80072be:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80072c0:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072c6:	4b0e      	ldr	r3, [pc, #56]	; (8007300 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80072c8:	2202      	movs	r2, #2
 80072ca:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80072cc:	4b0c      	ldr	r3, [pc, #48]	; (8007300 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80072ce:	2201      	movs	r2, #1
 80072d0:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072d2:	4b0b      	ldr	r3, [pc, #44]	; (8007300 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80072d8:	4b09      	ldr	r3, [pc, #36]	; (8007300 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80072da:	2200      	movs	r2, #0
 80072dc:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80072de:	4b08      	ldr	r3, [pc, #32]	; (8007300 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80072e0:	2201      	movs	r2, #1
 80072e2:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80072e4:	4b06      	ldr	r3, [pc, #24]	; (8007300 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80072ea:	4805      	ldr	r0, [pc, #20]	; (8007300 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80072ec:	f7fa fc7d 	bl	8001bea <HAL_PCD_Init>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 80072f6:	f000 f8db 	bl	80074b0 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 80072fa:	bf00      	nop
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	200049f8 	.word	0x200049f8

08007304 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8007304:	b580      	push	{r7, lr}
 8007306:	b08c      	sub	sp, #48	; 0x30
 8007308:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800730a:	f107 031c 	add.w	r3, r7, #28
 800730e:	2200      	movs	r2, #0
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	605a      	str	r2, [r3, #4]
 8007314:	609a      	str	r2, [r3, #8]
 8007316:	60da      	str	r2, [r3, #12]
 8007318:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800731a:	4b46      	ldr	r3, [pc, #280]	; (8007434 <MX_GPIO_Init+0x130>)
 800731c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731e:	4a45      	ldr	r2, [pc, #276]	; (8007434 <MX_GPIO_Init+0x130>)
 8007320:	f043 0304 	orr.w	r3, r3, #4
 8007324:	6313      	str	r3, [r2, #48]	; 0x30
 8007326:	4b43      	ldr	r3, [pc, #268]	; (8007434 <MX_GPIO_Init+0x130>)
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	61bb      	str	r3, [r7, #24]
 8007330:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8007332:	4b40      	ldr	r3, [pc, #256]	; (8007434 <MX_GPIO_Init+0x130>)
 8007334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007336:	4a3f      	ldr	r2, [pc, #252]	; (8007434 <MX_GPIO_Init+0x130>)
 8007338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733c:	6313      	str	r3, [r2, #48]	; 0x30
 800733e:	4b3d      	ldr	r3, [pc, #244]	; (8007434 <MX_GPIO_Init+0x130>)
 8007340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800734a:	4b3a      	ldr	r3, [pc, #232]	; (8007434 <MX_GPIO_Init+0x130>)
 800734c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734e:	4a39      	ldr	r2, [pc, #228]	; (8007434 <MX_GPIO_Init+0x130>)
 8007350:	f043 0301 	orr.w	r3, r3, #1
 8007354:	6313      	str	r3, [r2, #48]	; 0x30
 8007356:	4b37      	ldr	r3, [pc, #220]	; (8007434 <MX_GPIO_Init+0x130>)
 8007358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	613b      	str	r3, [r7, #16]
 8007360:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8007362:	4b34      	ldr	r3, [pc, #208]	; (8007434 <MX_GPIO_Init+0x130>)
 8007364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007366:	4a33      	ldr	r2, [pc, #204]	; (8007434 <MX_GPIO_Init+0x130>)
 8007368:	f043 0302 	orr.w	r3, r3, #2
 800736c:	6313      	str	r3, [r2, #48]	; 0x30
 800736e:	4b31      	ldr	r3, [pc, #196]	; (8007434 <MX_GPIO_Init+0x130>)
 8007370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800737a:	4b2e      	ldr	r3, [pc, #184]	; (8007434 <MX_GPIO_Init+0x130>)
 800737c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737e:	4a2d      	ldr	r2, [pc, #180]	; (8007434 <MX_GPIO_Init+0x130>)
 8007380:	f043 0308 	orr.w	r3, r3, #8
 8007384:	6313      	str	r3, [r2, #48]	; 0x30
 8007386:	4b2b      	ldr	r3, [pc, #172]	; (8007434 <MX_GPIO_Init+0x130>)
 8007388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738a:	f003 0308 	and.w	r3, r3, #8
 800738e:	60bb      	str	r3, [r7, #8]
 8007390:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8007392:	4b28      	ldr	r3, [pc, #160]	; (8007434 <MX_GPIO_Init+0x130>)
 8007394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007396:	4a27      	ldr	r2, [pc, #156]	; (8007434 <MX_GPIO_Init+0x130>)
 8007398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800739c:	6313      	str	r3, [r2, #48]	; 0x30
 800739e:	4b25      	ldr	r3, [pc, #148]	; (8007434 <MX_GPIO_Init+0x130>)
 80073a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a6:	607b      	str	r3, [r7, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80073aa:	2200      	movs	r2, #0
 80073ac:	f244 0181 	movw	r1, #16513	; 0x4081
 80073b0:	4821      	ldr	r0, [pc, #132]	; (8007438 <MX_GPIO_Init+0x134>)
 80073b2:	f7fa fbe7 	bl	8001b84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80073b6:	2200      	movs	r2, #0
 80073b8:	2140      	movs	r1, #64	; 0x40
 80073ba:	4820      	ldr	r0, [pc, #128]	; (800743c <MX_GPIO_Init+0x138>)
 80073bc:	f7fa fbe2 	bl	8001b84 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80073c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80073c6:	4b1e      	ldr	r3, [pc, #120]	; (8007440 <MX_GPIO_Init+0x13c>)
 80073c8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80073ce:	f107 031c 	add.w	r3, r7, #28
 80073d2:	4619      	mov	r1, r3
 80073d4:	481b      	ldr	r0, [pc, #108]	; (8007444 <MX_GPIO_Init+0x140>)
 80073d6:	f7fa fa2b 	bl	8001830 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80073da:	f244 0381 	movw	r3, #16513	; 0x4081
 80073de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073e0:	2301      	movs	r3, #1
 80073e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073e4:	2300      	movs	r3, #0
 80073e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073e8:	2300      	movs	r3, #0
 80073ea:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073ec:	f107 031c 	add.w	r3, r7, #28
 80073f0:	4619      	mov	r1, r3
 80073f2:	4811      	ldr	r0, [pc, #68]	; (8007438 <MX_GPIO_Init+0x134>)
 80073f4:	f7fa fa1c 	bl	8001830 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80073f8:	2340      	movs	r3, #64	; 0x40
 80073fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073fc:	2301      	movs	r3, #1
 80073fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007400:	2300      	movs	r3, #0
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007404:	2300      	movs	r3, #0
 8007406:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8007408:	f107 031c 	add.w	r3, r7, #28
 800740c:	4619      	mov	r1, r3
 800740e:	480b      	ldr	r0, [pc, #44]	; (800743c <MX_GPIO_Init+0x138>)
 8007410:	f7fa fa0e 	bl	8001830 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8007414:	2380      	movs	r3, #128	; 0x80
 8007416:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007418:	2300      	movs	r3, #0
 800741a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800741c:	2300      	movs	r3, #0
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007420:	f107 031c 	add.w	r3, r7, #28
 8007424:	4619      	mov	r1, r3
 8007426:	4805      	ldr	r0, [pc, #20]	; (800743c <MX_GPIO_Init+0x138>)
 8007428:	f7fa fa02 	bl	8001830 <HAL_GPIO_Init>

}
 800742c:	bf00      	nop
 800742e:	3730      	adds	r7, #48	; 0x30
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	40023800 	.word	0x40023800
 8007438:	40020400 	.word	0x40020400
 800743c:	40021800 	.word	0x40021800
 8007440:	10110000 	.word	0x10110000
 8007444:	40020800 	.word	0x40020800

08007448 <DataTask>:
 * @brief  Function implementing the DataGattering thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_DataTask */
void DataTask(void *argument) {
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8007450:	2001      	movs	r0, #1
 8007452:	f7fd f851 	bl	80044f8 <osDelay>
 8007456:	e7fb      	b.n	8007450 <DataTask+0x8>

08007458 <DataOutputTask>:
 * @brief Function implementing the DataOutput thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DataOutputTask */
void DataOutputTask(void *argument) {
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DataOutputTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8007460:	2001      	movs	r0, #1
 8007462:	f7fd f849 	bl	80044f8 <osDelay>
 8007466:	e7fb      	b.n	8007460 <DataOutputTask+0x8>

08007468 <HeartBeatTask>:
 * @brief Function implementing the HeartBeat thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HeartBeatTask */
void HeartBeatTask(void *argument) {
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN HeartBeatTask */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8007470:	2101      	movs	r1, #1
 8007472:	4805      	ldr	r0, [pc, #20]	; (8007488 <HeartBeatTask+0x20>)
 8007474:	f7fa fb9f 	bl	8001bb6 <HAL_GPIO_TogglePin>
		osDelay(200);
 8007478:	20c8      	movs	r0, #200	; 0xc8
 800747a:	f7fd f83d 	bl	80044f8 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800747e:	2180      	movs	r1, #128	; 0x80
 8007480:	4801      	ldr	r0, [pc, #4]	; (8007488 <HeartBeatTask+0x20>)
 8007482:	f7fa fb98 	bl	8001bb6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8007486:	e7f3      	b.n	8007470 <HeartBeatTask+0x8>
 8007488:	40020400 	.word	0x40020400

0800748c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a04      	ldr	r2, [pc, #16]	; (80074ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d101      	bne.n	80074a2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800749e:	f7f9 f845 	bl	800052c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80074a2:	bf00      	nop
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	40010000 	.word	0x40010000

080074b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80074b0:	b480      	push	{r7}
 80074b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80074b4:	bf00      	nop
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
	...

080074c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80074c6:	4b11      	ldr	r3, [pc, #68]	; (800750c <HAL_MspInit+0x4c>)
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	4a10      	ldr	r2, [pc, #64]	; (800750c <HAL_MspInit+0x4c>)
 80074cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074d0:	6413      	str	r3, [r2, #64]	; 0x40
 80074d2:	4b0e      	ldr	r3, [pc, #56]	; (800750c <HAL_MspInit+0x4c>)
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074da:	607b      	str	r3, [r7, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074de:	4b0b      	ldr	r3, [pc, #44]	; (800750c <HAL_MspInit+0x4c>)
 80074e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e2:	4a0a      	ldr	r2, [pc, #40]	; (800750c <HAL_MspInit+0x4c>)
 80074e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074e8:	6453      	str	r3, [r2, #68]	; 0x44
 80074ea:	4b08      	ldr	r3, [pc, #32]	; (800750c <HAL_MspInit+0x4c>)
 80074ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80074f6:	2200      	movs	r2, #0
 80074f8:	210f      	movs	r1, #15
 80074fa:	f06f 0001 	mvn.w	r0, #1
 80074fe:	f7f9 fd01 	bl	8000f04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	40023800 	.word	0x40023800

08007510 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08a      	sub	sp, #40	; 0x28
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007518:	f107 0314 	add.w	r3, r7, #20
 800751c:	2200      	movs	r2, #0
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	605a      	str	r2, [r3, #4]
 8007522:	609a      	str	r2, [r3, #8]
 8007524:	60da      	str	r2, [r3, #12]
 8007526:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a19      	ldr	r2, [pc, #100]	; (8007594 <HAL_ADC_MspInit+0x84>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d12b      	bne.n	800758a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007532:	4b19      	ldr	r3, [pc, #100]	; (8007598 <HAL_ADC_MspInit+0x88>)
 8007534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007536:	4a18      	ldr	r2, [pc, #96]	; (8007598 <HAL_ADC_MspInit+0x88>)
 8007538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800753c:	6453      	str	r3, [r2, #68]	; 0x44
 800753e:	4b16      	ldr	r3, [pc, #88]	; (8007598 <HAL_ADC_MspInit+0x88>)
 8007540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800754a:	4b13      	ldr	r3, [pc, #76]	; (8007598 <HAL_ADC_MspInit+0x88>)
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	4a12      	ldr	r2, [pc, #72]	; (8007598 <HAL_ADC_MspInit+0x88>)
 8007550:	f043 0301 	orr.w	r3, r3, #1
 8007554:	6313      	str	r3, [r2, #48]	; 0x30
 8007556:	4b10      	ldr	r3, [pc, #64]	; (8007598 <HAL_ADC_MspInit+0x88>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8007562:	2318      	movs	r3, #24
 8007564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007566:	2303      	movs	r3, #3
 8007568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756a:	2300      	movs	r3, #0
 800756c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800756e:	f107 0314 	add.w	r3, r7, #20
 8007572:	4619      	mov	r1, r3
 8007574:	4809      	ldr	r0, [pc, #36]	; (800759c <HAL_ADC_MspInit+0x8c>)
 8007576:	f7fa f95b 	bl	8001830 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800757a:	2200      	movs	r2, #0
 800757c:	2105      	movs	r1, #5
 800757e:	2012      	movs	r0, #18
 8007580:	f7f9 fcc0 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007584:	2012      	movs	r0, #18
 8007586:	f7f9 fcd9 	bl	8000f3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800758a:	bf00      	nop
 800758c:	3728      	adds	r7, #40	; 0x28
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	40012000 	.word	0x40012000
 8007598:	40023800 	.word	0x40023800
 800759c:	40020000 	.word	0x40020000

080075a0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08e      	sub	sp, #56	; 0x38
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075ac:	2200      	movs	r2, #0
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	605a      	str	r2, [r3, #4]
 80075b2:	609a      	str	r2, [r3, #8]
 80075b4:	60da      	str	r2, [r3, #12]
 80075b6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a4e      	ldr	r2, [pc, #312]	; (80076f8 <HAL_ETH_MspInit+0x158>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	f040 8096 	bne.w	80076f0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80075c4:	4b4d      	ldr	r3, [pc, #308]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 80075c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c8:	4a4c      	ldr	r2, [pc, #304]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 80075ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80075ce:	6313      	str	r3, [r2, #48]	; 0x30
 80075d0:	4b4a      	ldr	r3, [pc, #296]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 80075d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075d8:	623b      	str	r3, [r7, #32]
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	4b47      	ldr	r3, [pc, #284]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 80075de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e0:	4a46      	ldr	r2, [pc, #280]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 80075e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075e6:	6313      	str	r3, [r2, #48]	; 0x30
 80075e8:	4b44      	ldr	r3, [pc, #272]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 80075ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	4b41      	ldr	r3, [pc, #260]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 80075f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f8:	4a40      	ldr	r2, [pc, #256]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 80075fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075fe:	6313      	str	r3, [r2, #48]	; 0x30
 8007600:	4b3e      	ldr	r3, [pc, #248]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 8007602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007608:	61bb      	str	r3, [r7, #24]
 800760a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800760c:	4b3b      	ldr	r3, [pc, #236]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 800760e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007610:	4a3a      	ldr	r2, [pc, #232]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 8007612:	f043 0304 	orr.w	r3, r3, #4
 8007616:	6313      	str	r3, [r2, #48]	; 0x30
 8007618:	4b38      	ldr	r3, [pc, #224]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 800761a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	617b      	str	r3, [r7, #20]
 8007622:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007624:	4b35      	ldr	r3, [pc, #212]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 8007626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007628:	4a34      	ldr	r2, [pc, #208]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 800762a:	f043 0301 	orr.w	r3, r3, #1
 800762e:	6313      	str	r3, [r2, #48]	; 0x30
 8007630:	4b32      	ldr	r3, [pc, #200]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 8007632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800763c:	4b2f      	ldr	r3, [pc, #188]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 800763e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007640:	4a2e      	ldr	r2, [pc, #184]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 8007642:	f043 0302 	orr.w	r3, r3, #2
 8007646:	6313      	str	r3, [r2, #48]	; 0x30
 8007648:	4b2c      	ldr	r3, [pc, #176]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 800764a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	60fb      	str	r3, [r7, #12]
 8007652:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007654:	4b29      	ldr	r3, [pc, #164]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 8007656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007658:	4a28      	ldr	r2, [pc, #160]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 800765a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800765e:	6313      	str	r3, [r2, #48]	; 0x30
 8007660:	4b26      	ldr	r3, [pc, #152]	; (80076fc <HAL_ETH_MspInit+0x15c>)
 8007662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007668:	60bb      	str	r3, [r7, #8]
 800766a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800766c:	2332      	movs	r3, #50	; 0x32
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007670:	2302      	movs	r3, #2
 8007672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007674:	2300      	movs	r3, #0
 8007676:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007678:	2303      	movs	r3, #3
 800767a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800767c:	230b      	movs	r3, #11
 800767e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007684:	4619      	mov	r1, r3
 8007686:	481e      	ldr	r0, [pc, #120]	; (8007700 <HAL_ETH_MspInit+0x160>)
 8007688:	f7fa f8d2 	bl	8001830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800768c:	2386      	movs	r3, #134	; 0x86
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007690:	2302      	movs	r3, #2
 8007692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007694:	2300      	movs	r3, #0
 8007696:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007698:	2303      	movs	r3, #3
 800769a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800769c:	230b      	movs	r3, #11
 800769e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076a4:	4619      	mov	r1, r3
 80076a6:	4817      	ldr	r0, [pc, #92]	; (8007704 <HAL_ETH_MspInit+0x164>)
 80076a8:	f7fa f8c2 	bl	8001830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80076ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076b2:	2302      	movs	r3, #2
 80076b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076ba:	2303      	movs	r3, #3
 80076bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80076be:	230b      	movs	r3, #11
 80076c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80076c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076c6:	4619      	mov	r1, r3
 80076c8:	480f      	ldr	r0, [pc, #60]	; (8007708 <HAL_ETH_MspInit+0x168>)
 80076ca:	f7fa f8b1 	bl	8001830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80076ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80076d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076d4:	2302      	movs	r3, #2
 80076d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076d8:	2300      	movs	r3, #0
 80076da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076dc:	2303      	movs	r3, #3
 80076de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80076e0:	230b      	movs	r3, #11
 80076e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80076e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076e8:	4619      	mov	r1, r3
 80076ea:	4808      	ldr	r0, [pc, #32]	; (800770c <HAL_ETH_MspInit+0x16c>)
 80076ec:	f7fa f8a0 	bl	8001830 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80076f0:	bf00      	nop
 80076f2:	3738      	adds	r7, #56	; 0x38
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	40028000 	.word	0x40028000
 80076fc:	40023800 	.word	0x40023800
 8007700:	40020800 	.word	0x40020800
 8007704:	40020000 	.word	0x40020000
 8007708:	40020400 	.word	0x40020400
 800770c:	40021800 	.word	0x40021800

08007710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08a      	sub	sp, #40	; 0x28
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007718:	f107 0314 	add.w	r3, r7, #20
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	605a      	str	r2, [r3, #4]
 8007722:	609a      	str	r2, [r3, #8]
 8007724:	60da      	str	r2, [r3, #12]
 8007726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a17      	ldr	r2, [pc, #92]	; (800778c <HAL_UART_MspInit+0x7c>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d128      	bne.n	8007784 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007732:	4b17      	ldr	r3, [pc, #92]	; (8007790 <HAL_UART_MspInit+0x80>)
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	4a16      	ldr	r2, [pc, #88]	; (8007790 <HAL_UART_MspInit+0x80>)
 8007738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800773c:	6413      	str	r3, [r2, #64]	; 0x40
 800773e:	4b14      	ldr	r3, [pc, #80]	; (8007790 <HAL_UART_MspInit+0x80>)
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007746:	613b      	str	r3, [r7, #16]
 8007748:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800774a:	4b11      	ldr	r3, [pc, #68]	; (8007790 <HAL_UART_MspInit+0x80>)
 800774c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774e:	4a10      	ldr	r2, [pc, #64]	; (8007790 <HAL_UART_MspInit+0x80>)
 8007750:	f043 0308 	orr.w	r3, r3, #8
 8007754:	6313      	str	r3, [r2, #48]	; 0x30
 8007756:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <HAL_UART_MspInit+0x80>)
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007762:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007768:	2302      	movs	r3, #2
 800776a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800776c:	2300      	movs	r3, #0
 800776e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007770:	2303      	movs	r3, #3
 8007772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007774:	2307      	movs	r3, #7
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007778:	f107 0314 	add.w	r3, r7, #20
 800777c:	4619      	mov	r1, r3
 800777e:	4805      	ldr	r0, [pc, #20]	; (8007794 <HAL_UART_MspInit+0x84>)
 8007780:	f7fa f856 	bl	8001830 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007784:	bf00      	nop
 8007786:	3728      	adds	r7, #40	; 0x28
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	40004800 	.word	0x40004800
 8007790:	40023800 	.word	0x40023800
 8007794:	40020c00 	.word	0x40020c00

08007798 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b08a      	sub	sp, #40	; 0x28
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077a0:	f107 0314 	add.w	r3, r7, #20
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	605a      	str	r2, [r3, #4]
 80077aa:	609a      	str	r2, [r3, #8]
 80077ac:	60da      	str	r2, [r3, #12]
 80077ae:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077b8:	d141      	bne.n	800783e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077ba:	4b23      	ldr	r3, [pc, #140]	; (8007848 <HAL_PCD_MspInit+0xb0>)
 80077bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077be:	4a22      	ldr	r2, [pc, #136]	; (8007848 <HAL_PCD_MspInit+0xb0>)
 80077c0:	f043 0301 	orr.w	r3, r3, #1
 80077c4:	6313      	str	r3, [r2, #48]	; 0x30
 80077c6:	4b20      	ldr	r3, [pc, #128]	; (8007848 <HAL_PCD_MspInit+0xb0>)
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80077d2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80077d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077d8:	2302      	movs	r3, #2
 80077da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077e0:	2303      	movs	r3, #3
 80077e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80077e4:	230a      	movs	r3, #10
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077e8:	f107 0314 	add.w	r3, r7, #20
 80077ec:	4619      	mov	r1, r3
 80077ee:	4817      	ldr	r0, [pc, #92]	; (800784c <HAL_PCD_MspInit+0xb4>)
 80077f0:	f7fa f81e 	bl	8001830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80077f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077fa:	2300      	movs	r3, #0
 80077fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007802:	f107 0314 	add.w	r3, r7, #20
 8007806:	4619      	mov	r1, r3
 8007808:	4810      	ldr	r0, [pc, #64]	; (800784c <HAL_PCD_MspInit+0xb4>)
 800780a:	f7fa f811 	bl	8001830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800780e:	4b0e      	ldr	r3, [pc, #56]	; (8007848 <HAL_PCD_MspInit+0xb0>)
 8007810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007812:	4a0d      	ldr	r2, [pc, #52]	; (8007848 <HAL_PCD_MspInit+0xb0>)
 8007814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007818:	6353      	str	r3, [r2, #52]	; 0x34
 800781a:	4b0b      	ldr	r3, [pc, #44]	; (8007848 <HAL_PCD_MspInit+0xb0>)
 800781c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4b08      	ldr	r3, [pc, #32]	; (8007848 <HAL_PCD_MspInit+0xb0>)
 8007828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800782a:	4a07      	ldr	r2, [pc, #28]	; (8007848 <HAL_PCD_MspInit+0xb0>)
 800782c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007830:	6453      	str	r3, [r2, #68]	; 0x44
 8007832:	4b05      	ldr	r3, [pc, #20]	; (8007848 <HAL_PCD_MspInit+0xb0>)
 8007834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800783a:	60bb      	str	r3, [r7, #8]
 800783c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800783e:	bf00      	nop
 8007840:	3728      	adds	r7, #40	; 0x28
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	40023800 	.word	0x40023800
 800784c:	40020000 	.word	0x40020000

08007850 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08c      	sub	sp, #48	; 0x30
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8007860:	2200      	movs	r2, #0
 8007862:	6879      	ldr	r1, [r7, #4]
 8007864:	2019      	movs	r0, #25
 8007866:	f7f9 fb4d 	bl	8000f04 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800786a:	2019      	movs	r0, #25
 800786c:	f7f9 fb66 	bl	8000f3c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007870:	4b1e      	ldr	r3, [pc, #120]	; (80078ec <HAL_InitTick+0x9c>)
 8007872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007874:	4a1d      	ldr	r2, [pc, #116]	; (80078ec <HAL_InitTick+0x9c>)
 8007876:	f043 0301 	orr.w	r3, r3, #1
 800787a:	6453      	str	r3, [r2, #68]	; 0x44
 800787c:	4b1b      	ldr	r3, [pc, #108]	; (80078ec <HAL_InitTick+0x9c>)
 800787e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007888:	f107 0210 	add.w	r2, r7, #16
 800788c:	f107 0314 	add.w	r3, r7, #20
 8007890:	4611      	mov	r1, r2
 8007892:	4618      	mov	r0, r3
 8007894:	f7fa ff9e 	bl	80027d4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007898:	f7fa ff88 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 800789c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	4a13      	ldr	r2, [pc, #76]	; (80078f0 <HAL_InitTick+0xa0>)
 80078a2:	fba2 2303 	umull	r2, r3, r2, r3
 80078a6:	0c9b      	lsrs	r3, r3, #18
 80078a8:	3b01      	subs	r3, #1
 80078aa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80078ac:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <HAL_InitTick+0xa4>)
 80078ae:	4a12      	ldr	r2, [pc, #72]	; (80078f8 <HAL_InitTick+0xa8>)
 80078b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80078b2:	4b10      	ldr	r3, [pc, #64]	; (80078f4 <HAL_InitTick+0xa4>)
 80078b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80078b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80078ba:	4a0e      	ldr	r2, [pc, #56]	; (80078f4 <HAL_InitTick+0xa4>)
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80078c0:	4b0c      	ldr	r3, [pc, #48]	; (80078f4 <HAL_InitTick+0xa4>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078c6:	4b0b      	ldr	r3, [pc, #44]	; (80078f4 <HAL_InitTick+0xa4>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80078cc:	4809      	ldr	r0, [pc, #36]	; (80078f4 <HAL_InitTick+0xa4>)
 80078ce:	f7fb fba1 	bl	8003014 <HAL_TIM_Base_Init>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d104      	bne.n	80078e2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80078d8:	4806      	ldr	r0, [pc, #24]	; (80078f4 <HAL_InitTick+0xa4>)
 80078da:	f7fb fbd1 	bl	8003080 <HAL_TIM_Base_Start_IT>
 80078de:	4603      	mov	r3, r0
 80078e0:	e000      	b.n	80078e4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3730      	adds	r7, #48	; 0x30
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	40023800 	.word	0x40023800
 80078f0:	431bde83 	.word	0x431bde83
 80078f4:	20004e9c 	.word	0x20004e9c
 80078f8:	40010000 	.word	0x40010000

080078fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80078fc:	b480      	push	{r7}
 80078fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007900:	bf00      	nop
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800790a:	b480      	push	{r7}
 800790c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800790e:	e7fe      	b.n	800790e <HardFault_Handler+0x4>

08007910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007910:	b480      	push	{r7}
 8007912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007914:	e7fe      	b.n	8007914 <MemManage_Handler+0x4>

08007916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007916:	b480      	push	{r7}
 8007918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800791a:	e7fe      	b.n	800791a <BusFault_Handler+0x4>

0800791c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007920:	e7fe      	b.n	8007920 <UsageFault_Handler+0x4>

08007922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007922:	b480      	push	{r7}
 8007924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007926:	bf00      	nop
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007934:	4802      	ldr	r0, [pc, #8]	; (8007940 <ADC_IRQHandler+0x10>)
 8007936:	f7f8 fe7f 	bl	8000638 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800793a:	bf00      	nop
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20004dfc 	.word	0x20004dfc

08007944 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007948:	4802      	ldr	r0, [pc, #8]	; (8007954 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800794a:	f7fb fbc3 	bl	80030d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800794e:	bf00      	nop
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20004e9c 	.word	0x20004e9c

08007958 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800795c:	4b08      	ldr	r3, [pc, #32]	; (8007980 <SystemInit+0x28>)
 800795e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007962:	4a07      	ldr	r2, [pc, #28]	; (8007980 <SystemInit+0x28>)
 8007964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800796c:	4b04      	ldr	r3, [pc, #16]	; (8007980 <SystemInit+0x28>)
 800796e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007972:	609a      	str	r2, [r3, #8]
#endif
}
 8007974:	bf00      	nop
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	e000ed00 	.word	0xe000ed00

08007984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80079bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007988:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800798a:	e003      	b.n	8007994 <LoopCopyDataInit>

0800798c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800798c:	4b0c      	ldr	r3, [pc, #48]	; (80079c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800798e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007990:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007992:	3104      	adds	r1, #4

08007994 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007994:	480b      	ldr	r0, [pc, #44]	; (80079c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007996:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007998:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800799a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800799c:	d3f6      	bcc.n	800798c <CopyDataInit>
  ldr  r2, =_sbss
 800799e:	4a0b      	ldr	r2, [pc, #44]	; (80079cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80079a0:	e002      	b.n	80079a8 <LoopFillZerobss>

080079a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80079a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80079a4:	f842 3b04 	str.w	r3, [r2], #4

080079a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80079a8:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80079aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80079ac:	d3f9      	bcc.n	80079a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80079ae:	f7ff ffd3 	bl	8007958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80079b2:	f000 f811 	bl	80079d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80079b6:	f7ff fad9 	bl	8006f6c <main>
  bx  lr    
 80079ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80079bc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80079c0:	08007b58 	.word	0x08007b58
  ldr  r0, =_sdata
 80079c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80079c8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80079cc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80079d0:	20004edc 	.word	0x20004edc

080079d4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80079d4:	e7fe      	b.n	80079d4 <CAN1_RX0_IRQHandler>
	...

080079d8 <__libc_init_array>:
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	4e0d      	ldr	r6, [pc, #52]	; (8007a10 <__libc_init_array+0x38>)
 80079dc:	4c0d      	ldr	r4, [pc, #52]	; (8007a14 <__libc_init_array+0x3c>)
 80079de:	1ba4      	subs	r4, r4, r6
 80079e0:	10a4      	asrs	r4, r4, #2
 80079e2:	2500      	movs	r5, #0
 80079e4:	42a5      	cmp	r5, r4
 80079e6:	d109      	bne.n	80079fc <__libc_init_array+0x24>
 80079e8:	4e0b      	ldr	r6, [pc, #44]	; (8007a18 <__libc_init_array+0x40>)
 80079ea:	4c0c      	ldr	r4, [pc, #48]	; (8007a1c <__libc_init_array+0x44>)
 80079ec:	f000 f82c 	bl	8007a48 <_init>
 80079f0:	1ba4      	subs	r4, r4, r6
 80079f2:	10a4      	asrs	r4, r4, #2
 80079f4:	2500      	movs	r5, #0
 80079f6:	42a5      	cmp	r5, r4
 80079f8:	d105      	bne.n	8007a06 <__libc_init_array+0x2e>
 80079fa:	bd70      	pop	{r4, r5, r6, pc}
 80079fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a00:	4798      	blx	r3
 8007a02:	3501      	adds	r5, #1
 8007a04:	e7ee      	b.n	80079e4 <__libc_init_array+0xc>
 8007a06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a0a:	4798      	blx	r3
 8007a0c:	3501      	adds	r5, #1
 8007a0e:	e7f2      	b.n	80079f6 <__libc_init_array+0x1e>
 8007a10:	08007b50 	.word	0x08007b50
 8007a14:	08007b50 	.word	0x08007b50
 8007a18:	08007b50 	.word	0x08007b50
 8007a1c:	08007b54 	.word	0x08007b54

08007a20 <memcpy>:
 8007a20:	b510      	push	{r4, lr}
 8007a22:	1e43      	subs	r3, r0, #1
 8007a24:	440a      	add	r2, r1
 8007a26:	4291      	cmp	r1, r2
 8007a28:	d100      	bne.n	8007a2c <memcpy+0xc>
 8007a2a:	bd10      	pop	{r4, pc}
 8007a2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a34:	e7f7      	b.n	8007a26 <memcpy+0x6>

08007a36 <memset>:
 8007a36:	4402      	add	r2, r0
 8007a38:	4603      	mov	r3, r0
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d100      	bne.n	8007a40 <memset+0xa>
 8007a3e:	4770      	bx	lr
 8007a40:	f803 1b01 	strb.w	r1, [r3], #1
 8007a44:	e7f9      	b.n	8007a3a <memset+0x4>
	...

08007a48 <_init>:
 8007a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4a:	bf00      	nop
 8007a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4e:	bc08      	pop	{r3}
 8007a50:	469e      	mov	lr, r3
 8007a52:	4770      	bx	lr

08007a54 <_fini>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	bf00      	nop
 8007a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5a:	bc08      	pop	{r3}
 8007a5c:	469e      	mov	lr, r3
 8007a5e:	4770      	bx	lr
