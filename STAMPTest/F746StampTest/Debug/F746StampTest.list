
F746StampTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d0  080041d0  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041d8  080041d8  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d8  080041d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041dc  080041dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  080041e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000044  08004224  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004224  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be48  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dec  00000000  00000000  0002bebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  0002dca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f0  00000000  00000000  0002e6c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000251d8  00000000  00000000  0002efb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a454  00000000  00000000  00054190  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e341e  00000000  00000000  0005e5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141a02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002708  00000000  00000000  00141a80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000044 	.word	0x20000044
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004194 	.word	0x08004194

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000048 	.word	0x20000048
 8000204:	08004194 	.word	0x08004194

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f96d 	bl	80007ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f000 f806 	bl	8000524 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f003 fcfe 	bl	8003f18 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_InitTick+0x54>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x58>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053a:	fbb3 f3f1 	udiv	r3, r3, r1
 800053e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f995 	bl	8000872 <HAL_SYSTICK_Config>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	e00e      	b.n	8000570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d80a      	bhi.n	800056e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000558:	2200      	movs	r2, #0
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	f04f 30ff 	mov.w	r0, #4294967295
 8000560:	f000 f94f 	bl	8000802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000564:	4a06      	ldr	r2, [pc, #24]	; (8000580 <HAL_InitTick+0x5c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056a:	2300      	movs	r3, #0
 800056c:	e000      	b.n	8000570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000040 	.word	0x20000040
 800057c:	20000004 	.word	0x20000004
 8000580:	20000000 	.word	0x20000000

08000584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_IncTick+0x20>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x24>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4413      	add	r3, r2
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HAL_IncTick+0x24>)
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004
 80005a8:	20000060 	.word	0x20000060

080005ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return uwTick;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <HAL_GetTick+0x14>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000060 	.word	0x20000060

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005cc:	f7ff ffee 	bl	80005ac <HAL_GetTick>
 80005d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005dc:	d005      	beq.n	80005ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_Delay+0x40>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4413      	add	r3, r2
 80005e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ea:	bf00      	nop
 80005ec:	f7ff ffde 	bl	80005ac <HAL_GetTick>
 80005f0:	4602      	mov	r2, r0
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d8f7      	bhi.n	80005ec <HAL_Delay+0x28>
  {
  }
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000004 	.word	0x20000004

08000608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <__NVIC_SetPriorityGrouping+0x40>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 8000632:	4313      	orrs	r3, r2
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <__NVIC_SetPriorityGrouping+0x40>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00
 800064c:	05fa0000 	.word	0x05fa0000

08000650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <__NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	2b00      	cmp	r3, #0
 800067c:	db0b      	blt.n	8000696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f003 021f 	and.w	r2, r3, #31
 8000684:	4907      	ldr	r1, [pc, #28]	; (80006a4 <__NVIC_EnableIRQ+0x38>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	2001      	movs	r0, #1
 800068e:	fa00 f202 	lsl.w	r2, r0, r2
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db10      	blt.n	80006dc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	f003 021f 	and.w	r2, r3, #31
 80006c0:	4909      	ldr	r1, [pc, #36]	; (80006e8 <__NVIC_DisableIRQ+0x40>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	095b      	lsrs	r3, r3, #5
 80006c8:	2001      	movs	r0, #1
 80006ca:	fa00 f202 	lsl.w	r2, r0, r2
 80006ce:	3320      	adds	r3, #32
 80006d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006d8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000e100 	.word	0xe000e100

080006ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	6039      	str	r1, [r7, #0]
 80006f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	db0a      	blt.n	8000716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	b2da      	uxtb	r2, r3
 8000704:	490c      	ldr	r1, [pc, #48]	; (8000738 <__NVIC_SetPriority+0x4c>)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	0112      	lsls	r2, r2, #4
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	440b      	add	r3, r1
 8000710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000714:	e00a      	b.n	800072c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4908      	ldr	r1, [pc, #32]	; (800073c <__NVIC_SetPriority+0x50>)
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	3b04      	subs	r3, #4
 8000724:	0112      	lsls	r2, r2, #4
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	440b      	add	r3, r1
 800072a:	761a      	strb	r2, [r3, #24]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000e100 	.word	0xe000e100
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000740:	b480      	push	{r7}
 8000742:	b089      	sub	sp, #36	; 0x24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	f1c3 0307 	rsb	r3, r3, #7
 800075a:	2b04      	cmp	r3, #4
 800075c:	bf28      	it	cs
 800075e:	2304      	movcs	r3, #4
 8000760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	3304      	adds	r3, #4
 8000766:	2b06      	cmp	r3, #6
 8000768:	d902      	bls.n	8000770 <NVIC_EncodePriority+0x30>
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	3b03      	subs	r3, #3
 800076e:	e000      	b.n	8000772 <NVIC_EncodePriority+0x32>
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	f04f 32ff 	mov.w	r2, #4294967295
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	43da      	mvns	r2, r3
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	401a      	ands	r2, r3
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000788:	f04f 31ff 	mov.w	r1, #4294967295
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	fa01 f303 	lsl.w	r3, r1, r3
 8000792:	43d9      	mvns	r1, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	4313      	orrs	r3, r2
         );
}
 800079a:	4618      	mov	r0, r3
 800079c:	3724      	adds	r7, #36	; 0x24
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b8:	d301      	bcc.n	80007be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00f      	b.n	80007de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <SysTick_Config+0x40>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c6:	210f      	movs	r1, #15
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f7ff ff8e 	bl	80006ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <SysTick_Config+0x40>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <SysTick_Config+0x40>)
 80007d8:	2207      	movs	r2, #7
 80007da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	e000e010 	.word	0xe000e010

080007ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff07 	bl	8000608 <__NVIC_SetPriorityGrouping>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000814:	f7ff ff1c 	bl	8000650 <__NVIC_GetPriorityGrouping>
 8000818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	6978      	ldr	r0, [r7, #20]
 8000820:	f7ff ff8e 	bl	8000740 <NVIC_EncodePriority>
 8000824:	4602      	mov	r2, r0
 8000826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff5d 	bl	80006ec <__NVIC_SetPriority>
}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff0f 	bl	800066c <__NVIC_EnableIRQ>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff1f 	bl	80006a8 <__NVIC_DisableIRQ>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff94 	bl	80007a8 <SysTick_Config>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800088c:	b480      	push	{r7}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
 80008aa:	e175      	b.n	8000b98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80008ac:	2201      	movs	r2, #1
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	697a      	ldr	r2, [r7, #20]
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	f040 8164 	bne.w	8000b92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d00b      	beq.n	80008ea <HAL_GPIO_Init+0x5e>
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d007      	beq.n	80008ea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008de:	2b11      	cmp	r3, #17
 80008e0:	d003      	beq.n	80008ea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b12      	cmp	r3, #18
 80008e8:	d130      	bne.n	800094c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	2203      	movs	r2, #3
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	4013      	ands	r3, r2
 8000900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	68da      	ldr	r2, [r3, #12]
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	4313      	orrs	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000920:	2201      	movs	r2, #1
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	4013      	ands	r3, r2
 800092e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	091b      	lsrs	r3, r3, #4
 8000936:	f003 0201 	and.w	r2, r3, #1
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	69ba      	ldr	r2, [r7, #24]
 8000942:	4313      	orrs	r3, r2
 8000944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2203      	movs	r2, #3
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	4013      	ands	r3, r2
 8000962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	689a      	ldr	r2, [r3, #8]
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	4313      	orrs	r3, r2
 8000974:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d003      	beq.n	800098c <HAL_GPIO_Init+0x100>
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	2b12      	cmp	r3, #18
 800098a:	d123      	bne.n	80009d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	08da      	lsrs	r2, r3, #3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3208      	adds	r2, #8
 8000994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	f003 0307 	and.w	r3, r3, #7
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	220f      	movs	r2, #15
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	4013      	ands	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	691a      	ldr	r2, [r3, #16]
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	08da      	lsrs	r2, r3, #3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3208      	adds	r2, #8
 80009ce:	69b9      	ldr	r1, [r7, #24]
 80009d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	2203      	movs	r2, #3
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	4013      	ands	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 0203 	and.w	r2, r3, #3
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f000 80be 	beq.w	8000b92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b65      	ldr	r3, [pc, #404]	; (8000bac <HAL_GPIO_Init+0x320>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a64      	ldr	r2, [pc, #400]	; (8000bac <HAL_GPIO_Init+0x320>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
 8000a22:	4b62      	ldr	r3, [pc, #392]	; (8000bac <HAL_GPIO_Init+0x320>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000a2e:	4a60      	ldr	r2, [pc, #384]	; (8000bb0 <HAL_GPIO_Init+0x324>)
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	3302      	adds	r3, #2
 8000a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	f003 0303 	and.w	r3, r3, #3
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	220f      	movs	r2, #15
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a57      	ldr	r2, [pc, #348]	; (8000bb4 <HAL_GPIO_Init+0x328>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d037      	beq.n	8000aca <HAL_GPIO_Init+0x23e>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a56      	ldr	r2, [pc, #344]	; (8000bb8 <HAL_GPIO_Init+0x32c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d031      	beq.n	8000ac6 <HAL_GPIO_Init+0x23a>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a55      	ldr	r2, [pc, #340]	; (8000bbc <HAL_GPIO_Init+0x330>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d02b      	beq.n	8000ac2 <HAL_GPIO_Init+0x236>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a54      	ldr	r2, [pc, #336]	; (8000bc0 <HAL_GPIO_Init+0x334>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d025      	beq.n	8000abe <HAL_GPIO_Init+0x232>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a53      	ldr	r2, [pc, #332]	; (8000bc4 <HAL_GPIO_Init+0x338>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d01f      	beq.n	8000aba <HAL_GPIO_Init+0x22e>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a52      	ldr	r2, [pc, #328]	; (8000bc8 <HAL_GPIO_Init+0x33c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d019      	beq.n	8000ab6 <HAL_GPIO_Init+0x22a>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a51      	ldr	r2, [pc, #324]	; (8000bcc <HAL_GPIO_Init+0x340>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d013      	beq.n	8000ab2 <HAL_GPIO_Init+0x226>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a50      	ldr	r2, [pc, #320]	; (8000bd0 <HAL_GPIO_Init+0x344>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d00d      	beq.n	8000aae <HAL_GPIO_Init+0x222>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4f      	ldr	r2, [pc, #316]	; (8000bd4 <HAL_GPIO_Init+0x348>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d007      	beq.n	8000aaa <HAL_GPIO_Init+0x21e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4e      	ldr	r2, [pc, #312]	; (8000bd8 <HAL_GPIO_Init+0x34c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <HAL_GPIO_Init+0x21a>
 8000aa2:	2309      	movs	r3, #9
 8000aa4:	e012      	b.n	8000acc <HAL_GPIO_Init+0x240>
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	e010      	b.n	8000acc <HAL_GPIO_Init+0x240>
 8000aaa:	2308      	movs	r3, #8
 8000aac:	e00e      	b.n	8000acc <HAL_GPIO_Init+0x240>
 8000aae:	2307      	movs	r3, #7
 8000ab0:	e00c      	b.n	8000acc <HAL_GPIO_Init+0x240>
 8000ab2:	2306      	movs	r3, #6
 8000ab4:	e00a      	b.n	8000acc <HAL_GPIO_Init+0x240>
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	e008      	b.n	8000acc <HAL_GPIO_Init+0x240>
 8000aba:	2304      	movs	r3, #4
 8000abc:	e006      	b.n	8000acc <HAL_GPIO_Init+0x240>
 8000abe:	2303      	movs	r3, #3
 8000ac0:	e004      	b.n	8000acc <HAL_GPIO_Init+0x240>
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	e002      	b.n	8000acc <HAL_GPIO_Init+0x240>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <HAL_GPIO_Init+0x240>
 8000aca:	2300      	movs	r3, #0
 8000acc:	69fa      	ldr	r2, [r7, #28]
 8000ace:	f002 0203 	and.w	r2, r2, #3
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4093      	lsls	r3, r2
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000adc:	4934      	ldr	r1, [pc, #208]	; (8000bb0 <HAL_GPIO_Init+0x324>)
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aea:	4b3c      	ldr	r3, [pc, #240]	; (8000bdc <HAL_GPIO_Init+0x350>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4013      	ands	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d003      	beq.n	8000b0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b0e:	4a33      	ldr	r2, [pc, #204]	; (8000bdc <HAL_GPIO_Init+0x350>)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b14:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <HAL_GPIO_Init+0x350>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	4013      	ands	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b38:	4a28      	ldr	r2, [pc, #160]	; (8000bdc <HAL_GPIO_Init+0x350>)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b3e:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <HAL_GPIO_Init+0x350>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	43db      	mvns	r3, r3
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b62:	4a1e      	ldr	r2, [pc, #120]	; (8000bdc <HAL_GPIO_Init+0x350>)
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_GPIO_Init+0x350>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	4013      	ands	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <HAL_GPIO_Init+0x350>)
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3301      	adds	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	2b0f      	cmp	r3, #15
 8000b9c:	f67f ae86 	bls.w	80008ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	3724      	adds	r7, #36	; 0x24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40013800 	.word	0x40013800
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40020800 	.word	0x40020800
 8000bc0:	40020c00 	.word	0x40020c00
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40021400 	.word	0x40021400
 8000bcc:	40021800 	.word	0x40021800
 8000bd0:	40021c00 	.word	0x40021c00
 8000bd4:	40022000 	.word	0x40022000
 8000bd8:	40022400 	.word	0x40022400
 8000bdc:	40013c00 	.word	0x40013c00

08000be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	807b      	strh	r3, [r7, #2]
 8000bec:	4613      	mov	r3, r2
 8000bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bf0:	787b      	ldrb	r3, [r7, #1]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bf6:	887a      	ldrh	r2, [r7, #2]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000bfc:	e003      	b.n	8000c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	041a      	lsls	r2, r3, #16
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	619a      	str	r2, [r3, #24]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c20:	695a      	ldr	r2, [r3, #20]
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	4013      	ands	r3, r2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d006      	beq.n	8000c38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 fccc 	bl	80035d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40013c00 	.word	0x40013c00

08000c44 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40007000 	.word	0x40007000

08000c64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <HAL_PWREx_EnableOverDrive+0x98>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <HAL_PWREx_EnableOverDrive+0x98>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <HAL_PWREx_EnableOverDrive+0x98>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c92:	f7ff fc8b 	bl	80005ac <HAL_GetTick>
 8000c96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c98:	e009      	b.n	8000cae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c9a:	f7ff fc87 	bl	80005ac <HAL_GetTick>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ca8:	d901      	bls.n	8000cae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e022      	b.n	8000cf4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cba:	d1ee      	bne.n	8000c9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cc8:	f7ff fc70 	bl	80005ac <HAL_GetTick>
 8000ccc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000cce:	e009      	b.n	8000ce4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000cd0:	f7ff fc6c 	bl	80005ac <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cde:	d901      	bls.n	8000ce4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e007      	b.n	8000cf4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000cf0:	d1ee      	bne.n	8000cd0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40007000 	.word	0x40007000

08000d04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e291      	b.n	800123e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 8087 	beq.w	8000e36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d28:	4b96      	ldr	r3, [pc, #600]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	d00c      	beq.n	8000d4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d34:	4b93      	ldr	r3, [pc, #588]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f003 030c 	and.w	r3, r3, #12
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d112      	bne.n	8000d66 <HAL_RCC_OscConfig+0x62>
 8000d40:	4b90      	ldr	r3, [pc, #576]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d4c:	d10b      	bne.n	8000d66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d4e:	4b8d      	ldr	r3, [pc, #564]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d06c      	beq.n	8000e34 <HAL_RCC_OscConfig+0x130>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d168      	bne.n	8000e34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e26b      	b.n	800123e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d6e:	d106      	bne.n	8000d7e <HAL_RCC_OscConfig+0x7a>
 8000d70:	4b84      	ldr	r3, [pc, #528]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a83      	ldr	r2, [pc, #524]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	e02e      	b.n	8000ddc <HAL_RCC_OscConfig+0xd8>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10c      	bne.n	8000da0 <HAL_RCC_OscConfig+0x9c>
 8000d86:	4b7f      	ldr	r3, [pc, #508]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a7e      	ldr	r2, [pc, #504]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	4b7c      	ldr	r3, [pc, #496]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a7b      	ldr	r2, [pc, #492]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e01d      	b.n	8000ddc <HAL_RCC_OscConfig+0xd8>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000da8:	d10c      	bne.n	8000dc4 <HAL_RCC_OscConfig+0xc0>
 8000daa:	4b76      	ldr	r3, [pc, #472]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a75      	ldr	r2, [pc, #468]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	4b73      	ldr	r3, [pc, #460]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a72      	ldr	r2, [pc, #456]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	e00b      	b.n	8000ddc <HAL_RCC_OscConfig+0xd8>
 8000dc4:	4b6f      	ldr	r3, [pc, #444]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a6e      	ldr	r2, [pc, #440]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	4b6c      	ldr	r3, [pc, #432]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a6b      	ldr	r2, [pc, #428]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d013      	beq.n	8000e0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000de4:	f7ff fbe2 	bl	80005ac <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dec:	f7ff fbde 	bl	80005ac <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b64      	cmp	r3, #100	; 0x64
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e21f      	b.n	800123e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfe:	4b61      	ldr	r3, [pc, #388]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0f0      	beq.n	8000dec <HAL_RCC_OscConfig+0xe8>
 8000e0a:	e014      	b.n	8000e36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fbce 	bl	80005ac <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e14:	f7ff fbca 	bl	80005ac <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b64      	cmp	r3, #100	; 0x64
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e20b      	b.n	800123e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e26:	4b57      	ldr	r3, [pc, #348]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f0      	bne.n	8000e14 <HAL_RCC_OscConfig+0x110>
 8000e32:	e000      	b.n	8000e36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d069      	beq.n	8000f16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e42:	4b50      	ldr	r3, [pc, #320]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00b      	beq.n	8000e66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e4e:	4b4d      	ldr	r3, [pc, #308]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d11c      	bne.n	8000e94 <HAL_RCC_OscConfig+0x190>
 8000e5a:	4b4a      	ldr	r3, [pc, #296]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d116      	bne.n	8000e94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e66:	4b47      	ldr	r3, [pc, #284]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d005      	beq.n	8000e7e <HAL_RCC_OscConfig+0x17a>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d001      	beq.n	8000e7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e1df      	b.n	800123e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7e:	4b41      	ldr	r3, [pc, #260]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	493d      	ldr	r1, [pc, #244]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e92:	e040      	b.n	8000f16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d023      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e9c:	4b39      	ldr	r3, [pc, #228]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a38      	ldr	r2, [pc, #224]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fb80 	bl	80005ac <HAL_GetTick>
 8000eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb0:	f7ff fb7c 	bl	80005ac <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e1bd      	b.n	800123e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec2:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f0      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4929      	ldr	r1, [pc, #164]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]
 8000ee2:	e018      	b.n	8000f16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ee4:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000eea:	f023 0301 	bic.w	r3, r3, #1
 8000eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fb5c 	bl	80005ac <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fb58 	bl	80005ac <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e199      	b.n	800123e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f0      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d038      	beq.n	8000f94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d019      	beq.n	8000f5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f2e:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f36:	f7ff fb39 	bl	80005ac <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fb35 	bl	80005ac <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e176      	b.n	800123e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f0      	beq.n	8000f3e <HAL_RCC_OscConfig+0x23a>
 8000f5c:	e01a      	b.n	8000f94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000f64:	f023 0301 	bic.w	r3, r3, #1
 8000f68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fb1f 	bl	80005ac <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f70:	e00a      	b.n	8000f88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f72:	f7ff fb1b 	bl	80005ac <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d903      	bls.n	8000f88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e15c      	b.n	800123e <HAL_RCC_OscConfig+0x53a>
 8000f84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f88:	4b91      	ldr	r3, [pc, #580]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8000f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1ee      	bne.n	8000f72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80a4 	beq.w	80010ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fa2:	4b8b      	ldr	r3, [pc, #556]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10d      	bne.n	8000fca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b88      	ldr	r3, [pc, #544]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a87      	ldr	r2, [pc, #540]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b85      	ldr	r3, [pc, #532]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fca:	4b82      	ldr	r3, [pc, #520]	; (80011d4 <HAL_RCC_OscConfig+0x4d0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d118      	bne.n	8001008 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000fd6:	4b7f      	ldr	r3, [pc, #508]	; (80011d4 <HAL_RCC_OscConfig+0x4d0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a7e      	ldr	r2, [pc, #504]	; (80011d4 <HAL_RCC_OscConfig+0x4d0>)
 8000fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fe2:	f7ff fae3 	bl	80005ac <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fea:	f7ff fadf 	bl	80005ac <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b64      	cmp	r3, #100	; 0x64
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e120      	b.n	800123e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ffc:	4b75      	ldr	r3, [pc, #468]	; (80011d4 <HAL_RCC_OscConfig+0x4d0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f0      	beq.n	8000fea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d106      	bne.n	800101e <HAL_RCC_OscConfig+0x31a>
 8001010:	4b6f      	ldr	r3, [pc, #444]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8001012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001014:	4a6e      	ldr	r2, [pc, #440]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6713      	str	r3, [r2, #112]	; 0x70
 800101c:	e02d      	b.n	800107a <HAL_RCC_OscConfig+0x376>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10c      	bne.n	8001040 <HAL_RCC_OscConfig+0x33c>
 8001026:	4b6a      	ldr	r3, [pc, #424]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8001028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800102a:	4a69      	ldr	r2, [pc, #420]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 800102c:	f023 0301 	bic.w	r3, r3, #1
 8001030:	6713      	str	r3, [r2, #112]	; 0x70
 8001032:	4b67      	ldr	r3, [pc, #412]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8001034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001036:	4a66      	ldr	r2, [pc, #408]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8001038:	f023 0304 	bic.w	r3, r3, #4
 800103c:	6713      	str	r3, [r2, #112]	; 0x70
 800103e:	e01c      	b.n	800107a <HAL_RCC_OscConfig+0x376>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	2b05      	cmp	r3, #5
 8001046:	d10c      	bne.n	8001062 <HAL_RCC_OscConfig+0x35e>
 8001048:	4b61      	ldr	r3, [pc, #388]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 800104a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800104c:	4a60      	ldr	r2, [pc, #384]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 800104e:	f043 0304 	orr.w	r3, r3, #4
 8001052:	6713      	str	r3, [r2, #112]	; 0x70
 8001054:	4b5e      	ldr	r3, [pc, #376]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8001056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001058:	4a5d      	ldr	r2, [pc, #372]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6713      	str	r3, [r2, #112]	; 0x70
 8001060:	e00b      	b.n	800107a <HAL_RCC_OscConfig+0x376>
 8001062:	4b5b      	ldr	r3, [pc, #364]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8001064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001066:	4a5a      	ldr	r2, [pc, #360]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8001068:	f023 0301 	bic.w	r3, r3, #1
 800106c:	6713      	str	r3, [r2, #112]	; 0x70
 800106e:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8001070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001072:	4a57      	ldr	r2, [pc, #348]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8001074:	f023 0304 	bic.w	r3, r3, #4
 8001078:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d015      	beq.n	80010ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001082:	f7ff fa93 	bl	80005ac <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001088:	e00a      	b.n	80010a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800108a:	f7ff fa8f 	bl	80005ac <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	f241 3288 	movw	r2, #5000	; 0x1388
 8001098:	4293      	cmp	r3, r2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e0ce      	b.n	800123e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a0:	4b4b      	ldr	r3, [pc, #300]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 80010a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0ee      	beq.n	800108a <HAL_RCC_OscConfig+0x386>
 80010ac:	e014      	b.n	80010d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ae:	f7ff fa7d 	bl	80005ac <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b4:	e00a      	b.n	80010cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010b6:	f7ff fa79 	bl	80005ac <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e0b8      	b.n	800123e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010cc:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 80010ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1ee      	bne.n	80010b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d105      	bne.n	80010ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010de:	4b3c      	ldr	r3, [pc, #240]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a3b      	ldr	r2, [pc, #236]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 80010e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 80a4 	beq.w	800123c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010f4:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f003 030c 	and.w	r3, r3, #12
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d06b      	beq.n	80011d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d149      	bne.n	800119c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a30      	ldr	r2, [pc, #192]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 800110e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001114:	f7ff fa4a 	bl	80005ac <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800111c:	f7ff fa46 	bl	80005ac <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e087      	b.n	800123e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69da      	ldr	r2, [r3, #28]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	019b      	lsls	r3, r3, #6
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001150:	085b      	lsrs	r3, r3, #1
 8001152:	3b01      	subs	r3, #1
 8001154:	041b      	lsls	r3, r3, #16
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	061b      	lsls	r3, r3, #24
 800115e:	4313      	orrs	r3, r2
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8001162:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001166:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 800116e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001174:	f7ff fa1a 	bl	80005ac <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117c:	f7ff fa16 	bl	80005ac <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e057      	b.n	800123e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x478>
 800119a:	e04f      	b.n	800123c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 80011a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fa00 	bl	80005ac <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b0:	f7ff f9fc 	bl	80005ac <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e03d      	b.n	800123e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011c2:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_RCC_OscConfig+0x4cc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x4ac>
 80011ce:	e035      	b.n	800123c <HAL_RCC_OscConfig+0x538>
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_RCC_OscConfig+0x544>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d028      	beq.n	8001238 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d121      	bne.n	8001238 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011fe:	429a      	cmp	r2, r3
 8001200:	d11a      	bne.n	8001238 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001208:	4013      	ands	r3, r2
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800120e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001210:	4293      	cmp	r3, r2
 8001212:	d111      	bne.n	8001238 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	085b      	lsrs	r3, r3, #1
 8001220:	3b01      	subs	r3, #1
 8001222:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001224:	429a      	cmp	r2, r3
 8001226:	d107      	bne.n	8001238 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001234:	429a      	cmp	r2, r3
 8001236:	d001      	beq.n	800123c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e0d0      	b.n	8001406 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001264:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 030f 	and.w	r3, r3, #15
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d910      	bls.n	8001294 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	4b67      	ldr	r3, [pc, #412]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 020f 	bic.w	r2, r3, #15
 800127a:	4965      	ldr	r1, [pc, #404]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001282:	4b63      	ldr	r3, [pc, #396]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d001      	beq.n	8001294 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0b8      	b.n	8001406 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d020      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012ac:	4b59      	ldr	r3, [pc, #356]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4a58      	ldr	r2, [pc, #352]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80012b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c4:	4b53      	ldr	r3, [pc, #332]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4a52      	ldr	r2, [pc, #328]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80012ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d0:	4b50      	ldr	r3, [pc, #320]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	494d      	ldr	r1, [pc, #308]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d040      	beq.n	8001370 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d107      	bne.n	8001306 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	4b47      	ldr	r3, [pc, #284]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d115      	bne.n	800132e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e07f      	b.n	8001406 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d107      	bne.n	800131e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130e:	4b41      	ldr	r3, [pc, #260]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d109      	bne.n	800132e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e073      	b.n	8001406 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131e:	4b3d      	ldr	r3, [pc, #244]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e06b      	b.n	8001406 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132e:	4b39      	ldr	r3, [pc, #228]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f023 0203 	bic.w	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4936      	ldr	r1, [pc, #216]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 800133c:	4313      	orrs	r3, r2
 800133e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001340:	f7ff f934 	bl	80005ac <HAL_GetTick>
 8001344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001346:	e00a      	b.n	800135e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001348:	f7ff f930 	bl	80005ac <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	f241 3288 	movw	r2, #5000	; 0x1388
 8001356:	4293      	cmp	r3, r2
 8001358:	d901      	bls.n	800135e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e053      	b.n	8001406 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135e:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 020c 	and.w	r2, r3, #12
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	429a      	cmp	r2, r3
 800136e:	d1eb      	bne.n	8001348 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d210      	bcs.n	80013a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 020f 	bic.w	r2, r3, #15
 8001386:	4922      	ldr	r1, [pc, #136]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e032      	b.n	8001406 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	4916      	ldr	r1, [pc, #88]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d009      	beq.n	80013de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	490e      	ldr	r1, [pc, #56]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013de:	f000 f821 	bl	8001424 <HAL_RCC_GetSysClockFreq>
 80013e2:	4601      	mov	r1, r0
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_RCC_ClockConfig+0x1cc>)
 80013f0:	5cd3      	ldrb	r3, [r2, r3]
 80013f2:	fa21 f303 	lsr.w	r3, r1, r3
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <HAL_RCC_ClockConfig+0x1d0>)
 80013f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_RCC_ClockConfig+0x1d4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f890 	bl	8000524 <HAL_InitTick>

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023c00 	.word	0x40023c00
 8001414:	40023800 	.word	0x40023800
 8001418:	080041b8 	.word	0x080041b8
 800141c:	20000040 	.word	0x20000040
 8001420:	20000000 	.word	0x20000000

08001424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800143a:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b04      	cmp	r3, #4
 8001444:	d007      	beq.n	8001456 <HAL_RCC_GetSysClockFreq+0x32>
 8001446:	2b08      	cmp	r3, #8
 8001448:	d008      	beq.n	800145c <HAL_RCC_GetSysClockFreq+0x38>
 800144a:	2b00      	cmp	r3, #0
 800144c:	f040 80b4 	bne.w	80015b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001450:	4b5e      	ldr	r3, [pc, #376]	; (80015cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001452:	60bb      	str	r3, [r7, #8]
      break;
 8001454:	e0b3      	b.n	80015be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001456:	4b5e      	ldr	r3, [pc, #376]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001458:	60bb      	str	r3, [r7, #8]
      break;
 800145a:	e0b0      	b.n	80015be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800145c:	4b5a      	ldr	r3, [pc, #360]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001464:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001466:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d04a      	beq.n	8001508 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001472:	4b55      	ldr	r3, [pc, #340]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	099b      	lsrs	r3, r3, #6
 8001478:	f04f 0400 	mov.w	r4, #0
 800147c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	ea03 0501 	and.w	r5, r3, r1
 8001488:	ea04 0602 	and.w	r6, r4, r2
 800148c:	4629      	mov	r1, r5
 800148e:	4632      	mov	r2, r6
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	f04f 0400 	mov.w	r4, #0
 8001498:	0154      	lsls	r4, r2, #5
 800149a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800149e:	014b      	lsls	r3, r1, #5
 80014a0:	4619      	mov	r1, r3
 80014a2:	4622      	mov	r2, r4
 80014a4:	1b49      	subs	r1, r1, r5
 80014a6:	eb62 0206 	sbc.w	r2, r2, r6
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	f04f 0400 	mov.w	r4, #0
 80014b2:	0194      	lsls	r4, r2, #6
 80014b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80014b8:	018b      	lsls	r3, r1, #6
 80014ba:	1a5b      	subs	r3, r3, r1
 80014bc:	eb64 0402 	sbc.w	r4, r4, r2
 80014c0:	f04f 0100 	mov.w	r1, #0
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	00e2      	lsls	r2, r4, #3
 80014ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014ce:	00d9      	lsls	r1, r3, #3
 80014d0:	460b      	mov	r3, r1
 80014d2:	4614      	mov	r4, r2
 80014d4:	195b      	adds	r3, r3, r5
 80014d6:	eb44 0406 	adc.w	r4, r4, r6
 80014da:	f04f 0100 	mov.w	r1, #0
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	0262      	lsls	r2, r4, #9
 80014e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80014e8:	0259      	lsls	r1, r3, #9
 80014ea:	460b      	mov	r3, r1
 80014ec:	4614      	mov	r4, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	4621      	mov	r1, r4
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f04f 0400 	mov.w	r4, #0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4623      	mov	r3, r4
 80014fc:	f7fe fe84 	bl	8000208 <__aeabi_uldivmod>
 8001500:	4603      	mov	r3, r0
 8001502:	460c      	mov	r4, r1
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e049      	b.n	800159c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001508:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	099b      	lsrs	r3, r3, #6
 800150e:	f04f 0400 	mov.w	r4, #0
 8001512:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	ea03 0501 	and.w	r5, r3, r1
 800151e:	ea04 0602 	and.w	r6, r4, r2
 8001522:	4629      	mov	r1, r5
 8001524:	4632      	mov	r2, r6
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	f04f 0400 	mov.w	r4, #0
 800152e:	0154      	lsls	r4, r2, #5
 8001530:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001534:	014b      	lsls	r3, r1, #5
 8001536:	4619      	mov	r1, r3
 8001538:	4622      	mov	r2, r4
 800153a:	1b49      	subs	r1, r1, r5
 800153c:	eb62 0206 	sbc.w	r2, r2, r6
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	f04f 0400 	mov.w	r4, #0
 8001548:	0194      	lsls	r4, r2, #6
 800154a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800154e:	018b      	lsls	r3, r1, #6
 8001550:	1a5b      	subs	r3, r3, r1
 8001552:	eb64 0402 	sbc.w	r4, r4, r2
 8001556:	f04f 0100 	mov.w	r1, #0
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	00e2      	lsls	r2, r4, #3
 8001560:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001564:	00d9      	lsls	r1, r3, #3
 8001566:	460b      	mov	r3, r1
 8001568:	4614      	mov	r4, r2
 800156a:	195b      	adds	r3, r3, r5
 800156c:	eb44 0406 	adc.w	r4, r4, r6
 8001570:	f04f 0100 	mov.w	r1, #0
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	02a2      	lsls	r2, r4, #10
 800157a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800157e:	0299      	lsls	r1, r3, #10
 8001580:	460b      	mov	r3, r1
 8001582:	4614      	mov	r4, r2
 8001584:	4618      	mov	r0, r3
 8001586:	4621      	mov	r1, r4
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f04f 0400 	mov.w	r4, #0
 800158e:	461a      	mov	r2, r3
 8001590:	4623      	mov	r3, r4
 8001592:	f7fe fe39 	bl	8000208 <__aeabi_uldivmod>
 8001596:	4603      	mov	r3, r0
 8001598:	460c      	mov	r4, r1
 800159a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	0c1b      	lsrs	r3, r3, #16
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	3301      	adds	r3, #1
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b4:	60bb      	str	r3, [r7, #8]
      break;
 80015b6:	e002      	b.n	80015be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80015ba:	60bb      	str	r3, [r7, #8]
      break;
 80015bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015be:	68bb      	ldr	r3, [r7, #8]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c8:	40023800 	.word	0x40023800
 80015cc:	00f42400 	.word	0x00f42400
 80015d0:	007a1200 	.word	0x007a1200

080015d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000040 	.word	0x20000040

080015ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015f0:	f7ff fff0 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 80015f4:	4601      	mov	r1, r0
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_RCC_GetPCLK1Freq+0x20>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	0a9b      	lsrs	r3, r3, #10
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	4a03      	ldr	r2, [pc, #12]	; (8001610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001602:	5cd3      	ldrb	r3, [r2, r3]
 8001604:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	080041c8 	.word	0x080041c8

08001614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001618:	f7ff ffdc 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 800161c:	4601      	mov	r1, r0
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	0b5b      	lsrs	r3, r3, #13
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	4a03      	ldr	r2, [pc, #12]	; (8001638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800162a:	5cd3      	ldrb	r3, [r2, r3]
 800162c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	080041c8 	.word	0x080041c8

0800163c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d012      	beq.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001664:	4b69      	ldr	r3, [pc, #420]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	4a68      	ldr	r2, [pc, #416]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800166a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800166e:	6093      	str	r3, [r2, #8]
 8001670:	4b66      	ldr	r3, [pc, #408]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001678:	4964      	ldr	r1, [pc, #400]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001686:	2301      	movs	r3, #1
 8001688:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d017      	beq.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001696:	4b5d      	ldr	r3, [pc, #372]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800169c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a4:	4959      	ldr	r1, [pc, #356]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016b4:	d101      	bne.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d017      	beq.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80016d2:	4b4e      	ldr	r3, [pc, #312]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	494a      	ldr	r1, [pc, #296]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016f0:	d101      	bne.n	80016f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80016f2:	2301      	movs	r3, #1
 80016f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800170e:	2301      	movs	r3, #1
 8001710:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0320 	and.w	r3, r3, #32
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 808b 	beq.w	8001836 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001720:	4b3a      	ldr	r3, [pc, #232]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	4a39      	ldr	r2, [pc, #228]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172a:	6413      	str	r3, [r2, #64]	; 0x40
 800172c:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001738:	4b35      	ldr	r3, [pc, #212]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a34      	ldr	r2, [pc, #208]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800173e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001744:	f7fe ff32 	bl	80005ac <HAL_GetTick>
 8001748:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174c:	f7fe ff2e 	bl	80005ac <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	; 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e355      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800175e:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800176a:	4b28      	ldr	r3, [pc, #160]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001772:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d035      	beq.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d02e      	beq.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001790:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001792:	4b1e      	ldr	r3, [pc, #120]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001796:	4a1d      	ldr	r2, [pc, #116]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a2:	4a1a      	ldr	r2, [pc, #104]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80017aa:	4a18      	ldr	r2, [pc, #96]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80017b0:	4b16      	ldr	r3, [pc, #88]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d114      	bne.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7fe fef6 	bl	80005ac <HAL_GetTick>
 80017c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c2:	e00a      	b.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c4:	f7fe fef2 	bl	80005ac <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e317      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0ee      	beq.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017f2:	d111      	bne.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001802:	400b      	ands	r3, r1
 8001804:	4901      	ldr	r1, [pc, #4]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
 800180a:	e00b      	b.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000
 8001814:	0ffffcff 	.word	0x0ffffcff
 8001818:	4bb0      	ldr	r3, [pc, #704]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4aaf      	ldr	r2, [pc, #700]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800181e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001822:	6093      	str	r3, [r2, #8]
 8001824:	4bad      	ldr	r3, [pc, #692]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001826:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001830:	49aa      	ldr	r1, [pc, #680]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001832:	4313      	orrs	r3, r2
 8001834:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	2b00      	cmp	r3, #0
 8001840:	d010      	beq.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001842:	4ba6      	ldr	r3, [pc, #664]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001848:	4aa4      	ldr	r2, [pc, #656]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800184a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800184e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001852:	4ba2      	ldr	r3, [pc, #648]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001854:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185c:	499f      	ldr	r1, [pc, #636]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800185e:	4313      	orrs	r3, r2
 8001860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00a      	beq.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001870:	4b9a      	ldr	r3, [pc, #616]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001876:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800187e:	4997      	ldr	r1, [pc, #604]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001880:	4313      	orrs	r3, r2
 8001882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00a      	beq.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001892:	4b92      	ldr	r3, [pc, #584]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001898:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018a0:	498e      	ldr	r1, [pc, #568]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00a      	beq.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80018b4:	4b89      	ldr	r3, [pc, #548]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018c2:	4986      	ldr	r1, [pc, #536]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80018d6:	4b81      	ldr	r3, [pc, #516]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	497d      	ldr	r1, [pc, #500]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00a      	beq.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80018f8:	4b78      	ldr	r3, [pc, #480]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fe:	f023 0203 	bic.w	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4975      	ldr	r1, [pc, #468]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001908:	4313      	orrs	r3, r2
 800190a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00a      	beq.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800191a:	4b70      	ldr	r3, [pc, #448]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800191c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001920:	f023 020c 	bic.w	r2, r3, #12
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001928:	496c      	ldr	r1, [pc, #432]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800192a:	4313      	orrs	r3, r2
 800192c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00a      	beq.n	8001952 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800193c:	4b67      	ldr	r3, [pc, #412]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800193e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001942:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4964      	ldr	r1, [pc, #400]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800194c:	4313      	orrs	r3, r2
 800194e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00a      	beq.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800195e:	4b5f      	ldr	r3, [pc, #380]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001964:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196c:	495b      	ldr	r1, [pc, #364]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800196e:	4313      	orrs	r3, r2
 8001970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00a      	beq.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001980:	4b56      	ldr	r3, [pc, #344]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001986:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198e:	4953      	ldr	r1, [pc, #332]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001990:	4313      	orrs	r3, r2
 8001992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00a      	beq.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80019a2:	4b4e      	ldr	r3, [pc, #312]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b0:	494a      	ldr	r1, [pc, #296]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00a      	beq.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80019c4:	4b45      	ldr	r3, [pc, #276]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d2:	4942      	ldr	r1, [pc, #264]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00a      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80019e6:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f4:	4939      	ldr	r1, [pc, #228]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00a      	beq.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a08:	4b34      	ldr	r3, [pc, #208]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a16:	4931      	ldr	r1, [pc, #196]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d011      	beq.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a38:	4928      	ldr	r1, [pc, #160]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a48:	d101      	bne.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00a      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a78:	4918      	ldr	r1, [pc, #96]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00b      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a9c:	490f      	ldr	r1, [pc, #60]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d005      	beq.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ab2:	f040 80d8 	bne.w	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a08      	ldr	r2, [pc, #32]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001abc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac2:	f7fe fd73 	bl	80005ac <HAL_GetTick>
 8001ac6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001aca:	f7fe fd6f 	bl	80005ac <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b64      	cmp	r3, #100	; 0x64
 8001ad6:	d903      	bls.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e196      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001adc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ae0:	4b6c      	ldr	r3, [pc, #432]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1ee      	bne.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d021      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d11d      	bne.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001b00:	4b64      	ldr	r3, [pc, #400]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b06:	0c1b      	lsrs	r3, r3, #16
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b0e:	4b61      	ldr	r3, [pc, #388]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b14:	0e1b      	lsrs	r3, r3, #24
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	019a      	lsls	r2, r3, #6
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	041b      	lsls	r3, r3, #16
 8001b26:	431a      	orrs	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	061b      	lsls	r3, r3, #24
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	071b      	lsls	r3, r3, #28
 8001b34:	4957      	ldr	r1, [pc, #348]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d004      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b50:	d00a      	beq.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d02e      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b66:	d129      	bne.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001b68:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b7c:	0f1b      	lsrs	r3, r3, #28
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	019a      	lsls	r2, r3, #6
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	431a      	orrs	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	071b      	lsls	r3, r3, #28
 8001b9c:	493d      	ldr	r1, [pc, #244]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001ba4:	4b3b      	ldr	r3, [pc, #236]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001baa:	f023 021f 	bic.w	r2, r3, #31
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	4937      	ldr	r1, [pc, #220]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d01d      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001bc8:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bce:	0e1b      	lsrs	r3, r3, #24
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001bd6:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bdc:	0f1b      	lsrs	r3, r3, #28
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	019a      	lsls	r2, r3, #6
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	061b      	lsls	r3, r3, #24
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	071b      	lsls	r3, r3, #28
 8001bfc:	4925      	ldr	r1, [pc, #148]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d011      	beq.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	019a      	lsls	r2, r3, #6
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	041b      	lsls	r3, r3, #16
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	061b      	lsls	r3, r3, #24
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	071b      	lsls	r3, r3, #28
 8001c2c:	4919      	ldr	r1, [pc, #100]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001c3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c40:	f7fe fcb4 	bl	80005ac <HAL_GetTick>
 8001c44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c48:	f7fe fcb0 	bl	80005ac <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e0d7      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	f040 80cd 	bne.w	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c7a:	f7fe fc97 	bl	80005ac <HAL_GetTick>
 8001c7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001c82:	f7fe fc93 	bl	80005ac <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b64      	cmp	r3, #100	; 0x64
 8001c8e:	d903      	bls.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0ba      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001c94:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c98:	4b5e      	ldr	r3, [pc, #376]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ca4:	d0ed      	beq.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d009      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d02e      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d12a      	bne.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001cce:	4b51      	ldr	r3, [pc, #324]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd4:	0c1b      	lsrs	r3, r3, #16
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001cdc:	4b4d      	ldr	r3, [pc, #308]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce2:	0f1b      	lsrs	r3, r3, #28
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	019a      	lsls	r2, r3, #6
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	041b      	lsls	r3, r3, #16
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	061b      	lsls	r3, r3, #24
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	071b      	lsls	r3, r3, #28
 8001d02:	4944      	ldr	r1, [pc, #272]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001d0a:	4b42      	ldr	r3, [pc, #264]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	493d      	ldr	r1, [pc, #244]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d022      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d38:	d11d      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d3a:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d40:	0e1b      	lsrs	r3, r3, #24
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4e:	0f1b      	lsrs	r3, r3, #28
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	019a      	lsls	r2, r3, #6
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	431a      	orrs	r2, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	061b      	lsls	r3, r3, #24
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	071b      	lsls	r3, r3, #28
 8001d6e:	4929      	ldr	r1, [pc, #164]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d028      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d88:	0e1b      	lsrs	r3, r3, #24
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001d90:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d96:	0c1b      	lsrs	r3, r3, #16
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	019a      	lsls	r2, r3, #6
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	041b      	lsls	r3, r3, #16
 8001da8:	431a      	orrs	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	061b      	lsls	r3, r3, #24
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	071b      	lsls	r3, r3, #28
 8001db6:	4917      	ldr	r1, [pc, #92]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	4911      	ldr	r1, [pc, #68]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de0:	f7fe fbe4 	bl	80005ac <HAL_GetTick>
 8001de4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001de8:	f7fe fbe0 	bl	80005ac <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e007      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e06:	d1ef      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3720      	adds	r7, #32
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800

08001e18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e084      	b.n	8001f34 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d106      	bne.n	8001e4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f001 fee9 	bl	8003c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e60:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e6a:	d902      	bls.n	8001e72 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e002      	b.n	8001e78 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e76:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001e80:	d007      	beq.n	8001e92 <HAL_SPI_Init+0x7a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e8a:	d002      	beq.n	8001e92 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10b      	bne.n	8001eb2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ea2:	d903      	bls.n	8001eac <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eaa:	e002      	b.n	8001eb2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	ea42 0103 	orr.w	r1, r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	0c1b      	lsrs	r3, r3, #16
 8001ef2:	f003 0204 	and.w	r2, r3, #4
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	ea42 0103 	orr.w	r1, r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	69da      	ldr	r2, [r3, #28]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_SPI_Transmit+0x22>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e150      	b.n	8002200 <HAL_SPI_Transmit+0x2c4>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f66:	f7fe fb21 	bl	80005ac <HAL_GetTick>
 8001f6a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d002      	beq.n	8001f82 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f80:	e135      	b.n	80021ee <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <HAL_SPI_Transmit+0x52>
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f92:	e12c      	b.n	80021ee <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2203      	movs	r2, #3
 8001f98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	88fa      	ldrh	r2, [r7, #6]
 8001fac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fde:	d107      	bne.n	8001ff0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffa:	2b40      	cmp	r3, #64	; 0x40
 8001ffc:	d007      	beq.n	800200e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800200c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002016:	d94b      	bls.n	80020b0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <HAL_SPI_Transmit+0xea>
 8002020:	8afb      	ldrh	r3, [r7, #22]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d13e      	bne.n	80020a4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	881a      	ldrh	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002036:	1c9a      	adds	r2, r3, #2
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002040:	b29b      	uxth	r3, r3
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800204a:	e02b      	b.n	80020a4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b02      	cmp	r3, #2
 8002058:	d112      	bne.n	8002080 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205e:	881a      	ldrh	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	1c9a      	adds	r2, r3, #2
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800207e:	e011      	b.n	80020a4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002080:	f7fe fa94 	bl	80005ac <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d803      	bhi.n	8002098 <HAL_SPI_Transmit+0x15c>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002096:	d102      	bne.n	800209e <HAL_SPI_Transmit+0x162>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020a2:	e0a4      	b.n	80021ee <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ce      	bne.n	800204c <HAL_SPI_Transmit+0x110>
 80020ae:	e07c      	b.n	80021aa <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_SPI_Transmit+0x182>
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d170      	bne.n	80021a0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d912      	bls.n	80020ee <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020cc:	881a      	ldrh	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d8:	1c9a      	adds	r2, r3, #2
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b02      	subs	r3, #2
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020ec:	e058      	b.n	80021a0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	330c      	adds	r3, #12
 80020f8:	7812      	ldrb	r2, [r2, #0]
 80020fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002114:	e044      	b.n	80021a0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b02      	cmp	r3, #2
 8002122:	d12b      	bne.n	800217c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d912      	bls.n	8002154 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002132:	881a      	ldrh	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213e:	1c9a      	adds	r2, r3, #2
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b02      	subs	r3, #2
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002152:	e025      	b.n	80021a0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	330c      	adds	r3, #12
 800215e:	7812      	ldrb	r2, [r2, #0]
 8002160:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002170:	b29b      	uxth	r3, r3
 8002172:	3b01      	subs	r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	87da      	strh	r2, [r3, #62]	; 0x3e
 800217a:	e011      	b.n	80021a0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800217c:	f7fe fa16 	bl	80005ac <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d803      	bhi.n	8002194 <HAL_SPI_Transmit+0x258>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002192:	d102      	bne.n	800219a <HAL_SPI_Transmit+0x25e>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800219e:	e026      	b.n	80021ee <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1b5      	bne.n	8002116 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fc94 	bl	8002adc <SPI_EndRxTxTransaction>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2220      	movs	r2, #32
 80021be:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10a      	bne.n	80021de <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	77fb      	strb	r3, [r7, #31]
 80021ea:	e000      	b.n	80021ee <HAL_SPI_Transmit+0x2b2>
  }

error:
 80021ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80021fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af02      	add	r7, sp, #8
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002224:	d112      	bne.n	800224c <HAL_SPI_Receive+0x44>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10e      	bne.n	800224c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2204      	movs	r2, #4
 8002232:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002236:	88fa      	ldrh	r2, [r7, #6]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f908 	bl	8002458 <HAL_SPI_TransmitReceive>
 8002248:	4603      	mov	r3, r0
 800224a:	e101      	b.n	8002450 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_SPI_Receive+0x52>
 8002256:	2302      	movs	r3, #2
 8002258:	e0fa      	b.n	8002450 <HAL_SPI_Receive+0x248>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002262:	f7fe f9a3 	bl	80005ac <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d002      	beq.n	800227a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002274:	2302      	movs	r3, #2
 8002276:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002278:	e0e1      	b.n	800243e <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <HAL_SPI_Receive+0x7e>
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
    goto error;
 800228a:	e0d8      	b.n	800243e <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2204      	movs	r2, #4
 8002290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	88fa      	ldrh	r2, [r7, #6]
 80022a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022d6:	d908      	bls.n	80022ea <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	e007      	b.n	80022fa <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022f8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002302:	d107      	bne.n	8002314 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002312:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231e:	2b40      	cmp	r3, #64	; 0x40
 8002320:	d007      	beq.n	8002332 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002330:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800233a:	d867      	bhi.n	800240c <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800233c:	e030      	b.n	80023a0 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d117      	bne.n	800237c <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f103 020c 	add.w	r2, r3, #12
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	7812      	ldrb	r2, [r2, #0]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800237a:	e011      	b.n	80023a0 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800237c:	f7fe f916 	bl	80005ac <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d803      	bhi.n	8002394 <HAL_SPI_Receive+0x18c>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002392:	d102      	bne.n	800239a <HAL_SPI_Receive+0x192>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800239e:	e04e      	b.n	800243e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1c8      	bne.n	800233e <HAL_SPI_Receive+0x136>
 80023ac:	e034      	b.n	8002418 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d115      	bne.n	80023e8 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	b292      	uxth	r2, r2
 80023c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	1c9a      	adds	r2, r3, #2
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80023e6:	e011      	b.n	800240c <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023e8:	f7fe f8e0 	bl	80005ac <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d803      	bhi.n	8002400 <HAL_SPI_Receive+0x1f8>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fe:	d102      	bne.n	8002406 <HAL_SPI_Receive+0x1fe>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	75fb      	strb	r3, [r7, #23]
          goto error;
 800240a:	e018      	b.n	800243e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ca      	bne.n	80023ae <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	6839      	ldr	r1, [r7, #0]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fb05 	bl	8002a2c <SPI_EndRxTransaction>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	75fb      	strb	r3, [r7, #23]
 800243a:	e000      	b.n	800243e <HAL_SPI_Receive+0x236>
  }

error :
 800243c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800244e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002466:	2301      	movs	r3, #1
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_SPI_TransmitReceive+0x26>
 800247a:	2302      	movs	r3, #2
 800247c:	e1fb      	b.n	8002876 <HAL_SPI_TransmitReceive+0x41e>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002486:	f7fe f891 	bl	80005ac <HAL_GetTick>
 800248a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002492:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800249a:	887b      	ldrh	r3, [r7, #2]
 800249c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800249e:	887b      	ldrh	r3, [r7, #2]
 80024a0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024a2:	7efb      	ldrb	r3, [r7, #27]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d00e      	beq.n	80024c6 <HAL_SPI_TransmitReceive+0x6e>
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ae:	d106      	bne.n	80024be <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d102      	bne.n	80024be <HAL_SPI_TransmitReceive+0x66>
 80024b8:	7efb      	ldrb	r3, [r7, #27]
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d003      	beq.n	80024c6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80024be:	2302      	movs	r3, #2
 80024c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80024c4:	e1cd      	b.n	8002862 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_SPI_TransmitReceive+0x80>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_SPI_TransmitReceive+0x80>
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d103      	bne.n	80024e0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80024de:	e1c0      	b.n	8002862 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d003      	beq.n	80024f4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2205      	movs	r2, #5
 80024f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	887a      	ldrh	r2, [r7, #2]
 800251a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002536:	d802      	bhi.n	800253e <HAL_SPI_TransmitReceive+0xe6>
 8002538:	8a3b      	ldrh	r3, [r7, #16]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d908      	bls.n	8002550 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	e007      	b.n	8002560 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800255e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256a:	2b40      	cmp	r3, #64	; 0x40
 800256c:	d007      	beq.n	800257e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800257c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002586:	d97c      	bls.n	8002682 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_SPI_TransmitReceive+0x13e>
 8002590:	8a7b      	ldrh	r3, [r7, #18]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d169      	bne.n	800266a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	881a      	ldrh	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	1c9a      	adds	r2, r3, #2
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ba:	e056      	b.n	800266a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d11b      	bne.n	8002602 <HAL_SPI_TransmitReceive+0x1aa>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d016      	beq.n	8002602 <HAL_SPI_TransmitReceive+0x1aa>
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d113      	bne.n	8002602 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	881a      	ldrh	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ea:	1c9a      	adds	r2, r3, #2
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b01      	cmp	r3, #1
 800260e:	d11c      	bne.n	800264a <HAL_SPI_TransmitReceive+0x1f2>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d016      	beq.n	800264a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	b292      	uxth	r2, r2
 8002628:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	1c9a      	adds	r2, r3, #2
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002646:	2301      	movs	r3, #1
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800264a:	f7fd ffaf 	bl	80005ac <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002656:	429a      	cmp	r2, r3
 8002658:	d807      	bhi.n	800266a <HAL_SPI_TransmitReceive+0x212>
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d003      	beq.n	800266a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002668:	e0fb      	b.n	8002862 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1a3      	bne.n	80025bc <HAL_SPI_TransmitReceive+0x164>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d19d      	bne.n	80025bc <HAL_SPI_TransmitReceive+0x164>
 8002680:	e0df      	b.n	8002842 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_SPI_TransmitReceive+0x23a>
 800268a:	8a7b      	ldrh	r3, [r7, #18]
 800268c:	2b01      	cmp	r3, #1
 800268e:	f040 80cb 	bne.w	8002828 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002696:	b29b      	uxth	r3, r3
 8002698:	2b01      	cmp	r3, #1
 800269a:	d912      	bls.n	80026c2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	881a      	ldrh	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	1c9a      	adds	r2, r3, #2
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b02      	subs	r3, #2
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026c0:	e0b2      	b.n	8002828 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	330c      	adds	r3, #12
 80026cc:	7812      	ldrb	r2, [r2, #0]
 80026ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026e8:	e09e      	b.n	8002828 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d134      	bne.n	8002762 <HAL_SPI_TransmitReceive+0x30a>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d02f      	beq.n	8002762 <HAL_SPI_TransmitReceive+0x30a>
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	2b01      	cmp	r3, #1
 8002706:	d12c      	bne.n	8002762 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800270c:	b29b      	uxth	r3, r3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d912      	bls.n	8002738 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	881a      	ldrh	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	1c9a      	adds	r2, r3, #2
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b02      	subs	r3, #2
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002736:	e012      	b.n	800275e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	330c      	adds	r3, #12
 8002742:	7812      	ldrb	r2, [r2, #0]
 8002744:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d148      	bne.n	8002802 <HAL_SPI_TransmitReceive+0x3aa>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d042      	beq.n	8002802 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d923      	bls.n	80027d0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	b292      	uxth	r2, r2
 8002794:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	1c9a      	adds	r2, r3, #2
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b02      	subs	r3, #2
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d81f      	bhi.n	80027fe <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	e016      	b.n	80027fe <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f103 020c 	add.w	r2, r3, #12
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027fe:	2301      	movs	r3, #1
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002802:	f7fd fed3 	bl	80005ac <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800280e:	429a      	cmp	r2, r3
 8002810:	d803      	bhi.n	800281a <HAL_SPI_TransmitReceive+0x3c2>
 8002812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d102      	bne.n	8002820 <HAL_SPI_TransmitReceive+0x3c8>
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	2b00      	cmp	r3, #0
 800281e:	d103      	bne.n	8002828 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002826:	e01c      	b.n	8002862 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	f47f af5b 	bne.w	80026ea <HAL_SPI_TransmitReceive+0x292>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	f47f af54 	bne.w	80026ea <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f948 	bl	8002adc <SPI_EndRxTxTransaction>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	661a      	str	r2, [r3, #96]	; 0x60
 800285e:	e000      	b.n	8002862 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002860:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002872:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002876:	4618      	mov	r0, r3
 8002878:	3728      	adds	r7, #40	; 0x28
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800288e:	e04c      	b.n	800292a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002896:	d048      	beq.n	800292a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002898:	f7fd fe88 	bl	80005ac <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d902      	bls.n	80028ae <SPI_WaitFlagStateUntilTimeout+0x30>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d13d      	bne.n	800292a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028c6:	d111      	bne.n	80028ec <SPI_WaitFlagStateUntilTimeout+0x6e>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d0:	d004      	beq.n	80028dc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028da:	d107      	bne.n	80028ec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f4:	d10f      	bne.n	8002916 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002914:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e00f      	b.n	800294a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4013      	ands	r3, r2
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	bf0c      	ite	eq
 800293a:	2301      	moveq	r3, #1
 800293c:	2300      	movne	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	429a      	cmp	r2, r3
 8002946:	d1a3      	bne.n	8002890 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002960:	e057      	b.n	8002a12 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002968:	d106      	bne.n	8002978 <SPI_WaitFifoStateUntilTimeout+0x26>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	330c      	adds	r3, #12
 8002976:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297e:	d048      	beq.n	8002a12 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002980:	f7fd fe14 	bl	80005ac <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d902      	bls.n	8002996 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d13d      	bne.n	8002a12 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ae:	d111      	bne.n	80029d4 <SPI_WaitFifoStateUntilTimeout+0x82>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b8:	d004      	beq.n	80029c4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c2:	d107      	bne.n	80029d4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029dc:	d10f      	bne.n	80029fe <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e008      	b.n	8002a24 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d19f      	bne.n	8002962 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a40:	d111      	bne.n	8002a66 <SPI_EndRxTransaction+0x3a>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a4a:	d004      	beq.n	8002a56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a54:	d107      	bne.n	8002a66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a64:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2180      	movs	r1, #128	; 0x80
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f7ff ff04 	bl	800287e <SPI_WaitFlagStateUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e023      	b.n	8002ad4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a94:	d11d      	bne.n	8002ad2 <SPI_EndRxTransaction+0xa6>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a9e:	d004      	beq.n	8002aaa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa8:	d113      	bne.n	8002ad2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff ff4b 	bl	8002952 <SPI_WaitFifoStateUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac6:	f043 0220 	orr.w	r2, r3, #32
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e000      	b.n	8002ad4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f7ff ff2c 	bl	8002952 <SPI_WaitFifoStateUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b04:	f043 0220 	orr.w	r2, r3, #32
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e027      	b.n	8002b60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2200      	movs	r2, #0
 8002b18:	2180      	movs	r1, #128	; 0x80
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7ff feaf 	bl	800287e <SPI_WaitFlagStateUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2a:	f043 0220 	orr.w	r2, r3, #32
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e014      	b.n	8002b60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f7ff ff05 	bl	8002952 <SPI_WaitFifoStateUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d007      	beq.n	8002b5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b52:	f043 0220 	orr.w	r2, r3, #32
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e000      	b.n	8002b60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e040      	b.n	8002bfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f001 fa68 	bl	8004060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	; 0x24
 8002b94:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0201 	bic.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f82c 	bl	8002c04 <UART_SetConfig>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e022      	b.n	8002bfc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 faca 	bl	8003158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002be2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fb51 	bl	800329c <UART_CheckIdleState>
 8002bfa:	4603      	mov	r3, r0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4bb1      	ldr	r3, [pc, #708]	; (8002ef8 <UART_SetConfig+0x2f4>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	6939      	ldr	r1, [r7, #16]
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a9f      	ldr	r2, [pc, #636]	; (8002efc <UART_SetConfig+0x2f8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d121      	bne.n	8002cc8 <UART_SetConfig+0xc4>
 8002c84:	4b9e      	ldr	r3, [pc, #632]	; (8002f00 <UART_SetConfig+0x2fc>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d816      	bhi.n	8002cc0 <UART_SetConfig+0xbc>
 8002c92:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <UART_SetConfig+0x94>)
 8002c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002cb5 	.word	0x08002cb5
 8002ca0:	08002caf 	.word	0x08002caf
 8002ca4:	08002cbb 	.word	0x08002cbb
 8002ca8:	2301      	movs	r3, #1
 8002caa:	77fb      	strb	r3, [r7, #31]
 8002cac:	e151      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	77fb      	strb	r3, [r7, #31]
 8002cb2:	e14e      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	77fb      	strb	r3, [r7, #31]
 8002cb8:	e14b      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002cba:	2308      	movs	r3, #8
 8002cbc:	77fb      	strb	r3, [r7, #31]
 8002cbe:	e148      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	77fb      	strb	r3, [r7, #31]
 8002cc4:	bf00      	nop
 8002cc6:	e144      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a8d      	ldr	r2, [pc, #564]	; (8002f04 <UART_SetConfig+0x300>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d134      	bne.n	8002d3c <UART_SetConfig+0x138>
 8002cd2:	4b8b      	ldr	r3, [pc, #556]	; (8002f00 <UART_SetConfig+0x2fc>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	f003 030c 	and.w	r3, r3, #12
 8002cdc:	2b0c      	cmp	r3, #12
 8002cde:	d829      	bhi.n	8002d34 <UART_SetConfig+0x130>
 8002ce0:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <UART_SetConfig+0xe4>)
 8002ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce6:	bf00      	nop
 8002ce8:	08002d1d 	.word	0x08002d1d
 8002cec:	08002d35 	.word	0x08002d35
 8002cf0:	08002d35 	.word	0x08002d35
 8002cf4:	08002d35 	.word	0x08002d35
 8002cf8:	08002d29 	.word	0x08002d29
 8002cfc:	08002d35 	.word	0x08002d35
 8002d00:	08002d35 	.word	0x08002d35
 8002d04:	08002d35 	.word	0x08002d35
 8002d08:	08002d23 	.word	0x08002d23
 8002d0c:	08002d35 	.word	0x08002d35
 8002d10:	08002d35 	.word	0x08002d35
 8002d14:	08002d35 	.word	0x08002d35
 8002d18:	08002d2f 	.word	0x08002d2f
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	77fb      	strb	r3, [r7, #31]
 8002d20:	e117      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002d22:	2302      	movs	r3, #2
 8002d24:	77fb      	strb	r3, [r7, #31]
 8002d26:	e114      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002d28:	2304      	movs	r3, #4
 8002d2a:	77fb      	strb	r3, [r7, #31]
 8002d2c:	e111      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002d2e:	2308      	movs	r3, #8
 8002d30:	77fb      	strb	r3, [r7, #31]
 8002d32:	e10e      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002d34:	2310      	movs	r3, #16
 8002d36:	77fb      	strb	r3, [r7, #31]
 8002d38:	bf00      	nop
 8002d3a:	e10a      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a71      	ldr	r2, [pc, #452]	; (8002f08 <UART_SetConfig+0x304>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d120      	bne.n	8002d88 <UART_SetConfig+0x184>
 8002d46:	4b6e      	ldr	r3, [pc, #440]	; (8002f00 <UART_SetConfig+0x2fc>)
 8002d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d50:	2b10      	cmp	r3, #16
 8002d52:	d00f      	beq.n	8002d74 <UART_SetConfig+0x170>
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d802      	bhi.n	8002d5e <UART_SetConfig+0x15a>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <UART_SetConfig+0x164>
 8002d5c:	e010      	b.n	8002d80 <UART_SetConfig+0x17c>
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d005      	beq.n	8002d6e <UART_SetConfig+0x16a>
 8002d62:	2b30      	cmp	r3, #48	; 0x30
 8002d64:	d009      	beq.n	8002d7a <UART_SetConfig+0x176>
 8002d66:	e00b      	b.n	8002d80 <UART_SetConfig+0x17c>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	77fb      	strb	r3, [r7, #31]
 8002d6c:	e0f1      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	77fb      	strb	r3, [r7, #31]
 8002d72:	e0ee      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002d74:	2304      	movs	r3, #4
 8002d76:	77fb      	strb	r3, [r7, #31]
 8002d78:	e0eb      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	77fb      	strb	r3, [r7, #31]
 8002d7e:	e0e8      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002d80:	2310      	movs	r3, #16
 8002d82:	77fb      	strb	r3, [r7, #31]
 8002d84:	bf00      	nop
 8002d86:	e0e4      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a5f      	ldr	r2, [pc, #380]	; (8002f0c <UART_SetConfig+0x308>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d120      	bne.n	8002dd4 <UART_SetConfig+0x1d0>
 8002d92:	4b5b      	ldr	r3, [pc, #364]	; (8002f00 <UART_SetConfig+0x2fc>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d9c:	2b40      	cmp	r3, #64	; 0x40
 8002d9e:	d00f      	beq.n	8002dc0 <UART_SetConfig+0x1bc>
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d802      	bhi.n	8002daa <UART_SetConfig+0x1a6>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <UART_SetConfig+0x1b0>
 8002da8:	e010      	b.n	8002dcc <UART_SetConfig+0x1c8>
 8002daa:	2b80      	cmp	r3, #128	; 0x80
 8002dac:	d005      	beq.n	8002dba <UART_SetConfig+0x1b6>
 8002dae:	2bc0      	cmp	r3, #192	; 0xc0
 8002db0:	d009      	beq.n	8002dc6 <UART_SetConfig+0x1c2>
 8002db2:	e00b      	b.n	8002dcc <UART_SetConfig+0x1c8>
 8002db4:	2300      	movs	r3, #0
 8002db6:	77fb      	strb	r3, [r7, #31]
 8002db8:	e0cb      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	77fb      	strb	r3, [r7, #31]
 8002dbe:	e0c8      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	77fb      	strb	r3, [r7, #31]
 8002dc4:	e0c5      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	77fb      	strb	r3, [r7, #31]
 8002dca:	e0c2      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002dcc:	2310      	movs	r3, #16
 8002dce:	77fb      	strb	r3, [r7, #31]
 8002dd0:	bf00      	nop
 8002dd2:	e0be      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a4d      	ldr	r2, [pc, #308]	; (8002f10 <UART_SetConfig+0x30c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d124      	bne.n	8002e28 <UART_SetConfig+0x224>
 8002dde:	4b48      	ldr	r3, [pc, #288]	; (8002f00 <UART_SetConfig+0x2fc>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dec:	d012      	beq.n	8002e14 <UART_SetConfig+0x210>
 8002dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df2:	d802      	bhi.n	8002dfa <UART_SetConfig+0x1f6>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <UART_SetConfig+0x204>
 8002df8:	e012      	b.n	8002e20 <UART_SetConfig+0x21c>
 8002dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dfe:	d006      	beq.n	8002e0e <UART_SetConfig+0x20a>
 8002e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e04:	d009      	beq.n	8002e1a <UART_SetConfig+0x216>
 8002e06:	e00b      	b.n	8002e20 <UART_SetConfig+0x21c>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	77fb      	strb	r3, [r7, #31]
 8002e0c:	e0a1      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	77fb      	strb	r3, [r7, #31]
 8002e12:	e09e      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002e14:	2304      	movs	r3, #4
 8002e16:	77fb      	strb	r3, [r7, #31]
 8002e18:	e09b      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	e098      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002e20:	2310      	movs	r3, #16
 8002e22:	77fb      	strb	r3, [r7, #31]
 8002e24:	bf00      	nop
 8002e26:	e094      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a39      	ldr	r2, [pc, #228]	; (8002f14 <UART_SetConfig+0x310>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d124      	bne.n	8002e7c <UART_SetConfig+0x278>
 8002e32:	4b33      	ldr	r3, [pc, #204]	; (8002f00 <UART_SetConfig+0x2fc>)
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e40:	d012      	beq.n	8002e68 <UART_SetConfig+0x264>
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e46:	d802      	bhi.n	8002e4e <UART_SetConfig+0x24a>
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <UART_SetConfig+0x258>
 8002e4c:	e012      	b.n	8002e74 <UART_SetConfig+0x270>
 8002e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e52:	d006      	beq.n	8002e62 <UART_SetConfig+0x25e>
 8002e54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e58:	d009      	beq.n	8002e6e <UART_SetConfig+0x26a>
 8002e5a:	e00b      	b.n	8002e74 <UART_SetConfig+0x270>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	77fb      	strb	r3, [r7, #31]
 8002e60:	e077      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002e62:	2302      	movs	r3, #2
 8002e64:	77fb      	strb	r3, [r7, #31]
 8002e66:	e074      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	77fb      	strb	r3, [r7, #31]
 8002e6c:	e071      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002e6e:	2308      	movs	r3, #8
 8002e70:	77fb      	strb	r3, [r7, #31]
 8002e72:	e06e      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002e74:	2310      	movs	r3, #16
 8002e76:	77fb      	strb	r3, [r7, #31]
 8002e78:	bf00      	nop
 8002e7a:	e06a      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a25      	ldr	r2, [pc, #148]	; (8002f18 <UART_SetConfig+0x314>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d124      	bne.n	8002ed0 <UART_SetConfig+0x2cc>
 8002e86:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <UART_SetConfig+0x2fc>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e94:	d012      	beq.n	8002ebc <UART_SetConfig+0x2b8>
 8002e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9a:	d802      	bhi.n	8002ea2 <UART_SetConfig+0x29e>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <UART_SetConfig+0x2ac>
 8002ea0:	e012      	b.n	8002ec8 <UART_SetConfig+0x2c4>
 8002ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea6:	d006      	beq.n	8002eb6 <UART_SetConfig+0x2b2>
 8002ea8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002eac:	d009      	beq.n	8002ec2 <UART_SetConfig+0x2be>
 8002eae:	e00b      	b.n	8002ec8 <UART_SetConfig+0x2c4>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	77fb      	strb	r3, [r7, #31]
 8002eb4:	e04d      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	77fb      	strb	r3, [r7, #31]
 8002eba:	e04a      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	77fb      	strb	r3, [r7, #31]
 8002ec0:	e047      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	77fb      	strb	r3, [r7, #31]
 8002ec6:	e044      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002ec8:	2310      	movs	r3, #16
 8002eca:	77fb      	strb	r3, [r7, #31]
 8002ecc:	bf00      	nop
 8002ece:	e040      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a11      	ldr	r2, [pc, #68]	; (8002f1c <UART_SetConfig+0x318>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d139      	bne.n	8002f4e <UART_SetConfig+0x34a>
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <UART_SetConfig+0x2fc>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ee8:	d027      	beq.n	8002f3a <UART_SetConfig+0x336>
 8002eea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eee:	d817      	bhi.n	8002f20 <UART_SetConfig+0x31c>
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d01c      	beq.n	8002f2e <UART_SetConfig+0x32a>
 8002ef4:	e027      	b.n	8002f46 <UART_SetConfig+0x342>
 8002ef6:	bf00      	nop
 8002ef8:	efff69f3 	.word	0xefff69f3
 8002efc:	40011000 	.word	0x40011000
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40004400 	.word	0x40004400
 8002f08:	40004800 	.word	0x40004800
 8002f0c:	40004c00 	.word	0x40004c00
 8002f10:	40005000 	.word	0x40005000
 8002f14:	40011400 	.word	0x40011400
 8002f18:	40007800 	.word	0x40007800
 8002f1c:	40007c00 	.word	0x40007c00
 8002f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f24:	d006      	beq.n	8002f34 <UART_SetConfig+0x330>
 8002f26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f2a:	d009      	beq.n	8002f40 <UART_SetConfig+0x33c>
 8002f2c:	e00b      	b.n	8002f46 <UART_SetConfig+0x342>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	77fb      	strb	r3, [r7, #31]
 8002f32:	e00e      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002f34:	2302      	movs	r3, #2
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e00b      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	77fb      	strb	r3, [r7, #31]
 8002f3e:	e008      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002f40:	2308      	movs	r3, #8
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	e005      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002f46:	2310      	movs	r3, #16
 8002f48:	77fb      	strb	r3, [r7, #31]
 8002f4a:	bf00      	nop
 8002f4c:	e001      	b.n	8002f52 <UART_SetConfig+0x34e>
 8002f4e:	2310      	movs	r3, #16
 8002f50:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5a:	d17f      	bne.n	800305c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002f5c:	7ffb      	ldrb	r3, [r7, #31]
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d85c      	bhi.n	800301c <UART_SetConfig+0x418>
 8002f62:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <UART_SetConfig+0x364>)
 8002f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f68:	08002f8d 	.word	0x08002f8d
 8002f6c:	08002fad 	.word	0x08002fad
 8002f70:	08002fcd 	.word	0x08002fcd
 8002f74:	0800301d 	.word	0x0800301d
 8002f78:	08002fe5 	.word	0x08002fe5
 8002f7c:	0800301d 	.word	0x0800301d
 8002f80:	0800301d 	.word	0x0800301d
 8002f84:	0800301d 	.word	0x0800301d
 8002f88:	08003005 	.word	0x08003005
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f8c:	f7fe fb2e 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 8002f90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	005a      	lsls	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	441a      	add	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	61bb      	str	r3, [r7, #24]
        break;
 8002faa:	e03a      	b.n	8003022 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fac:	f7fe fb32 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
 8002fb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	005a      	lsls	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	441a      	add	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	61bb      	str	r3, [r7, #24]
        break;
 8002fca:	e02a      	b.n	8003022 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	085a      	lsrs	r2, r3, #1
 8002fd2:	4b5f      	ldr	r3, [pc, #380]	; (8003150 <UART_SetConfig+0x54c>)
 8002fd4:	4413      	add	r3, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6852      	ldr	r2, [r2, #4]
 8002fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	61bb      	str	r3, [r7, #24]
        break;
 8002fe2:	e01e      	b.n	8003022 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fe4:	f7fe fa1e 	bl	8001424 <HAL_RCC_GetSysClockFreq>
 8002fe8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	005a      	lsls	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	61bb      	str	r3, [r7, #24]
        break;
 8003002:	e00e      	b.n	8003022 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	fbb2 f3f3 	udiv	r3, r2, r3
 8003016:	b29b      	uxth	r3, r3
 8003018:	61bb      	str	r3, [r7, #24]
        break;
 800301a:	e002      	b.n	8003022 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	75fb      	strb	r3, [r7, #23]
        break;
 8003020:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2b0f      	cmp	r3, #15
 8003026:	d916      	bls.n	8003056 <UART_SetConfig+0x452>
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302e:	d212      	bcs.n	8003056 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	b29b      	uxth	r3, r3
 8003034:	f023 030f 	bic.w	r3, r3, #15
 8003038:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	b29b      	uxth	r3, r3
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	b29a      	uxth	r2, r3
 8003046:	897b      	ldrh	r3, [r7, #10]
 8003048:	4313      	orrs	r3, r2
 800304a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	897a      	ldrh	r2, [r7, #10]
 8003052:	60da      	str	r2, [r3, #12]
 8003054:	e070      	b.n	8003138 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	75fb      	strb	r3, [r7, #23]
 800305a:	e06d      	b.n	8003138 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800305c:	7ffb      	ldrb	r3, [r7, #31]
 800305e:	2b08      	cmp	r3, #8
 8003060:	d859      	bhi.n	8003116 <UART_SetConfig+0x512>
 8003062:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <UART_SetConfig+0x464>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	0800308d 	.word	0x0800308d
 800306c:	080030ab 	.word	0x080030ab
 8003070:	080030c9 	.word	0x080030c9
 8003074:	08003117 	.word	0x08003117
 8003078:	080030e1 	.word	0x080030e1
 800307c:	08003117 	.word	0x08003117
 8003080:	08003117 	.word	0x08003117
 8003084:	08003117 	.word	0x08003117
 8003088:	080030ff 	.word	0x080030ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800308c:	f7fe faae 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 8003090:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	085a      	lsrs	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	441a      	add	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	61bb      	str	r3, [r7, #24]
        break;
 80030a8:	e038      	b.n	800311c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030aa:	f7fe fab3 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
 80030ae:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	085a      	lsrs	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	441a      	add	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	61bb      	str	r3, [r7, #24]
        break;
 80030c6:	e029      	b.n	800311c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	085a      	lsrs	r2, r3, #1
 80030ce:	4b21      	ldr	r3, [pc, #132]	; (8003154 <UART_SetConfig+0x550>)
 80030d0:	4413      	add	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6852      	ldr	r2, [r2, #4]
 80030d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80030da:	b29b      	uxth	r3, r3
 80030dc:	61bb      	str	r3, [r7, #24]
        break;
 80030de:	e01d      	b.n	800311c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030e0:	f7fe f9a0 	bl	8001424 <HAL_RCC_GetSysClockFreq>
 80030e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	085a      	lsrs	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	441a      	add	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	61bb      	str	r3, [r7, #24]
        break;
 80030fc:	e00e      	b.n	800311c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003110:	b29b      	uxth	r3, r3
 8003112:	61bb      	str	r3, [r7, #24]
        break;
 8003114:	e002      	b.n	800311c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	75fb      	strb	r3, [r7, #23]
        break;
 800311a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b0f      	cmp	r3, #15
 8003120:	d908      	bls.n	8003134 <UART_SetConfig+0x530>
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003128:	d204      	bcs.n	8003134 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	e001      	b.n	8003138 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003144:	7dfb      	ldrb	r3, [r7, #23]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3720      	adds	r7, #32
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	01e84800 	.word	0x01e84800
 8003154:	00f42400 	.word	0x00f42400

08003158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003234:	2b00      	cmp	r3, #0
 8003236:	d01a      	beq.n	800326e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003256:	d10a      	bne.n	800326e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]
  }
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80032aa:	f7fd f97f 	bl	80005ac <HAL_GetTick>
 80032ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d10e      	bne.n	80032dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f814 	bl	80032fa <UART_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e00a      	b.n	80032f2 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800330a:	e05d      	b.n	80033c8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d059      	beq.n	80033c8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003314:	f7fd f94a 	bl	80005ac <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	429a      	cmp	r2, r3
 8003322:	d302      	bcc.n	800332a <UART_WaitOnFlagUntilTimeout+0x30>
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d11b      	bne.n	8003362 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003338:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e042      	b.n	80033e8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d02b      	beq.n	80033c8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800337a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800337e:	d123      	bne.n	80033c8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003388:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003398:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e00f      	b.n	80033e8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69da      	ldr	r2, [r3, #28]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	4013      	ands	r3, r2
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d092      	beq.n	800330c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <adc_test>:


/**
 * Run basic tests for ADC configuration to 2ksps with a PGA of 16
 */
uint32_t adc_test(void) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b090      	sub	sp, #64	; 0x40
 80033f4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef sende_status[6] = { 0, 0, 0, 0, 0, 0 };
 80033f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	809a      	strh	r2, [r3, #4]
	HAL_StatusTypeDef empfangs_status[4] = { 0, 0, 0, 0 };
 8003400:	2300      	movs	r3, #0
 8003402:	623b      	str	r3, [r7, #32]
	uint8_t registervalue[6];

	uint8_t receiving_test_data[4] = { 0, 0, 0, 0, 0 };
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]
	uint16_t meas_test_values = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	867b      	strh	r3, [r7, #50]	; 0x32
	int l = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
	// CS Low
	HAL_GPIO_WritePin(nCS_GPIO_Port, nCS_Pin, GPIO_PIN_RESET);
 8003410:	2200      	movs	r2, #0
 8003412:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003416:	4862      	ldr	r0, [pc, #392]	; (80035a0 <adc_test+0x1b0>)
 8003418:	f7fd fbe2 	bl	8000be0 <HAL_GPIO_WritePin>

	sende_status[0] = HAL_SPI_Transmit(&hspi1, &wreg_command[0], 1, 20); // REG Register beschreiben WERT: OK
 800341c:	2314      	movs	r3, #20
 800341e:	2201      	movs	r2, #1
 8003420:	4960      	ldr	r1, [pc, #384]	; (80035a4 <adc_test+0x1b4>)
 8003422:	4861      	ldr	r0, [pc, #388]	; (80035a8 <adc_test+0x1b8>)
 8003424:	f7fe fd8a 	bl	8001f3c <HAL_SPI_Transmit>
 8003428:	4603      	mov	r3, r0
 800342a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sende_status[1] = HAL_SPI_Transmit(&hspi1, &wreg_command[1], 1, 20); // WERT: OK
 800342e:	2314      	movs	r3, #20
 8003430:	2201      	movs	r2, #1
 8003432:	495e      	ldr	r1, [pc, #376]	; (80035ac <adc_test+0x1bc>)
 8003434:	485c      	ldr	r0, [pc, #368]	; (80035a8 <adc_test+0x1b8>)
 8003436:	f7fe fd81 	bl	8001f3c <HAL_SPI_Transmit>
 800343a:	4603      	mov	r3, r0
 800343c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	sende_status[1] = HAL_SPI_Transmit(&hspi1, &wreg_command[2], 1, 20); // WERT: OK
 8003440:	2314      	movs	r3, #20
 8003442:	2201      	movs	r2, #1
 8003444:	495a      	ldr	r1, [pc, #360]	; (80035b0 <adc_test+0x1c0>)
 8003446:	4858      	ldr	r0, [pc, #352]	; (80035a8 <adc_test+0x1b8>)
 8003448:	f7fe fd78 	bl	8001f3c <HAL_SPI_Transmit>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	sende_status[3] = HAL_SPI_Transmit(&hspi1, &wreg_command[3], 1, 20); // WERT: OK
 8003452:	2314      	movs	r3, #20
 8003454:	2201      	movs	r2, #1
 8003456:	4957      	ldr	r1, [pc, #348]	; (80035b4 <adc_test+0x1c4>)
 8003458:	4853      	ldr	r0, [pc, #332]	; (80035a8 <adc_test+0x1b8>)
 800345a:	f7fe fd6f 	bl	8001f3c <HAL_SPI_Transmit>
 800345e:	4603      	mov	r3, r0
 8003460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	sende_status[4] = HAL_SPI_Transmit(&hspi1, &wreg_command[4], 1, 20); // WERT: OK
 8003464:	2314      	movs	r3, #20
 8003466:	2201      	movs	r2, #1
 8003468:	4953      	ldr	r1, [pc, #332]	; (80035b8 <adc_test+0x1c8>)
 800346a:	484f      	ldr	r0, [pc, #316]	; (80035a8 <adc_test+0x1b8>)
 800346c:	f7fe fd66 	bl	8001f3c <HAL_SPI_Transmit>
 8003470:	4603      	mov	r3, r0
 8003472:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sende_status[5] = HAL_SPI_Transmit(&hspi1, &wreg_command[5], 1, 20); // WERT: OK
 8003476:	2314      	movs	r3, #20
 8003478:	2201      	movs	r2, #1
 800347a:	4950      	ldr	r1, [pc, #320]	; (80035bc <adc_test+0x1cc>)
 800347c:	484a      	ldr	r0, [pc, #296]	; (80035a8 <adc_test+0x1b8>)
 800347e:	f7fe fd5d 	bl	8001f3c <HAL_SPI_Transmit>
 8003482:	4603      	mov	r3, r0
 8003484:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	for (int x = 0; x < 7; x++) {
 8003488:	2300      	movs	r3, #0
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800348c:	e00b      	b.n	80034a6 <adc_test+0xb6>
		if (sende_status[x] != HAL_OK) {
 800348e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003494:	4413      	add	r3, r2
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <adc_test+0xb0>
			return 1; //Exit Code für fehlgeschlagenes Senden
 800349c:	2301      	movs	r3, #1
 800349e:	e07a      	b.n	8003596 <adc_test+0x1a6>
	for (int x = 0; x < 7; x++) {
 80034a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a2:	3301      	adds	r3, #1
 80034a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a8:	2b06      	cmp	r3, #6
 80034aa:	ddf0      	ble.n	800348e <adc_test+0x9e>
		}
	}

	uint8_t rreg[2] = { 0x20, 0x03 };
 80034ac:	4b44      	ldr	r3, [pc, #272]	; (80035c0 <adc_test+0x1d0>)
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	823b      	strh	r3, [r7, #16]
	uint8_t nopp[6] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xff, 0xff };
 80034b2:	4a44      	ldr	r2, [pc, #272]	; (80035c4 <adc_test+0x1d4>)
 80034b4:	f107 0308 	add.w	r3, r7, #8
 80034b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034bc:	6018      	str	r0, [r3, #0]
 80034be:	3304      	adds	r3, #4
 80034c0:	8019      	strh	r1, [r3, #0]
	uint8_t emp[6] = { 0x00 };
 80034c2:	463b      	mov	r3, r7
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	809a      	strh	r2, [r3, #4]
	HAL_SPI_Transmit(&hspi1, &readregister[0], 1, 20); // TEST ob WREG ERFolgreich WERT: OK
 80034ca:	2314      	movs	r3, #20
 80034cc:	2201      	movs	r2, #1
 80034ce:	493e      	ldr	r1, [pc, #248]	; (80035c8 <adc_test+0x1d8>)
 80034d0:	4835      	ldr	r0, [pc, #212]	; (80035a8 <adc_test+0x1b8>)
 80034d2:	f7fe fd33 	bl	8001f3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &readregister[1], 1, 20); // TEST ob WREG ERFolgreich WERT: OK
 80034d6:	2314      	movs	r3, #20
 80034d8:	2201      	movs	r2, #1
 80034da:	493c      	ldr	r1, [pc, #240]	; (80035cc <adc_test+0x1dc>)
 80034dc:	4832      	ldr	r0, [pc, #200]	; (80035a8 <adc_test+0x1b8>)
 80034de:	f7fe fd2d 	bl	8001f3c <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, rreg, 2, 20); // transmit command and number of regs

	empfangs_status[0] = HAL_SPI_Receive(&hspi1, &registervalue[0], 1, 20); // TEST ob WREG ERFolgreich
 80034e2:	f107 0118 	add.w	r1, r7, #24
 80034e6:	2314      	movs	r3, #20
 80034e8:	2201      	movs	r2, #1
 80034ea:	482f      	ldr	r0, [pc, #188]	; (80035a8 <adc_test+0x1b8>)
 80034ec:	f7fe fe8c 	bl	8002208 <HAL_SPI_Receive>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f887 3020 	strb.w	r3, [r7, #32]
	empfangs_status[1] = HAL_SPI_Receive(&hspi1, &registervalue[1], 1, 20); // TEST ob WREG ERFolgreich
 80034f6:	f107 0318 	add.w	r3, r7, #24
 80034fa:	1c59      	adds	r1, r3, #1
 80034fc:	2314      	movs	r3, #20
 80034fe:	2201      	movs	r2, #1
 8003500:	4829      	ldr	r0, [pc, #164]	; (80035a8 <adc_test+0x1b8>)
 8003502:	f7fe fe81 	bl	8002208 <HAL_SPI_Receive>
 8003506:	4603      	mov	r3, r0
 8003508:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	empfangs_status[2] = HAL_SPI_Receive(&hspi1, &registervalue[2], 1, 20); // TEST ob WREG ERFolgreich
 800350c:	f107 0318 	add.w	r3, r7, #24
 8003510:	1c99      	adds	r1, r3, #2
 8003512:	2314      	movs	r3, #20
 8003514:	2201      	movs	r2, #1
 8003516:	4824      	ldr	r0, [pc, #144]	; (80035a8 <adc_test+0x1b8>)
 8003518:	f7fe fe76 	bl	8002208 <HAL_SPI_Receive>
 800351c:	4603      	mov	r3, r0
 800351e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	empfangs_status[3] = HAL_SPI_Receive(&hspi1, &registervalue[3], 1, 20); // TEST ob WREG ERFolgreich
 8003522:	f107 0318 	add.w	r3, r7, #24
 8003526:	1cd9      	adds	r1, r3, #3
 8003528:	2314      	movs	r3, #20
 800352a:	2201      	movs	r2, #1
 800352c:	481e      	ldr	r0, [pc, #120]	; (80035a8 <adc_test+0x1b8>)
 800352e:	f7fe fe6b 	bl	8002208 <HAL_SPI_Receive>
 8003532:	4603      	mov	r3, r0
 8003534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	//empfangs_status[0] = HAL_SPI_TransmitReceive(&hspi1, nopp, emp, 6, 20);
	for (int w = 0; w < 5; w++) {
 8003538:	2300      	movs	r3, #0
 800353a:	63bb      	str	r3, [r7, #56]	; 0x38
 800353c:	e00b      	b.n	8003556 <adc_test+0x166>
		if (empfangs_status[w] != HAL_OK) {
 800353e:	f107 0220 	add.w	r2, r7, #32
 8003542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003544:	4413      	add	r3, r2
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <adc_test+0x160>
			return 2; //Exit Code für fehlgeschlagenes Empfangen
 800354c:	2302      	movs	r3, #2
 800354e:	e022      	b.n	8003596 <adc_test+0x1a6>
	for (int w = 0; w < 5; w++) {
 8003550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003552:	3301      	adds	r3, #1
 8003554:	63bb      	str	r3, [r7, #56]	; 0x38
 8003556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003558:	2b04      	cmp	r3, #4
 800355a:	ddf0      	ble.n	800353e <adc_test+0x14e>
		}
	}

	for (int u = 0; u < 4; u++) {
 800355c:	2300      	movs	r3, #0
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
 8003560:	e00f      	b.n	8003582 <adc_test+0x192>
		if (registervalue[u] != wreg_command[2 + u]) {
 8003562:	f107 0218 	add.w	r2, r7, #24
 8003566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003568:	4413      	add	r3, r2
 800356a:	781a      	ldrb	r2, [r3, #0]
 800356c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356e:	3302      	adds	r3, #2
 8003570:	490c      	ldr	r1, [pc, #48]	; (80035a4 <adc_test+0x1b4>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <adc_test+0x18c>
			return 3; //Exit Code für falsches Lesen der Register
 8003578:	2303      	movs	r3, #3
 800357a:	e00c      	b.n	8003596 <adc_test+0x1a6>
	for (int u = 0; u < 4; u++) {
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	3301      	adds	r3, #1
 8003580:	637b      	str	r3, [r7, #52]	; 0x34
 8003582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003584:	2b03      	cmp	r3, #3
 8003586:	ddec      	ble.n	8003562 <adc_test+0x172>
		}
	}

	HAL_GPIO_WritePin(nCS_GPIO_Port, nCS_Pin, GPIO_PIN_SET);
 8003588:	2201      	movs	r2, #1
 800358a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800358e:	4804      	ldr	r0, [pc, #16]	; (80035a0 <adc_test+0x1b0>)
 8003590:	f7fd fb26 	bl	8000be0 <HAL_GPIO_WritePin>
	 return 5; //Exit Code für maximalen Messwert
	 }
	 }
	 }*/

	return 0; //Test war erfolgreich
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3740      	adds	r7, #64	; 0x40
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40020c00 	.word	0x40020c00
 80035a4:	2000002c 	.word	0x2000002c
 80035a8:	20000064 	.word	0x20000064
 80035ac:	2000002d 	.word	0x2000002d
 80035b0:	2000002e 	.word	0x2000002e
 80035b4:	2000002f 	.word	0x2000002f
 80035b8:	20000030 	.word	0x20000030
 80035bc:	20000031 	.word	0x20000031
 80035c0:	080041ac 	.word	0x080041ac
 80035c4:	080041b0 	.word	0x080041b0
 80035c8:	2000001c 	.word	0x2000001c
 80035cc:	2000001d 	.word	0x2000001d

080035d0 <HAL_GPIO_EXTI_Callback>:

/**
 * Overwriting existing void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 * Handle interrupt, get interrupt id (from lookup table) and set bitmap
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	80fb      	strh	r3, [r7, #6]
	uint8_t t = ADCLookup[LOOKUP_PIN_INDEX(GPIO_Pin)];
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	fab3 f383 	clz	r3, r3
 80035e0:	f1c3 031f 	rsb	r3, r3, #31
 80035e4:	4a09      	ldr	r2, [pc, #36]	; (800360c <HAL_GPIO_EXTI_Callback+0x3c>)
 80035e6:	5cd3      	ldrb	r3, [r2, r3]
 80035e8:	73fb      	strb	r3, [r7, #15]
	ADCBitMap = ADCBitMap & (~(0x1 << t));
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2201      	movs	r2, #1
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_GPIO_EXTI_Callback+0x40>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4013      	ands	r3, r2
 80035fc:	4a04      	ldr	r2, [pc, #16]	; (8003610 <HAL_GPIO_EXTI_Callback+0x40>)
 80035fe:	6013      	str	r3, [r2, #0]
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	20000008 	.word	0x20000008
 8003610:	20000018 	.word	0x20000018

08003614 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08e      	sub	sp, #56	; 0x38
 8003618:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800362a:	4bb4      	ldr	r3, [pc, #720]	; (80038fc <MX_GPIO_Init+0x2e8>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	4ab3      	ldr	r2, [pc, #716]	; (80038fc <MX_GPIO_Init+0x2e8>)
 8003630:	f043 0310 	orr.w	r3, r3, #16
 8003634:	6313      	str	r3, [r2, #48]	; 0x30
 8003636:	4bb1      	ldr	r3, [pc, #708]	; (80038fc <MX_GPIO_Init+0x2e8>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	623b      	str	r3, [r7, #32]
 8003640:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003642:	4bae      	ldr	r3, [pc, #696]	; (80038fc <MX_GPIO_Init+0x2e8>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	4aad      	ldr	r2, [pc, #692]	; (80038fc <MX_GPIO_Init+0x2e8>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	6313      	str	r3, [r2, #48]	; 0x30
 800364e:	4bab      	ldr	r3, [pc, #684]	; (80038fc <MX_GPIO_Init+0x2e8>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800365a:	4ba8      	ldr	r3, [pc, #672]	; (80038fc <MX_GPIO_Init+0x2e8>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4aa7      	ldr	r2, [pc, #668]	; (80038fc <MX_GPIO_Init+0x2e8>)
 8003660:	f043 0320 	orr.w	r3, r3, #32
 8003664:	6313      	str	r3, [r2, #48]	; 0x30
 8003666:	4ba5      	ldr	r3, [pc, #660]	; (80038fc <MX_GPIO_Init+0x2e8>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003672:	4ba2      	ldr	r3, [pc, #648]	; (80038fc <MX_GPIO_Init+0x2e8>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4aa1      	ldr	r2, [pc, #644]	; (80038fc <MX_GPIO_Init+0x2e8>)
 8003678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b9f      	ldr	r3, [pc, #636]	; (80038fc <MX_GPIO_Init+0x2e8>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800368a:	4b9c      	ldr	r3, [pc, #624]	; (80038fc <MX_GPIO_Init+0x2e8>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	4a9b      	ldr	r2, [pc, #620]	; (80038fc <MX_GPIO_Init+0x2e8>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6313      	str	r3, [r2, #48]	; 0x30
 8003696:	4b99      	ldr	r3, [pc, #612]	; (80038fc <MX_GPIO_Init+0x2e8>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	613b      	str	r3, [r7, #16]
 80036a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a2:	4b96      	ldr	r3, [pc, #600]	; (80038fc <MX_GPIO_Init+0x2e8>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	4a95      	ldr	r2, [pc, #596]	; (80038fc <MX_GPIO_Init+0x2e8>)
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	6313      	str	r3, [r2, #48]	; 0x30
 80036ae:	4b93      	ldr	r3, [pc, #588]	; (80038fc <MX_GPIO_Init+0x2e8>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80036ba:	4b90      	ldr	r3, [pc, #576]	; (80038fc <MX_GPIO_Init+0x2e8>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	4a8f      	ldr	r2, [pc, #572]	; (80038fc <MX_GPIO_Init+0x2e8>)
 80036c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036c4:	6313      	str	r3, [r2, #48]	; 0x30
 80036c6:	4b8d      	ldr	r3, [pc, #564]	; (80038fc <MX_GPIO_Init+0x2e8>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036d2:	4b8a      	ldr	r3, [pc, #552]	; (80038fc <MX_GPIO_Init+0x2e8>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	4a89      	ldr	r2, [pc, #548]	; (80038fc <MX_GPIO_Init+0x2e8>)
 80036d8:	f043 0308 	orr.w	r3, r3, #8
 80036dc:	6313      	str	r3, [r2, #48]	; 0x30
 80036de:	4b87      	ldr	r3, [pc, #540]	; (80038fc <MX_GPIO_Init+0x2e8>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	607b      	str	r3, [r7, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80036ea:	2200      	movs	r2, #0
 80036ec:	f244 0181 	movw	r1, #16513	; 0x4081
 80036f0:	4883      	ldr	r0, [pc, #524]	; (8003900 <MX_GPIO_Init+0x2ec>)
 80036f2:	f7fd fa75 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRES_GPIO_Port, nRES_Pin, GPIO_PIN_RESET);
 80036f6:	2200      	movs	r2, #0
 80036f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036fc:	4881      	ldr	r0, [pc, #516]	; (8003904 <MX_GPIO_Init+0x2f0>)
 80036fe:	f7fd fa6f 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Time_GPIO_Port, Time_Pin, GPIO_PIN_RESET);
 8003702:	2200      	movs	r2, #0
 8003704:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003708:	487f      	ldr	r0, [pc, #508]	; (8003908 <MX_GPIO_Init+0x2f4>)
 800370a:	f7fd fa69 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nCS_Pin|START_Pin, GPIO_PIN_RESET);
 800370e:	2200      	movs	r2, #0
 8003710:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003714:	487d      	ldr	r0, [pc, #500]	; (800390c <MX_GPIO_Init+0x2f8>)
 8003716:	f7fd fa63 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800371a:	2200      	movs	r2, #0
 800371c:	2140      	movs	r1, #64	; 0x40
 800371e:	487c      	ldr	r0, [pc, #496]	; (8003910 <MX_GPIO_Init+0x2fc>)
 8003720:	f7fd fa5e 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE10 
                           PE11 PE12 PE13 PE14 
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8003724:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800372a:	2303      	movs	r3, #3
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372e:	2300      	movs	r3, #0
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003736:	4619      	mov	r1, r3
 8003738:	4873      	ldr	r0, [pc, #460]	; (8003908 <MX_GPIO_Init+0x2f4>)
 800373a:	f7fd f8a7 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800373e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003744:	4b73      	ldr	r3, [pc, #460]	; (8003914 <MX_GPIO_Init+0x300>)
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800374c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003750:	4619      	mov	r1, r3
 8003752:	4871      	ldr	r0, [pc, #452]	; (8003918 <MX_GPIO_Init+0x304>)
 8003754:	f7fd f89a 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 
                           PF4 PF5 PF6 PF7 
                           PF8 PF9 PF10 PF11 
                           PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003758:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800375e:	2303      	movs	r3, #3
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800376a:	4619      	mov	r1, r3
 800376c:	4865      	ldr	r0, [pc, #404]	; (8003904 <MX_GPIO_Init+0x2f0>)
 800376e:	f7fd f88d 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC6 
                           PC7 PC8 PC9 PC10 
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6 
 8003772:	f641 73cd 	movw	r3, #8141	; 0x1fcd
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003778:	2303      	movs	r3, #3
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377c:	2300      	movs	r3, #0
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003784:	4619      	mov	r1, r3
 8003786:	4864      	ldr	r0, [pc, #400]	; (8003918 <MX_GPIO_Init+0x304>)
 8003788:	f7fd f880 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800378c:	2332      	movs	r3, #50	; 0x32
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003798:	2303      	movs	r3, #3
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800379c:	230b      	movs	r3, #11
 800379e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a4:	4619      	mov	r1, r3
 80037a6:	485c      	ldr	r0, [pc, #368]	; (8003918 <MX_GPIO_Init+0x304>)
 80037a8:	f7fd f870 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 80037ac:	f248 0319 	movw	r3, #32793	; 0x8019
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037b2:	2303      	movs	r3, #3
 80037b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037be:	4619      	mov	r1, r3
 80037c0:	4856      	ldr	r0, [pc, #344]	; (800391c <MX_GPIO_Init+0x308>)
 80037c2:	f7fd f863 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80037c6:	2386      	movs	r3, #134	; 0x86
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ca:	2302      	movs	r3, #2
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d2:	2303      	movs	r3, #3
 80037d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037d6:	230b      	movs	r3, #11
 80037d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037de:	4619      	mov	r1, r3
 80037e0:	484e      	ldr	r0, [pc, #312]	; (800391c <MX_GPIO_Init+0x308>)
 80037e2:	f7fd f853 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80037e6:	f244 0381 	movw	r3, #16513	; 0x4081
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ec:	2301      	movs	r3, #1
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f4:	2300      	movs	r3, #0
 80037f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037fc:	4619      	mov	r1, r3
 80037fe:	4840      	ldr	r0, [pc, #256]	; (8003900 <MX_GPIO_Init+0x2ec>)
 8003800:	f7fd f844 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 
                           PB12 PB15 PB4 PB6 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 8003804:	f649 7356 	movw	r3, #40790	; 0x9f56
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800380a:	2303      	movs	r3, #3
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380e:	2300      	movs	r3, #0
 8003810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003816:	4619      	mov	r1, r3
 8003818:	4839      	ldr	r0, [pc, #228]	; (8003900 <MX_GPIO_Init+0x2ec>)
 800381a:	f7fd f837 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_Pin;
 800381e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003824:	4b3e      	ldr	r3, [pc, #248]	; (8003920 <MX_GPIO_Init+0x30c>)
 8003826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(nDRDY_GPIO_Port, &GPIO_InitStruct);
 800382c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003830:	4619      	mov	r1, r3
 8003832:	4834      	ldr	r0, [pc, #208]	; (8003904 <MX_GPIO_Init+0x2f0>)
 8003834:	f7fd f82a 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRES_Pin;
 8003838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800383e:	2301      	movs	r3, #1
 8003840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003842:	2300      	movs	r3, #0
 8003844:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003846:	2303      	movs	r3, #3
 8003848:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(nRES_GPIO_Port, &GPIO_InitStruct);
 800384a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800384e:	4619      	mov	r1, r3
 8003850:	482c      	ldr	r0, [pc, #176]	; (8003904 <MX_GPIO_Init+0x2f0>)
 8003852:	f7fd f81b 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG5 PG8 PG9 
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003856:	f24d 733f 	movw	r3, #55103	; 0xd73f
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800385c:	2303      	movs	r3, #3
 800385e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003860:	2300      	movs	r3, #0
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003868:	4619      	mov	r1, r3
 800386a:	4829      	ldr	r0, [pc, #164]	; (8003910 <MX_GPIO_Init+0x2fc>)
 800386c:	f7fd f80e 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Time_Pin;
 8003870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003876:	2301      	movs	r3, #1
 8003878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	2300      	movs	r3, #0
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387e:	2303      	movs	r3, #3
 8003880:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Time_GPIO_Port, &GPIO_InitStruct);
 8003882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003886:	4619      	mov	r1, r3
 8003888:	481f      	ldr	r0, [pc, #124]	; (8003908 <MX_GPIO_Init+0x2f4>)
 800388a:	f7fc ffff 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800388e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003894:	2302      	movs	r3, #2
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003898:	2300      	movs	r3, #0
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389c:	2303      	movs	r3, #3
 800389e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038a0:	230b      	movs	r3, #11
 80038a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80038a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038a8:	4619      	mov	r1, r3
 80038aa:	4815      	ldr	r0, [pc, #84]	; (8003900 <MX_GPIO_Init+0x2ec>)
 80038ac:	f7fc ffee 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 80038b0:	f643 43ff 	movw	r3, #15615	; 0x3cff
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038b6:	2303      	movs	r3, #3
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038c2:	4619      	mov	r1, r3
 80038c4:	4811      	ldr	r0, [pc, #68]	; (800390c <MX_GPIO_Init+0x2f8>)
 80038c6:	f7fc ffe1 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = nCS_Pin|START_Pin;
 80038ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038d0:	2301      	movs	r3, #1
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d8:	2303      	movs	r3, #3
 80038da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e0:	4619      	mov	r1, r3
 80038e2:	480a      	ldr	r0, [pc, #40]	; (800390c <MX_GPIO_Init+0x2f8>)
 80038e4:	f7fc ffd2 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80038e8:	2340      	movs	r3, #64	; 0x40
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ec:	2301      	movs	r3, #1
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f4:	2300      	movs	r3, #0
 80038f6:	633b      	str	r3, [r7, #48]	; 0x30
 80038f8:	e014      	b.n	8003924 <MX_GPIO_Init+0x310>
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800
 8003900:	40020400 	.word	0x40020400
 8003904:	40021400 	.word	0x40021400
 8003908:	40021000 	.word	0x40021000
 800390c:	40020c00 	.word	0x40020c00
 8003910:	40021800 	.word	0x40021800
 8003914:	10110000 	.word	0x10110000
 8003918:	40020800 	.word	0x40020800
 800391c:	40020000 	.word	0x40020000
 8003920:	10210000 	.word	0x10210000
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003928:	4619      	mov	r1, r3
 800392a:	4825      	ldr	r0, [pc, #148]	; (80039c0 <MX_GPIO_Init+0x3ac>)
 800392c:	f7fc ffae 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003930:	2380      	movs	r3, #128	; 0x80
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003934:	2300      	movs	r3, #0
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003938:	2300      	movs	r3, #0
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800393c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003940:	4619      	mov	r1, r3
 8003942:	481f      	ldr	r0, [pc, #124]	; (80039c0 <MX_GPIO_Init+0x3ac>)
 8003944:	f7fc ffa2 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003948:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394e:	2302      	movs	r3, #2
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	2300      	movs	r3, #0
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003956:	2303      	movs	r3, #3
 8003958:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800395a:	230a      	movs	r3, #10
 800395c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003962:	4619      	mov	r1, r3
 8003964:	4817      	ldr	r0, [pc, #92]	; (80039c4 <MX_GPIO_Init+0x3b0>)
 8003966:	f7fc ff91 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800396a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003970:	2300      	movs	r3, #0
 8003972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800397c:	4619      	mov	r1, r3
 800397e:	4811      	ldr	r0, [pc, #68]	; (80039c4 <MX_GPIO_Init+0x3b0>)
 8003980:	f7fc ff84 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003984:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398a:	2302      	movs	r3, #2
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	2300      	movs	r3, #0
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003992:	2303      	movs	r3, #3
 8003994:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003996:	230b      	movs	r3, #11
 8003998:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800399a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800399e:	4619      	mov	r1, r3
 80039a0:	4807      	ldr	r0, [pc, #28]	; (80039c0 <MX_GPIO_Init+0x3ac>)
 80039a2:	f7fc ff73 	bl	800088c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80039a6:	2200      	movs	r2, #0
 80039a8:	2105      	movs	r1, #5
 80039aa:	2028      	movs	r0, #40	; 0x28
 80039ac:	f7fc ff29 	bl	8000802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80039b0:	2028      	movs	r0, #40	; 0x28
 80039b2:	f7fc ff42 	bl	800083a <HAL_NVIC_EnableIRQ>

}
 80039b6:	bf00      	nop
 80039b8:	3738      	adds	r7, #56	; 0x38
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40021800 	.word	0x40021800
 80039c4:	40020000 	.word	0x40020000

080039c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039ce:	f7fc fd9b 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039d2:	f000 f84b 	bl	8003a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039d6:	f7ff fe1d 	bl	8003614 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80039da:	f000 fb11 	bl	8004000 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80039de:	f000 f8df 	bl	8003ba0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  init_adc();
 80039e2:	f000 f97d 	bl	8003ce0 <init_adc>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t s = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
  uint8_t data[2] = {0};
 80039ea:	2300      	movs	r3, #0
 80039ec:	803b      	strh	r3, [r7, #0]
  HAL_GPIO_WritePin(nRES_GPIO_Port, nRES_Pin, GPIO_PIN_SET);
 80039ee:	2201      	movs	r2, #1
 80039f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039f4:	4817      	ldr	r0, [pc, #92]	; (8003a54 <main+0x8c>)
 80039f6:	f7fd f8f3 	bl	8000be0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80039fa:	200a      	movs	r0, #10
 80039fc:	f7fc fde2 	bl	80005c4 <HAL_Delay>
  HAL_GPIO_WritePin(nRES_GPIO_Port, nRES_Pin, GPIO_PIN_SET);
 8003a00:	2201      	movs	r2, #1
 8003a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a06:	4813      	ldr	r0, [pc, #76]	; (8003a54 <main+0x8c>)
 8003a08:	f7fd f8ea 	bl	8000be0 <HAL_GPIO_WritePin>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (ADCBitMap == 0xFFFFFFFE) {
 8003a0c:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <main+0x90>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f113 0f02 	cmn.w	r3, #2
 8003a14:	d1fa      	bne.n	8003a0c <main+0x44>
			//Read ADC Value here
			HAL_GPIO_WritePin(nCS_GPIO_Port, nCS_Pin, GPIO_PIN_RESET);		//CS LOW
 8003a16:	2200      	movs	r2, #0
 8003a18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a1c:	480f      	ldr	r0, [pc, #60]	; (8003a5c <main+0x94>)
 8003a1e:	f7fd f8df 	bl	8000be0 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t*)rdata, 1, 1);
 8003a22:	2301      	movs	r3, #1
 8003a24:	2201      	movs	r2, #1
 8003a26:	490e      	ldr	r1, [pc, #56]	; (8003a60 <main+0x98>)
 8003a28:	480e      	ldr	r0, [pc, #56]	; (8003a64 <main+0x9c>)
 8003a2a:	f7fe fa87 	bl	8001f3c <HAL_SPI_Transmit>
			HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)nop, data, 2, 1);//Pointer incompatible  WARUM??????????
 8003a2e:	463a      	mov	r2, r7
 8003a30:	2301      	movs	r3, #1
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	2302      	movs	r3, #2
 8003a36:	490c      	ldr	r1, [pc, #48]	; (8003a68 <main+0xa0>)
 8003a38:	480a      	ldr	r0, [pc, #40]	; (8003a64 <main+0x9c>)
 8003a3a:	f7fe fd0d 	bl	8002458 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(nCS_GPIO_Port, nCS_Pin, GPIO_PIN_SET);
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a44:	4805      	ldr	r0, [pc, #20]	; (8003a5c <main+0x94>)
 8003a46:	f7fd f8cb 	bl	8000be0 <HAL_GPIO_WritePin>
			ADCBitMap = ADCBITMAPNORMAL;
 8003a4a:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <main+0x90>)
 8003a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a50:	601a      	str	r2, [r3, #0]
		if (ADCBitMap == 0xFFFFFFFE) {
 8003a52:	e7db      	b.n	8003a0c <main+0x44>
 8003a54:	40021400 	.word	0x40021400
 8003a58:	20000018 	.word	0x20000018
 8003a5c:	40020c00 	.word	0x40020c00
 8003a60:	20000038 	.word	0x20000038
 8003a64:	20000064 	.word	0x20000064
 8003a68:	20000020 	.word	0x20000020

08003a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b0b4      	sub	sp, #208	; 0xd0
 8003a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003a76:	2230      	movs	r2, #48	; 0x30
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fb82 	bl	8004184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a90:	f107 0308 	add.w	r3, r7, #8
 8003a94:	2284      	movs	r2, #132	; 0x84
 8003a96:	2100      	movs	r1, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fb73 	bl	8004184 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8003a9e:	f7fd f8d1 	bl	8000c44 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aa2:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <SystemClock_Config+0x11c>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	4a38      	ldr	r2, [pc, #224]	; (8003b88 <SystemClock_Config+0x11c>)
 8003aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aac:	6413      	str	r3, [r2, #64]	; 0x40
 8003aae:	4b36      	ldr	r3, [pc, #216]	; (8003b88 <SystemClock_Config+0x11c>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	607b      	str	r3, [r7, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003aba:	4b34      	ldr	r3, [pc, #208]	; (8003b8c <SystemClock_Config+0x120>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a33      	ldr	r2, [pc, #204]	; (8003b8c <SystemClock_Config+0x120>)
 8003ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	4b31      	ldr	r3, [pc, #196]	; (8003b8c <SystemClock_Config+0x120>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003ad8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003adc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ae6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003aea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 7;
 8003aee:	2307      	movs	r3, #7
 8003af0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003af4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003af8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003afc:	2302      	movs	r3, #2
 8003afe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003b02:	2308      	movs	r3, #8
 8003b04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b08:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fd f8f9 	bl	8000d04 <HAL_RCC_OscConfig>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8003b18:	f000 f83a 	bl	8003b90 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003b1c:	f7fd f8a2 	bl	8000c64 <HAL_PWREx_EnableOverDrive>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003b26:	f000 f833 	bl	8003b90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b2a:	230f      	movs	r3, #15
 8003b2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b30:	2302      	movs	r3, #2
 8003b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8003b3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8003b44:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003b48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003b4c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003b50:	2106      	movs	r1, #6
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fd fb7a 	bl	800124c <HAL_RCC_ClockConfig>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8003b5e:	f000 f817 	bl	8003b90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b66:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b6c:	f107 0308 	add.w	r3, r7, #8
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fd fd63 	bl	800163c <HAL_RCCEx_PeriphCLKConfig>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8003b7c:	f000 f808 	bl	8003b90 <Error_Handler>
  }
}
 8003b80:	bf00      	nop
 8003b82:	37d0      	adds	r7, #208	; 0xd0
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	40007000 	.word	0x40007000

08003b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <MX_SPI1_Init+0x74>)
 8003ba6:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <MX_SPI1_Init+0x78>)
 8003ba8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003baa:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <MX_SPI1_Init+0x74>)
 8003bac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003bb2:	4b18      	ldr	r3, [pc, #96]	; (8003c14 <MX_SPI1_Init+0x74>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bb8:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <MX_SPI1_Init+0x74>)
 8003bba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003bbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003bc0:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <MX_SPI1_Init+0x74>)
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <MX_SPI1_Init+0x74>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bcc:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <MX_SPI1_Init+0x74>)
 8003bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <MX_SPI1_Init+0x74>)
 8003bd6:	2208      	movs	r2, #8
 8003bd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bda:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <MX_SPI1_Init+0x74>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <MX_SPI1_Init+0x74>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <MX_SPI1_Init+0x74>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <MX_SPI1_Init+0x74>)
 8003bee:	2207      	movs	r2, #7
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <MX_SPI1_Init+0x74>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <MX_SPI1_Init+0x74>)
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bfe:	4805      	ldr	r0, [pc, #20]	; (8003c14 <MX_SPI1_Init+0x74>)
 8003c00:	f7fe f90a 	bl	8001e18 <HAL_SPI_Init>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003c0a:	f7ff ffc1 	bl	8003b90 <Error_Handler>
  }

}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000064 	.word	0x20000064
 8003c18:	40013000 	.word	0x40013000

08003c1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	; 0x28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a25      	ldr	r2, [pc, #148]	; (8003cd0 <HAL_SPI_MspInit+0xb4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d143      	bne.n	8003cc6 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c3e:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	4a24      	ldr	r2, [pc, #144]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c48:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4a:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c56:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c6e:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7a:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003c86:	2360      	movs	r3, #96	; 0x60
 8003c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c92:	2303      	movs	r3, #3
 8003c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c96:	2305      	movs	r3, #5
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9a:	f107 0314 	add.w	r3, r7, #20
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	480d      	ldr	r0, [pc, #52]	; (8003cd8 <HAL_SPI_MspInit+0xbc>)
 8003ca2:	f7fc fdf3 	bl	800088c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003ca6:	2320      	movs	r3, #32
 8003ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003caa:	2302      	movs	r3, #2
 8003cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003cb6:	2305      	movs	r3, #5
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cba:	f107 0314 	add.w	r3, r7, #20
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4806      	ldr	r0, [pc, #24]	; (8003cdc <HAL_SPI_MspInit+0xc0>)
 8003cc2:	f7fc fde3 	bl	800088c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	3728      	adds	r7, #40	; 0x28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40013000 	.word	0x40013000
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40020000 	.word	0x40020000
 8003cdc:	40020400 	.word	0x40020400

08003ce0 <init_adc>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void init_adc(void) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
	uint8_t registervalue[6];
	/*Disable interrupt*/
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8003ce6:	2028      	movs	r0, #40	; 0x28
 8003ce8:	f7fc fdb5 	bl	8000856 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_WritePin(nRES_GPIO_Port, nRES_Pin, GPIO_PIN_SET); //Reset auf 1 setzen
 8003cec:	2201      	movs	r2, #1
 8003cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cf2:	487a      	ldr	r0, [pc, #488]	; (8003edc <init_adc+0x1fc>)
 8003cf4:	f7fc ff74 	bl	8000be0 <HAL_GPIO_WritePin>
	//POwer UP
	HAL_Delay(16);
 8003cf8:	2010      	movs	r0, #16
 8003cfa:	f7fc fc63 	bl	80005c4 <HAL_Delay>
	HAL_GPIO_WritePin(START_GPIO_Port, START_Pin, GPIO_PIN_SET); // START  HIGH
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d04:	4876      	ldr	r0, [pc, #472]	; (8003ee0 <init_adc+0x200>)
 8003d06:	f7fc ff6b 	bl	8000be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(nCS_GPIO_Port, nCS_Pin, GPIO_PIN_RESET); //  CS  LOW
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d10:	4873      	ldr	r0, [pc, #460]	; (8003ee0 <init_adc+0x200>)
 8003d12:	f7fc ff65 	bl	8000be0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003d16:	2002      	movs	r0, #2
 8003d18:	f7fc fc54 	bl	80005c4 <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, &reset_command[0], 1, 10); // RESET
 8003d1c:	230a      	movs	r3, #10
 8003d1e:	2201      	movs	r2, #1
 8003d20:	4970      	ldr	r1, [pc, #448]	; (8003ee4 <init_adc+0x204>)
 8003d22:	4871      	ldr	r0, [pc, #452]	; (8003ee8 <init_adc+0x208>)
 8003d24:	f7fe f90a 	bl	8001f3c <HAL_SPI_Transmit>
	HAL_Delay(1);
 8003d28:	2001      	movs	r0, #1
 8003d2a:	f7fc fc4b 	bl	80005c4 <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, &sdatac_command[0], 1, 10); //STOP READ DATA CONTIN MODE
 8003d2e:	230a      	movs	r3, #10
 8003d30:	2201      	movs	r2, #1
 8003d32:	496e      	ldr	r1, [pc, #440]	; (8003eec <init_adc+0x20c>)
 8003d34:	486c      	ldr	r0, [pc, #432]	; (8003ee8 <init_adc+0x208>)
 8003d36:	f7fe f901 	bl	8001f3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &wreg_command[0], 1, 10); // REG Register beschreiben
 8003d3a:	230a      	movs	r3, #10
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	496c      	ldr	r1, [pc, #432]	; (8003ef0 <init_adc+0x210>)
 8003d40:	4869      	ldr	r0, [pc, #420]	; (8003ee8 <init_adc+0x208>)
 8003d42:	f7fe f8fb 	bl	8001f3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &wreg_command[1], 1, 10);
 8003d46:	230a      	movs	r3, #10
 8003d48:	2201      	movs	r2, #1
 8003d4a:	496a      	ldr	r1, [pc, #424]	; (8003ef4 <init_adc+0x214>)
 8003d4c:	4866      	ldr	r0, [pc, #408]	; (8003ee8 <init_adc+0x208>)
 8003d4e:	f7fe f8f5 	bl	8001f3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &wreg_command[2], 1, 10);
 8003d52:	230a      	movs	r3, #10
 8003d54:	2201      	movs	r2, #1
 8003d56:	4968      	ldr	r1, [pc, #416]	; (8003ef8 <init_adc+0x218>)
 8003d58:	4863      	ldr	r0, [pc, #396]	; (8003ee8 <init_adc+0x208>)
 8003d5a:	f7fe f8ef 	bl	8001f3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &wreg_command[3], 1, 10);
 8003d5e:	230a      	movs	r3, #10
 8003d60:	2201      	movs	r2, #1
 8003d62:	4966      	ldr	r1, [pc, #408]	; (8003efc <init_adc+0x21c>)
 8003d64:	4860      	ldr	r0, [pc, #384]	; (8003ee8 <init_adc+0x208>)
 8003d66:	f7fe f8e9 	bl	8001f3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &wreg_command[4], 1, 10);
 8003d6a:	230a      	movs	r3, #10
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	4964      	ldr	r1, [pc, #400]	; (8003f00 <init_adc+0x220>)
 8003d70:	485d      	ldr	r0, [pc, #372]	; (8003ee8 <init_adc+0x208>)
 8003d72:	f7fe f8e3 	bl	8001f3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &wreg_command[5], 1, 10);
 8003d76:	230a      	movs	r3, #10
 8003d78:	2201      	movs	r2, #1
 8003d7a:	4962      	ldr	r1, [pc, #392]	; (8003f04 <init_adc+0x224>)
 8003d7c:	485a      	ldr	r0, [pc, #360]	; (8003ee8 <init_adc+0x208>)
 8003d7e:	f7fe f8dd 	bl	8001f3c <HAL_SPI_Transmit>

	/*Do self calibration*/
	HAL_SPI_Transmit(&hspi1, &selfocal, 1, 10);
 8003d82:	230a      	movs	r3, #10
 8003d84:	2201      	movs	r2, #1
 8003d86:	4960      	ldr	r1, [pc, #384]	; (8003f08 <init_adc+0x228>)
 8003d88:	4857      	ldr	r0, [pc, #348]	; (8003ee8 <init_adc+0x208>)
 8003d8a:	f7fe f8d7 	bl	8001f3c <HAL_SPI_Transmit>
	HAL_Delay(9); /* According to datasheet page 33 table 13 */
 8003d8e:	2009      	movs	r0, #9
 8003d90:	f7fc fc18 	bl	80005c4 <HAL_Delay>

	HAL_SPI_Transmit(&hspi1, &readregister[0], 1, 10); // TEST ob WREG ERFolgreich
 8003d94:	230a      	movs	r3, #10
 8003d96:	2201      	movs	r2, #1
 8003d98:	495c      	ldr	r1, [pc, #368]	; (8003f0c <init_adc+0x22c>)
 8003d9a:	4853      	ldr	r0, [pc, #332]	; (8003ee8 <init_adc+0x208>)
 8003d9c:	f7fe f8ce 	bl	8001f3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &readregister[1], 1, 10); // TEST ob WREG ERFolgreich
 8003da0:	230a      	movs	r3, #10
 8003da2:	2201      	movs	r2, #1
 8003da4:	495a      	ldr	r1, [pc, #360]	; (8003f10 <init_adc+0x230>)
 8003da6:	4850      	ldr	r0, [pc, #320]	; (8003ee8 <init_adc+0x208>)
 8003da8:	f7fe f8c8 	bl	8001f3c <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &registervalue[0], 1, 20); // TEST ob WREG ERFolgreich
 8003dac:	1d39      	adds	r1, r7, #4
 8003dae:	2314      	movs	r3, #20
 8003db0:	2201      	movs	r2, #1
 8003db2:	484d      	ldr	r0, [pc, #308]	; (8003ee8 <init_adc+0x208>)
 8003db4:	f7fe fa28 	bl	8002208 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &registervalue[1], 1, 20); // TEST ob WREG ERFolgreich
 8003db8:	1d3b      	adds	r3, r7, #4
 8003dba:	1c59      	adds	r1, r3, #1
 8003dbc:	2314      	movs	r3, #20
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	4849      	ldr	r0, [pc, #292]	; (8003ee8 <init_adc+0x208>)
 8003dc2:	f7fe fa21 	bl	8002208 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &registervalue[2], 1, 20); // TEST ob WREG ERFolgreich
 8003dc6:	1d3b      	adds	r3, r7, #4
 8003dc8:	1c99      	adds	r1, r3, #2
 8003dca:	2314      	movs	r3, #20
 8003dcc:	2201      	movs	r2, #1
 8003dce:	4846      	ldr	r0, [pc, #280]	; (8003ee8 <init_adc+0x208>)
 8003dd0:	f7fe fa1a 	bl	8002208 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &registervalue[3], 1, 20); // TEST ob WREG ERFolgreich
 8003dd4:	1d3b      	adds	r3, r7, #4
 8003dd6:	1cd9      	adds	r1, r3, #3
 8003dd8:	2314      	movs	r3, #20
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4842      	ldr	r0, [pc, #264]	; (8003ee8 <init_adc+0x208>)
 8003dde:	f7fe fa13 	bl	8002208 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(nRES_GPIO_Port, nRES_Pin, GPIO_PIN_RESET);
 8003de2:	2200      	movs	r2, #0
 8003de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003de8:	483c      	ldr	r0, [pc, #240]	; (8003edc <init_adc+0x1fc>)
 8003dea:	f7fc fef9 	bl	8000be0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003dee:	200a      	movs	r0, #10
 8003df0:	f7fc fbe8 	bl	80005c4 <HAL_Delay>
	HAL_GPIO_WritePin(nRES_GPIO_Port, nRES_Pin, GPIO_PIN_SET);
 8003df4:	2201      	movs	r2, #1
 8003df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003dfa:	4838      	ldr	r0, [pc, #224]	; (8003edc <init_adc+0x1fc>)
 8003dfc:	f7fc fef0 	bl	8000be0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &readregister[0], 1, 10); // TEST ob WREG ERFolgreich
 8003e00:	230a      	movs	r3, #10
 8003e02:	2201      	movs	r2, #1
 8003e04:	4941      	ldr	r1, [pc, #260]	; (8003f0c <init_adc+0x22c>)
 8003e06:	4838      	ldr	r0, [pc, #224]	; (8003ee8 <init_adc+0x208>)
 8003e08:	f7fe f898 	bl	8001f3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &readregister[1], 1, 10); // TEST ob WREG ERFolgreich
 8003e0c:	230a      	movs	r3, #10
 8003e0e:	2201      	movs	r2, #1
 8003e10:	493f      	ldr	r1, [pc, #252]	; (8003f10 <init_adc+0x230>)
 8003e12:	4835      	ldr	r0, [pc, #212]	; (8003ee8 <init_adc+0x208>)
 8003e14:	f7fe f892 	bl	8001f3c <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &registervalue[0], 1, 20); // TEST ob WREG ERFolgreich
 8003e18:	1d39      	adds	r1, r7, #4
 8003e1a:	2314      	movs	r3, #20
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	4832      	ldr	r0, [pc, #200]	; (8003ee8 <init_adc+0x208>)
 8003e20:	f7fe f9f2 	bl	8002208 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &registervalue[1], 1, 20); // TEST ob WREG ERFolgreich
 8003e24:	1d3b      	adds	r3, r7, #4
 8003e26:	1c59      	adds	r1, r3, #1
 8003e28:	2314      	movs	r3, #20
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	482e      	ldr	r0, [pc, #184]	; (8003ee8 <init_adc+0x208>)
 8003e2e:	f7fe f9eb 	bl	8002208 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &registervalue[2], 1, 20); // TEST ob WREG ERFolgreich
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	1c99      	adds	r1, r3, #2
 8003e36:	2314      	movs	r3, #20
 8003e38:	2201      	movs	r2, #1
 8003e3a:	482b      	ldr	r0, [pc, #172]	; (8003ee8 <init_adc+0x208>)
 8003e3c:	f7fe f9e4 	bl	8002208 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &registervalue[3], 1, 20); // TEST ob WREG ERFolgreich
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	1cd9      	adds	r1, r3, #3
 8003e44:	2314      	movs	r3, #20
 8003e46:	2201      	movs	r2, #1
 8003e48:	4827      	ldr	r0, [pc, #156]	; (8003ee8 <init_adc+0x208>)
 8003e4a:	f7fe f9dd 	bl	8002208 <HAL_SPI_Receive>

	HAL_SPI_Transmit(&hspi1, &sync_command[0], 1, 20); // SYNC
 8003e4e:	2314      	movs	r3, #20
 8003e50:	2201      	movs	r2, #1
 8003e52:	4930      	ldr	r1, [pc, #192]	; (8003f14 <init_adc+0x234>)
 8003e54:	4824      	ldr	r0, [pc, #144]	; (8003ee8 <init_adc+0x208>)
 8003e56:	f7fe f871 	bl	8001f3c <HAL_SPI_Transmit>
	HAL_Delay(2);
 8003e5a:	2002      	movs	r0, #2
 8003e5c:	f7fc fbb2 	bl	80005c4 <HAL_Delay>
	HAL_GPIO_WritePin(nCS_GPIO_Port, nCS_Pin, GPIO_PIN_SET); //  CS -> HIGH
 8003e60:	2201      	movs	r2, #1
 8003e62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e66:	481e      	ldr	r0, [pc, #120]	; (8003ee0 <init_adc+0x200>)
 8003e68:	f7fc feba 	bl	8000be0 <HAL_GPIO_WritePin>

	//Testfunktion
	uint32_t test_variable = adc_test();
 8003e6c:	f7ff fac0 	bl	80033f0 <adc_test>
 8003e70:	60f8      	str	r0, [r7, #12]
	while (test_variable != 0) {
 8003e72:	e023      	b.n	8003ebc <init_adc+0x1dc>
		HAL_GPIO_WritePin(nRES_GPIO_Port, nRES_Pin, GPIO_PIN_RESET); //kurzer Reset
 8003e74:	2200      	movs	r2, #0
 8003e76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e7a:	4818      	ldr	r0, [pc, #96]	; (8003edc <init_adc+0x1fc>)
 8003e7c:	f7fc feb0 	bl	8000be0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(nRES_GPIO_Port, nRES_Pin, GPIO_PIN_SET); //Rest vorbei
 8003e80:	2201      	movs	r2, #1
 8003e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e86:	4815      	ldr	r0, [pc, #84]	; (8003edc <init_adc+0x1fc>)
 8003e88:	f7fc feaa 	bl	8000be0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(START_GPIO_Port, START_Pin, GPIO_PIN_RESET); // START  low (neustart)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e92:	4813      	ldr	r0, [pc, #76]	; (8003ee0 <init_adc+0x200>)
 8003e94:	f7fc fea4 	bl	8000be0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(START_GPIO_Port, START_Pin, GPIO_PIN_SET); // START  HIGH (neustart vorbei)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e9e:	4810      	ldr	r0, [pc, #64]	; (8003ee0 <init_adc+0x200>)
 8003ea0:	f7fc fe9e 	bl	8000be0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(nCS_GPIO_Port, nCS_Pin, GPIO_PIN_SET); //  CS  (CS neusetzen aus spaß haha xd)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003eaa:	480d      	ldr	r0, [pc, #52]	; (8003ee0 <init_adc+0x200>)
 8003eac:	f7fc fe98 	bl	8000be0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(nCS_GPIO_Port, nCS_Pin, GPIO_PIN_RESET); //  CS  LOW (SPI ist wieder da)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003eb6:	480a      	ldr	r0, [pc, #40]	; (8003ee0 <init_adc+0x200>)
 8003eb8:	f7fc fe92 	bl	8000be0 <HAL_GPIO_WritePin>
	while (test_variable != 0) {
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1d8      	bne.n	8003e74 <init_adc+0x194>

	}
// Wait for DRDY to transition low // um INIT durchführen zu können -> ohne Interrupt Unterbrechung
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2105      	movs	r1, #5
 8003ec6:	2028      	movs	r0, #40	; 0x28
 8003ec8:	f7fc fc9b 	bl	8000802 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ecc:	2028      	movs	r0, #40	; 0x28
 8003ece:	f7fc fcb4 	bl	800083a <HAL_NVIC_EnableIRQ>

}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40021400 	.word	0x40021400
 8003ee0:	40020c00 	.word	0x40020c00
 8003ee4:	20000024 	.word	0x20000024
 8003ee8:	20000064 	.word	0x20000064
 8003eec:	20000028 	.word	0x20000028
 8003ef0:	2000002c 	.word	0x2000002c
 8003ef4:	2000002d 	.word	0x2000002d
 8003ef8:	2000002e 	.word	0x2000002e
 8003efc:	2000002f 	.word	0x2000002f
 8003f00:	20000030 	.word	0x20000030
 8003f04:	20000031 	.word	0x20000031
 8003f08:	2000003c 	.word	0x2000003c
 8003f0c:	2000001c 	.word	0x2000001c
 8003f10:	2000001d 	.word	0x2000001d
 8003f14:	20000034 	.word	0x20000034

08003f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <HAL_MspInit+0x44>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	4a0e      	ldr	r2, [pc, #56]	; (8003f5c <HAL_MspInit+0x44>)
 8003f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f28:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2a:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <HAL_MspInit+0x44>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <HAL_MspInit+0x44>)
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <HAL_MspInit+0x44>)
 8003f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f40:	6453      	str	r3, [r2, #68]	; 0x44
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_MspInit+0x44>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40023800 	.word	0x40023800

08003f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f72:	e7fe      	b.n	8003f72 <HardFault_Handler+0x4>

08003f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f78:	e7fe      	b.n	8003f78 <MemManage_Handler+0x4>

08003f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f7e:	e7fe      	b.n	8003f7e <BusFault_Handler+0x4>

08003f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f84:	e7fe      	b.n	8003f84 <UsageFault_Handler+0x4>

08003f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f86:	b480      	push	{r7}
 8003f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f98:	bf00      	nop
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fa6:	bf00      	nop
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 HAL_IncTick();
 8003fb4:	f7fc fae6 	bl	8000584 <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003fc0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003fc4:	f7fc fe26 	bl	8000c14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003fc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003fcc:	f7fc fe22 	bl	8000c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fd0:	bf00      	nop
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <SystemInit+0x28>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	4a07      	ldr	r2, [pc, #28]	; (8003ffc <SystemInit+0x28>)
 8003fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003fe8:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <SystemInit+0x28>)
 8003fea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fee:	609a      	str	r2, [r3, #8]
#endif
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004004:	4b14      	ldr	r3, [pc, #80]	; (8004058 <MX_USART3_UART_Init+0x58>)
 8004006:	4a15      	ldr	r2, [pc, #84]	; (800405c <MX_USART3_UART_Init+0x5c>)
 8004008:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800400a:	4b13      	ldr	r3, [pc, #76]	; (8004058 <MX_USART3_UART_Init+0x58>)
 800400c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004010:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004012:	4b11      	ldr	r3, [pc, #68]	; (8004058 <MX_USART3_UART_Init+0x58>)
 8004014:	2200      	movs	r2, #0
 8004016:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004018:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <MX_USART3_UART_Init+0x58>)
 800401a:	2200      	movs	r2, #0
 800401c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800401e:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <MX_USART3_UART_Init+0x58>)
 8004020:	2200      	movs	r2, #0
 8004022:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004024:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <MX_USART3_UART_Init+0x58>)
 8004026:	220c      	movs	r2, #12
 8004028:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <MX_USART3_UART_Init+0x58>)
 800402c:	2200      	movs	r2, #0
 800402e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004030:	4b09      	ldr	r3, [pc, #36]	; (8004058 <MX_USART3_UART_Init+0x58>)
 8004032:	2200      	movs	r2, #0
 8004034:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004036:	4b08      	ldr	r3, [pc, #32]	; (8004058 <MX_USART3_UART_Init+0x58>)
 8004038:	2200      	movs	r2, #0
 800403a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <MX_USART3_UART_Init+0x58>)
 800403e:	2200      	movs	r2, #0
 8004040:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004042:	4805      	ldr	r0, [pc, #20]	; (8004058 <MX_USART3_UART_Init+0x58>)
 8004044:	f7fe fd90 	bl	8002b68 <HAL_UART_Init>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800404e:	f7ff fd9f 	bl	8003b90 <Error_Handler>
  }

}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	200000c8 	.word	0x200000c8
 800405c:	40004800 	.word	0x40004800

08004060 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004068:	f107 0314 	add.w	r3, r7, #20
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	60da      	str	r2, [r3, #12]
 8004076:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <HAL_UART_MspInit+0x7c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d128      	bne.n	80040d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004082:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <HAL_UART_MspInit+0x80>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <HAL_UART_MspInit+0x80>)
 8004088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800408c:	6413      	str	r3, [r2, #64]	; 0x40
 800408e:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <HAL_UART_MspInit+0x80>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <HAL_UART_MspInit+0x80>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <HAL_UART_MspInit+0x80>)
 80040a0:	f043 0308 	orr.w	r3, r3, #8
 80040a4:	6313      	str	r3, [r2, #48]	; 0x30
 80040a6:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <HAL_UART_MspInit+0x80>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80040b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b8:	2302      	movs	r3, #2
 80040ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c0:	2303      	movs	r3, #3
 80040c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040c4:	2307      	movs	r3, #7
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040c8:	f107 0314 	add.w	r3, r7, #20
 80040cc:	4619      	mov	r1, r3
 80040ce:	4805      	ldr	r0, [pc, #20]	; (80040e4 <HAL_UART_MspInit+0x84>)
 80040d0:	f7fc fbdc 	bl	800088c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80040d4:	bf00      	nop
 80040d6:	3728      	adds	r7, #40	; 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40004800 	.word	0x40004800
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40020c00 	.word	0x40020c00

080040e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80040e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004120 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80040ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80040ee:	e003      	b.n	80040f8 <LoopCopyDataInit>

080040f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80040f0:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80040f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80040f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80040f6:	3104      	adds	r1, #4

080040f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80040f8:	480b      	ldr	r0, [pc, #44]	; (8004128 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80040fa:	4b0c      	ldr	r3, [pc, #48]	; (800412c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80040fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80040fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004100:	d3f6      	bcc.n	80040f0 <CopyDataInit>
  ldr  r2, =_sbss
 8004102:	4a0b      	ldr	r2, [pc, #44]	; (8004130 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004104:	e002      	b.n	800410c <LoopFillZerobss>

08004106 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004106:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004108:	f842 3b04 	str.w	r3, [r2], #4

0800410c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800410e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004110:	d3f9      	bcc.n	8004106 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004112:	f7ff ff5f 	bl	8003fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004116:	f000 f811 	bl	800413c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800411a:	f7ff fc55 	bl	80039c8 <main>
  bx  lr    
 800411e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004120:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004124:	080041e0 	.word	0x080041e0
  ldr  r0, =_sdata
 8004128:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800412c:	20000044 	.word	0x20000044
  ldr  r2, =_sbss
 8004130:	20000044 	.word	0x20000044
  ldr  r3, = _ebss
 8004134:	20000148 	.word	0x20000148

08004138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004138:	e7fe      	b.n	8004138 <ADC_IRQHandler>
	...

0800413c <__libc_init_array>:
 800413c:	b570      	push	{r4, r5, r6, lr}
 800413e:	4e0d      	ldr	r6, [pc, #52]	; (8004174 <__libc_init_array+0x38>)
 8004140:	4c0d      	ldr	r4, [pc, #52]	; (8004178 <__libc_init_array+0x3c>)
 8004142:	1ba4      	subs	r4, r4, r6
 8004144:	10a4      	asrs	r4, r4, #2
 8004146:	2500      	movs	r5, #0
 8004148:	42a5      	cmp	r5, r4
 800414a:	d109      	bne.n	8004160 <__libc_init_array+0x24>
 800414c:	4e0b      	ldr	r6, [pc, #44]	; (800417c <__libc_init_array+0x40>)
 800414e:	4c0c      	ldr	r4, [pc, #48]	; (8004180 <__libc_init_array+0x44>)
 8004150:	f000 f820 	bl	8004194 <_init>
 8004154:	1ba4      	subs	r4, r4, r6
 8004156:	10a4      	asrs	r4, r4, #2
 8004158:	2500      	movs	r5, #0
 800415a:	42a5      	cmp	r5, r4
 800415c:	d105      	bne.n	800416a <__libc_init_array+0x2e>
 800415e:	bd70      	pop	{r4, r5, r6, pc}
 8004160:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004164:	4798      	blx	r3
 8004166:	3501      	adds	r5, #1
 8004168:	e7ee      	b.n	8004148 <__libc_init_array+0xc>
 800416a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800416e:	4798      	blx	r3
 8004170:	3501      	adds	r5, #1
 8004172:	e7f2      	b.n	800415a <__libc_init_array+0x1e>
 8004174:	080041d8 	.word	0x080041d8
 8004178:	080041d8 	.word	0x080041d8
 800417c:	080041d8 	.word	0x080041d8
 8004180:	080041dc 	.word	0x080041dc

08004184 <memset>:
 8004184:	4402      	add	r2, r0
 8004186:	4603      	mov	r3, r0
 8004188:	4293      	cmp	r3, r2
 800418a:	d100      	bne.n	800418e <memset+0xa>
 800418c:	4770      	bx	lr
 800418e:	f803 1b01 	strb.w	r1, [r3], #1
 8004192:	e7f9      	b.n	8004188 <memset+0x4>

08004194 <_init>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	bf00      	nop
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr

080041a0 <_fini>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr
