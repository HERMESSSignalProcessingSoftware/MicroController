
F746StampTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e78  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003040  08003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003058  08003058  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003060  08003060  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08003068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  200000c0  08003128  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08003128  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be26  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dec  00000000  00000000  0002bf16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  0002dd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f0  00000000  00000000  0002e728  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000251cc  00000000  00000000  0002f018  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a45d  00000000  00000000  000541e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3403  00000000  00000000  0005e641  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141a44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002708  00000000  00000000  00141ac0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000c0 	.word	0x200000c0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003028 	.word	0x08003028

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000c4 	.word	0x200000c4
 8000204:	08003028 	.word	0x08003028

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f929 	bl	8000764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f000 f806 	bl	8000524 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f002 fc48 	bl	8002dac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_InitTick+0x54>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x58>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053a:	fbb3 f3f1 	udiv	r3, r3, r1
 800053e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f943 	bl	80007ce <HAL_SYSTICK_Config>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	e00e      	b.n	8000570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d80a      	bhi.n	800056e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000558:	2200      	movs	r2, #0
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	f04f 30ff 	mov.w	r0, #4294967295
 8000560:	f000 f90b 	bl	800077a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000564:	4a06      	ldr	r2, [pc, #24]	; (8000580 <HAL_InitTick+0x5c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056a:	2300      	movs	r3, #0
 800056c:	e000      	b.n	8000570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200000bc 	.word	0x200000bc
 800057c:	20000004 	.word	0x20000004
 8000580:	20000000 	.word	0x20000000

08000584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_IncTick+0x20>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x24>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4413      	add	r3, r2
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HAL_IncTick+0x24>)
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004
 80005a8:	200000dc 	.word	0x200000dc

080005ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return uwTick;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <HAL_GetTick+0x14>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	200000dc 	.word	0x200000dc

080005c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <__NVIC_SetPriorityGrouping+0x40>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <__NVIC_SetPriorityGrouping+0x44>)
 80005ee:	4313      	orrs	r3, r2
 80005f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005f2:	4a04      	ldr	r2, [pc, #16]	; (8000604 <__NVIC_SetPriorityGrouping+0x40>)
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	60d3      	str	r3, [r2, #12]
}
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	05fa0000 	.word	0x05fa0000

0800060c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <__NVIC_GetPriorityGrouping+0x18>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	f003 0307 	and.w	r3, r3, #7
}
 800061a:	4618      	mov	r0, r3
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	db0b      	blt.n	8000652 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	f003 021f 	and.w	r2, r3, #31
 8000640:	4907      	ldr	r1, [pc, #28]	; (8000660 <__NVIC_EnableIRQ+0x38>)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	095b      	lsrs	r3, r3, #5
 8000648:	2001      	movs	r0, #1
 800064a:	fa00 f202 	lsl.w	r2, r0, r2
 800064e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000e100 	.word	0xe000e100

08000664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	db0a      	blt.n	800068e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	b2da      	uxtb	r2, r3
 800067c:	490c      	ldr	r1, [pc, #48]	; (80006b0 <__NVIC_SetPriority+0x4c>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800068c:	e00a      	b.n	80006a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <__NVIC_SetPriority+0x50>)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	f003 030f 	and.w	r3, r3, #15
 800069a:	3b04      	subs	r3, #4
 800069c:	0112      	lsls	r2, r2, #4
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	440b      	add	r3, r1
 80006a2:	761a      	strb	r2, [r3, #24]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000e100 	.word	0xe000e100
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	f1c3 0307 	rsb	r3, r3, #7
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	bf28      	it	cs
 80006d6:	2304      	movcs	r3, #4
 80006d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3304      	adds	r3, #4
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d902      	bls.n	80006e8 <NVIC_EncodePriority+0x30>
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3b03      	subs	r3, #3
 80006e6:	e000      	b.n	80006ea <NVIC_EncodePriority+0x32>
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	f04f 32ff 	mov.w	r2, #4294967295
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43da      	mvns	r2, r3
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	401a      	ands	r2, r3
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	f04f 31ff 	mov.w	r1, #4294967295
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	43d9      	mvns	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	4313      	orrs	r3, r2
         );
}
 8000712:	4618      	mov	r0, r3
 8000714:	3724      	adds	r7, #36	; 0x24
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000730:	d301      	bcc.n	8000736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000732:	2301      	movs	r3, #1
 8000734:	e00f      	b.n	8000756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <SysTick_Config+0x40>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073e:	210f      	movs	r1, #15
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f7ff ff8e 	bl	8000664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <SysTick_Config+0x40>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <SysTick_Config+0x40>)
 8000750:	2207      	movs	r2, #7
 8000752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	e000e010 	.word	0xe000e010

08000764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff29 	bl	80005c4 <__NVIC_SetPriorityGrouping>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800078c:	f7ff ff3e 	bl	800060c <__NVIC_GetPriorityGrouping>
 8000790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	68b9      	ldr	r1, [r7, #8]
 8000796:	6978      	ldr	r0, [r7, #20]
 8000798:	f7ff ff8e 	bl	80006b8 <NVIC_EncodePriority>
 800079c:	4602      	mov	r2, r0
 800079e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff5d 	bl	8000664 <__NVIC_SetPriority>
}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff31 	bl	8000628 <__NVIC_EnableIRQ>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ffa2 	bl	8000720 <SysTick_Config>
 80007dc:	4603      	mov	r3, r0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b089      	sub	sp, #36	; 0x24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
 8000806:	e175      	b.n	8000af4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000808:	2201      	movs	r2, #1
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	4013      	ands	r3, r2
 800081a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	429a      	cmp	r2, r3
 8000822:	f040 8164 	bne.w	8000aee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d00b      	beq.n	8000846 <HAL_GPIO_Init+0x5e>
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d007      	beq.n	8000846 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800083a:	2b11      	cmp	r3, #17
 800083c:	d003      	beq.n	8000846 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b12      	cmp	r3, #18
 8000844:	d130      	bne.n	80008a8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	2203      	movs	r2, #3
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	43db      	mvns	r3, r3
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	4013      	ands	r3, r2
 800085c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	68da      	ldr	r2, [r3, #12]
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	4313      	orrs	r3, r2
 800086e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	69ba      	ldr	r2, [r7, #24]
 8000874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800087c:	2201      	movs	r2, #1
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	4013      	ands	r3, r2
 800088a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	091b      	lsrs	r3, r3, #4
 8000892:	f003 0201 	and.w	r2, r3, #1
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	4313      	orrs	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	2203      	movs	r2, #3
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	4013      	ands	r3, r2
 80008be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	689a      	ldr	r2, [r3, #8]
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d003      	beq.n	80008e8 <HAL_GPIO_Init+0x100>
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b12      	cmp	r3, #18
 80008e6:	d123      	bne.n	8000930 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	08da      	lsrs	r2, r3, #3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3208      	adds	r2, #8
 80008f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	f003 0307 	and.w	r3, r3, #7
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	220f      	movs	r2, #15
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	4013      	ands	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	691a      	ldr	r2, [r3, #16]
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	4313      	orrs	r3, r2
 8000920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	08da      	lsrs	r2, r3, #3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3208      	adds	r2, #8
 800092a:	69b9      	ldr	r1, [r7, #24]
 800092c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2203      	movs	r2, #3
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	4013      	ands	r3, r2
 8000946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 0203 	and.w	r2, r3, #3
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4313      	orrs	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 80be 	beq.w	8000aee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b65      	ldr	r3, [pc, #404]	; (8000b08 <HAL_GPIO_Init+0x320>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	4a64      	ldr	r2, [pc, #400]	; (8000b08 <HAL_GPIO_Init+0x320>)
 8000978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097c:	6453      	str	r3, [r2, #68]	; 0x44
 800097e:	4b62      	ldr	r3, [pc, #392]	; (8000b08 <HAL_GPIO_Init+0x320>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800098a:	4a60      	ldr	r2, [pc, #384]	; (8000b0c <HAL_GPIO_Init+0x324>)
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	089b      	lsrs	r3, r3, #2
 8000990:	3302      	adds	r3, #2
 8000992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000996:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f003 0303 	and.w	r3, r3, #3
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	220f      	movs	r2, #15
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	4013      	ands	r3, r2
 80009ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a57      	ldr	r2, [pc, #348]	; (8000b10 <HAL_GPIO_Init+0x328>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d037      	beq.n	8000a26 <HAL_GPIO_Init+0x23e>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a56      	ldr	r2, [pc, #344]	; (8000b14 <HAL_GPIO_Init+0x32c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d031      	beq.n	8000a22 <HAL_GPIO_Init+0x23a>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a55      	ldr	r2, [pc, #340]	; (8000b18 <HAL_GPIO_Init+0x330>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d02b      	beq.n	8000a1e <HAL_GPIO_Init+0x236>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a54      	ldr	r2, [pc, #336]	; (8000b1c <HAL_GPIO_Init+0x334>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d025      	beq.n	8000a1a <HAL_GPIO_Init+0x232>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a53      	ldr	r2, [pc, #332]	; (8000b20 <HAL_GPIO_Init+0x338>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d01f      	beq.n	8000a16 <HAL_GPIO_Init+0x22e>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a52      	ldr	r2, [pc, #328]	; (8000b24 <HAL_GPIO_Init+0x33c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d019      	beq.n	8000a12 <HAL_GPIO_Init+0x22a>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a51      	ldr	r2, [pc, #324]	; (8000b28 <HAL_GPIO_Init+0x340>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d013      	beq.n	8000a0e <HAL_GPIO_Init+0x226>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a50      	ldr	r2, [pc, #320]	; (8000b2c <HAL_GPIO_Init+0x344>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d00d      	beq.n	8000a0a <HAL_GPIO_Init+0x222>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4f      	ldr	r2, [pc, #316]	; (8000b30 <HAL_GPIO_Init+0x348>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d007      	beq.n	8000a06 <HAL_GPIO_Init+0x21e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4e      	ldr	r2, [pc, #312]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d101      	bne.n	8000a02 <HAL_GPIO_Init+0x21a>
 80009fe:	2309      	movs	r3, #9
 8000a00:	e012      	b.n	8000a28 <HAL_GPIO_Init+0x240>
 8000a02:	230a      	movs	r3, #10
 8000a04:	e010      	b.n	8000a28 <HAL_GPIO_Init+0x240>
 8000a06:	2308      	movs	r3, #8
 8000a08:	e00e      	b.n	8000a28 <HAL_GPIO_Init+0x240>
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	e00c      	b.n	8000a28 <HAL_GPIO_Init+0x240>
 8000a0e:	2306      	movs	r3, #6
 8000a10:	e00a      	b.n	8000a28 <HAL_GPIO_Init+0x240>
 8000a12:	2305      	movs	r3, #5
 8000a14:	e008      	b.n	8000a28 <HAL_GPIO_Init+0x240>
 8000a16:	2304      	movs	r3, #4
 8000a18:	e006      	b.n	8000a28 <HAL_GPIO_Init+0x240>
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e004      	b.n	8000a28 <HAL_GPIO_Init+0x240>
 8000a1e:	2302      	movs	r3, #2
 8000a20:	e002      	b.n	8000a28 <HAL_GPIO_Init+0x240>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <HAL_GPIO_Init+0x240>
 8000a26:	2300      	movs	r3, #0
 8000a28:	69fa      	ldr	r2, [r7, #28]
 8000a2a:	f002 0203 	and.w	r2, r2, #3
 8000a2e:	0092      	lsls	r2, r2, #2
 8000a30:	4093      	lsls	r3, r2
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a38:	4934      	ldr	r1, [pc, #208]	; (8000b0c <HAL_GPIO_Init+0x324>)
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	089b      	lsrs	r3, r3, #2
 8000a3e:	3302      	adds	r3, #2
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a46:	4b3c      	ldr	r3, [pc, #240]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	4013      	ands	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a6a:	4a33      	ldr	r2, [pc, #204]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a70:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d003      	beq.n	8000a94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a94:	4a28      	ldr	r2, [pc, #160]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a9a:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000abe:	4a1e      	ldr	r2, [pc, #120]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ae8:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3301      	adds	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	2b0f      	cmp	r3, #15
 8000af8:	f67f ae86 	bls.w	8000808 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000afc:	bf00      	nop
 8000afe:	3724      	adds	r7, #36	; 0x24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40013800 	.word	0x40013800
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40021400 	.word	0x40021400
 8000b28:	40021800 	.word	0x40021800
 8000b2c:	40021c00 	.word	0x40021c00
 8000b30:	40022000 	.word	0x40022000
 8000b34:	40022400 	.word	0x40022400
 8000b38:	40013c00 	.word	0x40013c00

08000b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b4c:	787b      	ldrb	r3, [r7, #1]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b52:	887a      	ldrh	r2, [r7, #2]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000b58:	e003      	b.n	8000b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000b5a:	887b      	ldrh	r3, [r7, #2]
 8000b5c:	041a      	lsls	r2, r3, #16
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	619a      	str	r2, [r3, #24]
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b7c:	695a      	ldr	r2, [r3, #20]
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	4013      	ands	r3, r2
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d006      	beq.n	8000b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b88:	88fb      	ldrh	r3, [r7, #6]
 8000b8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 fdc6 	bl	8002720 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40013c00 	.word	0x40013c00

08000ba0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a22      	ldr	r2, [pc, #136]	; (8000c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a1d      	ldr	r2, [pc, #116]	; (8000c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bee:	f7ff fcdd 	bl	80005ac <HAL_GetTick>
 8000bf2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000bf4:	e009      	b.n	8000c0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000bf6:	f7ff fcd9 	bl	80005ac <HAL_GetTick>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c04:	d901      	bls.n	8000c0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e022      	b.n	8000c50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c16:	d1ee      	bne.n	8000bf6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c24:	f7ff fcc2 	bl	80005ac <HAL_GetTick>
 8000c28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c2a:	e009      	b.n	8000c40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c2c:	f7ff fcbe 	bl	80005ac <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c3a:	d901      	bls.n	8000c40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e007      	b.n	8000c50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c4c:	d1ee      	bne.n	8000c2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40007000 	.word	0x40007000

08000c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e291      	b.n	800119a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 8087 	beq.w	8000d92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c84:	4b96      	ldr	r3, [pc, #600]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f003 030c 	and.w	r3, r3, #12
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d00c      	beq.n	8000caa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c90:	4b93      	ldr	r3, [pc, #588]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f003 030c 	and.w	r3, r3, #12
 8000c98:	2b08      	cmp	r3, #8
 8000c9a:	d112      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x62>
 8000c9c:	4b90      	ldr	r3, [pc, #576]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ca8:	d10b      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000caa:	4b8d      	ldr	r3, [pc, #564]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d06c      	beq.n	8000d90 <HAL_RCC_OscConfig+0x130>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d168      	bne.n	8000d90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e26b      	b.n	800119a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cca:	d106      	bne.n	8000cda <HAL_RCC_OscConfig+0x7a>
 8000ccc:	4b84      	ldr	r3, [pc, #528]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a83      	ldr	r2, [pc, #524]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	e02e      	b.n	8000d38 <HAL_RCC_OscConfig+0xd8>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10c      	bne.n	8000cfc <HAL_RCC_OscConfig+0x9c>
 8000ce2:	4b7f      	ldr	r3, [pc, #508]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a7e      	ldr	r2, [pc, #504]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b7c      	ldr	r3, [pc, #496]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a7b      	ldr	r2, [pc, #492]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e01d      	b.n	8000d38 <HAL_RCC_OscConfig+0xd8>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d04:	d10c      	bne.n	8000d20 <HAL_RCC_OscConfig+0xc0>
 8000d06:	4b76      	ldr	r3, [pc, #472]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a75      	ldr	r2, [pc, #468]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4b73      	ldr	r3, [pc, #460]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a72      	ldr	r2, [pc, #456]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	e00b      	b.n	8000d38 <HAL_RCC_OscConfig+0xd8>
 8000d20:	4b6f      	ldr	r3, [pc, #444]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a6e      	ldr	r2, [pc, #440]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	4b6c      	ldr	r3, [pc, #432]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a6b      	ldr	r2, [pc, #428]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d013      	beq.n	8000d68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d40:	f7ff fc34 	bl	80005ac <HAL_GetTick>
 8000d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d46:	e008      	b.n	8000d5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d48:	f7ff fc30 	bl	80005ac <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b64      	cmp	r3, #100	; 0x64
 8000d54:	d901      	bls.n	8000d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e21f      	b.n	800119a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5a:	4b61      	ldr	r3, [pc, #388]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0f0      	beq.n	8000d48 <HAL_RCC_OscConfig+0xe8>
 8000d66:	e014      	b.n	8000d92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d68:	f7ff fc20 	bl	80005ac <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d70:	f7ff fc1c 	bl	80005ac <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b64      	cmp	r3, #100	; 0x64
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e20b      	b.n	800119a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d82:	4b57      	ldr	r3, [pc, #348]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1f0      	bne.n	8000d70 <HAL_RCC_OscConfig+0x110>
 8000d8e:	e000      	b.n	8000d92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d069      	beq.n	8000e72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d9e:	4b50      	ldr	r3, [pc, #320]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 030c 	and.w	r3, r3, #12
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00b      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000daa:	4b4d      	ldr	r3, [pc, #308]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	2b08      	cmp	r3, #8
 8000db4:	d11c      	bne.n	8000df0 <HAL_RCC_OscConfig+0x190>
 8000db6:	4b4a      	ldr	r3, [pc, #296]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d116      	bne.n	8000df0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc2:	4b47      	ldr	r3, [pc, #284]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d005      	beq.n	8000dda <HAL_RCC_OscConfig+0x17a>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d001      	beq.n	8000dda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e1df      	b.n	800119a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dda:	4b41      	ldr	r3, [pc, #260]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	493d      	ldr	r1, [pc, #244]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000dea:	4313      	orrs	r3, r2
 8000dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dee:	e040      	b.n	8000e72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d023      	beq.n	8000e40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000df8:	4b39      	ldr	r3, [pc, #228]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a38      	ldr	r2, [pc, #224]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e04:	f7ff fbd2 	bl	80005ac <HAL_GetTick>
 8000e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0a:	e008      	b.n	8000e1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e0c:	f7ff fbce 	bl	80005ac <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d901      	bls.n	8000e1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e1bd      	b.n	800119a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e1e:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0f0      	beq.n	8000e0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	4929      	ldr	r1, [pc, #164]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	600b      	str	r3, [r1, #0]
 8000e3e:	e018      	b.n	8000e72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e46:	f023 0301 	bic.w	r3, r3, #1
 8000e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fbae 	bl	80005ac <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e54:	f7ff fbaa 	bl	80005ac <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e199      	b.n	800119a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f0      	bne.n	8000e54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d038      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d019      	beq.n	8000eba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e8a:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e92:	f7ff fb8b 	bl	80005ac <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fb87 	bl	80005ac <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e176      	b.n	800119a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f0      	beq.n	8000e9a <HAL_RCC_OscConfig+0x23a>
 8000eb8:	e01a      	b.n	8000ef0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ebe:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000ec0:	f023 0301 	bic.w	r3, r3, #1
 8000ec4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ec6:	f7ff fb71 	bl	80005ac <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ecc:	e00a      	b.n	8000ee4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ece:	f7ff fb6d 	bl	80005ac <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d903      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e15c      	b.n	800119a <HAL_RCC_OscConfig+0x53a>
 8000ee0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee4:	4b91      	ldr	r3, [pc, #580]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1ee      	bne.n	8000ece <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80a4 	beq.w	8001046 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000efe:	4b8b      	ldr	r3, [pc, #556]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10d      	bne.n	8000f26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b88      	ldr	r3, [pc, #544]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a87      	ldr	r2, [pc, #540]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b85      	ldr	r3, [pc, #532]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f22:	2301      	movs	r3, #1
 8000f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f26:	4b82      	ldr	r3, [pc, #520]	; (8001130 <HAL_RCC_OscConfig+0x4d0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d118      	bne.n	8000f64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000f32:	4b7f      	ldr	r3, [pc, #508]	; (8001130 <HAL_RCC_OscConfig+0x4d0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a7e      	ldr	r2, [pc, #504]	; (8001130 <HAL_RCC_OscConfig+0x4d0>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f3e:	f7ff fb35 	bl	80005ac <HAL_GetTick>
 8000f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f44:	e008      	b.n	8000f58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f46:	f7ff fb31 	bl	80005ac <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b64      	cmp	r3, #100	; 0x64
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e120      	b.n	800119a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f58:	4b75      	ldr	r3, [pc, #468]	; (8001130 <HAL_RCC_OscConfig+0x4d0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0f0      	beq.n	8000f46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d106      	bne.n	8000f7a <HAL_RCC_OscConfig+0x31a>
 8000f6c:	4b6f      	ldr	r3, [pc, #444]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f70:	4a6e      	ldr	r2, [pc, #440]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6713      	str	r3, [r2, #112]	; 0x70
 8000f78:	e02d      	b.n	8000fd6 <HAL_RCC_OscConfig+0x376>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x33c>
 8000f82:	4b6a      	ldr	r3, [pc, #424]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f86:	4a69      	ldr	r2, [pc, #420]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000f88:	f023 0301 	bic.w	r3, r3, #1
 8000f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f8e:	4b67      	ldr	r3, [pc, #412]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f92:	4a66      	ldr	r2, [pc, #408]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000f94:	f023 0304 	bic.w	r3, r3, #4
 8000f98:	6713      	str	r3, [r2, #112]	; 0x70
 8000f9a:	e01c      	b.n	8000fd6 <HAL_RCC_OscConfig+0x376>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d10c      	bne.n	8000fbe <HAL_RCC_OscConfig+0x35e>
 8000fa4:	4b61      	ldr	r3, [pc, #388]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa8:	4a60      	ldr	r2, [pc, #384]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	6713      	str	r3, [r2, #112]	; 0x70
 8000fb0:	4b5e      	ldr	r3, [pc, #376]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb4:	4a5d      	ldr	r2, [pc, #372]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6713      	str	r3, [r2, #112]	; 0x70
 8000fbc:	e00b      	b.n	8000fd6 <HAL_RCC_OscConfig+0x376>
 8000fbe:	4b5b      	ldr	r3, [pc, #364]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fc2:	4a5a      	ldr	r2, [pc, #360]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000fc4:	f023 0301 	bic.w	r3, r3, #1
 8000fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8000fca:	4b58      	ldr	r3, [pc, #352]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fce:	4a57      	ldr	r2, [pc, #348]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000fd0:	f023 0304 	bic.w	r3, r3, #4
 8000fd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d015      	beq.n	800100a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fde:	f7ff fae5 	bl	80005ac <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe4:	e00a      	b.n	8000ffc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fae1 	bl	80005ac <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e0ce      	b.n	800119a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8000ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0ee      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x386>
 8001008:	e014      	b.n	8001034 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800100a:	f7ff facf 	bl	80005ac <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001010:	e00a      	b.n	8001028 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001012:	f7ff facb 	bl	80005ac <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001020:	4293      	cmp	r3, r2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e0b8      	b.n	800119a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001028:	4b40      	ldr	r3, [pc, #256]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 800102a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1ee      	bne.n	8001012 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d105      	bne.n	8001046 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800103a:	4b3c      	ldr	r3, [pc, #240]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a3b      	ldr	r2, [pc, #236]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8001040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 80a4 	beq.w	8001198 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001050:	4b36      	ldr	r3, [pc, #216]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 030c 	and.w	r3, r3, #12
 8001058:	2b08      	cmp	r3, #8
 800105a:	d06b      	beq.n	8001134 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d149      	bne.n	80010f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001064:	4b31      	ldr	r3, [pc, #196]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a30      	ldr	r2, [pc, #192]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 800106a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800106e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001070:	f7ff fa9c 	bl	80005ac <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001078:	f7ff fa98 	bl	80005ac <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e087      	b.n	800119a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69da      	ldr	r2, [r3, #28]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	431a      	orrs	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	019b      	lsls	r3, r3, #6
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ac:	085b      	lsrs	r3, r3, #1
 80010ae:	3b01      	subs	r3, #1
 80010b0:	041b      	lsls	r3, r3, #16
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b8:	061b      	lsls	r3, r3, #24
 80010ba:	4313      	orrs	r3, r2
 80010bc:	4a1b      	ldr	r2, [pc, #108]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 80010be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a18      	ldr	r2, [pc, #96]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 80010ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d0:	f7ff fa6c 	bl	80005ac <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d8:	f7ff fa68 	bl	80005ac <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e057      	b.n	800119a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0x478>
 80010f6:	e04f      	b.n	8001198 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0b      	ldr	r2, [pc, #44]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 80010fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001104:	f7ff fa52 	bl	80005ac <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800110c:	f7ff fa4e 	bl	80005ac <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e03d      	b.n	800119a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800111e:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_RCC_OscConfig+0x4cc>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x4ac>
 800112a:	e035      	b.n	8001198 <HAL_RCC_OscConfig+0x538>
 800112c:	40023800 	.word	0x40023800
 8001130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_RCC_OscConfig+0x544>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d028      	beq.n	8001194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800114c:	429a      	cmp	r2, r3
 800114e:	d121      	bne.n	8001194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800115a:	429a      	cmp	r2, r3
 800115c:	d11a      	bne.n	8001194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001164:	4013      	ands	r3, r2
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800116a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800116c:	4293      	cmp	r3, r2
 800116e:	d111      	bne.n	8001194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117a:	085b      	lsrs	r3, r3, #1
 800117c:	3b01      	subs	r3, #1
 800117e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001180:	429a      	cmp	r2, r3
 8001182:	d107      	bne.n	8001194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001190:	429a      	cmp	r2, r3
 8001192:	d001      	beq.n	8001198 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0d0      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011c0:	4b6a      	ldr	r3, [pc, #424]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 030f 	and.w	r3, r3, #15
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d910      	bls.n	80011f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ce:	4b67      	ldr	r3, [pc, #412]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 020f 	bic.w	r2, r3, #15
 80011d6:	4965      	ldr	r1, [pc, #404]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	4313      	orrs	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011de:	4b63      	ldr	r3, [pc, #396]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d001      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0b8      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d020      	beq.n	800123e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001208:	4b59      	ldr	r3, [pc, #356]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4a58      	ldr	r2, [pc, #352]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 800120e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001212:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001220:	4b53      	ldr	r3, [pc, #332]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	4a52      	ldr	r2, [pc, #328]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 8001226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800122a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800122c:	4b50      	ldr	r3, [pc, #320]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	494d      	ldr	r1, [pc, #308]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 800123a:	4313      	orrs	r3, r2
 800123c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d040      	beq.n	80012cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d107      	bne.n	8001262 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	4b47      	ldr	r3, [pc, #284]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d115      	bne.n	800128a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e07f      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d107      	bne.n	800127a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126a:	4b41      	ldr	r3, [pc, #260]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e073      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127a:	4b3d      	ldr	r3, [pc, #244]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e06b      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800128a:	4b39      	ldr	r3, [pc, #228]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f023 0203 	bic.w	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4936      	ldr	r1, [pc, #216]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 8001298:	4313      	orrs	r3, r2
 800129a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800129c:	f7ff f986 	bl	80005ac <HAL_GetTick>
 80012a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a2:	e00a      	b.n	80012ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a4:	f7ff f982 	bl	80005ac <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e053      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 020c 	and.w	r2, r3, #12
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d1eb      	bne.n	80012a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012cc:	4b27      	ldr	r3, [pc, #156]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 030f 	and.w	r3, r3, #15
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d210      	bcs.n	80012fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 020f 	bic.w	r2, r3, #15
 80012e2:	4922      	ldr	r1, [pc, #136]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ea:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d001      	beq.n	80012fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e032      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	d008      	beq.n	800131a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4916      	ldr	r1, [pc, #88]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 8001316:	4313      	orrs	r3, r2
 8001318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	490e      	ldr	r1, [pc, #56]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 8001336:	4313      	orrs	r3, r2
 8001338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800133a:	f000 f821 	bl	8001380 <HAL_RCC_GetSysClockFreq>
 800133e:	4601      	mov	r1, r0
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_RCC_ClockConfig+0x1cc>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
 800134e:	fa21 f303 	lsr.w	r3, r1, r3
 8001352:	4a09      	ldr	r2, [pc, #36]	; (8001378 <HAL_RCC_ClockConfig+0x1d0>)
 8001354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_RCC_ClockConfig+0x1d4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f8e2 	bl	8000524 <HAL_InitTick>

  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023c00 	.word	0x40023c00
 8001370:	40023800 	.word	0x40023800
 8001374:	08003040 	.word	0x08003040
 8001378:	200000bc 	.word	0x200000bc
 800137c:	20000000 	.word	0x20000000

08001380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001396:	4b63      	ldr	r3, [pc, #396]	; (8001524 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d007      	beq.n	80013b2 <HAL_RCC_GetSysClockFreq+0x32>
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d008      	beq.n	80013b8 <HAL_RCC_GetSysClockFreq+0x38>
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 80b4 	bne.w	8001514 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013ac:	4b5e      	ldr	r3, [pc, #376]	; (8001528 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80013ae:	60bb      	str	r3, [r7, #8]
      break;
 80013b0:	e0b3      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013b2:	4b5e      	ldr	r3, [pc, #376]	; (800152c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80013b4:	60bb      	str	r3, [r7, #8]
      break;
 80013b6:	e0b0      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013b8:	4b5a      	ldr	r3, [pc, #360]	; (8001524 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013c0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80013c2:	4b58      	ldr	r3, [pc, #352]	; (8001524 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d04a      	beq.n	8001464 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ce:	4b55      	ldr	r3, [pc, #340]	; (8001524 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	099b      	lsrs	r3, r3, #6
 80013d4:	f04f 0400 	mov.w	r4, #0
 80013d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	ea03 0501 	and.w	r5, r3, r1
 80013e4:	ea04 0602 	and.w	r6, r4, r2
 80013e8:	4629      	mov	r1, r5
 80013ea:	4632      	mov	r2, r6
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	f04f 0400 	mov.w	r4, #0
 80013f4:	0154      	lsls	r4, r2, #5
 80013f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013fa:	014b      	lsls	r3, r1, #5
 80013fc:	4619      	mov	r1, r3
 80013fe:	4622      	mov	r2, r4
 8001400:	1b49      	subs	r1, r1, r5
 8001402:	eb62 0206 	sbc.w	r2, r2, r6
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	f04f 0400 	mov.w	r4, #0
 800140e:	0194      	lsls	r4, r2, #6
 8001410:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001414:	018b      	lsls	r3, r1, #6
 8001416:	1a5b      	subs	r3, r3, r1
 8001418:	eb64 0402 	sbc.w	r4, r4, r2
 800141c:	f04f 0100 	mov.w	r1, #0
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	00e2      	lsls	r2, r4, #3
 8001426:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800142a:	00d9      	lsls	r1, r3, #3
 800142c:	460b      	mov	r3, r1
 800142e:	4614      	mov	r4, r2
 8001430:	195b      	adds	r3, r3, r5
 8001432:	eb44 0406 	adc.w	r4, r4, r6
 8001436:	f04f 0100 	mov.w	r1, #0
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	0262      	lsls	r2, r4, #9
 8001440:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001444:	0259      	lsls	r1, r3, #9
 8001446:	460b      	mov	r3, r1
 8001448:	4614      	mov	r4, r2
 800144a:	4618      	mov	r0, r3
 800144c:	4621      	mov	r1, r4
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f04f 0400 	mov.w	r4, #0
 8001454:	461a      	mov	r2, r3
 8001456:	4623      	mov	r3, r4
 8001458:	f7fe fed6 	bl	8000208 <__aeabi_uldivmod>
 800145c:	4603      	mov	r3, r0
 800145e:	460c      	mov	r4, r1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	e049      	b.n	80014f8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001464:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	099b      	lsrs	r3, r3, #6
 800146a:	f04f 0400 	mov.w	r4, #0
 800146e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	ea03 0501 	and.w	r5, r3, r1
 800147a:	ea04 0602 	and.w	r6, r4, r2
 800147e:	4629      	mov	r1, r5
 8001480:	4632      	mov	r2, r6
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	f04f 0400 	mov.w	r4, #0
 800148a:	0154      	lsls	r4, r2, #5
 800148c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001490:	014b      	lsls	r3, r1, #5
 8001492:	4619      	mov	r1, r3
 8001494:	4622      	mov	r2, r4
 8001496:	1b49      	subs	r1, r1, r5
 8001498:	eb62 0206 	sbc.w	r2, r2, r6
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	f04f 0400 	mov.w	r4, #0
 80014a4:	0194      	lsls	r4, r2, #6
 80014a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80014aa:	018b      	lsls	r3, r1, #6
 80014ac:	1a5b      	subs	r3, r3, r1
 80014ae:	eb64 0402 	sbc.w	r4, r4, r2
 80014b2:	f04f 0100 	mov.w	r1, #0
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	00e2      	lsls	r2, r4, #3
 80014bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014c0:	00d9      	lsls	r1, r3, #3
 80014c2:	460b      	mov	r3, r1
 80014c4:	4614      	mov	r4, r2
 80014c6:	195b      	adds	r3, r3, r5
 80014c8:	eb44 0406 	adc.w	r4, r4, r6
 80014cc:	f04f 0100 	mov.w	r1, #0
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	02a2      	lsls	r2, r4, #10
 80014d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80014da:	0299      	lsls	r1, r3, #10
 80014dc:	460b      	mov	r3, r1
 80014de:	4614      	mov	r4, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	4621      	mov	r1, r4
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f04f 0400 	mov.w	r4, #0
 80014ea:	461a      	mov	r2, r3
 80014ec:	4623      	mov	r3, r4
 80014ee:	f7fe fe8b 	bl	8000208 <__aeabi_uldivmod>
 80014f2:	4603      	mov	r3, r0
 80014f4:	460c      	mov	r4, r1
 80014f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	0c1b      	lsrs	r3, r3, #16
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	3301      	adds	r3, #1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001510:	60bb      	str	r3, [r7, #8]
      break;
 8001512:	e002      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001516:	60bb      	str	r3, [r7, #8]
      break;
 8001518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800151a:	68bb      	ldr	r3, [r7, #8]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	00f42400 	.word	0x00f42400
 800152c:	007a1200 	.word	0x007a1200

08001530 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_RCC_GetHCLKFreq+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200000bc 	.word	0x200000bc

08001548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800154c:	f7ff fff0 	bl	8001530 <HAL_RCC_GetHCLKFreq>
 8001550:	4601      	mov	r1, r0
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	0a9b      	lsrs	r3, r3, #10
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <HAL_RCC_GetPCLK1Freq+0x24>)
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001564:	4618      	mov	r0, r3
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	08003050 	.word	0x08003050

08001570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001574:	f7ff ffdc 	bl	8001530 <HAL_RCC_GetHCLKFreq>
 8001578:	4601      	mov	r1, r0
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	0b5b      	lsrs	r3, r3, #13
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	4a03      	ldr	r2, [pc, #12]	; (8001594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001586:	5cd3      	ldrb	r3, [r2, r3]
 8001588:	fa21 f303 	lsr.w	r3, r1, r3
}
 800158c:	4618      	mov	r0, r3
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	08003050 	.word	0x08003050

08001598 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d012      	beq.n	80015e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80015c0:	4b69      	ldr	r3, [pc, #420]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4a68      	ldr	r2, [pc, #416]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015ca:	6093      	str	r3, [r2, #8]
 80015cc:	4b66      	ldr	r3, [pc, #408]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d4:	4964      	ldr	r1, [pc, #400]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d017      	beq.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80015f2:	4b5d      	ldr	r3, [pc, #372]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001600:	4959      	ldr	r1, [pc, #356]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001602:	4313      	orrs	r3, r2
 8001604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800160c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001610:	d101      	bne.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001612:	2301      	movs	r3, #1
 8001614:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800161e:	2301      	movs	r3, #1
 8001620:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d017      	beq.n	800165e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800162e:	4b4e      	ldr	r3, [pc, #312]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001634:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	494a      	ldr	r1, [pc, #296]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800163e:	4313      	orrs	r3, r2
 8001640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800164c:	d101      	bne.n	8001652 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800164e:	2301      	movs	r3, #1
 8001650:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800165a:	2301      	movs	r3, #1
 800165c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800166a:	2301      	movs	r3, #1
 800166c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 808b 	beq.w	8001792 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800167c:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	4a39      	ldr	r2, [pc, #228]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001686:	6413      	str	r3, [r2, #64]	; 0x40
 8001688:	4b37      	ldr	r3, [pc, #220]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a34      	ldr	r2, [pc, #208]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800169a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016a0:	f7fe ff84 	bl	80005ac <HAL_GetTick>
 80016a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a8:	f7fe ff80 	bl	80005ac <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e355      	b.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d035      	beq.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d02e      	beq.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016e4:	4b20      	ldr	r3, [pc, #128]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f2:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fe:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001704:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001706:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b01      	cmp	r3, #1
 8001716:	d114      	bne.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7fe ff48 	bl	80005ac <HAL_GetTick>
 800171c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171e:	e00a      	b.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f7fe ff44 	bl	80005ac <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	; 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e317      	b.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0ee      	beq.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800174a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800174e:	d111      	bne.n	8001774 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800175e:	400b      	ands	r3, r1
 8001760:	4901      	ldr	r1, [pc, #4]	; (8001768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
 8001766:	e00b      	b.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001768:	40023800 	.word	0x40023800
 800176c:	40007000 	.word	0x40007000
 8001770:	0ffffcff 	.word	0x0ffffcff
 8001774:	4bb0      	ldr	r3, [pc, #704]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4aaf      	ldr	r2, [pc, #700]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800177a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800177e:	6093      	str	r3, [r2, #8]
 8001780:	4bad      	ldr	r3, [pc, #692]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001782:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800178c:	49aa      	ldr	r1, [pc, #680]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800178e:	4313      	orrs	r3, r2
 8001790:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	2b00      	cmp	r3, #0
 800179c:	d010      	beq.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800179e:	4ba6      	ldr	r3, [pc, #664]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017a4:	4aa4      	ldr	r2, [pc, #656]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017ae:	4ba2      	ldr	r3, [pc, #648]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b8:	499f      	ldr	r1, [pc, #636]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00a      	beq.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017cc:	4b9a      	ldr	r3, [pc, #616]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017da:	4997      	ldr	r1, [pc, #604]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00a      	beq.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80017ee:	4b92      	ldr	r3, [pc, #584]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017fc:	498e      	ldr	r1, [pc, #568]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00a      	beq.n	8001826 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001810:	4b89      	ldr	r3, [pc, #548]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001816:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800181e:	4986      	ldr	r1, [pc, #536]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001820:	4313      	orrs	r3, r2
 8001822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00a      	beq.n	8001848 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001832:	4b81      	ldr	r3, [pc, #516]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001838:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001840:	497d      	ldr	r1, [pc, #500]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001842:	4313      	orrs	r3, r2
 8001844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00a      	beq.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001854:	4b78      	ldr	r3, [pc, #480]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185a:	f023 0203 	bic.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4975      	ldr	r1, [pc, #468]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001864:	4313      	orrs	r3, r2
 8001866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00a      	beq.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001876:	4b70      	ldr	r3, [pc, #448]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187c:	f023 020c 	bic.w	r2, r3, #12
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001884:	496c      	ldr	r1, [pc, #432]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001886:	4313      	orrs	r3, r2
 8001888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00a      	beq.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001898:	4b67      	ldr	r3, [pc, #412]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	4964      	ldr	r1, [pc, #400]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00a      	beq.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80018ba:	4b5f      	ldr	r3, [pc, #380]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018c8:	495b      	ldr	r1, [pc, #364]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00a      	beq.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80018dc:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ea:	4953      	ldr	r1, [pc, #332]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00a      	beq.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80018fe:	4b4e      	ldr	r3, [pc, #312]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001904:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	494a      	ldr	r1, [pc, #296]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800190e:	4313      	orrs	r3, r2
 8001910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00a      	beq.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001920:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001926:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192e:	4942      	ldr	r1, [pc, #264]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001930:	4313      	orrs	r3, r2
 8001932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00a      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001948:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001950:	4939      	ldr	r1, [pc, #228]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001952:	4313      	orrs	r3, r2
 8001954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00a      	beq.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001964:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001972:	4931      	ldr	r1, [pc, #196]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001974:	4313      	orrs	r3, r2
 8001976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d011      	beq.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001986:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001994:	4928      	ldr	r1, [pc, #160]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001996:	4313      	orrs	r3, r2
 8001998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80019a4:	d101      	bne.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00a      	beq.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d4:	4918      	ldr	r1, [pc, #96]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00b      	beq.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019f8:	490f      	ldr	r1, [pc, #60]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d005      	beq.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a0e:	f040 80d8 	bne.w	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a1e:	f7fe fdc5 	bl	80005ac <HAL_GetTick>
 8001a22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001a26:	f7fe fdc1 	bl	80005ac <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b64      	cmp	r3, #100	; 0x64
 8001a32:	d903      	bls.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e196      	b.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001a38:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a3c:	4b6c      	ldr	r3, [pc, #432]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ee      	bne.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d021      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d11d      	bne.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001a5c:	4b64      	ldr	r3, [pc, #400]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a62:	0c1b      	lsrs	r3, r3, #16
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001a6a:	4b61      	ldr	r3, [pc, #388]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a70:	0e1b      	lsrs	r3, r3, #24
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	019a      	lsls	r2, r3, #6
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	041b      	lsls	r3, r3, #16
 8001a82:	431a      	orrs	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	061b      	lsls	r3, r3, #24
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	071b      	lsls	r3, r3, #28
 8001a90:	4957      	ldr	r1, [pc, #348]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d004      	beq.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001aac:	d00a      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d02e      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac2:	d129      	bne.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ac4:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aca:	0c1b      	lsrs	r3, r3, #16
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ad8:	0f1b      	lsrs	r3, r3, #28
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	019a      	lsls	r2, r3, #6
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	041b      	lsls	r3, r3, #16
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	061b      	lsls	r3, r3, #24
 8001af2:	431a      	orrs	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	071b      	lsls	r3, r3, #28
 8001af8:	493d      	ldr	r1, [pc, #244]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b00:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b06:	f023 021f 	bic.w	r2, r3, #31
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	4937      	ldr	r1, [pc, #220]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d01d      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b24:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b2a:	0e1b      	lsrs	r3, r3, #24
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b32:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b38:	0f1b      	lsrs	r3, r3, #28
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	019a      	lsls	r2, r3, #6
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	041b      	lsls	r3, r3, #16
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	431a      	orrs	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	071b      	lsls	r3, r3, #28
 8001b58:	4925      	ldr	r1, [pc, #148]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d011      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	019a      	lsls	r2, r3, #6
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	041b      	lsls	r3, r3, #16
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	061b      	lsls	r3, r3, #24
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	071b      	lsls	r3, r3, #28
 8001b88:	4919      	ldr	r1, [pc, #100]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a16      	ldr	r2, [pc, #88]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b9c:	f7fe fd06 	bl	80005ac <HAL_GetTick>
 8001ba0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ba4:	f7fe fd02 	bl	80005ac <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e0d7      	b.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	f040 80cd 	bne.w	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd6:	f7fe fce9 	bl	80005ac <HAL_GetTick>
 8001bda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001bde:	f7fe fce5 	bl	80005ac <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b64      	cmp	r3, #100	; 0x64
 8001bea:	d903      	bls.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e0ba      	b.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001bf0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001bf4:	4b5e      	ldr	r3, [pc, #376]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c00:	d0ed      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d02e      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d12a      	bne.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001c2a:	4b51      	ldr	r3, [pc, #324]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c30:	0c1b      	lsrs	r3, r3, #16
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001c38:	4b4d      	ldr	r3, [pc, #308]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3e:	0f1b      	lsrs	r3, r3, #28
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	019a      	lsls	r2, r3, #6
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	041b      	lsls	r3, r3, #16
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	061b      	lsls	r3, r3, #24
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	071b      	lsls	r3, r3, #28
 8001c5e:	4944      	ldr	r1, [pc, #272]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001c66:	4b42      	ldr	r3, [pc, #264]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c6c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	3b01      	subs	r3, #1
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	493d      	ldr	r1, [pc, #244]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d022      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c94:	d11d      	bne.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c96:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9c:	0e1b      	lsrs	r3, r3, #24
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001ca4:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001caa:	0f1b      	lsrs	r3, r3, #28
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	019a      	lsls	r2, r3, #6
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	061b      	lsls	r3, r3, #24
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	071b      	lsls	r3, r3, #28
 8001cca:	4929      	ldr	r1, [pc, #164]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d028      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001cde:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce4:	0e1b      	lsrs	r3, r3, #24
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001cec:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf2:	0c1b      	lsrs	r3, r3, #16
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	019a      	lsls	r2, r3, #6
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	041b      	lsls	r3, r3, #16
 8001d04:	431a      	orrs	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	061b      	lsls	r3, r3, #24
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	071b      	lsls	r3, r3, #28
 8001d12:	4917      	ldr	r1, [pc, #92]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	4911      	ldr	r1, [pc, #68]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d3c:	f7fe fc36 	bl	80005ac <HAL_GetTick>
 8001d40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d44:	f7fe fc32 	bl	80005ac <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e007      	b.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d62:	d1ef      	bne.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800

08001d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e084      	b.n	8001e90 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d106      	bne.n	8001da6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 ffa1 	bl	8002ce8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2202      	movs	r2, #2
 8001daa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dbc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001dc6:	d902      	bls.n	8001dce <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e002      	b.n	8001dd4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001ddc:	d007      	beq.n	8001dee <HAL_SPI_Init+0x7a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001de6:	d002      	beq.n	8001dee <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10b      	bne.n	8001e0e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001dfe:	d903      	bls.n	8001e08 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
 8001e06:	e002      	b.n	8001e0e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	ea42 0103 	orr.w	r1, r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	f003 0204 	and.w	r2, r3, #4
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	ea42 0103 	orr.w	r1, r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	69da      	ldr	r2, [r3, #28]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e040      	b.n	8001f2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f001 f81a 	bl	8002ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2224      	movs	r2, #36	; 0x24
 8001ec4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f82c 	bl	8001f34 <UART_SetConfig>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e022      	b.n	8001f2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 faca 	bl	8002488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 fb51 	bl	80025cc <UART_CheckIdleState>
 8001f2a:	4603      	mov	r3, r0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4bb1      	ldr	r3, [pc, #708]	; (8002228 <UART_SetConfig+0x2f4>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	6939      	ldr	r1, [r7, #16]
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a9f      	ldr	r2, [pc, #636]	; (800222c <UART_SetConfig+0x2f8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d121      	bne.n	8001ff8 <UART_SetConfig+0xc4>
 8001fb4:	4b9e      	ldr	r3, [pc, #632]	; (8002230 <UART_SetConfig+0x2fc>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d816      	bhi.n	8001ff0 <UART_SetConfig+0xbc>
 8001fc2:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <UART_SetConfig+0x94>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08001fd9 	.word	0x08001fd9
 8001fcc:	08001fe5 	.word	0x08001fe5
 8001fd0:	08001fdf 	.word	0x08001fdf
 8001fd4:	08001feb 	.word	0x08001feb
 8001fd8:	2301      	movs	r3, #1
 8001fda:	77fb      	strb	r3, [r7, #31]
 8001fdc:	e151      	b.n	8002282 <UART_SetConfig+0x34e>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	77fb      	strb	r3, [r7, #31]
 8001fe2:	e14e      	b.n	8002282 <UART_SetConfig+0x34e>
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	77fb      	strb	r3, [r7, #31]
 8001fe8:	e14b      	b.n	8002282 <UART_SetConfig+0x34e>
 8001fea:	2308      	movs	r3, #8
 8001fec:	77fb      	strb	r3, [r7, #31]
 8001fee:	e148      	b.n	8002282 <UART_SetConfig+0x34e>
 8001ff0:	2310      	movs	r3, #16
 8001ff2:	77fb      	strb	r3, [r7, #31]
 8001ff4:	bf00      	nop
 8001ff6:	e144      	b.n	8002282 <UART_SetConfig+0x34e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a8d      	ldr	r2, [pc, #564]	; (8002234 <UART_SetConfig+0x300>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d134      	bne.n	800206c <UART_SetConfig+0x138>
 8002002:	4b8b      	ldr	r3, [pc, #556]	; (8002230 <UART_SetConfig+0x2fc>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b0c      	cmp	r3, #12
 800200e:	d829      	bhi.n	8002064 <UART_SetConfig+0x130>
 8002010:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <UART_SetConfig+0xe4>)
 8002012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002016:	bf00      	nop
 8002018:	0800204d 	.word	0x0800204d
 800201c:	08002065 	.word	0x08002065
 8002020:	08002065 	.word	0x08002065
 8002024:	08002065 	.word	0x08002065
 8002028:	08002059 	.word	0x08002059
 800202c:	08002065 	.word	0x08002065
 8002030:	08002065 	.word	0x08002065
 8002034:	08002065 	.word	0x08002065
 8002038:	08002053 	.word	0x08002053
 800203c:	08002065 	.word	0x08002065
 8002040:	08002065 	.word	0x08002065
 8002044:	08002065 	.word	0x08002065
 8002048:	0800205f 	.word	0x0800205f
 800204c:	2300      	movs	r3, #0
 800204e:	77fb      	strb	r3, [r7, #31]
 8002050:	e117      	b.n	8002282 <UART_SetConfig+0x34e>
 8002052:	2302      	movs	r3, #2
 8002054:	77fb      	strb	r3, [r7, #31]
 8002056:	e114      	b.n	8002282 <UART_SetConfig+0x34e>
 8002058:	2304      	movs	r3, #4
 800205a:	77fb      	strb	r3, [r7, #31]
 800205c:	e111      	b.n	8002282 <UART_SetConfig+0x34e>
 800205e:	2308      	movs	r3, #8
 8002060:	77fb      	strb	r3, [r7, #31]
 8002062:	e10e      	b.n	8002282 <UART_SetConfig+0x34e>
 8002064:	2310      	movs	r3, #16
 8002066:	77fb      	strb	r3, [r7, #31]
 8002068:	bf00      	nop
 800206a:	e10a      	b.n	8002282 <UART_SetConfig+0x34e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a71      	ldr	r2, [pc, #452]	; (8002238 <UART_SetConfig+0x304>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d120      	bne.n	80020b8 <UART_SetConfig+0x184>
 8002076:	4b6e      	ldr	r3, [pc, #440]	; (8002230 <UART_SetConfig+0x2fc>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002080:	2b10      	cmp	r3, #16
 8002082:	d00f      	beq.n	80020a4 <UART_SetConfig+0x170>
 8002084:	2b10      	cmp	r3, #16
 8002086:	d802      	bhi.n	800208e <UART_SetConfig+0x15a>
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <UART_SetConfig+0x164>
 800208c:	e010      	b.n	80020b0 <UART_SetConfig+0x17c>
 800208e:	2b20      	cmp	r3, #32
 8002090:	d005      	beq.n	800209e <UART_SetConfig+0x16a>
 8002092:	2b30      	cmp	r3, #48	; 0x30
 8002094:	d009      	beq.n	80020aa <UART_SetConfig+0x176>
 8002096:	e00b      	b.n	80020b0 <UART_SetConfig+0x17c>
 8002098:	2300      	movs	r3, #0
 800209a:	77fb      	strb	r3, [r7, #31]
 800209c:	e0f1      	b.n	8002282 <UART_SetConfig+0x34e>
 800209e:	2302      	movs	r3, #2
 80020a0:	77fb      	strb	r3, [r7, #31]
 80020a2:	e0ee      	b.n	8002282 <UART_SetConfig+0x34e>
 80020a4:	2304      	movs	r3, #4
 80020a6:	77fb      	strb	r3, [r7, #31]
 80020a8:	e0eb      	b.n	8002282 <UART_SetConfig+0x34e>
 80020aa:	2308      	movs	r3, #8
 80020ac:	77fb      	strb	r3, [r7, #31]
 80020ae:	e0e8      	b.n	8002282 <UART_SetConfig+0x34e>
 80020b0:	2310      	movs	r3, #16
 80020b2:	77fb      	strb	r3, [r7, #31]
 80020b4:	bf00      	nop
 80020b6:	e0e4      	b.n	8002282 <UART_SetConfig+0x34e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a5f      	ldr	r2, [pc, #380]	; (800223c <UART_SetConfig+0x308>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d120      	bne.n	8002104 <UART_SetConfig+0x1d0>
 80020c2:	4b5b      	ldr	r3, [pc, #364]	; (8002230 <UART_SetConfig+0x2fc>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	d00f      	beq.n	80020f0 <UART_SetConfig+0x1bc>
 80020d0:	2b40      	cmp	r3, #64	; 0x40
 80020d2:	d802      	bhi.n	80020da <UART_SetConfig+0x1a6>
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <UART_SetConfig+0x1b0>
 80020d8:	e010      	b.n	80020fc <UART_SetConfig+0x1c8>
 80020da:	2b80      	cmp	r3, #128	; 0x80
 80020dc:	d005      	beq.n	80020ea <UART_SetConfig+0x1b6>
 80020de:	2bc0      	cmp	r3, #192	; 0xc0
 80020e0:	d009      	beq.n	80020f6 <UART_SetConfig+0x1c2>
 80020e2:	e00b      	b.n	80020fc <UART_SetConfig+0x1c8>
 80020e4:	2300      	movs	r3, #0
 80020e6:	77fb      	strb	r3, [r7, #31]
 80020e8:	e0cb      	b.n	8002282 <UART_SetConfig+0x34e>
 80020ea:	2302      	movs	r3, #2
 80020ec:	77fb      	strb	r3, [r7, #31]
 80020ee:	e0c8      	b.n	8002282 <UART_SetConfig+0x34e>
 80020f0:	2304      	movs	r3, #4
 80020f2:	77fb      	strb	r3, [r7, #31]
 80020f4:	e0c5      	b.n	8002282 <UART_SetConfig+0x34e>
 80020f6:	2308      	movs	r3, #8
 80020f8:	77fb      	strb	r3, [r7, #31]
 80020fa:	e0c2      	b.n	8002282 <UART_SetConfig+0x34e>
 80020fc:	2310      	movs	r3, #16
 80020fe:	77fb      	strb	r3, [r7, #31]
 8002100:	bf00      	nop
 8002102:	e0be      	b.n	8002282 <UART_SetConfig+0x34e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a4d      	ldr	r2, [pc, #308]	; (8002240 <UART_SetConfig+0x30c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d124      	bne.n	8002158 <UART_SetConfig+0x224>
 800210e:	4b48      	ldr	r3, [pc, #288]	; (8002230 <UART_SetConfig+0x2fc>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800211c:	d012      	beq.n	8002144 <UART_SetConfig+0x210>
 800211e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002122:	d802      	bhi.n	800212a <UART_SetConfig+0x1f6>
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <UART_SetConfig+0x204>
 8002128:	e012      	b.n	8002150 <UART_SetConfig+0x21c>
 800212a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800212e:	d006      	beq.n	800213e <UART_SetConfig+0x20a>
 8002130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002134:	d009      	beq.n	800214a <UART_SetConfig+0x216>
 8002136:	e00b      	b.n	8002150 <UART_SetConfig+0x21c>
 8002138:	2300      	movs	r3, #0
 800213a:	77fb      	strb	r3, [r7, #31]
 800213c:	e0a1      	b.n	8002282 <UART_SetConfig+0x34e>
 800213e:	2302      	movs	r3, #2
 8002140:	77fb      	strb	r3, [r7, #31]
 8002142:	e09e      	b.n	8002282 <UART_SetConfig+0x34e>
 8002144:	2304      	movs	r3, #4
 8002146:	77fb      	strb	r3, [r7, #31]
 8002148:	e09b      	b.n	8002282 <UART_SetConfig+0x34e>
 800214a:	2308      	movs	r3, #8
 800214c:	77fb      	strb	r3, [r7, #31]
 800214e:	e098      	b.n	8002282 <UART_SetConfig+0x34e>
 8002150:	2310      	movs	r3, #16
 8002152:	77fb      	strb	r3, [r7, #31]
 8002154:	bf00      	nop
 8002156:	e094      	b.n	8002282 <UART_SetConfig+0x34e>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a39      	ldr	r2, [pc, #228]	; (8002244 <UART_SetConfig+0x310>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d124      	bne.n	80021ac <UART_SetConfig+0x278>
 8002162:	4b33      	ldr	r3, [pc, #204]	; (8002230 <UART_SetConfig+0x2fc>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800216c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002170:	d012      	beq.n	8002198 <UART_SetConfig+0x264>
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002176:	d802      	bhi.n	800217e <UART_SetConfig+0x24a>
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <UART_SetConfig+0x258>
 800217c:	e012      	b.n	80021a4 <UART_SetConfig+0x270>
 800217e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002182:	d006      	beq.n	8002192 <UART_SetConfig+0x25e>
 8002184:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002188:	d009      	beq.n	800219e <UART_SetConfig+0x26a>
 800218a:	e00b      	b.n	80021a4 <UART_SetConfig+0x270>
 800218c:	2301      	movs	r3, #1
 800218e:	77fb      	strb	r3, [r7, #31]
 8002190:	e077      	b.n	8002282 <UART_SetConfig+0x34e>
 8002192:	2302      	movs	r3, #2
 8002194:	77fb      	strb	r3, [r7, #31]
 8002196:	e074      	b.n	8002282 <UART_SetConfig+0x34e>
 8002198:	2304      	movs	r3, #4
 800219a:	77fb      	strb	r3, [r7, #31]
 800219c:	e071      	b.n	8002282 <UART_SetConfig+0x34e>
 800219e:	2308      	movs	r3, #8
 80021a0:	77fb      	strb	r3, [r7, #31]
 80021a2:	e06e      	b.n	8002282 <UART_SetConfig+0x34e>
 80021a4:	2310      	movs	r3, #16
 80021a6:	77fb      	strb	r3, [r7, #31]
 80021a8:	bf00      	nop
 80021aa:	e06a      	b.n	8002282 <UART_SetConfig+0x34e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a25      	ldr	r2, [pc, #148]	; (8002248 <UART_SetConfig+0x314>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d124      	bne.n	8002200 <UART_SetConfig+0x2cc>
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <UART_SetConfig+0x2fc>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80021c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c4:	d012      	beq.n	80021ec <UART_SetConfig+0x2b8>
 80021c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ca:	d802      	bhi.n	80021d2 <UART_SetConfig+0x29e>
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <UART_SetConfig+0x2ac>
 80021d0:	e012      	b.n	80021f8 <UART_SetConfig+0x2c4>
 80021d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d6:	d006      	beq.n	80021e6 <UART_SetConfig+0x2b2>
 80021d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80021dc:	d009      	beq.n	80021f2 <UART_SetConfig+0x2be>
 80021de:	e00b      	b.n	80021f8 <UART_SetConfig+0x2c4>
 80021e0:	2300      	movs	r3, #0
 80021e2:	77fb      	strb	r3, [r7, #31]
 80021e4:	e04d      	b.n	8002282 <UART_SetConfig+0x34e>
 80021e6:	2302      	movs	r3, #2
 80021e8:	77fb      	strb	r3, [r7, #31]
 80021ea:	e04a      	b.n	8002282 <UART_SetConfig+0x34e>
 80021ec:	2304      	movs	r3, #4
 80021ee:	77fb      	strb	r3, [r7, #31]
 80021f0:	e047      	b.n	8002282 <UART_SetConfig+0x34e>
 80021f2:	2308      	movs	r3, #8
 80021f4:	77fb      	strb	r3, [r7, #31]
 80021f6:	e044      	b.n	8002282 <UART_SetConfig+0x34e>
 80021f8:	2310      	movs	r3, #16
 80021fa:	77fb      	strb	r3, [r7, #31]
 80021fc:	bf00      	nop
 80021fe:	e040      	b.n	8002282 <UART_SetConfig+0x34e>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a11      	ldr	r2, [pc, #68]	; (800224c <UART_SetConfig+0x318>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d139      	bne.n	800227e <UART_SetConfig+0x34a>
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <UART_SetConfig+0x2fc>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002218:	d027      	beq.n	800226a <UART_SetConfig+0x336>
 800221a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800221e:	d817      	bhi.n	8002250 <UART_SetConfig+0x31c>
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01c      	beq.n	800225e <UART_SetConfig+0x32a>
 8002224:	e027      	b.n	8002276 <UART_SetConfig+0x342>
 8002226:	bf00      	nop
 8002228:	efff69f3 	.word	0xefff69f3
 800222c:	40011000 	.word	0x40011000
 8002230:	40023800 	.word	0x40023800
 8002234:	40004400 	.word	0x40004400
 8002238:	40004800 	.word	0x40004800
 800223c:	40004c00 	.word	0x40004c00
 8002240:	40005000 	.word	0x40005000
 8002244:	40011400 	.word	0x40011400
 8002248:	40007800 	.word	0x40007800
 800224c:	40007c00 	.word	0x40007c00
 8002250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002254:	d006      	beq.n	8002264 <UART_SetConfig+0x330>
 8002256:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800225a:	d009      	beq.n	8002270 <UART_SetConfig+0x33c>
 800225c:	e00b      	b.n	8002276 <UART_SetConfig+0x342>
 800225e:	2300      	movs	r3, #0
 8002260:	77fb      	strb	r3, [r7, #31]
 8002262:	e00e      	b.n	8002282 <UART_SetConfig+0x34e>
 8002264:	2302      	movs	r3, #2
 8002266:	77fb      	strb	r3, [r7, #31]
 8002268:	e00b      	b.n	8002282 <UART_SetConfig+0x34e>
 800226a:	2304      	movs	r3, #4
 800226c:	77fb      	strb	r3, [r7, #31]
 800226e:	e008      	b.n	8002282 <UART_SetConfig+0x34e>
 8002270:	2308      	movs	r3, #8
 8002272:	77fb      	strb	r3, [r7, #31]
 8002274:	e005      	b.n	8002282 <UART_SetConfig+0x34e>
 8002276:	2310      	movs	r3, #16
 8002278:	77fb      	strb	r3, [r7, #31]
 800227a:	bf00      	nop
 800227c:	e001      	b.n	8002282 <UART_SetConfig+0x34e>
 800227e:	2310      	movs	r3, #16
 8002280:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800228a:	d17f      	bne.n	800238c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800228c:	7ffb      	ldrb	r3, [r7, #31]
 800228e:	2b08      	cmp	r3, #8
 8002290:	d85c      	bhi.n	800234c <UART_SetConfig+0x418>
 8002292:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <UART_SetConfig+0x364>)
 8002294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002298:	080022bd 	.word	0x080022bd
 800229c:	080022dd 	.word	0x080022dd
 80022a0:	080022fd 	.word	0x080022fd
 80022a4:	0800234d 	.word	0x0800234d
 80022a8:	08002315 	.word	0x08002315
 80022ac:	0800234d 	.word	0x0800234d
 80022b0:	0800234d 	.word	0x0800234d
 80022b4:	0800234d 	.word	0x0800234d
 80022b8:	08002335 	.word	0x08002335
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022bc:	f7ff f944 	bl	8001548 <HAL_RCC_GetPCLK1Freq>
 80022c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	005a      	lsls	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	085b      	lsrs	r3, r3, #1
 80022cc:	441a      	add	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	61bb      	str	r3, [r7, #24]
        break;
 80022da:	e03a      	b.n	8002352 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80022dc:	f7ff f948 	bl	8001570 <HAL_RCC_GetPCLK2Freq>
 80022e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	005a      	lsls	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	085b      	lsrs	r3, r3, #1
 80022ec:	441a      	add	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	61bb      	str	r3, [r7, #24]
        break;
 80022fa:	e02a      	b.n	8002352 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	085a      	lsrs	r2, r3, #1
 8002302:	4b5f      	ldr	r3, [pc, #380]	; (8002480 <UART_SetConfig+0x54c>)
 8002304:	4413      	add	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6852      	ldr	r2, [r2, #4]
 800230a:	fbb3 f3f2 	udiv	r3, r3, r2
 800230e:	b29b      	uxth	r3, r3
 8002310:	61bb      	str	r3, [r7, #24]
        break;
 8002312:	e01e      	b.n	8002352 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002314:	f7ff f834 	bl	8001380 <HAL_RCC_GetSysClockFreq>
 8002318:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	005a      	lsls	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	085b      	lsrs	r3, r3, #1
 8002324:	441a      	add	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	b29b      	uxth	r3, r3
 8002330:	61bb      	str	r3, [r7, #24]
        break;
 8002332:	e00e      	b.n	8002352 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	b29b      	uxth	r3, r3
 8002348:	61bb      	str	r3, [r7, #24]
        break;
 800234a:	e002      	b.n	8002352 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	75fb      	strb	r3, [r7, #23]
        break;
 8002350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b0f      	cmp	r3, #15
 8002356:	d916      	bls.n	8002386 <UART_SetConfig+0x452>
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235e:	d212      	bcs.n	8002386 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	b29b      	uxth	r3, r3
 8002364:	f023 030f 	bic.w	r3, r3, #15
 8002368:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	085b      	lsrs	r3, r3, #1
 800236e:	b29b      	uxth	r3, r3
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	b29a      	uxth	r2, r3
 8002376:	897b      	ldrh	r3, [r7, #10]
 8002378:	4313      	orrs	r3, r2
 800237a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	897a      	ldrh	r2, [r7, #10]
 8002382:	60da      	str	r2, [r3, #12]
 8002384:	e070      	b.n	8002468 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	75fb      	strb	r3, [r7, #23]
 800238a:	e06d      	b.n	8002468 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800238c:	7ffb      	ldrb	r3, [r7, #31]
 800238e:	2b08      	cmp	r3, #8
 8002390:	d859      	bhi.n	8002446 <UART_SetConfig+0x512>
 8002392:	a201      	add	r2, pc, #4	; (adr r2, 8002398 <UART_SetConfig+0x464>)
 8002394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002398:	080023bd 	.word	0x080023bd
 800239c:	080023db 	.word	0x080023db
 80023a0:	080023f9 	.word	0x080023f9
 80023a4:	08002447 	.word	0x08002447
 80023a8:	08002411 	.word	0x08002411
 80023ac:	08002447 	.word	0x08002447
 80023b0:	08002447 	.word	0x08002447
 80023b4:	08002447 	.word	0x08002447
 80023b8:	0800242f 	.word	0x0800242f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023bc:	f7ff f8c4 	bl	8001548 <HAL_RCC_GetPCLK1Freq>
 80023c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	085a      	lsrs	r2, r3, #1
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	441a      	add	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	61bb      	str	r3, [r7, #24]
        break;
 80023d8:	e038      	b.n	800244c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023da:	f7ff f8c9 	bl	8001570 <HAL_RCC_GetPCLK2Freq>
 80023de:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	085a      	lsrs	r2, r3, #1
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	441a      	add	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	61bb      	str	r3, [r7, #24]
        break;
 80023f6:	e029      	b.n	800244c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	085a      	lsrs	r2, r3, #1
 80023fe:	4b21      	ldr	r3, [pc, #132]	; (8002484 <UART_SetConfig+0x550>)
 8002400:	4413      	add	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6852      	ldr	r2, [r2, #4]
 8002406:	fbb3 f3f2 	udiv	r3, r3, r2
 800240a:	b29b      	uxth	r3, r3
 800240c:	61bb      	str	r3, [r7, #24]
        break;
 800240e:	e01d      	b.n	800244c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002410:	f7fe ffb6 	bl	8001380 <HAL_RCC_GetSysClockFreq>
 8002414:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	085a      	lsrs	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	441a      	add	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	b29b      	uxth	r3, r3
 800242a:	61bb      	str	r3, [r7, #24]
        break;
 800242c:	e00e      	b.n	800244c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	b29b      	uxth	r3, r3
 8002442:	61bb      	str	r3, [r7, #24]
        break;
 8002444:	e002      	b.n	800244c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	75fb      	strb	r3, [r7, #23]
        break;
 800244a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2b0f      	cmp	r3, #15
 8002450:	d908      	bls.n	8002464 <UART_SetConfig+0x530>
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002458:	d204      	bcs.n	8002464 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	e001      	b.n	8002468 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002474:	7dfb      	ldrb	r3, [r7, #23]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3720      	adds	r7, #32
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	01e84800 	.word	0x01e84800
 8002484:	00f42400 	.word	0x00f42400

08002488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01a      	beq.n	800259e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002586:	d10a      	bne.n	800259e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	605a      	str	r2, [r3, #4]
  }
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80025da:	f7fd ffe7 	bl	80005ac <HAL_GetTick>
 80025de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d10e      	bne.n	800260c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f814 	bl	800262a <UART_WaitOnFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e00a      	b.n	8002622 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	4613      	mov	r3, r2
 8002638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800263a:	e05d      	b.n	80026f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002642:	d059      	beq.n	80026f8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002644:	f7fd ffb2 	bl	80005ac <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	429a      	cmp	r2, r3
 8002652:	d302      	bcc.n	800265a <UART_WaitOnFlagUntilTimeout+0x30>
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d11b      	bne.n	8002692 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002668:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e042      	b.n	8002718 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d02b      	beq.n	80026f8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ae:	d123      	bne.n	80026f8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026b8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0201 	bic.w	r2, r2, #1
 80026d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2220      	movs	r2, #32
 80026ea:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e00f      	b.n	8002718 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4013      	ands	r3, r2
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	429a      	cmp	r2, r3
 8002714:	d092      	beq.n	800263c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_GPIO_EXTI_Callback>:

/**
 * Overwriting existing void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 * Handle interrupt, get interrupt id (from lookup table) and set bitmap
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	80fb      	strh	r3, [r7, #6]

}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08e      	sub	sp, #56	; 0x38
 800273c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	609a      	str	r2, [r3, #8]
 800274a:	60da      	str	r2, [r3, #12]
 800274c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800274e:	4bb4      	ldr	r3, [pc, #720]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4ab3      	ldr	r2, [pc, #716]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 8002754:	f043 0310 	orr.w	r3, r3, #16
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4bb1      	ldr	r3, [pc, #708]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	623b      	str	r3, [r7, #32]
 8002764:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002766:	4bae      	ldr	r3, [pc, #696]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4aad      	ldr	r2, [pc, #692]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4bab      	ldr	r3, [pc, #684]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800277e:	4ba8      	ldr	r3, [pc, #672]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4aa7      	ldr	r2, [pc, #668]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 8002784:	f043 0320 	orr.w	r3, r3, #32
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4ba5      	ldr	r3, [pc, #660]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	61bb      	str	r3, [r7, #24]
 8002794:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002796:	4ba2      	ldr	r3, [pc, #648]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4aa1      	ldr	r2, [pc, #644]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 800279c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b9f      	ldr	r3, [pc, #636]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ae:	4b9c      	ldr	r3, [pc, #624]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a9b      	ldr	r2, [pc, #620]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b99      	ldr	r3, [pc, #612]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	4b96      	ldr	r3, [pc, #600]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a95      	ldr	r2, [pc, #596]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b93      	ldr	r3, [pc, #588]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027de:	4b90      	ldr	r3, [pc, #576]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	4a8f      	ldr	r2, [pc, #572]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 80027e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027e8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ea:	4b8d      	ldr	r3, [pc, #564]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f6:	4b8a      	ldr	r3, [pc, #552]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	4a89      	ldr	r2, [pc, #548]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 80027fc:	f043 0308 	orr.w	r3, r3, #8
 8002800:	6313      	str	r3, [r2, #48]	; 0x30
 8002802:	4b87      	ldr	r3, [pc, #540]	; (8002a20 <MX_GPIO_Init+0x2e8>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800280e:	2200      	movs	r2, #0
 8002810:	f244 0181 	movw	r1, #16513	; 0x4081
 8002814:	4883      	ldr	r0, [pc, #524]	; (8002a24 <MX_GPIO_Init+0x2ec>)
 8002816:	f7fe f991 	bl	8000b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRES_GPIO_Port, nRES_Pin, GPIO_PIN_RESET);
 800281a:	2200      	movs	r2, #0
 800281c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002820:	4881      	ldr	r0, [pc, #516]	; (8002a28 <MX_GPIO_Init+0x2f0>)
 8002822:	f7fe f98b 	bl	8000b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Time_GPIO_Port, Time_Pin, GPIO_PIN_RESET);
 8002826:	2200      	movs	r2, #0
 8002828:	f44f 7100 	mov.w	r1, #512	; 0x200
 800282c:	487f      	ldr	r0, [pc, #508]	; (8002a2c <MX_GPIO_Init+0x2f4>)
 800282e:	f7fe f985 	bl	8000b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nCS_Pin|START_Pin, GPIO_PIN_RESET);
 8002832:	2200      	movs	r2, #0
 8002834:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002838:	487d      	ldr	r0, [pc, #500]	; (8002a30 <MX_GPIO_Init+0x2f8>)
 800283a:	f7fe f97f 	bl	8000b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800283e:	2200      	movs	r2, #0
 8002840:	2140      	movs	r1, #64	; 0x40
 8002842:	487c      	ldr	r0, [pc, #496]	; (8002a34 <MX_GPIO_Init+0x2fc>)
 8002844:	f7fe f97a 	bl	8000b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE10 
                           PE11 PE12 PE13 PE14 
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8002848:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800284e:	2303      	movs	r3, #3
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800285a:	4619      	mov	r1, r3
 800285c:	4873      	ldr	r0, [pc, #460]	; (8002a2c <MX_GPIO_Init+0x2f4>)
 800285e:	f7fd ffc3 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002868:	4b73      	ldr	r3, [pc, #460]	; (8002a38 <MX_GPIO_Init+0x300>)
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002874:	4619      	mov	r1, r3
 8002876:	4871      	ldr	r0, [pc, #452]	; (8002a3c <MX_GPIO_Init+0x304>)
 8002878:	f7fd ffb6 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 
                           PF4 PF5 PF6 PF7 
                           PF8 PF9 PF10 PF11 
                           PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800287c:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002882:	2303      	movs	r3, #3
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800288a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288e:	4619      	mov	r1, r3
 8002890:	4865      	ldr	r0, [pc, #404]	; (8002a28 <MX_GPIO_Init+0x2f0>)
 8002892:	f7fd ffa9 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC6 
                           PC7 PC8 PC9 PC10 
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6 
 8002896:	f641 73cd 	movw	r3, #8141	; 0x1fcd
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800289c:	2303      	movs	r3, #3
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a8:	4619      	mov	r1, r3
 80028aa:	4864      	ldr	r0, [pc, #400]	; (8002a3c <MX_GPIO_Init+0x304>)
 80028ac:	f7fd ff9c 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80028b0:	2332      	movs	r3, #50	; 0x32
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028bc:	2303      	movs	r3, #3
 80028be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028c0:	230b      	movs	r3, #11
 80028c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c8:	4619      	mov	r1, r3
 80028ca:	485c      	ldr	r0, [pc, #368]	; (8002a3c <MX_GPIO_Init+0x304>)
 80028cc:	f7fd ff8c 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 80028d0:	f248 0319 	movw	r3, #32793	; 0x8019
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028d6:	2303      	movs	r3, #3
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e2:	4619      	mov	r1, r3
 80028e4:	4856      	ldr	r0, [pc, #344]	; (8002a40 <MX_GPIO_Init+0x308>)
 80028e6:	f7fd ff7f 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80028ea:	2386      	movs	r3, #134	; 0x86
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f6:	2303      	movs	r3, #3
 80028f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028fa:	230b      	movs	r3, #11
 80028fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002902:	4619      	mov	r1, r3
 8002904:	484e      	ldr	r0, [pc, #312]	; (8002a40 <MX_GPIO_Init+0x308>)
 8002906:	f7fd ff6f 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800290a:	f244 0381 	movw	r3, #16513	; 0x4081
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002910:	2301      	movs	r3, #1
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002918:	2300      	movs	r3, #0
 800291a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002920:	4619      	mov	r1, r3
 8002922:	4840      	ldr	r0, [pc, #256]	; (8002a24 <MX_GPIO_Init+0x2ec>)
 8002924:	f7fd ff60 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 
                           PB12 PB15 PB4 PB6 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 8002928:	f649 7356 	movw	r3, #40790	; 0x9f56
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800292e:	2303      	movs	r3, #3
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800293a:	4619      	mov	r1, r3
 800293c:	4839      	ldr	r0, [pc, #228]	; (8002a24 <MX_GPIO_Init+0x2ec>)
 800293e:	f7fd ff53 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_Pin;
 8002942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002948:	4b3e      	ldr	r3, [pc, #248]	; (8002a44 <MX_GPIO_Init+0x30c>)
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(nDRDY_GPIO_Port, &GPIO_InitStruct);
 8002950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002954:	4619      	mov	r1, r3
 8002956:	4834      	ldr	r0, [pc, #208]	; (8002a28 <MX_GPIO_Init+0x2f0>)
 8002958:	f7fd ff46 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRES_Pin;
 800295c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002962:	2301      	movs	r3, #1
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296a:	2303      	movs	r3, #3
 800296c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(nRES_GPIO_Port, &GPIO_InitStruct);
 800296e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002972:	4619      	mov	r1, r3
 8002974:	482c      	ldr	r0, [pc, #176]	; (8002a28 <MX_GPIO_Init+0x2f0>)
 8002976:	f7fd ff37 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG5 PG8 PG9 
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800297a:	f24d 733f 	movw	r3, #55103	; 0xd73f
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002980:	2303      	movs	r3, #3
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800298c:	4619      	mov	r1, r3
 800298e:	4829      	ldr	r0, [pc, #164]	; (8002a34 <MX_GPIO_Init+0x2fc>)
 8002990:	f7fd ff2a 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Time_Pin;
 8002994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299a:	2301      	movs	r3, #1
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Time_GPIO_Port, &GPIO_InitStruct);
 80029a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029aa:	4619      	mov	r1, r3
 80029ac:	481f      	ldr	r0, [pc, #124]	; (8002a2c <MX_GPIO_Init+0x2f4>)
 80029ae:	f7fd ff1b 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80029b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c0:	2303      	movs	r3, #3
 80029c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029c4:	230b      	movs	r3, #11
 80029c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80029c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029cc:	4619      	mov	r1, r3
 80029ce:	4815      	ldr	r0, [pc, #84]	; (8002a24 <MX_GPIO_Init+0x2ec>)
 80029d0:	f7fd ff0a 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 80029d4:	f643 43ff 	movw	r3, #15615	; 0x3cff
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029da:	2303      	movs	r3, #3
 80029dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e6:	4619      	mov	r1, r3
 80029e8:	4811      	ldr	r0, [pc, #68]	; (8002a30 <MX_GPIO_Init+0x2f8>)
 80029ea:	f7fd fefd 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = nCS_Pin|START_Pin;
 80029ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f4:	2301      	movs	r3, #1
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fc:	2303      	movs	r3, #3
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a04:	4619      	mov	r1, r3
 8002a06:	480a      	ldr	r0, [pc, #40]	; (8002a30 <MX_GPIO_Init+0x2f8>)
 8002a08:	f7fd feee 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002a0c:	2340      	movs	r3, #64	; 0x40
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a10:	2301      	movs	r3, #1
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a1c:	e014      	b.n	8002a48 <MX_GPIO_Init+0x310>
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40020400 	.word	0x40020400
 8002a28:	40021400 	.word	0x40021400
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40020c00 	.word	0x40020c00
 8002a34:	40021800 	.word	0x40021800
 8002a38:	10110000 	.word	0x10110000
 8002a3c:	40020800 	.word	0x40020800
 8002a40:	40020000 	.word	0x40020000
 8002a44:	10210000 	.word	0x10210000
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4825      	ldr	r0, [pc, #148]	; (8002ae4 <MX_GPIO_Init+0x3ac>)
 8002a50:	f7fd feca 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a64:	4619      	mov	r1, r3
 8002a66:	481f      	ldr	r0, [pc, #124]	; (8002ae4 <MX_GPIO_Init+0x3ac>)
 8002a68:	f7fd febe 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002a6c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a7e:	230a      	movs	r3, #10
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a86:	4619      	mov	r1, r3
 8002a88:	4817      	ldr	r0, [pc, #92]	; (8002ae8 <MX_GPIO_Init+0x3b0>)
 8002a8a:	f7fd fead 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002a8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4811      	ldr	r0, [pc, #68]	; (8002ae8 <MX_GPIO_Init+0x3b0>)
 8002aa4:	f7fd fea0 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002aa8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002aba:	230b      	movs	r3, #11
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4807      	ldr	r0, [pc, #28]	; (8002ae4 <MX_GPIO_Init+0x3ac>)
 8002ac6:	f7fd fe8f 	bl	80007e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2105      	movs	r1, #5
 8002ace:	2028      	movs	r0, #40	; 0x28
 8002ad0:	f7fd fe53 	bl	800077a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ad4:	2028      	movs	r0, #40	; 0x28
 8002ad6:	f7fd fe6c 	bl	80007b2 <HAL_NVIC_EnableIRQ>

}
 8002ada:	bf00      	nop
 8002adc:	3738      	adds	r7, #56	; 0x38
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40021800 	.word	0x40021800
 8002ae8:	40020000 	.word	0x40020000

08002aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002af2:	f7fd fd09 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002af6:	f000 f81f 	bl	8002b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002afa:	f7ff fe1d 	bl	8002738 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002afe:	f000 f9c9 	bl	8002e94 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002b02:	f000 f8b3 	bl	8002c6c <MX_SPI1_Init>
//	init_adc();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t s = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	607b      	str	r3, [r7, #4]
	while (1) {
    /* USER CODE END WHILE */
		s = LOOKUP_PIN_INDEX(nDRDY_Pin);
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	607b      	str	r3, [r7, #4]
		s = LOOKUP_PINBLOCK_INDEX(nDRDY_GPIO_Port);
 8002b0e:	2305      	movs	r3, #5
 8002b10:	607b      	str	r3, [r7, #4]
		s = ADCLookup[LOOKUP_PINBLOCK_INDEX(nDRDY_GPIO_Port)][LOOKUP_PIN_INDEX(nDRDY_Pin)];
 8002b12:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <main+0x44>)
 8002b14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b18:	607b      	str	r3, [r7, #4]
		s = ADCBitMap & (~(0x1 << s));
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <main+0x48>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	607b      	str	r3, [r7, #4]
		s = LOOKUP_PIN_INDEX(nDRDY_Pin);
 8002b2e:	e7ec      	b.n	8002b0a <main+0x1e>
 8002b30:	20000008 	.word	0x20000008
 8002b34:	200000b8 	.word	0x200000b8

08002b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b0b4      	sub	sp, #208	; 0xd0
 8002b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002b42:	2230      	movs	r2, #48	; 0x30
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fa66 	bl	8003018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b4c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b5c:	f107 0308 	add.w	r3, r7, #8
 8002b60:	2284      	movs	r2, #132	; 0x84
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fa57 	bl	8003018 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002b6a:	f7fe f819 	bl	8000ba0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b6e:	4b39      	ldr	r3, [pc, #228]	; (8002c54 <SystemClock_Config+0x11c>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	4a38      	ldr	r2, [pc, #224]	; (8002c54 <SystemClock_Config+0x11c>)
 8002b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b78:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7a:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <SystemClock_Config+0x11c>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b86:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <SystemClock_Config+0x120>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a33      	ldr	r2, [pc, #204]	; (8002c58 <SystemClock_Config+0x120>)
 8002b8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	4b31      	ldr	r3, [pc, #196]	; (8002c58 <SystemClock_Config+0x120>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002ba4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002ba8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bac:	2302      	movs	r3, #2
 8002bae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 7;
 8002bba:	2307      	movs	r3, #7
 8002bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002bc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002bce:	2308      	movs	r3, #8
 8002bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bd4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe f841 	bl	8000c60 <HAL_RCC_OscConfig>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002be4:	f000 f83a 	bl	8002c5c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002be8:	f7fd ffea 	bl	8000bc0 <HAL_PWREx_EnableOverDrive>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002bf2:	f000 f833 	bl	8002c5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bf6:	230f      	movs	r3, #15
 8002bf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8002c08:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8002c10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002c18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c1c:	2106      	movs	r1, #6
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe fac2 	bl	80011a8 <HAL_RCC_ClockConfig>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002c2a:	f000 f817 	bl	8002c5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c32:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c34:	2300      	movs	r3, #0
 8002c36:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c38:	f107 0308 	add.w	r3, r7, #8
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe fcab 	bl	8001598 <HAL_RCCEx_PeriphCLKConfig>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <SystemClock_Config+0x114>
  {
    Error_Handler();
 8002c48:	f000 f808 	bl	8002c5c <Error_Handler>
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	37d0      	adds	r7, #208	; 0xd0
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40007000 	.word	0x40007000

08002c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002c72:	4a1c      	ldr	r2, [pc, #112]	; (8002ce4 <MX_SPI1_Init+0x78>)
 8002c74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c76:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002c78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c84:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002c86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002c8e:	2202      	movs	r2, #2
 8002c90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002cba:	2207      	movs	r2, #7
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cca:	4805      	ldr	r0, [pc, #20]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002ccc:	f7ff f852 	bl	8001d74 <HAL_SPI_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002cd6:	f7ff ffc1 	bl	8002c5c <Error_Handler>
  }

}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200000e0 	.word	0x200000e0
 8002ce4:	40013000 	.word	0x40013000

08002ce8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a25      	ldr	r2, [pc, #148]	; (8002d9c <HAL_SPI_MspInit+0xb4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d143      	bne.n	8002d92 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d0a:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <HAL_SPI_MspInit+0xb8>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	4a24      	ldr	r2, [pc, #144]	; (8002da0 <HAL_SPI_MspInit+0xb8>)
 8002d10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d14:	6453      	str	r3, [r2, #68]	; 0x44
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_SPI_MspInit+0xb8>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d22:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <HAL_SPI_MspInit+0xb8>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <HAL_SPI_MspInit+0xb8>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <HAL_SPI_MspInit+0xb8>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3a:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_SPI_MspInit+0xb8>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <HAL_SPI_MspInit+0xb8>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <HAL_SPI_MspInit+0xb8>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002d52:	2360      	movs	r3, #96	; 0x60
 8002d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d62:	2305      	movs	r3, #5
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d66:	f107 0314 	add.w	r3, r7, #20
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	480d      	ldr	r0, [pc, #52]	; (8002da4 <HAL_SPI_MspInit+0xbc>)
 8002d6e:	f7fd fd3b 	bl	80007e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d72:	2320      	movs	r3, #32
 8002d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d76:	2302      	movs	r3, #2
 8002d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d82:	2305      	movs	r3, #5
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4806      	ldr	r0, [pc, #24]	; (8002da8 <HAL_SPI_MspInit+0xc0>)
 8002d8e:	f7fd fd2b 	bl	80007e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d92:	bf00      	nop
 8002d94:	3728      	adds	r7, #40	; 0x28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40013000 	.word	0x40013000
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40020000 	.word	0x40020000
 8002da8:	40020400 	.word	0x40020400

08002dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <HAL_MspInit+0x44>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <HAL_MspInit+0x44>)
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <HAL_MspInit+0x44>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_MspInit+0x44>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <HAL_MspInit+0x44>)
 8002dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_MspInit+0x44>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800

08002df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e06:	e7fe      	b.n	8002e06 <HardFault_Handler+0x4>

08002e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e0c:	e7fe      	b.n	8002e0c <MemManage_Handler+0x4>

08002e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e12:	e7fe      	b.n	8002e12 <BusFault_Handler+0x4>

08002e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e18:	e7fe      	b.n	8002e18 <UsageFault_Handler+0x4>

08002e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 HAL_IncTick();
 8002e48:	f7fd fb9c 	bl	8000584 <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002e54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002e58:	f7fd fe8a 	bl	8000b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002e5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e60:	f7fd fe86 	bl	8000b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <SystemInit+0x28>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e72:	4a07      	ldr	r2, [pc, #28]	; (8002e90 <SystemInit+0x28>)
 8002e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <SystemInit+0x28>)
 8002e7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e82:	609a      	str	r2, [r3, #8]
#endif
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002e98:	4b14      	ldr	r3, [pc, #80]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002e9a:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <MX_USART3_UART_Init+0x5c>)
 8002e9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e9e:	4b13      	ldr	r3, [pc, #76]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ea4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea6:	4b11      	ldr	r3, [pc, #68]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002eac:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002eba:	220c      	movs	r2, #12
 8002ebc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ed6:	4805      	ldr	r0, [pc, #20]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002ed8:	f7fe ffde 	bl	8001e98 <HAL_UART_Init>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002ee2:	f7ff febb 	bl	8002c5c <Error_Handler>
  }

}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000144 	.word	0x20000144
 8002ef0:	40004800 	.word	0x40004800

08002ef4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08a      	sub	sp, #40	; 0x28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a17      	ldr	r2, [pc, #92]	; (8002f70 <HAL_UART_MspInit+0x7c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d128      	bne.n	8002f68 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f16:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <HAL_UART_MspInit+0x80>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <HAL_UART_MspInit+0x80>)
 8002f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f20:	6413      	str	r3, [r2, #64]	; 0x40
 8002f22:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <HAL_UART_MspInit+0x80>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f2e:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <HAL_UART_MspInit+0x80>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a10      	ldr	r2, [pc, #64]	; (8002f74 <HAL_UART_MspInit+0x80>)
 8002f34:	f043 0308 	orr.w	r3, r3, #8
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <HAL_UART_MspInit+0x80>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002f46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f54:	2303      	movs	r3, #3
 8002f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f58:	2307      	movs	r3, #7
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	4619      	mov	r1, r3
 8002f62:	4805      	ldr	r0, [pc, #20]	; (8002f78 <HAL_UART_MspInit+0x84>)
 8002f64:	f7fd fc40 	bl	80007e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f68:	bf00      	nop
 8002f6a:	3728      	adds	r7, #40	; 0x28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40004800 	.word	0x40004800
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40020c00 	.word	0x40020c00

08002f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f82:	e003      	b.n	8002f8c <LoopCopyDataInit>

08002f84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f8a:	3104      	adds	r1, #4

08002f8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f8c:	480b      	ldr	r0, [pc, #44]	; (8002fbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f94:	d3f6      	bcc.n	8002f84 <CopyDataInit>
  ldr  r2, =_sbss
 8002f96:	4a0b      	ldr	r2, [pc, #44]	; (8002fc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f98:	e002      	b.n	8002fa0 <LoopFillZerobss>

08002f9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f9c:	f842 3b04 	str.w	r3, [r2], #4

08002fa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002fa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fa4:	d3f9      	bcc.n	8002f9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fa6:	f7ff ff5f 	bl	8002e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002faa:	f000 f811 	bl	8002fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fae:	f7ff fd9d 	bl	8002aec <main>
  bx  lr    
 8002fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fb4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002fb8:	08003068 	.word	0x08003068
  ldr  r0, =_sdata
 8002fbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fc0:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8002fc4:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 8002fc8:	200001c4 	.word	0x200001c4

08002fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fcc:	e7fe      	b.n	8002fcc <ADC_IRQHandler>
	...

08002fd0 <__libc_init_array>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	4e0d      	ldr	r6, [pc, #52]	; (8003008 <__libc_init_array+0x38>)
 8002fd4:	4c0d      	ldr	r4, [pc, #52]	; (800300c <__libc_init_array+0x3c>)
 8002fd6:	1ba4      	subs	r4, r4, r6
 8002fd8:	10a4      	asrs	r4, r4, #2
 8002fda:	2500      	movs	r5, #0
 8002fdc:	42a5      	cmp	r5, r4
 8002fde:	d109      	bne.n	8002ff4 <__libc_init_array+0x24>
 8002fe0:	4e0b      	ldr	r6, [pc, #44]	; (8003010 <__libc_init_array+0x40>)
 8002fe2:	4c0c      	ldr	r4, [pc, #48]	; (8003014 <__libc_init_array+0x44>)
 8002fe4:	f000 f820 	bl	8003028 <_init>
 8002fe8:	1ba4      	subs	r4, r4, r6
 8002fea:	10a4      	asrs	r4, r4, #2
 8002fec:	2500      	movs	r5, #0
 8002fee:	42a5      	cmp	r5, r4
 8002ff0:	d105      	bne.n	8002ffe <__libc_init_array+0x2e>
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ff8:	4798      	blx	r3
 8002ffa:	3501      	adds	r5, #1
 8002ffc:	e7ee      	b.n	8002fdc <__libc_init_array+0xc>
 8002ffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003002:	4798      	blx	r3
 8003004:	3501      	adds	r5, #1
 8003006:	e7f2      	b.n	8002fee <__libc_init_array+0x1e>
 8003008:	08003060 	.word	0x08003060
 800300c:	08003060 	.word	0x08003060
 8003010:	08003060 	.word	0x08003060
 8003014:	08003064 	.word	0x08003064

08003018 <memset>:
 8003018:	4402      	add	r2, r0
 800301a:	4603      	mov	r3, r0
 800301c:	4293      	cmp	r3, r2
 800301e:	d100      	bne.n	8003022 <memset+0xa>
 8003020:	4770      	bx	lr
 8003022:	f803 1b01 	strb.w	r1, [r3], #1
 8003026:	e7f9      	b.n	800301c <memset+0x4>

08003028 <_init>:
 8003028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302a:	bf00      	nop
 800302c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302e:	bc08      	pop	{r3}
 8003030:	469e      	mov	lr, r3
 8003032:	4770      	bx	lr

08003034 <_fini>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	bf00      	nop
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr
