
StampSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007310  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  080074a0  080074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007778  08007778  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007778  08007778  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007778  08007778  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007778  08007778  00017778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800777c  0800777c  0001777c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ac0  20000010  08007790  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ad0  08007790  00021ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf7b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b1c  00000000  00000000  0003cfbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016d8  00000000  00000000  00040ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001500  00000000  00000000  000421b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bdcc  00000000  00000000  000436b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000169b3  00000000  00000000  0005f47c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000993f2  00000000  00000000  00075e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010f221  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dec  00000000  00000000  0010f29c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007488 	.word	0x08007488

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007488 	.word	0x08007488

080001d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_Init+0x28>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a07      	ldr	r2, [pc, #28]	; (80001f8 <HAL_Init+0x28>)
 80001da:	f043 0310 	orr.w	r3, r3, #16
 80001de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e0:	2003      	movs	r0, #3
 80001e2:	f000 f8d9 	bl	8000398 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001e6:	2000      	movs	r0, #0
 80001e8:	f006 ffae 	bl	8007148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001ec:	f006 ff84 	bl	80070f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f0:	2300      	movs	r3, #0
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40022000 	.word	0x40022000

080001fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <HAL_IncTick+0x20>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	461a      	mov	r2, r3
 8000206:	4b06      	ldr	r3, [pc, #24]	; (8000220 <HAL_IncTick+0x24>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4413      	add	r3, r2
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <HAL_IncTick+0x24>)
 800020e:	6013      	str	r3, [r2, #0]
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	20000004 	.word	0x20000004
 8000220:	20001934 	.word	0x20001934

08000224 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
  return uwTick;  
 8000228:	4b03      	ldr	r3, [pc, #12]	; (8000238 <HAL_GetTick+0x14>)
 800022a:	681b      	ldr	r3, [r3, #0]
}
 800022c:	4618      	mov	r0, r3
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	20001934 	.word	0x20001934

0800023c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f003 0307 	and.w	r3, r3, #7
 800024a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <__NVIC_SetPriorityGrouping+0x44>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000252:	68ba      	ldr	r2, [r7, #8]
 8000254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000258:	4013      	ands	r3, r2
 800025a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800026c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800026e:	4a04      	ldr	r2, [pc, #16]	; (8000280 <__NVIC_SetPriorityGrouping+0x44>)
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	60d3      	str	r3, [r2, #12]
}
 8000274:	bf00      	nop
 8000276:	3714      	adds	r7, #20
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000288:	4b04      	ldr	r3, [pc, #16]	; (800029c <__NVIC_GetPriorityGrouping+0x18>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	0a1b      	lsrs	r3, r3, #8
 800028e:	f003 0307 	and.w	r3, r3, #7
}
 8000292:	4618      	mov	r0, r3
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	e000ed00 	.word	0xe000ed00

080002a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db0b      	blt.n	80002ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	f003 021f 	and.w	r2, r3, #31
 80002b8:	4907      	ldr	r1, [pc, #28]	; (80002d8 <__NVIC_EnableIRQ+0x38>)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	095b      	lsrs	r3, r3, #5
 80002c0:	2001      	movs	r0, #1
 80002c2:	fa00 f202 	lsl.w	r2, r0, r2
 80002c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e100 	.word	0xe000e100

080002dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	6039      	str	r1, [r7, #0]
 80002e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	db0a      	blt.n	8000306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	490c      	ldr	r1, [pc, #48]	; (8000328 <__NVIC_SetPriority+0x4c>)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	0112      	lsls	r2, r2, #4
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	440b      	add	r3, r1
 8000300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000304:	e00a      	b.n	800031c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4908      	ldr	r1, [pc, #32]	; (800032c <__NVIC_SetPriority+0x50>)
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3b04      	subs	r3, #4
 8000314:	0112      	lsls	r2, r2, #4
 8000316:	b2d2      	uxtb	r2, r2
 8000318:	440b      	add	r3, r1
 800031a:	761a      	strb	r2, [r3, #24]
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000330:	b480      	push	{r7}
 8000332:	b089      	sub	sp, #36	; 0x24
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	f003 0307 	and.w	r3, r3, #7
 8000342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000344:	69fb      	ldr	r3, [r7, #28]
 8000346:	f1c3 0307 	rsb	r3, r3, #7
 800034a:	2b04      	cmp	r3, #4
 800034c:	bf28      	it	cs
 800034e:	2304      	movcs	r3, #4
 8000350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000352:	69fb      	ldr	r3, [r7, #28]
 8000354:	3304      	adds	r3, #4
 8000356:	2b06      	cmp	r3, #6
 8000358:	d902      	bls.n	8000360 <NVIC_EncodePriority+0x30>
 800035a:	69fb      	ldr	r3, [r7, #28]
 800035c:	3b03      	subs	r3, #3
 800035e:	e000      	b.n	8000362 <NVIC_EncodePriority+0x32>
 8000360:	2300      	movs	r3, #0
 8000362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	f04f 32ff 	mov.w	r2, #4294967295
 8000368:	69bb      	ldr	r3, [r7, #24]
 800036a:	fa02 f303 	lsl.w	r3, r2, r3
 800036e:	43da      	mvns	r2, r3
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	401a      	ands	r2, r3
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000378:	f04f 31ff 	mov.w	r1, #4294967295
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	fa01 f303 	lsl.w	r3, r1, r3
 8000382:	43d9      	mvns	r1, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000388:	4313      	orrs	r3, r2
         );
}
 800038a:	4618      	mov	r0, r3
 800038c:	3724      	adds	r7, #36	; 0x24
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
	...

08000398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2b07      	cmp	r3, #7
 80003a4:	d00f      	beq.n	80003c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d00c      	beq.n	80003c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2b05      	cmp	r3, #5
 80003b0:	d009      	beq.n	80003c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b04      	cmp	r3, #4
 80003b6:	d006      	beq.n	80003c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b03      	cmp	r3, #3
 80003bc:	d003      	beq.n	80003c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80003be:	21ac      	movs	r1, #172	; 0xac
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80003c2:	f006 fe0c 	bl	8006fde <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f7ff ff38 	bl	800023c <__NVIC_SetPriorityGrouping>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	080074a0 	.word	0x080074a0

080003d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]
 80003e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2b0f      	cmp	r3, #15
 80003ee:	d903      	bls.n	80003f8 <HAL_NVIC_SetPriority+0x20>
 80003f0:	21c4      	movs	r1, #196	; 0xc4
 80003f2:	480e      	ldr	r0, [pc, #56]	; (800042c <HAL_NVIC_SetPriority+0x54>)
 80003f4:	f006 fdf3 	bl	8006fde <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	2b0f      	cmp	r3, #15
 80003fc:	d903      	bls.n	8000406 <HAL_NVIC_SetPriority+0x2e>
 80003fe:	21c5      	movs	r1, #197	; 0xc5
 8000400:	480a      	ldr	r0, [pc, #40]	; (800042c <HAL_NVIC_SetPriority+0x54>)
 8000402:	f006 fdec 	bl	8006fde <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000406:	f7ff ff3d 	bl	8000284 <__NVIC_GetPriorityGrouping>
 800040a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	68b9      	ldr	r1, [r7, #8]
 8000410:	6978      	ldr	r0, [r7, #20]
 8000412:	f7ff ff8d 	bl	8000330 <NVIC_EncodePriority>
 8000416:	4602      	mov	r2, r0
 8000418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800041c:	4611      	mov	r1, r2
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff ff5c 	bl	80002dc <__NVIC_SetPriority>
}
 8000424:	bf00      	nop
 8000426:	3718      	adds	r7, #24
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	080074a0 	.word	0x080074a0

08000430 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800043a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800043e:	2b00      	cmp	r3, #0
 8000440:	da03      	bge.n	800044a <HAL_NVIC_EnableIRQ+0x1a>
 8000442:	21d8      	movs	r1, #216	; 0xd8
 8000444:	4805      	ldr	r0, [pc, #20]	; (800045c <HAL_NVIC_EnableIRQ+0x2c>)
 8000446:	f006 fdca 	bl	8006fde <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800044a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ff26 	bl	80002a0 <__NVIC_EnableIRQ>
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	080074a0 	.word	0x080074a0

08000460 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d101      	bne.n	8000472 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800046e:	2301      	movs	r3, #1
 8000470:	e0a5      	b.n	80005be <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a54      	ldr	r2, [pc, #336]	; (80005c8 <HAL_CRC_Init+0x168>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d003      	beq.n	8000484 <HAL_CRC_Init+0x24>
 800047c:	2170      	movs	r1, #112	; 0x70
 800047e:	4853      	ldr	r0, [pc, #332]	; (80005cc <HAL_CRC_Init+0x16c>)
 8000480:	f006 fdad 	bl	8006fde <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	7f5b      	ldrb	r3, [r3, #29]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b00      	cmp	r3, #0
 800048c:	d105      	bne.n	800049a <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2200      	movs	r2, #0
 8000492:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f006 fbcb 	bl	8006c30 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2202      	movs	r2, #2
 800049e:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	791b      	ldrb	r3, [r3, #4]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d007      	beq.n	80004b8 <HAL_CRC_Init+0x58>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d003      	beq.n	80004b8 <HAL_CRC_Init+0x58>
 80004b0:	217e      	movs	r1, #126	; 0x7e
 80004b2:	4846      	ldr	r0, [pc, #280]	; (80005cc <HAL_CRC_Init+0x16c>)
 80004b4:	f006 fd93 	bl	8006fde <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	791b      	ldrb	r3, [r3, #4]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d10c      	bne.n	80004da <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a42      	ldr	r2, [pc, #264]	; (80005d0 <HAL_CRC_Init+0x170>)
 80004c6:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	689a      	ldr	r2, [r3, #8]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f022 0218 	bic.w	r2, r2, #24
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	e00c      	b.n	80004f4 <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6899      	ldr	r1, [r3, #8]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	68db      	ldr	r3, [r3, #12]
 80004e2:	461a      	mov	r2, r3
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f000 f875 	bl	80005d4 <HAL_CRCEx_Polynomial_Set>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 80004f0:	2301      	movs	r3, #1
 80004f2:	e064      	b.n	80005be <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d007      	beq.n	800050c <HAL_CRC_Init+0xac>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	795b      	ldrb	r3, [r3, #5]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d003      	beq.n	800050c <HAL_CRC_Init+0xac>
 8000504:	2190      	movs	r1, #144	; 0x90
 8000506:	4831      	ldr	r0, [pc, #196]	; (80005cc <HAL_CRC_Init+0x16c>)
 8000508:	f006 fd69 	bl	8006fde <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	795b      	ldrb	r3, [r3, #5]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d105      	bne.n	8000520 <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f04f 32ff 	mov.w	r2, #4294967295
 800051c:	611a      	str	r2, [r3, #16]
 800051e:	e004      	b.n	800052a <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	6912      	ldr	r2, [r2, #16]
 8000528:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d00f      	beq.n	8000552 <HAL_CRC_Init+0xf2>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	2b20      	cmp	r3, #32
 8000538:	d00b      	beq.n	8000552 <HAL_CRC_Init+0xf2>
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	2b40      	cmp	r3, #64	; 0x40
 8000540:	d007      	beq.n	8000552 <HAL_CRC_Init+0xf2>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	2b60      	cmp	r3, #96	; 0x60
 8000548:	d003      	beq.n	8000552 <HAL_CRC_Init+0xf2>
 800054a:	219c      	movs	r1, #156	; 0x9c
 800054c:	481f      	ldr	r0, [pc, #124]	; (80005cc <HAL_CRC_Init+0x16c>)
 800054e:	f006 fd46 	bl	8006fde <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	695a      	ldr	r2, [r3, #20]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	430a      	orrs	r2, r1
 8000566:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d007      	beq.n	8000580 <HAL_CRC_Init+0x120>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	2b80      	cmp	r3, #128	; 0x80
 8000576:	d003      	beq.n	8000580 <HAL_CRC_Init+0x120>
 8000578:	21a0      	movs	r1, #160	; 0xa0
 800057a:	4814      	ldr	r0, [pc, #80]	; (80005cc <HAL_CRC_Init+0x16c>)
 800057c:	f006 fd2f 	bl	8006fde <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	699a      	ldr	r2, [r3, #24]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	430a      	orrs	r2, r1
 8000594:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6a1b      	ldr	r3, [r3, #32]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d00b      	beq.n	80005b6 <HAL_CRC_Init+0x156>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6a1b      	ldr	r3, [r3, #32]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d007      	beq.n	80005b6 <HAL_CRC_Init+0x156>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6a1b      	ldr	r3, [r3, #32]
 80005aa:	2b03      	cmp	r3, #3
 80005ac:	d003      	beq.n	80005b6 <HAL_CRC_Init+0x156>
 80005ae:	21a5      	movs	r1, #165	; 0xa5
 80005b0:	4806      	ldr	r0, [pc, #24]	; (80005cc <HAL_CRC_Init+0x16c>)
 80005b2:	f006 fd14 	bl	8006fde <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2201      	movs	r2, #1
 80005ba:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023000 	.word	0x40023000
 80005cc:	080074dc 	.word	0x080074dc
 80005d0:	04c11db7 	.word	0x04c11db7

080005d4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80005e0:	2300      	movs	r3, #0
 80005e2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80005e4:	231f      	movs	r3, #31
 80005e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d00c      	beq.n	8000608 <HAL_CRCEx_Polynomial_Set+0x34>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b08      	cmp	r3, #8
 80005f2:	d009      	beq.n	8000608 <HAL_CRCEx_Polynomial_Set+0x34>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b10      	cmp	r3, #16
 80005f8:	d006      	beq.n	8000608 <HAL_CRCEx_Polynomial_Set+0x34>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b18      	cmp	r3, #24
 80005fe:	d003      	beq.n	8000608 <HAL_CRCEx_Polynomial_Set+0x34>
 8000600:	215f      	movs	r1, #95	; 0x5f
 8000602:	483e      	ldr	r0, [pc, #248]	; (80006fc <HAL_CRCEx_Polynomial_Set+0x128>)
 8000604:	f006 fceb 	bl	8006fde <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000608:	bf00      	nop
 800060a:	693b      	ldr	r3, [r7, #16]
 800060c:	1e5a      	subs	r2, r3, #1
 800060e:	613a      	str	r2, [r7, #16]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d009      	beq.n	8000628 <HAL_CRCEx_Polynomial_Set+0x54>
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	f003 031f 	and.w	r3, r3, #31
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	fa22 f303 	lsr.w	r3, r2, r3
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0f0      	beq.n	800060a <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b18      	cmp	r3, #24
 800062c:	d846      	bhi.n	80006bc <HAL_CRCEx_Polynomial_Set+0xe8>
 800062e:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <HAL_CRCEx_Polynomial_Set+0x60>)
 8000630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000634:	080006c3 	.word	0x080006c3
 8000638:	080006bd 	.word	0x080006bd
 800063c:	080006bd 	.word	0x080006bd
 8000640:	080006bd 	.word	0x080006bd
 8000644:	080006bd 	.word	0x080006bd
 8000648:	080006bd 	.word	0x080006bd
 800064c:	080006bd 	.word	0x080006bd
 8000650:	080006bd 	.word	0x080006bd
 8000654:	080006b1 	.word	0x080006b1
 8000658:	080006bd 	.word	0x080006bd
 800065c:	080006bd 	.word	0x080006bd
 8000660:	080006bd 	.word	0x080006bd
 8000664:	080006bd 	.word	0x080006bd
 8000668:	080006bd 	.word	0x080006bd
 800066c:	080006bd 	.word	0x080006bd
 8000670:	080006bd 	.word	0x080006bd
 8000674:	080006a5 	.word	0x080006a5
 8000678:	080006bd 	.word	0x080006bd
 800067c:	080006bd 	.word	0x080006bd
 8000680:	080006bd 	.word	0x080006bd
 8000684:	080006bd 	.word	0x080006bd
 8000688:	080006bd 	.word	0x080006bd
 800068c:	080006bd 	.word	0x080006bd
 8000690:	080006bd 	.word	0x080006bd
 8000694:	08000699 	.word	0x08000699
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	2b06      	cmp	r3, #6
 800069c:	d913      	bls.n	80006c6 <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80006a2:	e010      	b.n	80006c6 <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	2b07      	cmp	r3, #7
 80006a8:	d90f      	bls.n	80006ca <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80006ae:	e00c      	b.n	80006ca <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	2b0f      	cmp	r3, #15
 80006b4:	d90b      	bls.n	80006ce <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80006ba:	e008      	b.n	80006ce <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	75fb      	strb	r3, [r7, #23]
      break;
 80006c0:	e006      	b.n	80006d0 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80006c2:	bf00      	nop
 80006c4:	e004      	b.n	80006d0 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80006c6:	bf00      	nop
 80006c8:	e002      	b.n	80006d0 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80006ca:	bf00      	nop
 80006cc:	e000      	b.n	80006d0 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80006ce:	bf00      	nop
  }
  if (status == HAL_OK)
 80006d0:	7dfb      	ldrb	r3, [r7, #23]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d10d      	bne.n	80006f2 <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	f023 0118 	bic.w	r1, r3, #24
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	430a      	orrs	r2, r1
 80006f0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80006f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	08007514 	.word	0x08007514

08000700 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000712:	2b02      	cmp	r3, #2
 8000714:	d005      	beq.n	8000722 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2204      	movs	r2, #4
 800071a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800071c:	2301      	movs	r3, #1
 800071e:	73fb      	strb	r3, [r7, #15]
 8000720:	e027      	b.n	8000772 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f022 020e 	bic.w	r2, r2, #14
 8000730:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f022 0201 	bic.w	r2, r2, #1
 8000740:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800074a:	2101      	movs	r1, #1
 800074c:	fa01 f202 	lsl.w	r2, r1, r2
 8000750:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2201      	movs	r2, #1
 8000756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000766:	2b00      	cmp	r3, #0
 8000768:	d003      	beq.n	8000772 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	4798      	blx	r3
    } 
  }
  return status;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000790:	d013      	beq.n	80007ba <HAL_GPIO_Init+0x3e>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a37      	ldr	r2, [pc, #220]	; (8000874 <HAL_GPIO_Init+0xf8>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d00f      	beq.n	80007ba <HAL_GPIO_Init+0x3e>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a36      	ldr	r2, [pc, #216]	; (8000878 <HAL_GPIO_Init+0xfc>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d00b      	beq.n	80007ba <HAL_GPIO_Init+0x3e>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a35      	ldr	r2, [pc, #212]	; (800087c <HAL_GPIO_Init+0x100>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d007      	beq.n	80007ba <HAL_GPIO_Init+0x3e>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a34      	ldr	r2, [pc, #208]	; (8000880 <HAL_GPIO_Init+0x104>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d003      	beq.n	80007ba <HAL_GPIO_Init+0x3e>
 80007b2:	21ba      	movs	r1, #186	; 0xba
 80007b4:	4833      	ldr	r0, [pc, #204]	; (8000884 <HAL_GPIO_Init+0x108>)
 80007b6:	f006 fc12 	bl	8006fde <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d005      	beq.n	80007d0 <HAL_GPIO_Init+0x54>
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	0c1b      	lsrs	r3, r3, #16
 80007ca:	041b      	lsls	r3, r3, #16
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d003      	beq.n	80007d8 <HAL_GPIO_Init+0x5c>
 80007d0:	21bb      	movs	r1, #187	; 0xbb
 80007d2:	482c      	ldr	r0, [pc, #176]	; (8000884 <HAL_GPIO_Init+0x108>)
 80007d4:	f006 fc03 	bl	8006fde <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d035      	beq.n	800084c <HAL_GPIO_Init+0xd0>
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d031      	beq.n	800084c <HAL_GPIO_Init+0xd0>
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	2b11      	cmp	r3, #17
 80007ee:	d02d      	beq.n	800084c <HAL_GPIO_Init+0xd0>
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d029      	beq.n	800084c <HAL_GPIO_Init+0xd0>
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	2b12      	cmp	r3, #18
 80007fe:	d025      	beq.n	800084c <HAL_GPIO_Init+0xd0>
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	4a20      	ldr	r2, [pc, #128]	; (8000888 <HAL_GPIO_Init+0x10c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d020      	beq.n	800084c <HAL_GPIO_Init+0xd0>
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	4a1f      	ldr	r2, [pc, #124]	; (800088c <HAL_GPIO_Init+0x110>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d01b      	beq.n	800084c <HAL_GPIO_Init+0xd0>
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	4a1d      	ldr	r2, [pc, #116]	; (8000890 <HAL_GPIO_Init+0x114>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d016      	beq.n	800084c <HAL_GPIO_Init+0xd0>
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <HAL_GPIO_Init+0x118>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d011      	beq.n	800084c <HAL_GPIO_Init+0xd0>
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	4a1a      	ldr	r2, [pc, #104]	; (8000898 <HAL_GPIO_Init+0x11c>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d00c      	beq.n	800084c <HAL_GPIO_Init+0xd0>
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	4a19      	ldr	r2, [pc, #100]	; (800089c <HAL_GPIO_Init+0x120>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d007      	beq.n	800084c <HAL_GPIO_Init+0xd0>
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	2b03      	cmp	r3, #3
 8000842:	d003      	beq.n	800084c <HAL_GPIO_Init+0xd0>
 8000844:	21bc      	movs	r1, #188	; 0xbc
 8000846:	480f      	ldr	r0, [pc, #60]	; (8000884 <HAL_GPIO_Init+0x108>)
 8000848:	f006 fbc9 	bl	8006fde <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	2b00      	cmp	r3, #0
 8000852:	f000 81b6 	beq.w	8000bc2 <HAL_GPIO_Init+0x446>
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	2b01      	cmp	r3, #1
 800085c:	f000 81b1 	beq.w	8000bc2 <HAL_GPIO_Init+0x446>
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	2b02      	cmp	r3, #2
 8000866:	f000 81ac 	beq.w	8000bc2 <HAL_GPIO_Init+0x446>
 800086a:	21bd      	movs	r1, #189	; 0xbd
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <HAL_GPIO_Init+0x108>)
 800086e:	f006 fbb6 	bl	8006fde <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000872:	e1a6      	b.n	8000bc2 <HAL_GPIO_Init+0x446>
 8000874:	48000400 	.word	0x48000400
 8000878:	48000800 	.word	0x48000800
 800087c:	48000c00 	.word	0x48000c00
 8000880:	48001400 	.word	0x48001400
 8000884:	08007550 	.word	0x08007550
 8000888:	10110000 	.word	0x10110000
 800088c:	10210000 	.word	0x10210000
 8000890:	10310000 	.word	0x10310000
 8000894:	10120000 	.word	0x10120000
 8000898:	10220000 	.word	0x10220000
 800089c:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	2101      	movs	r1, #1
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 8182 	beq.w	8000bbc <HAL_GPIO_Init+0x440>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d003      	beq.n	80008c8 <HAL_GPIO_Init+0x14c>
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2b12      	cmp	r3, #18
 80008c6:	d147      	bne.n	8000958 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80008ce:	d013      	beq.n	80008f8 <HAL_GPIO_Init+0x17c>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a81      	ldr	r2, [pc, #516]	; (8000ad8 <HAL_GPIO_Init+0x35c>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d00f      	beq.n	80008f8 <HAL_GPIO_Init+0x17c>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a80      	ldr	r2, [pc, #512]	; (8000adc <HAL_GPIO_Init+0x360>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d00b      	beq.n	80008f8 <HAL_GPIO_Init+0x17c>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a7f      	ldr	r2, [pc, #508]	; (8000ae0 <HAL_GPIO_Init+0x364>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d007      	beq.n	80008f8 <HAL_GPIO_Init+0x17c>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a7e      	ldr	r2, [pc, #504]	; (8000ae4 <HAL_GPIO_Init+0x368>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d003      	beq.n	80008f8 <HAL_GPIO_Init+0x17c>
 80008f0:	21cc      	movs	r1, #204	; 0xcc
 80008f2:	487d      	ldr	r0, [pc, #500]	; (8000ae8 <HAL_GPIO_Init+0x36c>)
 80008f4:	f006 fb73 	bl	8006fde <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	2b0c      	cmp	r3, #12
 80008fe:	d907      	bls.n	8000910 <HAL_GPIO_Init+0x194>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	691b      	ldr	r3, [r3, #16]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d003      	beq.n	8000910 <HAL_GPIO_Init+0x194>
 8000908:	21cd      	movs	r1, #205	; 0xcd
 800090a:	4877      	ldr	r0, [pc, #476]	; (8000ae8 <HAL_GPIO_Init+0x36c>)
 800090c:	f006 fb67 	bl	8006fde <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	08da      	lsrs	r2, r3, #3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3208      	adds	r2, #8
 8000918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800091c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f003 0307 	and.w	r3, r3, #7
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	220f      	movs	r2, #15
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	691a      	ldr	r2, [r3, #16]
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4313      	orrs	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	08da      	lsrs	r2, r3, #3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3208      	adds	r2, #8
 8000952:	6939      	ldr	r1, [r7, #16]
 8000954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0203 	and.w	r2, r3, #3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d00b      	beq.n	80009ac <HAL_GPIO_Init+0x230>
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d007      	beq.n	80009ac <HAL_GPIO_Init+0x230>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a0:	2b11      	cmp	r3, #17
 80009a2:	d003      	beq.n	80009ac <HAL_GPIO_Init+0x230>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	2b12      	cmp	r3, #18
 80009aa:	d140      	bne.n	8000a2e <HAL_GPIO_Init+0x2b2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00b      	beq.n	80009cc <HAL_GPIO_Init+0x250>
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d007      	beq.n	80009cc <HAL_GPIO_Init+0x250>
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	d003      	beq.n	80009cc <HAL_GPIO_Init+0x250>
 80009c4:	21e1      	movs	r1, #225	; 0xe1
 80009c6:	4848      	ldr	r0, [pc, #288]	; (8000ae8 <HAL_GPIO_Init+0x36c>)
 80009c8:	f006 fb09 	bl	8006fde <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	2203      	movs	r2, #3
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a02:	2201      	movs	r2, #1
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	091b      	lsrs	r3, r3, #4
 8000a18:	f003 0201 	and.w	r2, r3, #1
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	2203      	movs	r2, #3
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f000 80a8 	beq.w	8000bbc <HAL_GPIO_Init+0x440>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <HAL_GPIO_Init+0x370>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a1e      	ldr	r2, [pc, #120]	; (8000aec <HAL_GPIO_Init+0x370>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_GPIO_Init+0x370>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a84:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <HAL_GPIO_Init+0x374>)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	089b      	lsrs	r3, r3, #2
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f003 0303 	and.w	r3, r3, #3
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	220f      	movs	r2, #15
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aae:	d021      	beq.n	8000af4 <HAL_GPIO_Init+0x378>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a09      	ldr	r2, [pc, #36]	; (8000ad8 <HAL_GPIO_Init+0x35c>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d00d      	beq.n	8000ad4 <HAL_GPIO_Init+0x358>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_GPIO_Init+0x360>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d007      	beq.n	8000ad0 <HAL_GPIO_Init+0x354>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_GPIO_Init+0x364>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d101      	bne.n	8000acc <HAL_GPIO_Init+0x350>
 8000ac8:	2303      	movs	r3, #3
 8000aca:	e014      	b.n	8000af6 <HAL_GPIO_Init+0x37a>
 8000acc:	2305      	movs	r3, #5
 8000ace:	e012      	b.n	8000af6 <HAL_GPIO_Init+0x37a>
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	e010      	b.n	8000af6 <HAL_GPIO_Init+0x37a>
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e00e      	b.n	8000af6 <HAL_GPIO_Init+0x37a>
 8000ad8:	48000400 	.word	0x48000400
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	48000c00 	.word	0x48000c00
 8000ae4:	48001400 	.word	0x48001400
 8000ae8:	08007550 	.word	0x08007550
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010000 	.word	0x40010000
 8000af4:	2300      	movs	r3, #0
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	f002 0203 	and.w	r2, r2, #3
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	4093      	lsls	r3, r2
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b06:	4935      	ldr	r1, [pc, #212]	; (8000bdc <HAL_GPIO_Init+0x460>)
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b14:	4b32      	ldr	r3, [pc, #200]	; (8000be0 <HAL_GPIO_Init+0x464>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_GPIO_Init+0x3bc>
        {
          temp |= iocurrent;
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b38:	4a29      	ldr	r2, [pc, #164]	; (8000be0 <HAL_GPIO_Init+0x464>)
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b3e:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <HAL_GPIO_Init+0x464>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <HAL_GPIO_Init+0x3e6>
        {
          temp |= iocurrent;
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b62:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <HAL_GPIO_Init+0x464>)
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <HAL_GPIO_Init+0x464>)
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x410>
        {
          temp |= iocurrent;
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b8c:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <HAL_GPIO_Init+0x464>)
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <HAL_GPIO_Init+0x464>)
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_Init+0x43a>
        {
          temp |= iocurrent;
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_GPIO_Init+0x464>)
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f47f ae67 	bne.w	80008a0 <HAL_GPIO_Init+0x124>
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	40010400 	.word	0x40010400

08000be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	807b      	strh	r3, [r7, #2]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d004      	beq.n	8000c04 <HAL_GPIO_WritePin+0x20>
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	0c1b      	lsrs	r3, r3, #16
 8000bfe:	041b      	lsls	r3, r3, #16
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d004      	beq.n	8000c0e <HAL_GPIO_WritePin+0x2a>
 8000c04:	f240 11a7 	movw	r1, #423	; 0x1a7
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <HAL_GPIO_WritePin+0x5c>)
 8000c0a:	f006 f9e8 	bl	8006fde <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000c0e:	787b      	ldrb	r3, [r7, #1]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d007      	beq.n	8000c24 <HAL_GPIO_WritePin+0x40>
 8000c14:	787b      	ldrb	r3, [r7, #1]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d004      	beq.n	8000c24 <HAL_GPIO_WritePin+0x40>
 8000c1a:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8000c1e:	4808      	ldr	r0, [pc, #32]	; (8000c40 <HAL_GPIO_WritePin+0x5c>)
 8000c20:	f006 f9dd 	bl	8006fde <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8000c24:	787b      	ldrb	r3, [r7, #1]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c2a:	887a      	ldrh	r2, [r7, #2]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c30:	e002      	b.n	8000c38 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	08007550 	.word	0x08007550

08000c44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000c50:	887b      	ldrh	r3, [r7, #2]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d004      	beq.n	8000c60 <HAL_GPIO_TogglePin+0x1c>
 8000c56:	887b      	ldrh	r3, [r7, #2]
 8000c58:	0c1b      	lsrs	r3, r3, #16
 8000c5a:	041b      	lsls	r3, r3, #16
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d004      	beq.n	8000c6a <HAL_GPIO_TogglePin+0x26>
 8000c60:	f240 11bd 	movw	r1, #445	; 0x1bd
 8000c64:	480a      	ldr	r0, [pc, #40]	; (8000c90 <HAL_GPIO_TogglePin+0x4c>)
 8000c66:	f006 f9ba 	bl	8006fde <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	695a      	ldr	r2, [r3, #20]
 8000c6e:	887b      	ldrh	r3, [r7, #2]
 8000c70:	4013      	ands	r3, r2
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d004      	beq.n	8000c80 <HAL_GPIO_TogglePin+0x3c>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c76:	887b      	ldrh	r3, [r7, #2]
 8000c78:	041a      	lsls	r2, r3, #16
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000c7e:	e002      	b.n	8000c86 <HAL_GPIO_TogglePin+0x42>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c80:	887a      	ldrh	r2, [r7, #2]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	619a      	str	r2, [r3, #24]
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	08007550 	.word	0x08007550

08000c94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ca0:	695a      	ldr	r2, [r3, #20]
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d006      	beq.n	8000cb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f806 	bl	8000cc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40010400 	.word	0x40010400

08000cc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	f000 bff7 	b.w	8001ce4 <HAL_RCC_OscConfig+0x1008>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d020      	beq.n	8000d42 <HAL_RCC_OscConfig+0x66>
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d119      	bne.n	8000d42 <HAL_RCC_OscConfig+0x66>
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d112      	bne.n	8000d42 <HAL_RCC_OscConfig+0x66>
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10b      	bne.n	8000d42 <HAL_RCC_OscConfig+0x66>
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d104      	bne.n	8000d42 <HAL_RCC_OscConfig+0x66>
 8000d38:	f240 114b 	movw	r1, #331	; 0x14b
 8000d3c:	48c3      	ldr	r0, [pc, #780]	; (800104c <HAL_RCC_OscConfig+0x370>)
 8000d3e:	f006 f94e 	bl	8006fde <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 8182 	beq.w	8001056 <HAL_RCC_OscConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d010      	beq.n	8000d7e <HAL_RCC_OscConfig+0xa2>
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d66:	d00a      	beq.n	8000d7e <HAL_RCC_OscConfig+0xa2>
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d72:	d004      	beq.n	8000d7e <HAL_RCC_OscConfig+0xa2>
 8000d74:	f240 1151 	movw	r1, #337	; 0x151
 8000d78:	48b4      	ldr	r0, [pc, #720]	; (800104c <HAL_RCC_OscConfig+0x370>)
 8000d7a:	f006 f930 	bl	8006fde <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d7e:	4bb4      	ldr	r3, [pc, #720]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 030c 	and.w	r3, r3, #12
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	d00c      	beq.n	8000da4 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d8a:	4bb1      	ldr	r3, [pc, #708]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 030c 	and.w	r3, r3, #12
 8000d92:	2b08      	cmp	r3, #8
 8000d94:	d159      	bne.n	8000e4a <HAL_RCC_OscConfig+0x16e>
 8000d96:	4bae      	ldr	r3, [pc, #696]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da2:	d152      	bne.n	8000e4a <HAL_RCC_OscConfig+0x16e>
 8000da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000db0:	fa93 f3a3 	rbit	r3, r3
 8000db4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000db8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dbc:	fab3 f383 	clz	r3, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d102      	bne.n	8000dd6 <HAL_RCC_OscConfig+0xfa>
 8000dd0:	4b9f      	ldr	r3, [pc, #636]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	e015      	b.n	8000e02 <HAL_RCC_OscConfig+0x126>
 8000dd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dda:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dde:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000de2:	fa93 f3a3 	rbit	r3, r3
 8000de6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000dea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000df2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000df6:	fa93 f3a3 	rbit	r3, r3
 8000dfa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000dfe:	4b94      	ldr	r3, [pc, #592]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e06:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e0a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e0e:	fa92 f2a2 	rbit	r2, r2
 8000e12:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e16:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	f042 0220 	orr.w	r2, r2, #32
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	f002 021f 	and.w	r2, r2, #31
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	4013      	ands	r3, r2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 810e 	beq.w	8001054 <HAL_RCC_OscConfig+0x378>
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8108 	bne.w	8001054 <HAL_RCC_OscConfig+0x378>
      {
        return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	f000 bf4d 	b.w	8001ce4 <HAL_RCC_OscConfig+0x1008>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e54:	d106      	bne.n	8000e64 <HAL_RCC_OscConfig+0x188>
 8000e56:	4b7e      	ldr	r3, [pc, #504]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a7d      	ldr	r2, [pc, #500]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e030      	b.n	8000ec6 <HAL_RCC_OscConfig+0x1ea>
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10c      	bne.n	8000e88 <HAL_RCC_OscConfig+0x1ac>
 8000e6e:	4b78      	ldr	r3, [pc, #480]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a77      	ldr	r2, [pc, #476]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	4b75      	ldr	r3, [pc, #468]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a74      	ldr	r2, [pc, #464]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	e01e      	b.n	8000ec6 <HAL_RCC_OscConfig+0x1ea>
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e92:	d10c      	bne.n	8000eae <HAL_RCC_OscConfig+0x1d2>
 8000e94:	4b6e      	ldr	r3, [pc, #440]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a6d      	ldr	r2, [pc, #436]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000e9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b6b      	ldr	r3, [pc, #428]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a6a      	ldr	r2, [pc, #424]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	e00b      	b.n	8000ec6 <HAL_RCC_OscConfig+0x1ea>
 8000eae:	4b68      	ldr	r3, [pc, #416]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a67      	ldr	r2, [pc, #412]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	4b65      	ldr	r3, [pc, #404]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a64      	ldr	r2, [pc, #400]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ec6:	4b62      	ldr	r3, [pc, #392]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	f023 020f 	bic.w	r2, r3, #15
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	495e      	ldr	r1, [pc, #376]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d059      	beq.n	8000f98 <HAL_RCC_OscConfig+0x2bc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee4:	f7ff f99e 	bl	8000224 <HAL_GetTick>
 8000ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eec:	e00a      	b.n	8000f04 <HAL_RCC_OscConfig+0x228>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eee:	f7ff f999 	bl	8000224 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	; 0x64
 8000efc:	d902      	bls.n	8000f04 <HAL_RCC_OscConfig+0x228>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	f000 bef0 	b.w	8001ce4 <HAL_RCC_OscConfig+0x1008>
 8000f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f08:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f10:	fa93 f3a3 	rbit	r3, r3
 8000f14:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f18:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1c:	fab3 f383 	clz	r3, r3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d102      	bne.n	8000f36 <HAL_RCC_OscConfig+0x25a>
 8000f30:	4b47      	ldr	r3, [pc, #284]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	e015      	b.n	8000f62 <HAL_RCC_OscConfig+0x286>
 8000f36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f3a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f42:	fa93 f3a3 	rbit	r3, r3
 8000f46:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f4e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f52:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f56:	fa93 f3a3 	rbit	r3, r3
 8000f5a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f5e:	4b3c      	ldr	r3, [pc, #240]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f66:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f6a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f6e:	fa92 f2a2 	rbit	r2, r2
 8000f72:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f76:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f7a:	fab2 f282 	clz	r2, r2
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	f042 0220 	orr.w	r2, r2, #32
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	f002 021f 	and.w	r2, r2, #31
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0ab      	beq.n	8000eee <HAL_RCC_OscConfig+0x212>
 8000f96:	e05e      	b.n	8001056 <HAL_RCC_OscConfig+0x37a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff f944 	bl	8000224 <HAL_GetTick>
 8000f9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa0:	e00a      	b.n	8000fb8 <HAL_RCC_OscConfig+0x2dc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa2:	f7ff f93f 	bl	8000224 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	; 0x64
 8000fb0:	d902      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	f000 be96 	b.w	8001ce4 <HAL_RCC_OscConfig+0x1008>
 8000fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fbc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fc4:	fa93 f3a3 	rbit	r3, r3
 8000fc8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000fcc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd0:	fab3 f383 	clz	r3, r3
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d102      	bne.n	8000fea <HAL_RCC_OscConfig+0x30e>
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	e015      	b.n	8001016 <HAL_RCC_OscConfig+0x33a>
 8000fea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000ff6:	fa93 f3a3 	rbit	r3, r3
 8000ffa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000ffe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001002:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001006:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800100a:	fa93 f3a3 	rbit	r3, r3
 800100e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_RCC_OscConfig+0x374>)
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800101a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800101e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001022:	fa92 f2a2 	rbit	r2, r2
 8001026:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800102a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800102e:	fab2 f282 	clz	r2, r2
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	f042 0220 	orr.w	r2, r2, #32
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	f002 021f 	and.w	r2, r2, #31
 800103e:	2101      	movs	r1, #1
 8001040:	fa01 f202 	lsl.w	r2, r1, r2
 8001044:	4013      	ands	r3, r2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1ab      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x2c6>
 800104a:	e004      	b.n	8001056 <HAL_RCC_OscConfig+0x37a>
 800104c:	0800758c 	.word	0x0800758c
 8001050:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 818c 	beq.w	800137e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d009      	beq.n	8001084 <HAL_RCC_OscConfig+0x3a8>
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d004      	beq.n	8001084 <HAL_RCC_OscConfig+0x3a8>
 800107a:	f240 1189 	movw	r1, #393	; 0x189
 800107e:	48a7      	ldr	r0, [pc, #668]	; (800131c <HAL_RCC_OscConfig+0x640>)
 8001080:	f005 ffad 	bl	8006fde <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	2b1f      	cmp	r3, #31
 800108c:	d904      	bls.n	8001098 <HAL_RCC_OscConfig+0x3bc>
 800108e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8001092:	48a2      	ldr	r0, [pc, #648]	; (800131c <HAL_RCC_OscConfig+0x640>)
 8001094:	f005 ffa3 	bl	8006fde <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001098:	4ba1      	ldr	r3, [pc, #644]	; (8001320 <HAL_RCC_OscConfig+0x644>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 030c 	and.w	r3, r3, #12
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00b      	beq.n	80010bc <HAL_RCC_OscConfig+0x3e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010a4:	4b9e      	ldr	r3, [pc, #632]	; (8001320 <HAL_RCC_OscConfig+0x644>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 030c 	and.w	r3, r3, #12
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d16c      	bne.n	800118a <HAL_RCC_OscConfig+0x4ae>
 80010b0:	4b9b      	ldr	r3, [pc, #620]	; (8001320 <HAL_RCC_OscConfig+0x644>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d166      	bne.n	800118a <HAL_RCC_OscConfig+0x4ae>
 80010bc:	2302      	movs	r3, #2
 80010be:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010c6:	fa93 f3a3 	rbit	r3, r3
 80010ca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d2:	fab3 f383 	clz	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	095b      	lsrs	r3, r3, #5
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d102      	bne.n	80010ec <HAL_RCC_OscConfig+0x410>
 80010e6:	4b8e      	ldr	r3, [pc, #568]	; (8001320 <HAL_RCC_OscConfig+0x644>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	e013      	b.n	8001114 <HAL_RCC_OscConfig+0x438>
 80010ec:	2302      	movs	r3, #2
 80010ee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010f6:	fa93 f3a3 	rbit	r3, r3
 80010fa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010fe:	2302      	movs	r3, #2
 8001100:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001104:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001110:	4b83      	ldr	r3, [pc, #524]	; (8001320 <HAL_RCC_OscConfig+0x644>)
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	2202      	movs	r2, #2
 8001116:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800111a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800111e:	fa92 f2a2 	rbit	r2, r2
 8001122:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001126:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800112a:	fab2 f282 	clz	r2, r2
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	f042 0220 	orr.w	r2, r2, #32
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	f002 021f 	and.w	r2, r2, #31
 800113a:	2101      	movs	r1, #1
 800113c:	fa01 f202 	lsl.w	r2, r1, r2
 8001140:	4013      	ands	r3, r2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d007      	beq.n	8001156 <HAL_RCC_OscConfig+0x47a>
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d002      	beq.n	8001156 <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	f000 bdc7 	b.w	8001ce4 <HAL_RCC_OscConfig+0x1008>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001156:	4b72      	ldr	r3, [pc, #456]	; (8001320 <HAL_RCC_OscConfig+0x644>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	21f8      	movs	r1, #248	; 0xf8
 8001166:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800116e:	fa91 f1a1 	rbit	r1, r1
 8001172:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001176:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800117a:	fab1 f181 	clz	r1, r1
 800117e:	b2c9      	uxtb	r1, r1
 8001180:	408b      	lsls	r3, r1
 8001182:	4967      	ldr	r1, [pc, #412]	; (8001320 <HAL_RCC_OscConfig+0x644>)
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001188:	e0f9      	b.n	800137e <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 8085 	beq.w	80012a0 <HAL_RCC_OscConfig+0x5c4>
 8001196:	2301      	movs	r3, #1
 8001198:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011a0:	fa93 f3a3 	rbit	r3, r3
 80011a4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ac:	fab3 f383 	clz	r3, r3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	461a      	mov	r2, r3
 80011be:	2301      	movs	r3, #1
 80011c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c2:	f7ff f82f 	bl	8000224 <HAL_GetTick>
 80011c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ca:	e00a      	b.n	80011e2 <HAL_RCC_OscConfig+0x506>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011cc:	f7ff f82a 	bl	8000224 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d902      	bls.n	80011e2 <HAL_RCC_OscConfig+0x506>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	f000 bd81 	b.w	8001ce4 <HAL_RCC_OscConfig+0x1008>
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011ec:	fa93 f3a3 	rbit	r3, r3
 80011f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	fab3 f383 	clz	r3, r3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b01      	cmp	r3, #1
 800120a:	d102      	bne.n	8001212 <HAL_RCC_OscConfig+0x536>
 800120c:	4b44      	ldr	r3, [pc, #272]	; (8001320 <HAL_RCC_OscConfig+0x644>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	e013      	b.n	800123a <HAL_RCC_OscConfig+0x55e>
 8001212:	2302      	movs	r3, #2
 8001214:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001224:	2302      	movs	r3, #2
 8001226:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800122a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800122e:	fa93 f3a3 	rbit	r3, r3
 8001232:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001236:	4b3a      	ldr	r3, [pc, #232]	; (8001320 <HAL_RCC_OscConfig+0x644>)
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	2202      	movs	r2, #2
 800123c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001240:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001244:	fa92 f2a2 	rbit	r2, r2
 8001248:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800124c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001250:	fab2 f282 	clz	r2, r2
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	f042 0220 	orr.w	r2, r2, #32
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	f002 021f 	and.w	r2, r2, #31
 8001260:	2101      	movs	r1, #1
 8001262:	fa01 f202 	lsl.w	r2, r1, r2
 8001266:	4013      	ands	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0af      	beq.n	80011cc <HAL_RCC_OscConfig+0x4f0>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126c:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <HAL_RCC_OscConfig+0x644>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	21f8      	movs	r1, #248	; 0xf8
 800127c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001280:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001284:	fa91 f1a1 	rbit	r1, r1
 8001288:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800128c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001290:	fab1 f181 	clz	r1, r1
 8001294:	b2c9      	uxtb	r1, r1
 8001296:	408b      	lsls	r3, r1
 8001298:	4921      	ldr	r1, [pc, #132]	; (8001320 <HAL_RCC_OscConfig+0x644>)
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
 800129e:	e06e      	b.n	800137e <HAL_RCC_OscConfig+0x6a2>
 80012a0:	2301      	movs	r3, #1
 80012a2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012aa:	fa93 f3a3 	rbit	r3, r3
 80012ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b6:	fab3 f383 	clz	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	461a      	mov	r2, r3
 80012c8:	2300      	movs	r3, #0
 80012ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7fe ffaa 	bl	8000224 <HAL_GetTick>
 80012d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d4:	e00a      	b.n	80012ec <HAL_RCC_OscConfig+0x610>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d6:	f7fe ffa5 	bl	8000224 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d902      	bls.n	80012ec <HAL_RCC_OscConfig+0x610>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	f000 bcfc 	b.w	8001ce4 <HAL_RCC_OscConfig+0x1008>
 80012ec:	2302      	movs	r3, #2
 80012ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	095b      	lsrs	r3, r3, #5
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d106      	bne.n	8001324 <HAL_RCC_OscConfig+0x648>
 8001316:	4b02      	ldr	r3, [pc, #8]	; (8001320 <HAL_RCC_OscConfig+0x644>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	e017      	b.n	800134c <HAL_RCC_OscConfig+0x670>
 800131c:	0800758c 	.word	0x0800758c
 8001320:	40021000 	.word	0x40021000
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800133c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001340:	fa93 f3a3 	rbit	r3, r3
 8001344:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001348:	4bbf      	ldr	r3, [pc, #764]	; (8001648 <HAL_RCC_OscConfig+0x96c>)
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	2202      	movs	r2, #2
 800134e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001352:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001356:	fa92 f2a2 	rbit	r2, r2
 800135a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800135e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001362:	fab2 f282 	clz	r2, r2
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	f042 0220 	orr.w	r2, r2, #32
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	f002 021f 	and.w	r2, r2, #31
 8001372:	2101      	movs	r1, #1
 8001374:	fa01 f202 	lsl.w	r2, r1, r2
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1ab      	bne.n	80012d6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80e6 	beq.w	800155a <HAL_RCC_OscConfig+0x87e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d009      	beq.n	80013ac <HAL_RCC_OscConfig+0x6d0>
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d004      	beq.n	80013ac <HAL_RCC_OscConfig+0x6d0>
 80013a2:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 80013a6:	48a9      	ldr	r0, [pc, #676]	; (800164c <HAL_RCC_OscConfig+0x970>)
 80013a8:	f005 fe19 	bl	8006fde <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d065      	beq.n	8001482 <HAL_RCC_OscConfig+0x7a6>
 80013b6:	2301      	movs	r3, #1
 80013b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013c0:	fa93 f3a3 	rbit	r3, r3
 80013c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013cc:	fab3 f383 	clz	r3, r3
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b9e      	ldr	r3, [pc, #632]	; (8001650 <HAL_RCC_OscConfig+0x974>)
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	461a      	mov	r2, r3
 80013dc:	2301      	movs	r3, #1
 80013de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e0:	f7fe ff20 	bl	8000224 <HAL_GetTick>
 80013e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e8:	e00a      	b.n	8001400 <HAL_RCC_OscConfig+0x724>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ea:	f7fe ff1b 	bl	8000224 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d902      	bls.n	8001400 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	f000 bc72 	b.w	8001ce4 <HAL_RCC_OscConfig+0x1008>
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001412:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001416:	2202      	movs	r2, #2
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	fa93 f2a3 	rbit	r2, r3
 8001424:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800142e:	2202      	movs	r2, #2
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	fa93 f2a3 	rbit	r2, r3
 800143c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001440:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	4b81      	ldr	r3, [pc, #516]	; (8001648 <HAL_RCC_OscConfig+0x96c>)
 8001444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001446:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800144a:	2102      	movs	r1, #2
 800144c:	6019      	str	r1, [r3, #0]
 800144e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	fa93 f1a3 	rbit	r1, r3
 8001458:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800145c:	6019      	str	r1, [r3, #0]
  return result;
 800145e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	fab3 f383 	clz	r3, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800146e:	b2db      	uxtb	r3, r3
 8001470:	f003 031f 	and.w	r3, r3, #31
 8001474:	2101      	movs	r1, #1
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0b4      	beq.n	80013ea <HAL_RCC_OscConfig+0x70e>
 8001480:	e06b      	b.n	800155a <HAL_RCC_OscConfig+0x87e>
 8001482:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	fa93 f2a3 	rbit	r2, r3
 8001494:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001498:	601a      	str	r2, [r3, #0]
  return result;
 800149a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800149e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a0:	fab3 f383 	clz	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b69      	ldr	r3, [pc, #420]	; (8001650 <HAL_RCC_OscConfig+0x974>)
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	461a      	mov	r2, r3
 80014b0:	2300      	movs	r3, #0
 80014b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b4:	f7fe feb6 	bl	8000224 <HAL_GetTick>
 80014b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014bc:	e00a      	b.n	80014d4 <HAL_RCC_OscConfig+0x7f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014be:	f7fe feb1 	bl	8000224 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d902      	bls.n	80014d4 <HAL_RCC_OscConfig+0x7f8>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	f000 bc08 	b.w	8001ce4 <HAL_RCC_OscConfig+0x1008>
 80014d4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014d8:	2202      	movs	r2, #2
 80014da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014dc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	fa93 f2a3 	rbit	r2, r3
 80014e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014f0:	2202      	movs	r2, #2
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	fa93 f2a3 	rbit	r2, r3
 80014fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001508:	2202      	movs	r2, #2
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	fa93 f2a3 	rbit	r2, r3
 8001516:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800151a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	4b4a      	ldr	r3, [pc, #296]	; (8001648 <HAL_RCC_OscConfig+0x96c>)
 800151e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001520:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001524:	2102      	movs	r1, #2
 8001526:	6019      	str	r1, [r3, #0]
 8001528:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	fa93 f1a3 	rbit	r1, r3
 8001532:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001536:	6019      	str	r1, [r3, #0]
  return result;
 8001538:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	fab3 f383 	clz	r3, r3
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	2101      	movs	r1, #1
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1b1      	bne.n	80014be <HAL_RCC_OscConfig+0x7e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 8170 	beq.w	800184a <HAL_RCC_OscConfig+0xb6e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00e      	beq.n	8001598 <HAL_RCC_OscConfig+0x8bc>
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d009      	beq.n	8001598 <HAL_RCC_OscConfig+0x8bc>
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b05      	cmp	r3, #5
 800158c:	d004      	beq.n	8001598 <HAL_RCC_OscConfig+0x8bc>
 800158e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8001592:	482e      	ldr	r0, [pc, #184]	; (800164c <HAL_RCC_OscConfig+0x970>)
 8001594:	f005 fd23 	bl	8006fde <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <HAL_RCC_OscConfig+0x96c>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d112      	bne.n	80015ca <HAL_RCC_OscConfig+0x8ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a4:	4b28      	ldr	r3, [pc, #160]	; (8001648 <HAL_RCC_OscConfig+0x96c>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	4a27      	ldr	r2, [pc, #156]	; (8001648 <HAL_RCC_OscConfig+0x96c>)
 80015aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ae:	61d3      	str	r3, [r2, #28]
 80015b0:	4b25      	ldr	r3, [pc, #148]	; (8001648 <HAL_RCC_OscConfig+0x96c>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <HAL_RCC_OscConfig+0x978>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d11a      	bne.n	800160c <HAL_RCC_OscConfig+0x930>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <HAL_RCC_OscConfig+0x978>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_RCC_OscConfig+0x978>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e2:	f7fe fe1f 	bl	8000224 <HAL_GetTick>
 80015e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ea:	e009      	b.n	8001600 <HAL_RCC_OscConfig+0x924>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ec:	f7fe fe1a 	bl	8000224 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b64      	cmp	r3, #100	; 0x64
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x924>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e371      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1008>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_RCC_OscConfig+0x978>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0ef      	beq.n	80015ec <HAL_RCC_OscConfig+0x910>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d106      	bne.n	8001624 <HAL_RCC_OscConfig+0x948>
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_RCC_OscConfig+0x96c>)
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <HAL_RCC_OscConfig+0x96c>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6213      	str	r3, [r2, #32]
 8001622:	e037      	b.n	8001694 <HAL_RCC_OscConfig+0x9b8>
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d114      	bne.n	8001658 <HAL_RCC_OscConfig+0x97c>
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_RCC_OscConfig+0x96c>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <HAL_RCC_OscConfig+0x96c>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6213      	str	r3, [r2, #32]
 800163a:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_RCC_OscConfig+0x96c>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a02      	ldr	r2, [pc, #8]	; (8001648 <HAL_RCC_OscConfig+0x96c>)
 8001640:	f023 0304 	bic.w	r3, r3, #4
 8001644:	6213      	str	r3, [r2, #32]
 8001646:	e025      	b.n	8001694 <HAL_RCC_OscConfig+0x9b8>
 8001648:	40021000 	.word	0x40021000
 800164c:	0800758c 	.word	0x0800758c
 8001650:	10908120 	.word	0x10908120
 8001654:	40007000 	.word	0x40007000
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b05      	cmp	r3, #5
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x9a0>
 8001662:	4b5e      	ldr	r3, [pc, #376]	; (80017dc <HAL_RCC_OscConfig+0xb00>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4a5d      	ldr	r2, [pc, #372]	; (80017dc <HAL_RCC_OscConfig+0xb00>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	6213      	str	r3, [r2, #32]
 800166e:	4b5b      	ldr	r3, [pc, #364]	; (80017dc <HAL_RCC_OscConfig+0xb00>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4a5a      	ldr	r2, [pc, #360]	; (80017dc <HAL_RCC_OscConfig+0xb00>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6213      	str	r3, [r2, #32]
 800167a:	e00b      	b.n	8001694 <HAL_RCC_OscConfig+0x9b8>
 800167c:	4b57      	ldr	r3, [pc, #348]	; (80017dc <HAL_RCC_OscConfig+0xb00>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4a56      	ldr	r2, [pc, #344]	; (80017dc <HAL_RCC_OscConfig+0xb00>)
 8001682:	f023 0301 	bic.w	r3, r3, #1
 8001686:	6213      	str	r3, [r2, #32]
 8001688:	4b54      	ldr	r3, [pc, #336]	; (80017dc <HAL_RCC_OscConfig+0xb00>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4a53      	ldr	r2, [pc, #332]	; (80017dc <HAL_RCC_OscConfig+0xb00>)
 800168e:	f023 0304 	bic.w	r3, r3, #4
 8001692:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d064      	beq.n	8001768 <HAL_RCC_OscConfig+0xa8c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7fe fdc1 	bl	8000224 <HAL_GetTick>
 80016a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0x9e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a8:	f7fe fdbc 	bl	8000224 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x9e4>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e311      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1008>
 80016c0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016c4:	2202      	movs	r2, #2
 80016c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	fa93 f2a3 	rbit	r2, r3
 80016d2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016dc:	2202      	movs	r2, #2
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	fa93 f2a3 	rbit	r2, r3
 80016ea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016ee:	601a      	str	r2, [r3, #0]
  return result;
 80016f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	095b      	lsrs	r3, r3, #5
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d102      	bne.n	8001710 <HAL_RCC_OscConfig+0xa34>
 800170a:	4b34      	ldr	r3, [pc, #208]	; (80017dc <HAL_RCC_OscConfig+0xb00>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	e00d      	b.n	800172c <HAL_RCC_OscConfig+0xa50>
 8001710:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001714:	2202      	movs	r2, #2
 8001716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	fa93 f2a3 	rbit	r2, r3
 8001722:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <HAL_RCC_OscConfig+0xb00>)
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001730:	2102      	movs	r1, #2
 8001732:	6011      	str	r1, [r2, #0]
 8001734:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	fa92 f1a2 	rbit	r1, r2
 800173e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001742:	6011      	str	r1, [r2, #0]
  return result;
 8001744:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	fab2 f282 	clz	r2, r2
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	f002 021f 	and.w	r2, r2, #31
 800175a:	2101      	movs	r1, #1
 800175c:	fa01 f202 	lsl.w	r2, r1, r2
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0a0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x9cc>
 8001766:	e066      	b.n	8001836 <HAL_RCC_OscConfig+0xb5a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001768:	f7fe fd5c 	bl	8000224 <HAL_GetTick>
 800176c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001770:	e00b      	b.n	800178a <HAL_RCC_OscConfig+0xaae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7fe fd57 	bl	8000224 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0xaae>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e2ac      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1008>
 800178a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800178e:	2202      	movs	r2, #2
 8001790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	fa93 f2a3 	rbit	r2, r3
 800179c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017a6:	2202      	movs	r2, #2
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	fa93 f2a3 	rbit	r2, r3
 80017b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017b8:	601a      	str	r2, [r3, #0]
  return result;
 80017ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c0:	fab3 f383 	clz	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d105      	bne.n	80017e0 <HAL_RCC_OscConfig+0xb04>
 80017d4:	4b01      	ldr	r3, [pc, #4]	; (80017dc <HAL_RCC_OscConfig+0xb00>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	e010      	b.n	80017fc <HAL_RCC_OscConfig+0xb20>
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017e4:	2202      	movs	r2, #2
 80017e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	fa93 f2a3 	rbit	r2, r3
 80017f2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	4bb6      	ldr	r3, [pc, #728]	; (8001ad4 <HAL_RCC_OscConfig+0xdf8>)
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001800:	2102      	movs	r1, #2
 8001802:	6011      	str	r1, [r2, #0]
 8001804:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	fa92 f1a2 	rbit	r1, r2
 800180e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001812:	6011      	str	r1, [r2, #0]
  return result;
 8001814:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	fab2 f282 	clz	r2, r2
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	f002 021f 	and.w	r2, r2, #31
 800182a:	2101      	movs	r1, #1
 800182c:	fa01 f202 	lsl.w	r2, r1, r2
 8001830:	4013      	ands	r3, r2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d19d      	bne.n	8001772 <HAL_RCC_OscConfig+0xa96>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001836:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800183a:	2b01      	cmp	r3, #1
 800183c:	d105      	bne.n	800184a <HAL_RCC_OscConfig+0xb6e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183e:	4ba5      	ldr	r3, [pc, #660]	; (8001ad4 <HAL_RCC_OscConfig+0xdf8>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4aa4      	ldr	r2, [pc, #656]	; (8001ad4 <HAL_RCC_OscConfig+0xdf8>)
 8001844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001848:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00e      	beq.n	8001872 <HAL_RCC_OscConfig+0xb96>
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d009      	beq.n	8001872 <HAL_RCC_OscConfig+0xb96>
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d004      	beq.n	8001872 <HAL_RCC_OscConfig+0xb96>
 8001868:	f240 213a 	movw	r1, #570	; 0x23a
 800186c:	489a      	ldr	r0, [pc, #616]	; (8001ad8 <HAL_RCC_OscConfig+0xdfc>)
 800186e:	f005 fbb6 	bl	8006fde <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 8232 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x1006>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187e:	4b95      	ldr	r3, [pc, #596]	; (8001ad4 <HAL_RCC_OscConfig+0xdf8>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b08      	cmp	r3, #8
 8001888:	f000 820c 	beq.w	8001ca4 <HAL_RCC_OscConfig+0xfc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	2b02      	cmp	r3, #2
 8001894:	f040 8184 	bne.w	8001ba0 <HAL_RCC_OscConfig+0xec4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00a      	beq.n	80018b8 <HAL_RCC_OscConfig+0xbdc>
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ac:	d004      	beq.n	80018b8 <HAL_RCC_OscConfig+0xbdc>
 80018ae:	f240 2143 	movw	r1, #579	; 0x243
 80018b2:	4889      	ldr	r0, [pc, #548]	; (8001ad8 <HAL_RCC_OscConfig+0xdfc>)
 80018b4:	f005 fb93 	bl	8006fde <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d058      	beq.n	8001974 <HAL_RCC_OscConfig+0xc98>
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018cc:	d052      	beq.n	8001974 <HAL_RCC_OscConfig+0xc98>
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80018d8:	d04c      	beq.n	8001974 <HAL_RCC_OscConfig+0xc98>
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80018e4:	d046      	beq.n	8001974 <HAL_RCC_OscConfig+0xc98>
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018f0:	d040      	beq.n	8001974 <HAL_RCC_OscConfig+0xc98>
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80018fc:	d03a      	beq.n	8001974 <HAL_RCC_OscConfig+0xc98>
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001908:	d034      	beq.n	8001974 <HAL_RCC_OscConfig+0xc98>
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001914:	d02e      	beq.n	8001974 <HAL_RCC_OscConfig+0xc98>
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001920:	d028      	beq.n	8001974 <HAL_RCC_OscConfig+0xc98>
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800192c:	d022      	beq.n	8001974 <HAL_RCC_OscConfig+0xc98>
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001938:	d01c      	beq.n	8001974 <HAL_RCC_OscConfig+0xc98>
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001944:	d016      	beq.n	8001974 <HAL_RCC_OscConfig+0xc98>
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001950:	d010      	beq.n	8001974 <HAL_RCC_OscConfig+0xc98>
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800195c:	d00a      	beq.n	8001974 <HAL_RCC_OscConfig+0xc98>
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001968:	d004      	beq.n	8001974 <HAL_RCC_OscConfig+0xc98>
 800196a:	f44f 7111 	mov.w	r1, #580	; 0x244
 800196e:	485a      	ldr	r0, [pc, #360]	; (8001ad8 <HAL_RCC_OscConfig+0xdfc>)
 8001970:	f005 fb35 	bl	8006fde <assert_failed>
 8001974:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001978:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800197c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800198c:	601a      	str	r2, [r3, #0]
  return result;
 800198e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001992:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001994:	fab3 f383 	clz	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800199e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	461a      	mov	r2, r3
 80019a6:	2300      	movs	r3, #0
 80019a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7fe fc3b 	bl	8000224 <HAL_GetTick>
 80019ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b2:	e009      	b.n	80019c8 <HAL_RCC_OscConfig+0xcec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7fe fc36 	bl	8000224 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0xcec>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e18d      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1008>
 80019c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	fa93 f2a3 	rbit	r2, r3
 80019dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019e0:	601a      	str	r2, [r3, #0]
  return result;
 80019e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e8:	fab3 f383 	clz	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d102      	bne.n	8001a02 <HAL_RCC_OscConfig+0xd26>
 80019fc:	4b35      	ldr	r3, [pc, #212]	; (8001ad4 <HAL_RCC_OscConfig+0xdf8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	e01b      	b.n	8001a3a <HAL_RCC_OscConfig+0xd5e>
 8001a02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	fa93 f2a3 	rbit	r2, r3
 8001a16:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <HAL_RCC_OscConfig+0xdf8>)
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a3e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a42:	6011      	str	r1, [r2, #0]
 8001a44:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	fa92 f1a2 	rbit	r1, r2
 8001a4e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a52:	6011      	str	r1, [r2, #0]
  return result;
 8001a54:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	fab2 f282 	clz	r2, r2
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	f042 0220 	orr.w	r2, r2, #32
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	f002 021f 	and.w	r2, r2, #31
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d19e      	bne.n	80019b4 <HAL_RCC_OscConfig+0xcd8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_RCC_OscConfig+0xdf8>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	4911      	ldr	r1, [pc, #68]	; (8001ad4 <HAL_RCC_OscConfig+0xdf8>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
 8001a92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	fa93 f2a3 	rbit	r2, r3
 8001aa6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aaa:	601a      	str	r2, [r3, #0]
  return result;
 8001aac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ab0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001abc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7fe fbac 	bl	8000224 <HAL_GetTick>
 8001acc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad0:	e00e      	b.n	8001af0 <HAL_RCC_OscConfig+0xe14>
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	0800758c 	.word	0x0800758c
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7fe fba2 	bl	8000224 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0xe14>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e0f9      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1008>
 8001af0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fa93 f2a3 	rbit	r2, r3
 8001b04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b08:	601a      	str	r2, [r3, #0]
  return result;
 8001b0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d102      	bne.n	8001b2a <HAL_RCC_OscConfig+0xe4e>
 8001b24:	4b72      	ldr	r3, [pc, #456]	; (8001cf0 <HAL_RCC_OscConfig+0x1014>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	e01b      	b.n	8001b62 <HAL_RCC_OscConfig+0xe86>
 8001b2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	fa93 f2a3 	rbit	r2, r3
 8001b3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fa93 f2a3 	rbit	r2, r3
 8001b58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	4b64      	ldr	r3, [pc, #400]	; (8001cf0 <HAL_RCC_OscConfig+0x1014>)
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b66:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b6a:	6011      	str	r1, [r2, #0]
 8001b6c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	fa92 f1a2 	rbit	r1, r2
 8001b76:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b7a:	6011      	str	r1, [r2, #0]
  return result;
 8001b7c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	fab2 f282 	clz	r2, r2
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f042 0220 	orr.w	r2, r2, #32
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	f002 021f 	and.w	r2, r2, #31
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa01 f202 	lsl.w	r2, r1, r2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d09e      	beq.n	8001adc <HAL_RCC_OscConfig+0xe00>
 8001b9e:	e0a0      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1006>
 8001ba0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ba4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb8:	601a      	str	r2, [r3, #0]
  return result;
 8001bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbe:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7fe fb25 	bl	8000224 <HAL_GetTick>
 8001bda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bde:	e009      	b.n	8001bf4 <HAL_RCC_OscConfig+0xf18>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be0:	f7fe fb20 	bl	8000224 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0xf18>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e077      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1008>
 8001bf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	fa93 f2a3 	rbit	r2, r3
 8001c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0c:	601a      	str	r2, [r3, #0]
  return result;
 8001c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d102      	bne.n	8001c2e <HAL_RCC_OscConfig+0xf52>
 8001c28:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <HAL_RCC_OscConfig+0x1014>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	e01b      	b.n	8001c66 <HAL_RCC_OscConfig+0xf8a>
 8001c2e:	f107 0320 	add.w	r3, r7, #32
 8001c32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f107 0320 	add.w	r3, r7, #32
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	fa93 f2a3 	rbit	r2, r3
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	f107 0318 	add.w	r3, r7, #24
 8001c4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	f107 0318 	add.w	r3, r7, #24
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <HAL_RCC_OscConfig+0x1014>)
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	f107 0210 	add.w	r2, r7, #16
 8001c6a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c6e:	6011      	str	r1, [r2, #0]
 8001c70:	f107 0210 	add.w	r2, r7, #16
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	fa92 f1a2 	rbit	r1, r2
 8001c7a:	f107 020c 	add.w	r2, r7, #12
 8001c7e:	6011      	str	r1, [r2, #0]
  return result;
 8001c80:	f107 020c 	add.w	r2, r7, #12
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	fab2 f282 	clz	r2, r2
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	f042 0220 	orr.w	r2, r2, #32
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f002 021f 	and.w	r2, r2, #31
 8001c96:	2101      	movs	r1, #1
 8001c98:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d19e      	bne.n	8001be0 <HAL_RCC_OscConfig+0xf04>
 8001ca2:	e01e      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1006>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_OscConfig+0xfd6>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e018      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1008>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_RCC_OscConfig+0x1014>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cbe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d108      	bne.n	8001cde <HAL_RCC_OscConfig+0x1002>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ccc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cd0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1006>
#endif
        {
          return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1008>
        }
      }
    }
  }

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b09e      	sub	sp, #120	; 0x78
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e203      	b.n	8002114 <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d116      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x52>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d110      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x52>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10a      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x52>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d104      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x52>
 8001d3c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8001d40:	48a5      	ldr	r0, [pc, #660]	; (8001fd8 <HAL_RCC_ClockConfig+0x2e4>)
 8001d42:	f005 f94c 	bl	8006fde <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00a      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x6e>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d007      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x6e>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d004      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x6e>
 8001d58:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8001d5c:	489e      	ldr	r0, [pc, #632]	; (8001fd8 <HAL_RCC_ClockConfig+0x2e4>)
 8001d5e:	f005 f93e 	bl	8006fde <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d62:	4b9e      	ldr	r3, [pc, #632]	; (8001fdc <HAL_RCC_ClockConfig+0x2e8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d910      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d70:	4b9a      	ldr	r3, [pc, #616]	; (8001fdc <HAL_RCC_ClockConfig+0x2e8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f023 0207 	bic.w	r2, r3, #7
 8001d78:	4998      	ldr	r1, [pc, #608]	; (8001fdc <HAL_RCC_ClockConfig+0x2e8>)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d80:	4b96      	ldr	r3, [pc, #600]	; (8001fdc <HAL_RCC_ClockConfig+0x2e8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1c0      	b.n	8002114 <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d031      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d024      	beq.n	8001df0 <HAL_RCC_ClockConfig+0xfc>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b80      	cmp	r3, #128	; 0x80
 8001dac:	d020      	beq.n	8001df0 <HAL_RCC_ClockConfig+0xfc>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b90      	cmp	r3, #144	; 0x90
 8001db4:	d01c      	beq.n	8001df0 <HAL_RCC_ClockConfig+0xfc>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2ba0      	cmp	r3, #160	; 0xa0
 8001dbc:	d018      	beq.n	8001df0 <HAL_RCC_ClockConfig+0xfc>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2bb0      	cmp	r3, #176	; 0xb0
 8001dc4:	d014      	beq.n	8001df0 <HAL_RCC_ClockConfig+0xfc>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2bc0      	cmp	r3, #192	; 0xc0
 8001dcc:	d010      	beq.n	8001df0 <HAL_RCC_ClockConfig+0xfc>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2bd0      	cmp	r3, #208	; 0xd0
 8001dd4:	d00c      	beq.n	8001df0 <HAL_RCC_ClockConfig+0xfc>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2be0      	cmp	r3, #224	; 0xe0
 8001ddc:	d008      	beq.n	8001df0 <HAL_RCC_ClockConfig+0xfc>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2bf0      	cmp	r3, #240	; 0xf0
 8001de4:	d004      	beq.n	8001df0 <HAL_RCC_ClockConfig+0xfc>
 8001de6:	f240 21db 	movw	r1, #731	; 0x2db
 8001dea:	487b      	ldr	r0, [pc, #492]	; (8001fd8 <HAL_RCC_ClockConfig+0x2e4>)
 8001dec:	f005 f8f7 	bl	8006fde <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df0:	4b7b      	ldr	r3, [pc, #492]	; (8001fe0 <HAL_RCC_ClockConfig+0x2ec>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4978      	ldr	r1, [pc, #480]	; (8001fe0 <HAL_RCC_ClockConfig+0x2ec>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80f3 	beq.w	8001ff6 <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00c      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x13e>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d008      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x13e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d004      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x13e>
 8001e28:	f240 21e2 	movw	r1, #738	; 0x2e2
 8001e2c:	486a      	ldr	r0, [pc, #424]	; (8001fd8 <HAL_RCC_ClockConfig+0x2e4>)
 8001e2e:	f005 f8d6 	bl	8006fde <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d13c      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x1c0>
 8001e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e3e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	095b      	lsrs	r3, r3, #5
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d102      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x170>
 8001e5e:	4b60      	ldr	r3, [pc, #384]	; (8001fe0 <HAL_RCC_ClockConfig+0x2ec>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	e00f      	b.n	8001e84 <HAL_RCC_ClockConfig+0x190>
 8001e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	667b      	str	r3, [r7, #100]	; 0x64
 8001e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e76:	663b      	str	r3, [r7, #96]	; 0x60
 8001e78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e80:	4b57      	ldr	r3, [pc, #348]	; (8001fe0 <HAL_RCC_ClockConfig+0x2ec>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e88:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e8c:	fa92 f2a2 	rbit	r2, r2
 8001e90:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e94:	fab2 f282 	clz	r2, r2
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	f042 0220 	orr.w	r2, r2, #32
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	f002 021f 	and.w	r2, r2, #31
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d17b      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e12f      	b.n	8002114 <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d13c      	bne.n	8001f36 <HAL_RCC_ClockConfig+0x242>
 8001ebc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x1f2>
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <HAL_RCC_ClockConfig+0x2ec>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	e00f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x212>
 8001ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ef4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8001efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f02:	4b37      	ldr	r3, [pc, #220]	; (8001fe0 <HAL_RCC_ClockConfig+0x2ec>)
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f0a:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f0e:	fa92 f2a2 	rbit	r2, r2
 8001f12:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f16:	fab2 f282 	clz	r2, r2
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f042 0220 	orr.w	r2, r2, #32
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f002 021f 	and.w	r2, r2, #31
 8001f26:	2101      	movs	r1, #1
 8001f28:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d13a      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0ee      	b.n	8002114 <HAL_RCC_ClockConfig+0x420>
 8001f36:	2302      	movs	r3, #2
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d102      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x26a>
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_RCC_ClockConfig+0x2ec>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	e00d      	b.n	8001f7a <HAL_RCC_ClockConfig+0x286>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	623b      	str	r3, [r7, #32]
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_RCC_ClockConfig+0x2ec>)
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	61ba      	str	r2, [r7, #24]
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	fa92 f2a2 	rbit	r2, r2
 8001f84:	617a      	str	r2, [r7, #20]
  return result;
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	fab2 f282 	clz	r2, r2
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	f042 0220 	orr.w	r2, r2, #32
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	f002 021f 	and.w	r2, r2, #31
 8001f98:	2101      	movs	r1, #1
 8001f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b5      	b.n	8002114 <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_RCC_ClockConfig+0x2ec>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 0203 	bic.w	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	490a      	ldr	r1, [pc, #40]	; (8001fe0 <HAL_RCC_ClockConfig+0x2ec>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fba:	f7fe f933 	bl	8000224 <HAL_GetTick>
 8001fbe:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc0:	e010      	b.n	8001fe4 <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc2:	f7fe f92f 	bl	8000224 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d907      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e09d      	b.n	8002114 <HAL_RCC_ClockConfig+0x420>
 8001fd8:	0800758c 	.word	0x0800758c
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe4:	4b4d      	ldr	r3, [pc, #308]	; (800211c <HAL_RCC_ClockConfig+0x428>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 020c 	and.w	r2, r3, #12
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d1e5      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff6:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <HAL_RCC_ClockConfig+0x42c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d210      	bcs.n	8002026 <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002004:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_RCC_ClockConfig+0x42c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 0207 	bic.w	r2, r3, #7
 800200c:	4944      	ldr	r1, [pc, #272]	; (8002120 <HAL_RCC_ClockConfig+0x42c>)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002014:	4b42      	ldr	r3, [pc, #264]	; (8002120 <HAL_RCC_ClockConfig+0x42c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d001      	beq.n	8002026 <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e076      	b.n	8002114 <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d025      	beq.n	800207e <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d018      	beq.n	800206c <HAL_RCC_ClockConfig+0x378>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002042:	d013      	beq.n	800206c <HAL_RCC_ClockConfig+0x378>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800204c:	d00e      	beq.n	800206c <HAL_RCC_ClockConfig+0x378>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002056:	d009      	beq.n	800206c <HAL_RCC_ClockConfig+0x378>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002060:	d004      	beq.n	800206c <HAL_RCC_ClockConfig+0x378>
 8002062:	f240 311e 	movw	r1, #798	; 0x31e
 8002066:	482f      	ldr	r0, [pc, #188]	; (8002124 <HAL_RCC_ClockConfig+0x430>)
 8002068:	f004 ffb9 	bl	8006fde <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800206c:	4b2b      	ldr	r3, [pc, #172]	; (800211c <HAL_RCC_ClockConfig+0x428>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4928      	ldr	r1, [pc, #160]	; (800211c <HAL_RCC_ClockConfig+0x428>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d026      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d018      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x3d0>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209a:	d013      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x3d0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80020a4:	d00e      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x3d0>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80020ae:	d009      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x3d0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80020b8:	d004      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x3d0>
 80020ba:	f240 3125 	movw	r1, #805	; 0x325
 80020be:	4819      	ldr	r0, [pc, #100]	; (8002124 <HAL_RCC_ClockConfig+0x430>)
 80020c0:	f004 ff8d 	bl	8006fde <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_RCC_ClockConfig+0x428>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4912      	ldr	r1, [pc, #72]	; (800211c <HAL_RCC_ClockConfig+0x428>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020d8:	f000 f82c 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020dc:	4601      	mov	r1, r0
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <HAL_RCC_ClockConfig+0x428>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e6:	22f0      	movs	r2, #240	; 0xf0
 80020e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	fa92 f2a2 	rbit	r2, r2
 80020f0:	60fa      	str	r2, [r7, #12]
  return result;
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	fab2 f282 	clz	r2, r2
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	40d3      	lsrs	r3, r2
 80020fc:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <HAL_RCC_ClockConfig+0x434>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	fa21 f303 	lsr.w	r3, r1, r3
 8002104:	4a09      	ldr	r2, [pc, #36]	; (800212c <HAL_RCC_ClockConfig+0x438>)
 8002106:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x43c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f005 f81b 	bl	8007148 <HAL_InitTick>
  
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3778      	adds	r7, #120	; 0x78
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	40022000 	.word	0x40022000
 8002124:	0800758c 	.word	0x0800758c
 8002128:	08007760 	.word	0x08007760
 800212c:	2000000c 	.word	0x2000000c
 8002130:	20000000 	.word	0x20000000

08002134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b08b      	sub	sp, #44	; 0x2c
 8002138:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800214e:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b04      	cmp	r3, #4
 800215c:	d002      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x30>
 800215e:	2b08      	cmp	r3, #8
 8002160:	d003      	beq.n	800216a <HAL_RCC_GetSysClockFreq+0x36>
 8002162:	e03c      	b.n	80021de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002164:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002166:	623b      	str	r3, [r7, #32]
      break;
 8002168:	e03c      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002170:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002174:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	fa92 f2a2 	rbit	r2, r2
 800217c:	607a      	str	r2, [r7, #4]
  return result;
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	fab2 f282 	clz	r2, r2
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	40d3      	lsrs	r3, r2
 8002188:	4a1c      	ldr	r2, [pc, #112]	; (80021fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	220f      	movs	r2, #15
 8002198:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	fa92 f2a2 	rbit	r2, r2
 80021a0:	60fa      	str	r2, [r7, #12]
  return result;
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	fab2 f282 	clz	r2, r2
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	40d3      	lsrs	r3, r2
 80021ac:	4a14      	ldr	r2, [pc, #80]	; (8002200 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021bc:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
 80021cc:	e004      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	623b      	str	r3, [r7, #32]
      break;
 80021dc:	e002      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021e0:	623b      	str	r3, [r7, #32]
      break;
 80021e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e4:	6a3b      	ldr	r3, [r7, #32]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	372c      	adds	r7, #44	; 0x2c
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	007a1200 	.word	0x007a1200
 80021fc:	080076bc 	.word	0x080076bc
 8002200:	080076cc 	.word	0x080076cc
 8002204:	003d0900 	.word	0x003d0900

08002208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_RCC_GetHCLKFreq+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	2000000c 	.word	0x2000000c

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002226:	f7ff ffef 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 800222a:	4601      	mov	r1, r0
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002234:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002238:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	fa92 f2a2 	rbit	r2, r2
 8002240:	603a      	str	r2, [r7, #0]
  return result;
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	fab2 f282 	clz	r2, r2
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	40d3      	lsrs	r3, r2
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x40>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	08007770 	.word	0x08007770

08002264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800226a:	f7ff ffcd 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 800226e:	4601      	mov	r1, r0
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002278:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800227c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	fa92 f2a2 	rbit	r2, r2
 8002284:	603a      	str	r2, [r7, #0]
  return result;
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	fab2 f282 	clz	r2, r2
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	40d3      	lsrs	r3, r2
 8002290:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002292:	5cd3      	ldrb	r3, [r2, r3]
 8002294:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	08007770 	.word	0x08007770

080022a8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d104      	bne.n	80022c2 <HAL_RCC_GetClockConfig+0x1a>
 80022b8:	f240 4184 	movw	r1, #1156	; 0x484
 80022bc:	4818      	ldr	r0, [pc, #96]	; (8002320 <HAL_RCC_GetClockConfig+0x78>)
 80022be:	f004 fe8e 	bl	8006fde <assert_failed>
  assert_param(pFLatency != NULL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d104      	bne.n	80022d2 <HAL_RCC_GetClockConfig+0x2a>
 80022c8:	f240 4185 	movw	r1, #1157	; 0x485
 80022cc:	4814      	ldr	r0, [pc, #80]	; (8002320 <HAL_RCC_GetClockConfig+0x78>)
 80022ce:	f004 fe86 	bl	8006fde <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	220f      	movs	r2, #15
 80022d6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_RCC_GetClockConfig+0x7c>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0203 	and.w	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_RCC_GetClockConfig+0x7c>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_RCC_GetClockConfig+0x7c>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_RCC_GetClockConfig+0x7c>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	08db      	lsrs	r3, r3, #3
 8002302:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <HAL_RCC_GetClockConfig+0x80>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0207 	and.w	r2, r3, #7
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	601a      	str	r2, [r3, #0]
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	0800758c 	.word	0x0800758c
 8002324:	40021000 	.word	0x40021000
 8002328:	40022000 	.word	0x40022000

0800232c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e17e      	b.n	800263c <HAL_SPI_Init+0x310>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a99      	ldr	r2, [pc, #612]	; (80025a8 <HAL_SPI_Init+0x27c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d009      	beq.n	800235c <HAL_SPI_Init+0x30>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a97      	ldr	r2, [pc, #604]	; (80025ac <HAL_SPI_Init+0x280>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d004      	beq.n	800235c <HAL_SPI_Init+0x30>
 8002352:	f240 1147 	movw	r1, #327	; 0x147
 8002356:	4896      	ldr	r0, [pc, #600]	; (80025b0 <HAL_SPI_Init+0x284>)
 8002358:	f004 fe41 	bl	8006fde <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d009      	beq.n	8002378 <HAL_SPI_Init+0x4c>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800236c:	d004      	beq.n	8002378 <HAL_SPI_Init+0x4c>
 800236e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002372:	488f      	ldr	r0, [pc, #572]	; (80025b0 <HAL_SPI_Init+0x284>)
 8002374:	f004 fe33 	bl	8006fde <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00e      	beq.n	800239e <HAL_SPI_Init+0x72>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002388:	d009      	beq.n	800239e <HAL_SPI_Init+0x72>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002392:	d004      	beq.n	800239e <HAL_SPI_Init+0x72>
 8002394:	f240 1149 	movw	r1, #329	; 0x149
 8002398:	4885      	ldr	r0, [pc, #532]	; (80025b0 <HAL_SPI_Init+0x284>)
 800239a:	f004 fe20 	bl	8006fde <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80023a6:	d040      	beq.n	800242a <HAL_SPI_Init+0xfe>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80023b0:	d03b      	beq.n	800242a <HAL_SPI_Init+0xfe>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80023ba:	d036      	beq.n	800242a <HAL_SPI_Init+0xfe>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80023c4:	d031      	beq.n	800242a <HAL_SPI_Init+0xfe>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80023ce:	d02c      	beq.n	800242a <HAL_SPI_Init+0xfe>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80023d8:	d027      	beq.n	800242a <HAL_SPI_Init+0xfe>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80023e2:	d022      	beq.n	800242a <HAL_SPI_Init+0xfe>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ec:	d01d      	beq.n	800242a <HAL_SPI_Init+0xfe>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023f6:	d018      	beq.n	800242a <HAL_SPI_Init+0xfe>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002400:	d013      	beq.n	800242a <HAL_SPI_Init+0xfe>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800240a:	d00e      	beq.n	800242a <HAL_SPI_Init+0xfe>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002414:	d009      	beq.n	800242a <HAL_SPI_Init+0xfe>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800241e:	d004      	beq.n	800242a <HAL_SPI_Init+0xfe>
 8002420:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002424:	4862      	ldr	r0, [pc, #392]	; (80025b0 <HAL_SPI_Init+0x284>)
 8002426:	f004 fdda 	bl	8006fde <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002432:	d00d      	beq.n	8002450 <HAL_SPI_Init+0x124>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d009      	beq.n	8002450 <HAL_SPI_Init+0x124>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002444:	d004      	beq.n	8002450 <HAL_SPI_Init+0x124>
 8002446:	f240 114b 	movw	r1, #331	; 0x14b
 800244a:	4859      	ldr	r0, [pc, #356]	; (80025b0 <HAL_SPI_Init+0x284>)
 800244c:	f004 fdc7 	bl	8006fde <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	2b08      	cmp	r3, #8
 8002456:	d008      	beq.n	800246a <HAL_SPI_Init+0x13e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245c:	2b00      	cmp	r3, #0
 800245e:	d004      	beq.n	800246a <HAL_SPI_Init+0x13e>
 8002460:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8002464:	4852      	ldr	r0, [pc, #328]	; (80025b0 <HAL_SPI_Init+0x284>)
 8002466:	f004 fdba 	bl	8006fde <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d020      	beq.n	80024b4 <HAL_SPI_Init+0x188>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	2b08      	cmp	r3, #8
 8002478:	d01c      	beq.n	80024b4 <HAL_SPI_Init+0x188>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	2b10      	cmp	r3, #16
 8002480:	d018      	beq.n	80024b4 <HAL_SPI_Init+0x188>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	2b18      	cmp	r3, #24
 8002488:	d014      	beq.n	80024b4 <HAL_SPI_Init+0x188>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	2b20      	cmp	r3, #32
 8002490:	d010      	beq.n	80024b4 <HAL_SPI_Init+0x188>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	2b28      	cmp	r3, #40	; 0x28
 8002498:	d00c      	beq.n	80024b4 <HAL_SPI_Init+0x188>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	2b30      	cmp	r3, #48	; 0x30
 80024a0:	d008      	beq.n	80024b4 <HAL_SPI_Init+0x188>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	2b38      	cmp	r3, #56	; 0x38
 80024a8:	d004      	beq.n	80024b4 <HAL_SPI_Init+0x188>
 80024aa:	f240 114d 	movw	r1, #333	; 0x14d
 80024ae:	4840      	ldr	r0, [pc, #256]	; (80025b0 <HAL_SPI_Init+0x284>)
 80024b0:	f004 fd95 	bl	8006fde <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_SPI_Init+0x1a2>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	2b80      	cmp	r3, #128	; 0x80
 80024c2:	d004      	beq.n	80024ce <HAL_SPI_Init+0x1a2>
 80024c4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80024c8:	4839      	ldr	r0, [pc, #228]	; (80025b0 <HAL_SPI_Init+0x284>)
 80024ca:	f004 fd88 	bl	8006fde <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_SPI_Init+0x1bc>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d004      	beq.n	80024e8 <HAL_SPI_Init+0x1bc>
 80024de:	f240 114f 	movw	r1, #335	; 0x14f
 80024e2:	4833      	ldr	r0, [pc, #204]	; (80025b0 <HAL_SPI_Init+0x284>)
 80024e4:	f004 fd7b 	bl	8006fde <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d119      	bne.n	8002524 <HAL_SPI_Init+0x1f8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_SPI_Init+0x1de>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d004      	beq.n	800250a <HAL_SPI_Init+0x1de>
 8002500:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8002504:	482a      	ldr	r0, [pc, #168]	; (80025b0 <HAL_SPI_Init+0x284>)
 8002506:	f004 fd6a 	bl	8006fde <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <HAL_SPI_Init+0x1f8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d004      	beq.n	8002524 <HAL_SPI_Init+0x1f8>
 800251a:	f240 1153 	movw	r1, #339	; 0x153
 800251e:	4824      	ldr	r0, [pc, #144]	; (80025b0 <HAL_SPI_Init+0x284>)
 8002520:	f004 fd5d 	bl	8006fde <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_SPI_Init+0x218>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f004 fd96 	bl	8007070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800255a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002564:	d902      	bls.n	800256c <HAL_SPI_Init+0x240>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	e002      	b.n	8002572 <HAL_SPI_Init+0x246>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800256c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002570:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800257a:	d007      	beq.n	800258c <HAL_SPI_Init+0x260>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002584:	d002      	beq.n	800258c <HAL_SPI_Init+0x260>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	2b00      	cmp	r3, #0
 8002592:	d112      	bne.n	80025ba <HAL_SPI_Init+0x28e>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800259c:	d90a      	bls.n	80025b4 <HAL_SPI_Init+0x288>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
 80025a4:	e009      	b.n	80025ba <HAL_SPI_Init+0x28e>
 80025a6:	bf00      	nop
 80025a8:	40003800 	.word	0x40003800
 80025ac:	40003c00 	.word	0x40003c00
 80025b0:	080075c4 	.word	0x080075c4
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	ea42 0103 	orr.w	r1, r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	0c1b      	lsrs	r3, r3, #16
 80025fa:	f003 0204 	and.w	r2, r3, #4
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	ea42 0103 	orr.w	r1, r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	430a      	orrs	r2, r1
 800261a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800262a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e079      	b.n	800274a <HAL_TIM_Base_Init+0x106>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a3e      	ldr	r2, [pc, #248]	; (8002754 <HAL_TIM_Base_Init+0x110>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d01d      	beq.n	800269c <HAL_TIM_Base_Init+0x58>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002668:	d018      	beq.n	800269c <HAL_TIM_Base_Init+0x58>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a3a      	ldr	r2, [pc, #232]	; (8002758 <HAL_TIM_Base_Init+0x114>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d013      	beq.n	800269c <HAL_TIM_Base_Init+0x58>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a38      	ldr	r2, [pc, #224]	; (800275c <HAL_TIM_Base_Init+0x118>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00e      	beq.n	800269c <HAL_TIM_Base_Init+0x58>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a37      	ldr	r2, [pc, #220]	; (8002760 <HAL_TIM_Base_Init+0x11c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d009      	beq.n	800269c <HAL_TIM_Base_Init+0x58>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a35      	ldr	r2, [pc, #212]	; (8002764 <HAL_TIM_Base_Init+0x120>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d004      	beq.n	800269c <HAL_TIM_Base_Init+0x58>
 8002692:	f240 1119 	movw	r1, #281	; 0x119
 8002696:	4834      	ldr	r0, [pc, #208]	; (8002768 <HAL_TIM_Base_Init+0x124>)
 8002698:	f004 fca1 	bl	8006fde <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d014      	beq.n	80026ce <HAL_TIM_Base_Init+0x8a>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d010      	beq.n	80026ce <HAL_TIM_Base_Init+0x8a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d00c      	beq.n	80026ce <HAL_TIM_Base_Init+0x8a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b40      	cmp	r3, #64	; 0x40
 80026ba:	d008      	beq.n	80026ce <HAL_TIM_Base_Init+0x8a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b60      	cmp	r3, #96	; 0x60
 80026c2:	d004      	beq.n	80026ce <HAL_TIM_Base_Init+0x8a>
 80026c4:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80026c8:	4827      	ldr	r0, [pc, #156]	; (8002768 <HAL_TIM_Base_Init+0x124>)
 80026ca:	f004 fc88 	bl	8006fde <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00e      	beq.n	80026f4 <HAL_TIM_Base_Init+0xb0>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026de:	d009      	beq.n	80026f4 <HAL_TIM_Base_Init+0xb0>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e8:	d004      	beq.n	80026f4 <HAL_TIM_Base_Init+0xb0>
 80026ea:	f240 111b 	movw	r1, #283	; 0x11b
 80026ee:	481e      	ldr	r0, [pc, #120]	; (8002768 <HAL_TIM_Base_Init+0x124>)
 80026f0:	f004 fc75 	bl	8006fde <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_TIM_Base_Init+0xca>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b80      	cmp	r3, #128	; 0x80
 8002702:	d004      	beq.n	800270e <HAL_TIM_Base_Init+0xca>
 8002704:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8002708:	4817      	ldr	r0, [pc, #92]	; (8002768 <HAL_TIM_Base_Init+0x124>)
 800270a:	f004 fc68 	bl	8006fde <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_TIM_Base_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f822 	bl	800276c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3304      	adds	r3, #4
 8002738:	4619      	mov	r1, r3
 800273a:	4610      	mov	r0, r2
 800273c:	f000 f9c0 	bl	8002ac0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40012c00 	.word	0x40012c00
 8002758:	40001000 	.word	0x40001000
 800275c:	40014000 	.word	0x40014000
 8002760:	40014400 	.word	0x40014400
 8002764:	40014800 	.word	0x40014800
 8002768:	080075fc 	.word	0x080075fc

0800276c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a21      	ldr	r2, [pc, #132]	; (8002814 <HAL_TIM_Base_Start_IT+0x94>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01d      	beq.n	80027ce <HAL_TIM_Base_Start_IT+0x4e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279a:	d018      	beq.n	80027ce <HAL_TIM_Base_Start_IT+0x4e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <HAL_TIM_Base_Start_IT+0x98>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <HAL_TIM_Base_Start_IT+0x4e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1c      	ldr	r2, [pc, #112]	; (800281c <HAL_TIM_Base_Start_IT+0x9c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00e      	beq.n	80027ce <HAL_TIM_Base_Start_IT+0x4e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1a      	ldr	r2, [pc, #104]	; (8002820 <HAL_TIM_Base_Start_IT+0xa0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d009      	beq.n	80027ce <HAL_TIM_Base_Start_IT+0x4e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a19      	ldr	r2, [pc, #100]	; (8002824 <HAL_TIM_Base_Start_IT+0xa4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d004      	beq.n	80027ce <HAL_TIM_Base_Start_IT+0x4e>
 80027c4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80027c8:	4817      	ldr	r0, [pc, #92]	; (8002828 <HAL_TIM_Base_Start_IT+0xa8>)
 80027ca:	f004 fc08 	bl	8006fde <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_TIM_Base_Start_IT+0xac>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b06      	cmp	r3, #6
 80027ee:	d00b      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0x88>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f6:	d007      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0x88>
  {
    __HAL_TIM_ENABLE(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40012c00 	.word	0x40012c00
 8002818:	40001000 	.word	0x40001000
 800281c:	40014000 	.word	0x40014000
 8002820:	40014400 	.word	0x40014400
 8002824:	40014800 	.word	0x40014800
 8002828:	080075fc 	.word	0x080075fc
 800282c:	00010007 	.word	0x00010007

08002830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b02      	cmp	r3, #2
 8002844:	d122      	bne.n	800288c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b02      	cmp	r3, #2
 8002852:	d11b      	bne.n	800288c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0202 	mvn.w	r2, #2
 800285c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f905 	bl	8002a82 <HAL_TIM_IC_CaptureCallback>
 8002878:	e005      	b.n	8002886 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f8f7 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f908 	bl	8002a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b04      	cmp	r3, #4
 8002898:	d122      	bne.n	80028e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d11b      	bne.n	80028e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0204 	mvn.w	r2, #4
 80028b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2202      	movs	r2, #2
 80028b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f8db 	bl	8002a82 <HAL_TIM_IC_CaptureCallback>
 80028cc:	e005      	b.n	80028da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f8cd 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f8de 	bl	8002a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d122      	bne.n	8002934 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d11b      	bne.n	8002934 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0208 	mvn.w	r2, #8
 8002904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2204      	movs	r2, #4
 800290a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f8b1 	bl	8002a82 <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f8a3 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f8b4 	bl	8002a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b10      	cmp	r3, #16
 8002940:	d122      	bne.n	8002988 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b10      	cmp	r3, #16
 800294e:	d11b      	bne.n	8002988 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0210 	mvn.w	r2, #16
 8002958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2208      	movs	r2, #8
 800295e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f887 	bl	8002a82 <HAL_TIM_IC_CaptureCallback>
 8002974:	e005      	b.n	8002982 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f879 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f88a 	bl	8002a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b01      	cmp	r3, #1
 8002994:	d10e      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d107      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0201 	mvn.w	r2, #1
 80029ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f004 fafc 	bl	8006fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029be:	2b80      	cmp	r3, #128	; 0x80
 80029c0:	d10e      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029cc:	2b80      	cmp	r3, #128	; 0x80
 80029ce:	d107      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f8e8 	bl	8002bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ee:	d10e      	bne.n	8002a0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fa:	2b80      	cmp	r3, #128	; 0x80
 80029fc:	d107      	bne.n	8002a0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f8db 	bl	8002bc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a18:	2b40      	cmp	r3, #64	; 0x40
 8002a1a:	d10e      	bne.n	8002a3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	d107      	bne.n	8002a3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f838 	bl	8002aaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	d10e      	bne.n	8002a66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	d107      	bne.n	8002a66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f06f 0220 	mvn.w	r2, #32
 8002a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f89b 	bl	8002b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a2e      	ldr	r2, [pc, #184]	; (8002b8c <TIM_Base_SetConfig+0xcc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <TIM_Base_SetConfig+0x20>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ade:	d108      	bne.n	8002af2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a25      	ldr	r2, [pc, #148]	; (8002b8c <TIM_Base_SetConfig+0xcc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00f      	beq.n	8002b1a <TIM_Base_SetConfig+0x5a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b00:	d00b      	beq.n	8002b1a <TIM_Base_SetConfig+0x5a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a22      	ldr	r2, [pc, #136]	; (8002b90 <TIM_Base_SetConfig+0xd0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d007      	beq.n	8002b1a <TIM_Base_SetConfig+0x5a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a21      	ldr	r2, [pc, #132]	; (8002b94 <TIM_Base_SetConfig+0xd4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d003      	beq.n	8002b1a <TIM_Base_SetConfig+0x5a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a20      	ldr	r2, [pc, #128]	; (8002b98 <TIM_Base_SetConfig+0xd8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d108      	bne.n	8002b2c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <TIM_Base_SetConfig+0xcc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d00b      	beq.n	8002b70 <TIM_Base_SetConfig+0xb0>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <TIM_Base_SetConfig+0xd0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d007      	beq.n	8002b70 <TIM_Base_SetConfig+0xb0>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a0c      	ldr	r2, [pc, #48]	; (8002b94 <TIM_Base_SetConfig+0xd4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d003      	beq.n	8002b70 <TIM_Base_SetConfig+0xb0>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <TIM_Base_SetConfig+0xd8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d103      	bne.n	8002b78 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	615a      	str	r2, [r3, #20]
}
 8002b7e:	bf00      	nop
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40012c00 	.word	0x40012c00
 8002b90:	40014000 	.word	0x40014000
 8002b94:	40014400 	.word	0x40014400
 8002b98:	40014800 	.word	0x40014800

08002b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e06d      	b.n	8002cc6 <HAL_UART_Init+0xee>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d014      	beq.n	8002c1c <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a36      	ldr	r2, [pc, #216]	; (8002cd0 <HAL_UART_Init+0xf8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d023      	beq.n	8002c44 <HAL_UART_Init+0x6c>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a34      	ldr	r2, [pc, #208]	; (8002cd4 <HAL_UART_Init+0xfc>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d01e      	beq.n	8002c44 <HAL_UART_Init+0x6c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a33      	ldr	r2, [pc, #204]	; (8002cd8 <HAL_UART_Init+0x100>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d019      	beq.n	8002c44 <HAL_UART_Init+0x6c>
 8002c10:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8002c14:	4831      	ldr	r0, [pc, #196]	; (8002cdc <HAL_UART_Init+0x104>)
 8002c16:	f004 f9e2 	bl	8006fde <assert_failed>
 8002c1a:	e013      	b.n	8002c44 <HAL_UART_Init+0x6c>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a2b      	ldr	r2, [pc, #172]	; (8002cd0 <HAL_UART_Init+0xf8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00e      	beq.n	8002c44 <HAL_UART_Init+0x6c>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a2a      	ldr	r2, [pc, #168]	; (8002cd4 <HAL_UART_Init+0xfc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d009      	beq.n	8002c44 <HAL_UART_Init+0x6c>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a28      	ldr	r2, [pc, #160]	; (8002cd8 <HAL_UART_Init+0x100>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d004      	beq.n	8002c44 <HAL_UART_Init+0x6c>
 8002c3a:	f240 112f 	movw	r1, #303	; 0x12f
 8002c3e:	4827      	ldr	r0, [pc, #156]	; (8002cdc <HAL_UART_Init+0x104>)
 8002c40:	f004 f9cd 	bl	8006fde <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d106      	bne.n	8002c5a <HAL_UART_Init+0x82>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f004 fb6b 	bl	8007330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2224      	movs	r2, #36	; 0x24
 8002c5e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fa27 	bl	80030c4 <UART_SetConfig>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_UART_Init+0xa8>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e022      	b.n	8002cc6 <HAL_UART_Init+0xee>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_UART_Init+0xb6>
  {
    UART_AdvFeatureConfig(huart);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fc2b 	bl	80034e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0201 	orr.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fd50 	bl	8003764 <UART_CheckIdleState>
 8002cc4:	4603      	mov	r3, r0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40013800 	.word	0x40013800
 8002cd4:	40004400 	.word	0x40004400
 8002cd8:	40004800 	.word	0x40004800
 8002cdc:	08007634 	.word	0x08007634

08002ce0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	4613      	mov	r3, r2
 8002cec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	f040 808a 	bne.w	8002e0c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_UART_Receive_IT+0x24>
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e082      	b.n	8002e0e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_UART_Receive_IT+0x36>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e07b      	b.n	8002e0e <HAL_UART_Receive_IT+0x12e>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	88fa      	ldrh	r2, [r7, #6]
 8002d28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	88fa      	ldrh	r2, [r7, #6]
 8002d30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d42:	d10e      	bne.n	8002d62 <HAL_UART_Receive_IT+0x82>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d105      	bne.n	8002d58 <HAL_UART_Receive_IT+0x78>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d56:	e02d      	b.n	8002db4 <HAL_UART_Receive_IT+0xd4>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	22ff      	movs	r2, #255	; 0xff
 8002d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d60:	e028      	b.n	8002db4 <HAL_UART_Receive_IT+0xd4>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10d      	bne.n	8002d86 <HAL_UART_Receive_IT+0xa6>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d104      	bne.n	8002d7c <HAL_UART_Receive_IT+0x9c>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	22ff      	movs	r2, #255	; 0xff
 8002d76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d7a:	e01b      	b.n	8002db4 <HAL_UART_Receive_IT+0xd4>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	227f      	movs	r2, #127	; 0x7f
 8002d80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d84:	e016      	b.n	8002db4 <HAL_UART_Receive_IT+0xd4>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d8e:	d10d      	bne.n	8002dac <HAL_UART_Receive_IT+0xcc>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <HAL_UART_Receive_IT+0xc2>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	227f      	movs	r2, #127	; 0x7f
 8002d9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002da0:	e008      	b.n	8002db4 <HAL_UART_Receive_IT+0xd4>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	223f      	movs	r2, #63	; 0x3f
 8002da6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002daa:	e003      	b.n	8002db4 <HAL_UART_Receive_IT+0xd4>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2222      	movs	r2, #34	; 0x22
 8002dbe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd8:	d107      	bne.n	8002dea <HAL_UART_Receive_IT+0x10a>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d103      	bne.n	8002dea <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4a0d      	ldr	r2, [pc, #52]	; (8002e1c <HAL_UART_Receive_IT+0x13c>)
 8002de6:	661a      	str	r2, [r3, #96]	; 0x60
 8002de8:	e002      	b.n	8002df0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4a0c      	ldr	r2, [pc, #48]	; (8002e20 <HAL_UART_Receive_IT+0x140>)
 8002dee:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002e06:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e000      	b.n	8002e0e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	08003a29 	.word	0x08003a29
 8002e20:	08003983 	.word	0x08003983

08002e24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d113      	bne.n	8002e7c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00e      	beq.n	8002e7c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d009      	beq.n	8002e7c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 8114 	beq.w	800309a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	4798      	blx	r3
      }
      return;
 8002e7a:	e10e      	b.n	800309a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80d6 	beq.w	8003030 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d105      	bne.n	8002e9a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80cb 	beq.w	8003030 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00e      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x9e>
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eba:	f043 0201 	orr.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00e      	beq.n	8002eea <HAL_UART_IRQHandler+0xc6>
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2202      	movs	r2, #2
 8002edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ee2:	f043 0204 	orr.w	r2, r3, #4
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00e      	beq.n	8002f12 <HAL_UART_IRQHandler+0xee>
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2204      	movs	r2, #4
 8002f04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f0a:	f043 0202 	orr.w	r2, r3, #2
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d013      	beq.n	8002f44 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d104      	bne.n	8002f30 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d009      	beq.n	8002f44 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2208      	movs	r2, #8
 8002f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3c:	f043 0208 	orr.w	r2, r3, #8
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00f      	beq.n	8002f6e <HAL_UART_IRQHandler+0x14a>
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f66:	f043 0220 	orr.w	r2, r3, #32
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 8093 	beq.w	800309e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00c      	beq.n	8002f9c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d007      	beq.n	8002f9c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fac:	2b40      	cmp	r3, #64	; 0x40
 8002fae:	d004      	beq.n	8002fba <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d031      	beq.n	800301e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fc92 	bl	80038e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	d123      	bne.n	8003016 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fdc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d013      	beq.n	800300e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fea:	4a30      	ldr	r2, [pc, #192]	; (80030ac <HAL_UART_IRQHandler+0x288>)
 8002fec:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd fb84 	bl	8000700 <HAL_DMA_Abort_IT>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d016      	beq.n	800302c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003008:	4610      	mov	r0, r2
 800300a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300c:	e00e      	b.n	800302c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f84e 	bl	80030b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003014:	e00a      	b.n	800302c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f84a 	bl	80030b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	e006      	b.n	800302c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f846 	bl	80030b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800302a:	e038      	b.n	800309e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302c:	bf00      	nop
    return;
 800302e:	e036      	b.n	800309e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00d      	beq.n	8003056 <HAL_UART_IRQHandler+0x232>
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800304c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fd3d 	bl	8003ace <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003054:	e026      	b.n	80030a4 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00d      	beq.n	800307c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800306e:	2b00      	cmp	r3, #0
 8003070:	d017      	beq.n	80030a2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
    }
    return;
 800307a:	e012      	b.n	80030a2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00e      	beq.n	80030a4 <HAL_UART_IRQHandler+0x280>
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308c:	2b00      	cmp	r3, #0
 800308e:	d009      	beq.n	80030a4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 fc5d 	bl	8003950 <UART_EndTransmit_IT>
    return;
 8003096:	bf00      	nop
 8003098:	e004      	b.n	80030a4 <HAL_UART_IRQHandler+0x280>
      return;
 800309a:	bf00      	nop
 800309c:	e002      	b.n	80030a4 <HAL_UART_IRQHandler+0x280>
    return;
 800309e:	bf00      	nop
 80030a0:	e000      	b.n	80030a4 <HAL_UART_IRQHandler+0x280>
    return;
 80030a2:	bf00      	nop
  }

}
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	08003925 	.word	0x08003925

080030b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4a9f      	ldr	r2, [pc, #636]	; (8003358 <UART_SetConfig+0x294>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d904      	bls.n	80030e8 <UART_SetConfig+0x24>
 80030de:	f640 21a2 	movw	r1, #2722	; 0xaa2
 80030e2:	489e      	ldr	r0, [pc, #632]	; (800335c <UART_SetConfig+0x298>)
 80030e4:	f003 ff7b 	bl	8006fde <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030f0:	d00d      	beq.n	800310e <UART_SetConfig+0x4a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <UART_SetConfig+0x4a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	d004      	beq.n	800310e <UART_SetConfig+0x4a>
 8003104:	f640 21a3 	movw	r1, #2723	; 0xaa3
 8003108:	4894      	ldr	r0, [pc, #592]	; (800335c <UART_SetConfig+0x298>)
 800310a:	f003 ff68 	bl	8006fde <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003116:	d012      	beq.n	800313e <UART_SetConfig+0x7a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00e      	beq.n	800313e <UART_SetConfig+0x7a>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003128:	d009      	beq.n	800313e <UART_SetConfig+0x7a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003132:	d004      	beq.n	800313e <UART_SetConfig+0x7a>
 8003134:	f640 21a4 	movw	r1, #2724	; 0xaa4
 8003138:	4888      	ldr	r0, [pc, #544]	; (800335c <UART_SetConfig+0x298>)
 800313a:	f003 ff50 	bl	8006fde <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <UART_SetConfig+0x96>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800314e:	d004      	beq.n	800315a <UART_SetConfig+0x96>
 8003150:	f640 21a5 	movw	r1, #2725	; 0xaa5
 8003154:	4881      	ldr	r0, [pc, #516]	; (800335c <UART_SetConfig+0x298>)
 8003156:	f003 ff42 	bl	8006fde <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00e      	beq.n	8003180 <UART_SetConfig+0xbc>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316a:	d009      	beq.n	8003180 <UART_SetConfig+0xbc>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003174:	d004      	beq.n	8003180 <UART_SetConfig+0xbc>
 8003176:	f640 21a7 	movw	r1, #2727	; 0xaa7
 800317a:	4878      	ldr	r0, [pc, #480]	; (800335c <UART_SetConfig+0x298>)
 800317c:	f003 ff2f 	bl	8006fde <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f023 030c 	bic.w	r3, r3, #12
 8003188:	2b00      	cmp	r3, #0
 800318a:	d103      	bne.n	8003194 <UART_SetConfig+0xd0>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <UART_SetConfig+0xda>
 8003194:	f640 21a8 	movw	r1, #2728	; 0xaa8
 8003198:	4870      	ldr	r0, [pc, #448]	; (800335c <UART_SetConfig+0x298>)
 800319a:	f003 ff20 	bl	8006fde <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d013      	beq.n	80031ce <UART_SetConfig+0x10a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ae:	d00e      	beq.n	80031ce <UART_SetConfig+0x10a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b8:	d009      	beq.n	80031ce <UART_SetConfig+0x10a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031c2:	d004      	beq.n	80031ce <UART_SetConfig+0x10a>
 80031c4:	f640 21a9 	movw	r1, #2729	; 0xaa9
 80031c8:	4864      	ldr	r0, [pc, #400]	; (800335c <UART_SetConfig+0x298>)
 80031ca:	f003 ff08 	bl	8006fde <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <UART_SetConfig+0x126>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031de:	d004      	beq.n	80031ea <UART_SetConfig+0x126>
 80031e0:	f640 21aa 	movw	r1, #2730	; 0xaaa
 80031e4:	485d      	ldr	r0, [pc, #372]	; (800335c <UART_SetConfig+0x298>)
 80031e6:	f003 fefa 	bl	8006fde <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b55      	ldr	r3, [pc, #340]	; (8003360 <UART_SetConfig+0x29c>)
 800320a:	4013      	ands	r3, r2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	6939      	ldr	r1, [r7, #16]
 8003212:	430b      	orrs	r3, r1
 8003214:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	430a      	orrs	r2, r1
 800324e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a43      	ldr	r2, [pc, #268]	; (8003364 <UART_SetConfig+0x2a0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d120      	bne.n	800329c <UART_SetConfig+0x1d8>
 800325a:	4b43      	ldr	r3, [pc, #268]	; (8003368 <UART_SetConfig+0x2a4>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b03      	cmp	r3, #3
 8003264:	d816      	bhi.n	8003294 <UART_SetConfig+0x1d0>
 8003266:	a201      	add	r2, pc, #4	; (adr r2, 800326c <UART_SetConfig+0x1a8>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	0800327d 	.word	0x0800327d
 8003270:	08003289 	.word	0x08003289
 8003274:	0800328f 	.word	0x0800328f
 8003278:	08003283 	.word	0x08003283
 800327c:	2300      	movs	r3, #0
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e01e      	b.n	80032c0 <UART_SetConfig+0x1fc>
 8003282:	2302      	movs	r3, #2
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e01b      	b.n	80032c0 <UART_SetConfig+0x1fc>
 8003288:	2304      	movs	r3, #4
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e018      	b.n	80032c0 <UART_SetConfig+0x1fc>
 800328e:	2308      	movs	r3, #8
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e015      	b.n	80032c0 <UART_SetConfig+0x1fc>
 8003294:	2310      	movs	r3, #16
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	bf00      	nop
 800329a:	e011      	b.n	80032c0 <UART_SetConfig+0x1fc>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a32      	ldr	r2, [pc, #200]	; (800336c <UART_SetConfig+0x2a8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d102      	bne.n	80032ac <UART_SetConfig+0x1e8>
 80032a6:	2300      	movs	r3, #0
 80032a8:	77fb      	strb	r3, [r7, #31]
 80032aa:	e009      	b.n	80032c0 <UART_SetConfig+0x1fc>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a2f      	ldr	r2, [pc, #188]	; (8003370 <UART_SetConfig+0x2ac>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d102      	bne.n	80032bc <UART_SetConfig+0x1f8>
 80032b6:	2300      	movs	r3, #0
 80032b8:	77fb      	strb	r3, [r7, #31]
 80032ba:	e001      	b.n	80032c0 <UART_SetConfig+0x1fc>
 80032bc:	2310      	movs	r3, #16
 80032be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c8:	f040 8090 	bne.w	80033ec <UART_SetConfig+0x328>
  {
    switch (clocksource)
 80032cc:	7ffb      	ldrb	r3, [r7, #31]
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d86c      	bhi.n	80033ac <UART_SetConfig+0x2e8>
 80032d2:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <UART_SetConfig+0x214>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	080032fd 	.word	0x080032fd
 80032dc:	0800331d 	.word	0x0800331d
 80032e0:	0800333d 	.word	0x0800333d
 80032e4:	080033ad 	.word	0x080033ad
 80032e8:	08003375 	.word	0x08003375
 80032ec:	080033ad 	.word	0x080033ad
 80032f0:	080033ad 	.word	0x080033ad
 80032f4:	080033ad 	.word	0x080033ad
 80032f8:	08003395 	.word	0x08003395
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032fc:	f7fe ff90 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8003300:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	005a      	lsls	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	085b      	lsrs	r3, r3, #1
 800330c:	441a      	add	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	fbb2 f3f3 	udiv	r3, r2, r3
 8003316:	b29b      	uxth	r3, r3
 8003318:	61bb      	str	r3, [r7, #24]
        break;
 800331a:	e04a      	b.n	80033b2 <UART_SetConfig+0x2ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800331c:	f7fe ffa2 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8003320:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	005a      	lsls	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	441a      	add	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	fbb2 f3f3 	udiv	r3, r2, r3
 8003336:	b29b      	uxth	r3, r3
 8003338:	61bb      	str	r3, [r7, #24]
        break;
 800333a:	e03a      	b.n	80033b2 <UART_SetConfig+0x2ee>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	085b      	lsrs	r3, r3, #1
 8003342:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003346:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6852      	ldr	r2, [r2, #4]
 800334e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003352:	b29b      	uxth	r3, r3
 8003354:	61bb      	str	r3, [r7, #24]
        break;
 8003356:	e02c      	b.n	80033b2 <UART_SetConfig+0x2ee>
 8003358:	00895440 	.word	0x00895440
 800335c:	08007634 	.word	0x08007634
 8003360:	efff69f3 	.word	0xefff69f3
 8003364:	40013800 	.word	0x40013800
 8003368:	40021000 	.word	0x40021000
 800336c:	40004400 	.word	0x40004400
 8003370:	40004800 	.word	0x40004800
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003374:	f7fe fede 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8003378:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	005a      	lsls	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	085b      	lsrs	r3, r3, #1
 8003384:	441a      	add	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	fbb2 f3f3 	udiv	r3, r2, r3
 800338e:	b29b      	uxth	r3, r3
 8003390:	61bb      	str	r3, [r7, #24]
        break;
 8003392:	e00e      	b.n	80033b2 <UART_SetConfig+0x2ee>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	61bb      	str	r3, [r7, #24]
        break;
 80033aa:	e002      	b.n	80033b2 <UART_SetConfig+0x2ee>
      default:
        ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	75fb      	strb	r3, [r7, #23]
        break;
 80033b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b0f      	cmp	r3, #15
 80033b6:	d916      	bls.n	80033e6 <UART_SetConfig+0x322>
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033be:	d212      	bcs.n	80033e6 <UART_SetConfig+0x322>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f023 030f 	bic.w	r3, r3, #15
 80033c8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	897b      	ldrh	r3, [r7, #10]
 80033d8:	4313      	orrs	r3, r2
 80033da:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	897a      	ldrh	r2, [r7, #10]
 80033e2:	60da      	str	r2, [r3, #12]
 80033e4:	e072      	b.n	80034cc <UART_SetConfig+0x408>
    }
    else
    {
      ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	75fb      	strb	r3, [r7, #23]
 80033ea:	e06f      	b.n	80034cc <UART_SetConfig+0x408>
    }
  }
  else
  {
    switch (clocksource)
 80033ec:	7ffb      	ldrb	r3, [r7, #31]
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d85b      	bhi.n	80034aa <UART_SetConfig+0x3e6>
 80033f2:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <UART_SetConfig+0x334>)
 80033f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f8:	0800341d 	.word	0x0800341d
 80033fc:	0800343b 	.word	0x0800343b
 8003400:	08003459 	.word	0x08003459
 8003404:	080034ab 	.word	0x080034ab
 8003408:	08003475 	.word	0x08003475
 800340c:	080034ab 	.word	0x080034ab
 8003410:	080034ab 	.word	0x080034ab
 8003414:	080034ab 	.word	0x080034ab
 8003418:	08003493 	.word	0x08003493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800341c:	f7fe ff00 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8003420:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	085a      	lsrs	r2, r3, #1
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	441a      	add	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	b29b      	uxth	r3, r3
 8003436:	61bb      	str	r3, [r7, #24]
        break;
 8003438:	e03a      	b.n	80034b0 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800343a:	f7fe ff13 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 800343e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	085a      	lsrs	r2, r3, #1
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	441a      	add	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003452:	b29b      	uxth	r3, r3
 8003454:	61bb      	str	r3, [r7, #24]
        break;
 8003456:	e02b      	b.n	80034b0 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003462:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6852      	ldr	r2, [r2, #4]
 800346a:	fbb3 f3f2 	udiv	r3, r3, r2
 800346e:	b29b      	uxth	r3, r3
 8003470:	61bb      	str	r3, [r7, #24]
        break;
 8003472:	e01d      	b.n	80034b0 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003474:	f7fe fe5e 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8003478:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	085a      	lsrs	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	441a      	add	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	b29b      	uxth	r3, r3
 800348e:	61bb      	str	r3, [r7, #24]
        break;
 8003490:	e00e      	b.n	80034b0 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	61bb      	str	r3, [r7, #24]
        break;
 80034a8:	e002      	b.n	80034b0 <UART_SetConfig+0x3ec>
      default:
        ret = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	75fb      	strb	r3, [r7, #23]
        break;
 80034ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	2b0f      	cmp	r3, #15
 80034b4:	d908      	bls.n	80034c8 <UART_SetConfig+0x404>
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034bc:	d204      	bcs.n	80034c8 <UART_SetConfig+0x404>
    {
      huart->Instance->BRR = usartdiv;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	e001      	b.n	80034cc <UART_SetConfig+0x408>
    }
    else
    {
      ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop

080034e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	2bff      	cmp	r3, #255	; 0xff
 80034f2:	d904      	bls.n	80034fe <UART_AdvFeatureConfig+0x1a>
 80034f4:	f640 3127 	movw	r1, #2855	; 0xb27
 80034f8:	4898      	ldr	r0, [pc, #608]	; (800375c <UART_AdvFeatureConfig+0x278>)
 80034fa:	f003 fd70 	bl	8006fde <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d018      	beq.n	800353c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <UART_AdvFeatureConfig+0x42>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800351a:	d004      	beq.n	8003526 <UART_AdvFeatureConfig+0x42>
 800351c:	f640 312c 	movw	r1, #2860	; 0xb2c
 8003520:	488e      	ldr	r0, [pc, #568]	; (800375c <UART_AdvFeatureConfig+0x278>)
 8003522:	f003 fd5c 	bl	8006fde <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d018      	beq.n	800357a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d009      	beq.n	8003564 <UART_AdvFeatureConfig+0x80>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003558:	d004      	beq.n	8003564 <UART_AdvFeatureConfig+0x80>
 800355a:	f640 3133 	movw	r1, #2867	; 0xb33
 800355e:	487f      	ldr	r0, [pc, #508]	; (800375c <UART_AdvFeatureConfig+0x278>)
 8003560:	f003 fd3d 	bl	8006fde <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b00      	cmp	r3, #0
 8003584:	d018      	beq.n	80035b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <UART_AdvFeatureConfig+0xbe>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003596:	d004      	beq.n	80035a2 <UART_AdvFeatureConfig+0xbe>
 8003598:	f640 313a 	movw	r1, #2874	; 0xb3a
 800359c:	486f      	ldr	r0, [pc, #444]	; (800375c <UART_AdvFeatureConfig+0x278>)
 800359e:	f003 fd1e 	bl	8006fde <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d018      	beq.n	80035f6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d009      	beq.n	80035e0 <UART_AdvFeatureConfig+0xfc>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d4:	d004      	beq.n	80035e0 <UART_AdvFeatureConfig+0xfc>
 80035d6:	f640 3141 	movw	r1, #2881	; 0xb41
 80035da:	4860      	ldr	r0, [pc, #384]	; (800375c <UART_AdvFeatureConfig+0x278>)
 80035dc:	f003 fcff 	bl	8006fde <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d018      	beq.n	8003634 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	2b00      	cmp	r3, #0
 8003608:	d009      	beq.n	800361e <UART_AdvFeatureConfig+0x13a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003612:	d004      	beq.n	800361e <UART_AdvFeatureConfig+0x13a>
 8003614:	f640 3148 	movw	r1, #2888	; 0xb48
 8003618:	4850      	ldr	r0, [pc, #320]	; (800375c <UART_AdvFeatureConfig+0x278>)
 800361a:	f003 fce0 	bl	8006fde <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d018      	beq.n	8003672 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d009      	beq.n	800365c <UART_AdvFeatureConfig+0x178>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003650:	d004      	beq.n	800365c <UART_AdvFeatureConfig+0x178>
 8003652:	f640 314f 	movw	r1, #2895	; 0xb4f
 8003656:	4841      	ldr	r0, [pc, #260]	; (800375c <UART_AdvFeatureConfig+0x278>)
 8003658:	f003 fcc1 	bl	8006fde <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d04a      	beq.n	8003714 <UART_AdvFeatureConfig+0x230>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a37      	ldr	r2, [pc, #220]	; (8003760 <UART_AdvFeatureConfig+0x27c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <UART_AdvFeatureConfig+0x1ae>
 8003688:	f640 3156 	movw	r1, #2902	; 0xb56
 800368c:	4833      	ldr	r0, [pc, #204]	; (800375c <UART_AdvFeatureConfig+0x278>)
 800368e:	f003 fca6 	bl	8006fde <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <UART_AdvFeatureConfig+0x1ca>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036a2:	d004      	beq.n	80036ae <UART_AdvFeatureConfig+0x1ca>
 80036a4:	f640 3157 	movw	r1, #2903	; 0xb57
 80036a8:	482c      	ldr	r0, [pc, #176]	; (800375c <UART_AdvFeatureConfig+0x278>)
 80036aa:	f003 fc98 	bl	8006fde <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036cc:	d122      	bne.n	8003714 <UART_AdvFeatureConfig+0x230>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d013      	beq.n	80036fe <UART_AdvFeatureConfig+0x21a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036de:	d00e      	beq.n	80036fe <UART_AdvFeatureConfig+0x21a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e8:	d009      	beq.n	80036fe <UART_AdvFeatureConfig+0x21a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036f2:	d004      	beq.n	80036fe <UART_AdvFeatureConfig+0x21a>
 80036f4:	f640 315c 	movw	r1, #2908	; 0xb5c
 80036f8:	4818      	ldr	r0, [pc, #96]	; (800375c <UART_AdvFeatureConfig+0x278>)
 80036fa:	f003 fc70 	bl	8006fde <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371c:	2b00      	cmp	r3, #0
 800371e:	d018      	beq.n	8003752 <UART_AdvFeatureConfig+0x26e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003724:	2b00      	cmp	r3, #0
 8003726:	d009      	beq.n	800373c <UART_AdvFeatureConfig+0x258>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003730:	d004      	beq.n	800373c <UART_AdvFeatureConfig+0x258>
 8003732:	f640 3164 	movw	r1, #2916	; 0xb64
 8003736:	4809      	ldr	r0, [pc, #36]	; (800375c <UART_AdvFeatureConfig+0x278>)
 8003738:	f003 fc51 	bl	8006fde <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
  }
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	08007634 	.word	0x08007634
 8003760:	40013800 	.word	0x40013800

08003764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af02      	add	r7, sp, #8
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003772:	f7fc fd57 	bl	8000224 <HAL_GetTick>
 8003776:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b08      	cmp	r3, #8
 8003784:	d10e      	bne.n	80037a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003786:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f82a 	bl	80037ee <UART_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e020      	b.n	80037e6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d10e      	bne.n	80037d0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f814 	bl	80037ee <UART_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e00a      	b.n	80037e6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2220      	movs	r2, #32
 80037d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	4613      	mov	r3, r2
 80037fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fe:	e05d      	b.n	80038bc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003806:	d059      	beq.n	80038bc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003808:	f7fc fd0c 	bl	8000224 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	429a      	cmp	r2, r3
 8003816:	d302      	bcc.n	800381e <UART_WaitOnFlagUntilTimeout+0x30>
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d11b      	bne.n	8003856 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800382c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0201 	bic.w	r2, r2, #1
 800383c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e042      	b.n	80038dc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d02b      	beq.n	80038bc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800386e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003872:	d123      	bne.n	80038bc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800387c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800388c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e00f      	b.n	80038dc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	4013      	ands	r3, r2
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d092      	beq.n	8003800 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f7ff fbb4 	bl	80030b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003948:	bf00      	nop
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003966:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f003 fc9f 	bl	80072b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003990:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003996:	2b22      	cmp	r3, #34	; 0x22
 8003998:	d13a      	bne.n	8003a10 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039a0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80039a2:	89bb      	ldrh	r3, [r7, #12]
 80039a4:	b2d9      	uxtb	r1, r3
 80039a6:	89fb      	ldrh	r3, [r7, #14]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	400a      	ands	r2, r1
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d121      	bne.n	8003a20 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039ea:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f003 fc43 	bl	8007294 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a0e:	e007      	b.n	8003a20 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0208 	orr.w	r2, r2, #8
 8003a1e:	619a      	str	r2, [r3, #24]
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a36:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a3c:	2b22      	cmp	r3, #34	; 0x22
 8003a3e:	d13a      	bne.n	8003ab6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a46:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a4e:	89ba      	ldrh	r2, [r7, #12]
 8003a50:	89fb      	ldrh	r3, [r7, #14]
 8003a52:	4013      	ands	r3, r2
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	1c9a      	adds	r2, r3, #2
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d121      	bne.n	8003ac6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a90:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0201 	bic.w	r2, r2, #1
 8003aa0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f003 fbf0 	bl	8007294 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ab4:	e007      	b.n	8003ac6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0208 	orr.w	r2, r2, #8
 8003ac4:	619a      	str	r2, [r3, #24]
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aea:	f3ef 8305 	mrs	r3, IPSR
 8003aee:	60bb      	str	r3, [r7, #8]
  return(result);
 8003af0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10f      	bne.n	8003b16 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af6:	f3ef 8310 	mrs	r3, PRIMASK
 8003afa:	607b      	str	r3, [r7, #4]
  return(result);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <osKernelInitialize+0x32>
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <osKernelInitialize+0x64>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d109      	bne.n	8003b1e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8003b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003b16:	f06f 0305 	mvn.w	r3, #5
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	e00c      	b.n	8003b38 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <osKernelInitialize+0x64>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <osKernelInitialize+0x64>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e002      	b.n	8003b38 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295
 8003b36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003b38:	68fb      	ldr	r3, [r7, #12]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	2000002c 	.word	0x2000002c

08003b4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b52:	f3ef 8305 	mrs	r3, IPSR
 8003b56:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b62:	607b      	str	r3, [r7, #4]
  return(result);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <osKernelStart+0x32>
 8003b6a:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <osKernelStart+0x64>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d109      	bne.n	8003b86 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b72:	f3ef 8311 	mrs	r3, BASEPRI
 8003b76:	603b      	str	r3, [r7, #0]
  return(result);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003b7e:	f06f 0305 	mvn.w	r3, #5
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e00e      	b.n	8003ba4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <osKernelStart+0x64>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d107      	bne.n	8003b9e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <osKernelStart+0x64>)
 8003b90:	2202      	movs	r2, #2
 8003b92:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003b94:	f001 fa22 	bl	8004fdc <vTaskStartScheduler>
      stat = osOK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	e002      	b.n	8003ba4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	2000002c 	.word	0x2000002c

08003bb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b092      	sub	sp, #72	; 0x48
 8003bb8:	af04      	add	r7, sp, #16
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bc4:	f3ef 8305 	mrs	r3, IPSR
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f040 8094 	bne.w	8003cfa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd6:	623b      	str	r3, [r7, #32]
  return(result);
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f040 808d 	bne.w	8003cfa <osThreadNew+0x146>
 8003be0:	4b48      	ldr	r3, [pc, #288]	; (8003d04 <osThreadNew+0x150>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d106      	bne.n	8003bf6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003be8:	f3ef 8311 	mrs	r3, BASEPRI
 8003bec:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f040 8082 	bne.w	8003cfa <osThreadNew+0x146>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d07e      	beq.n	8003cfa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003c00:	2318      	movs	r3, #24
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003c04:	2300      	movs	r3, #0
 8003c06:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003c08:	f107 031b 	add.w	r3, r7, #27
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d045      	beq.n	8003ca6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <osThreadNew+0x74>
        name = attr->name;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <osThreadNew+0x9a>
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	2b38      	cmp	r3, #56	; 0x38
 8003c40:	d805      	bhi.n	8003c4e <osThreadNew+0x9a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <osThreadNew+0x9e>
        return (NULL);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e054      	b.n	8003cfc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00e      	beq.n	8003c88 <osThreadNew+0xd4>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b5b      	cmp	r3, #91	; 0x5b
 8003c70:	d90a      	bls.n	8003c88 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d006      	beq.n	8003c88 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <osThreadNew+0xd4>
        mem = 1;
 8003c82:	2301      	movs	r3, #1
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c86:	e010      	b.n	8003caa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10c      	bne.n	8003caa <osThreadNew+0xf6>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d108      	bne.n	8003caa <osThreadNew+0xf6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d104      	bne.n	8003caa <osThreadNew+0xf6>
          mem = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca4:	e001      	b.n	8003caa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d110      	bne.n	8003cd2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cb8:	9202      	str	r2, [sp, #8]
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 ffc0 	bl	8004c4c <xTaskCreateStatic>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e013      	b.n	8003cfa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d110      	bne.n	8003cfa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	f107 0314 	add.w	r3, r7, #20
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f001 f807 	bl	8004cfe <xTaskCreate>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d001      	beq.n	8003cfa <osThreadNew+0x146>
          hTask = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003cfa:	697b      	ldr	r3, [r7, #20]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3738      	adds	r7, #56	; 0x38
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	2000002c 	.word	0x2000002c

08003d08 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	; 0x28
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <osThreadFlagsSet+0x1a>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	da03      	bge.n	8003d2a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8003d22:	f06f 0303 	mvn.w	r3, #3
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	e046      	b.n	8003db8 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d30:	f3ef 8305 	mrs	r3, IPSR
 8003d34:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d36:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10f      	bne.n	8003d5c <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d40:	617b      	str	r3, [r7, #20]
  return(result);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d109      	bne.n	8003d5c <osThreadFlagsSet+0x54>
 8003d48:	4b1e      	ldr	r3, [pc, #120]	; (8003dc4 <osThreadFlagsSet+0xbc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d126      	bne.n	8003d9e <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d50:	f3ef 8311 	mrs	r3, BASEPRI
 8003d54:	613b      	str	r3, [r7, #16]
  return(result);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d020      	beq.n	8003d9e <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8003d60:	f107 0308 	add.w	r3, r7, #8
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	2300      	movs	r3, #0
 8003d68:	2201      	movs	r2, #1
 8003d6a:	6839      	ldr	r1, [r7, #0]
 8003d6c:	69f8      	ldr	r0, [r7, #28]
 8003d6e:	f001 fefd 	bl	8005b6c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8003d72:	f107 020c 	add.w	r2, r7, #12
 8003d76:	2300      	movs	r3, #0
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2100      	movs	r1, #0
 8003d80:	69f8      	ldr	r0, [r7, #28]
 8003d82:	f001 fef3 	bl	8005b6c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d015      	beq.n	8003db8 <osThreadFlagsSet+0xb0>
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <osThreadFlagsSet+0xc0>)
 8003d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	e00c      	b.n	8003db8 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2201      	movs	r2, #1
 8003da2:	6839      	ldr	r1, [r7, #0]
 8003da4:	69f8      	ldr	r0, [r7, #28]
 8003da6:	f001 fe3f 	bl	8005a28 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8003daa:	f107 030c 	add.w	r3, r7, #12
 8003dae:	2200      	movs	r2, #0
 8003db0:	2100      	movs	r1, #0
 8003db2:	69f8      	ldr	r0, [r7, #28]
 8003db4:	f001 fe38 	bl	8005a28 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8003db8:	68fb      	ldr	r3, [r7, #12]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	2000002c 	.word	0x2000002c
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08e      	sub	sp, #56	; 0x38
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dd8:	f3ef 8305 	mrs	r3, IPSR
 8003ddc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003dde:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10f      	bne.n	8003e04 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de4:	f3ef 8310 	mrs	r3, PRIMASK
 8003de8:	61bb      	str	r3, [r7, #24]
  return(result);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d109      	bne.n	8003e04 <osThreadFlagsWait+0x38>
 8003df0:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <osThreadFlagsWait+0x124>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d109      	bne.n	8003e0c <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003df8:	f3ef 8311 	mrs	r3, BASEPRI
 8003dfc:	617b      	str	r3, [r7, #20]
  return(result);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8003e04:	f06f 0305 	mvn.w	r3, #5
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0a:	e06b      	b.n	8003ee4 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	da03      	bge.n	8003e1a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8003e12:	f06f 0303 	mvn.w	r3, #3
 8003e16:	637b      	str	r3, [r7, #52]	; 0x34
 8003e18:	e064      	b.n	8003ee4 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <osThreadFlagsWait+0x5e>
      clear = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	633b      	str	r3, [r7, #48]	; 0x30
 8003e28:	e001      	b.n	8003e2e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8003e36:	f001 f9df 	bl	80051f8 <xTaskGetTickCount>
 8003e3a:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8003e3c:	f107 0210 	add.w	r2, r7, #16
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e44:	2000      	movs	r0, #0
 8003e46:	f001 fd95 	bl	8005974 <xTaskNotifyWait>
 8003e4a:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d137      	bne.n	8003ec2 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8003e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4013      	ands	r3, r2
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00c      	beq.n	8003e86 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e70:	4013      	ands	r3, r2
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d032      	beq.n	8003ede <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8003e7e:	f06f 0302 	mvn.w	r3, #2
 8003e82:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8003e84:	e02e      	b.n	8003ee4 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d128      	bne.n	8003ee2 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d103      	bne.n	8003e9e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8003e96:	f06f 0302 	mvn.w	r3, #2
 8003e9a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8003e9c:	e022      	b.n	8003ee4 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8003e9e:	f001 f9ab 	bl	80051f8 <xTaskGetTickCount>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8003eaa:	6a3a      	ldr	r2, [r7, #32]
 8003eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d902      	bls.n	8003eb8 <osThreadFlagsWait+0xec>
          tout  = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb6:	e00e      	b.n	8003ed6 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8003eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec0:	e009      	b.n	8003ed6 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8003ec8:	f06f 0302 	mvn.w	r3, #2
 8003ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ece:	e002      	b.n	8003ed6 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8003ed0:	f06f 0301 	mvn.w	r3, #1
 8003ed4:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1af      	bne.n	8003e3c <osThreadFlagsWait+0x70>
 8003edc:	e002      	b.n	8003ee4 <osThreadFlagsWait+0x118>
            break;
 8003ede:	bf00      	nop
 8003ee0:	e000      	b.n	8003ee4 <osThreadFlagsWait+0x118>
            break;
 8003ee2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8003ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3738      	adds	r7, #56	; 0x38
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	2000002c 	.word	0x2000002c

08003ef4 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003efc:	f3ef 8305 	mrs	r3, IPSR
 8003f00:	613b      	str	r3, [r7, #16]
  return(result);
 8003f02:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10f      	bne.n	8003f28 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f08:	f3ef 8310 	mrs	r3, PRIMASK
 8003f0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <osDelay+0x34>
 8003f14:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <osDelay+0x58>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d109      	bne.n	8003f30 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f1c:	f3ef 8311 	mrs	r3, BASEPRI
 8003f20:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <osDelay+0x3c>
    stat = osErrorISR;
 8003f28:	f06f 0305 	mvn.w	r3, #5
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	e007      	b.n	8003f40 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f001 f81a 	bl	8004f74 <vTaskDelay>
    }
  }

  return (stat);
 8003f40:	697b      	ldr	r3, [r7, #20]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	2000002c 	.word	0x2000002c

08003f50 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08c      	sub	sp, #48	; 0x30
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f60:	f3ef 8305 	mrs	r3, IPSR
 8003f64:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f66:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d170      	bne.n	800404e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f70:	617b      	str	r3, [r7, #20]
  return(result);
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d16a      	bne.n	800404e <osMessageQueueNew+0xfe>
 8003f78:	4b37      	ldr	r3, [pc, #220]	; (8004058 <osMessageQueueNew+0x108>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d105      	bne.n	8003f8c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f80:	f3ef 8311 	mrs	r3, BASEPRI
 8003f84:	613b      	str	r3, [r7, #16]
  return(result);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d160      	bne.n	800404e <osMessageQueueNew+0xfe>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d05d      	beq.n	800404e <osMessageQueueNew+0xfe>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d05a      	beq.n	800404e <osMessageQueueNew+0xfe>
    mem = -1;
 8003f98:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d029      	beq.n	8003ff8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d012      	beq.n	8003fd2 <osMessageQueueNew+0x82>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	2b4f      	cmp	r3, #79	; 0x4f
 8003fb2:	d90e      	bls.n	8003fd2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d302      	bcc.n	8003fd2 <osMessageQueueNew+0x82>
        mem = 1;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	623b      	str	r3, [r7, #32]
 8003fd0:	e014      	b.n	8003ffc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d110      	bne.n	8003ffc <osMessageQueueNew+0xac>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10c      	bne.n	8003ffc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d108      	bne.n	8003ffc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d104      	bne.n	8003ffc <osMessageQueueNew+0xac>
          mem = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	623b      	str	r3, [r7, #32]
 8003ff6:	e001      	b.n	8003ffc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d10c      	bne.n	800401c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6899      	ldr	r1, [r3, #8]
 800400a:	2300      	movs	r3, #0
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	460b      	mov	r3, r1
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f972 	bl	80042fc <xQueueGenericCreateStatic>
 8004018:	6278      	str	r0, [r7, #36]	; 0x24
 800401a:	e008      	b.n	800402e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d105      	bne.n	800402e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004022:	2200      	movs	r2, #0
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f9da 	bl	80043e0 <xQueueGenericCreate>
 800402c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00c      	beq.n	800404e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <osMessageQueueNew+0xf2>
        name = attr->name;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	e001      	b.n	8004046 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004046:	69f9      	ldr	r1, [r7, #28]
 8004048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800404a:	f000 fda3 	bl	8004b94 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004050:	4618      	mov	r0, r3
 8004052:	3728      	adds	r7, #40	; 0x28
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	2000002c 	.word	0x2000002c

0800405c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a07      	ldr	r2, [pc, #28]	; (8004088 <vApplicationGetIdleTaskMemory+0x2c>)
 800406c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4a06      	ldr	r2, [pc, #24]	; (800408c <vApplicationGetIdleTaskMemory+0x30>)
 8004072:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2280      	movs	r2, #128	; 0x80
 8004078:	601a      	str	r2, [r3, #0]
}
 800407a:	bf00      	nop
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000030 	.word	0x20000030
 800408c:	2000008c 	.word	0x2000008c

08004090 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a07      	ldr	r2, [pc, #28]	; (80040bc <vApplicationGetTimerTaskMemory+0x2c>)
 80040a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4a06      	ldr	r2, [pc, #24]	; (80040c0 <vApplicationGetTimerTaskMemory+0x30>)
 80040a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ae:	601a      	str	r2, [r3, #0]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	2000028c 	.word	0x2000028c
 80040c0:	200002e8 	.word	0x200002e8

080040c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f103 0208 	add.w	r2, r3, #8
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f04f 32ff 	mov.w	r2, #4294967295
 80040dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f103 0208 	add.w	r2, r3, #8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f103 0208 	add.w	r2, r3, #8
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800411e:	b480      	push	{r7}
 8004120:	b085      	sub	sp, #20
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]
}
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d103      	bne.n	8004186 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e00c      	b.n	80041a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3308      	adds	r3, #8
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	e002      	b.n	8004194 <vListInsert+0x2e>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	429a      	cmp	r2, r3
 800419e:	d2f6      	bcs.n	800418e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	601a      	str	r2, [r3, #0]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6892      	ldr	r2, [r2, #8]
 80041ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6852      	ldr	r2, [r2, #4]
 80041f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	429a      	cmp	r2, r3
 8004202:	d103      	bne.n	800420c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	1e5a      	subs	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d109      	bne.n	8004254 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	e7fe      	b.n	8004252 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004254:	f002 f9da 	bl	800660c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004260:	68f9      	ldr	r1, [r7, #12]
 8004262:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	441a      	add	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004284:	3b01      	subs	r3, #1
 8004286:	68f9      	ldr	r1, [r7, #12]
 8004288:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800428a:	fb01 f303 	mul.w	r3, r1, r3
 800428e:	441a      	add	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	22ff      	movs	r2, #255	; 0xff
 8004298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	22ff      	movs	r2, #255	; 0xff
 80042a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d114      	bne.n	80042d4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01a      	beq.n	80042e8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3310      	adds	r3, #16
 80042b6:	4618      	mov	r0, r3
 80042b8:	f001 f916 	bl	80054e8 <xTaskRemoveFromEventList>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d012      	beq.n	80042e8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042c2:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <xQueueGenericReset+0xcc>)
 80042c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	e009      	b.n	80042e8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3310      	adds	r3, #16
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff fef3 	bl	80040c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3324      	adds	r3, #36	; 0x24
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff feee 	bl	80040c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042e8:	f002 f9be 	bl	8006668 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042ec:	2301      	movs	r3, #1
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	e000ed04 	.word	0xe000ed04

080042fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08e      	sub	sp, #56	; 0x38
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d109      	bne.n	8004324 <xQueueGenericCreateStatic+0x28>
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	62bb      	str	r3, [r7, #40]	; 0x28
 8004322:	e7fe      	b.n	8004322 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <xQueueGenericCreateStatic+0x42>
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
 800433c:	e7fe      	b.n	800433c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <xQueueGenericCreateStatic+0x4e>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <xQueueGenericCreateStatic+0x52>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <xQueueGenericCreateStatic+0x54>
 800434e:	2300      	movs	r3, #0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d109      	bne.n	8004368 <xQueueGenericCreateStatic+0x6c>
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	623b      	str	r3, [r7, #32]
 8004366:	e7fe      	b.n	8004366 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <xQueueGenericCreateStatic+0x78>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <xQueueGenericCreateStatic+0x7c>
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <xQueueGenericCreateStatic+0x7e>
 8004378:	2300      	movs	r3, #0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <xQueueGenericCreateStatic+0x96>
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	e7fe      	b.n	8004390 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004392:	2350      	movs	r3, #80	; 0x50
 8004394:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b50      	cmp	r3, #80	; 0x50
 800439a:	d009      	beq.n	80043b0 <xQueueGenericCreateStatic+0xb4>
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	e7fe      	b.n	80043ae <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00d      	beq.n	80043d6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	4613      	mov	r3, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f842 	bl	800445a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80043d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80043d8:	4618      	mov	r0, r3
 80043da:	3730      	adds	r7, #48	; 0x30
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	; 0x28
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	4613      	mov	r3, r2
 80043ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d109      	bne.n	8004408 <xQueueGenericCreate+0x28>
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	e7fe      	b.n	8004406 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	e004      	b.n	800441e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	fb02 f303 	mul.w	r3, r2, r3
 800441c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3350      	adds	r3, #80	; 0x50
 8004422:	4618      	mov	r0, r3
 8004424:	f002 fa0c 	bl	8006840 <pvPortMalloc>
 8004428:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00f      	beq.n	8004450 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	3350      	adds	r3, #80	; 0x50
 8004434:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800443e:	79fa      	ldrb	r2, [r7, #7]
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f805 	bl	800445a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004450:	69bb      	ldr	r3, [r7, #24]
	}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d103      	bne.n	8004476 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	e002      	b.n	800447c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004488:	2101      	movs	r1, #1
 800448a:	69b8      	ldr	r0, [r7, #24]
 800448c:	f7ff fece 	bl	800422c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08e      	sub	sp, #56	; 0x38
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044ae:	2300      	movs	r3, #0
 80044b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <xQueueGenericSend+0x30>
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ce:	e7fe      	b.n	80044ce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d103      	bne.n	80044de <xQueueGenericSend+0x3e>
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <xQueueGenericSend+0x42>
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <xQueueGenericSend+0x44>
 80044e2:	2300      	movs	r3, #0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d109      	bne.n	80044fc <xQueueGenericSend+0x5c>
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
 80044fa:	e7fe      	b.n	80044fa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d103      	bne.n	800450a <xQueueGenericSend+0x6a>
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <xQueueGenericSend+0x6e>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <xQueueGenericSend+0x70>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d109      	bne.n	8004528 <xQueueGenericSend+0x88>
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	623b      	str	r3, [r7, #32]
 8004526:	e7fe      	b.n	8004526 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004528:	f001 f99a 	bl	8005860 <xTaskGetSchedulerState>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <xQueueGenericSend+0x98>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <xQueueGenericSend+0x9c>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <xQueueGenericSend+0x9e>
 800453c:	2300      	movs	r3, #0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d109      	bne.n	8004556 <xQueueGenericSend+0xb6>
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	e7fe      	b.n	8004554 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004556:	f002 f859 	bl	800660c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004562:	429a      	cmp	r2, r3
 8004564:	d302      	bcc.n	800456c <xQueueGenericSend+0xcc>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d129      	bne.n	80045c0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004572:	f000 f9ff 	bl	8004974 <prvCopyDataToQueue>
 8004576:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	2b00      	cmp	r3, #0
 800457e:	d010      	beq.n	80045a2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	3324      	adds	r3, #36	; 0x24
 8004584:	4618      	mov	r0, r3
 8004586:	f000 ffaf 	bl	80054e8 <xTaskRemoveFromEventList>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d013      	beq.n	80045b8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004590:	4b3f      	ldr	r3, [pc, #252]	; (8004690 <xQueueGenericSend+0x1f0>)
 8004592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	e00a      	b.n	80045b8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045a8:	4b39      	ldr	r3, [pc, #228]	; (8004690 <xQueueGenericSend+0x1f0>)
 80045aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80045b8:	f002 f856 	bl	8006668 <vPortExitCritical>
				return pdPASS;
 80045bc:	2301      	movs	r3, #1
 80045be:	e063      	b.n	8004688 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045c6:	f002 f84f 	bl	8006668 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	e05c      	b.n	8004688 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045d4:	f107 0314 	add.w	r3, r7, #20
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 ffe7 	bl	80055ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045de:	2301      	movs	r3, #1
 80045e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045e2:	f002 f841 	bl	8006668 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045e6:	f000 fd5d 	bl	80050a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045ea:	f002 f80f 	bl	800660c <vPortEnterCritical>
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045f4:	b25b      	sxtb	r3, r3
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fa:	d103      	bne.n	8004604 <xQueueGenericSend+0x164>
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800460a:	b25b      	sxtb	r3, r3
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d103      	bne.n	800461a <xQueueGenericSend+0x17a>
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800461a:	f002 f825 	bl	8006668 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800461e:	1d3a      	adds	r2, r7, #4
 8004620:	f107 0314 	add.w	r3, r7, #20
 8004624:	4611      	mov	r1, r2
 8004626:	4618      	mov	r0, r3
 8004628:	f000 ffd6 	bl	80055d8 <xTaskCheckForTimeOut>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d124      	bne.n	800467c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004634:	f000 fa96 	bl	8004b64 <prvIsQueueFull>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d018      	beq.n	8004670 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	3310      	adds	r3, #16
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	4611      	mov	r1, r2
 8004646:	4618      	mov	r0, r3
 8004648:	f000 ff00 	bl	800544c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800464c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800464e:	f000 fa21 	bl	8004a94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004652:	f000 fd35 	bl	80050c0 <xTaskResumeAll>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	f47f af7c 	bne.w	8004556 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800465e:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <xQueueGenericSend+0x1f0>)
 8004660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	e772      	b.n	8004556 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004672:	f000 fa0f 	bl	8004a94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004676:	f000 fd23 	bl	80050c0 <xTaskResumeAll>
 800467a:	e76c      	b.n	8004556 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800467c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800467e:	f000 fa09 	bl	8004a94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004682:	f000 fd1d 	bl	80050c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004686:	2300      	movs	r3, #0
		}
	}
}
 8004688:	4618      	mov	r0, r3
 800468a:	3738      	adds	r7, #56	; 0x38
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	e000ed04 	.word	0xe000ed04

08004694 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08e      	sub	sp, #56	; 0x38
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d109      	bne.n	80046c0 <xQueueGenericSendFromISR+0x2c>
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
 80046be:	e7fe      	b.n	80046be <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <xQueueGenericSendFromISR+0x3a>
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <xQueueGenericSendFromISR+0x3e>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <xQueueGenericSendFromISR+0x40>
 80046d2:	2300      	movs	r3, #0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d109      	bne.n	80046ec <xQueueGenericSendFromISR+0x58>
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	e7fe      	b.n	80046ea <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d103      	bne.n	80046fa <xQueueGenericSendFromISR+0x66>
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <xQueueGenericSendFromISR+0x6a>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <xQueueGenericSendFromISR+0x6c>
 80046fe:	2300      	movs	r3, #0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d109      	bne.n	8004718 <xQueueGenericSendFromISR+0x84>
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	e7fe      	b.n	8004716 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004718:	f002 f854 	bl	80067c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800471c:	f3ef 8211 	mrs	r2, BASEPRI
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	61ba      	str	r2, [r7, #24]
 8004732:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004734:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	429a      	cmp	r2, r3
 8004742:	d302      	bcc.n	800474a <xQueueGenericSendFromISR+0xb6>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d12c      	bne.n	80047a4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800475a:	f000 f90b 	bl	8004974 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800475e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d112      	bne.n	800478e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	d016      	beq.n	800479e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	3324      	adds	r3, #36	; 0x24
 8004774:	4618      	mov	r0, r3
 8004776:	f000 feb7 	bl	80054e8 <xTaskRemoveFromEventList>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00e      	beq.n	800479e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00b      	beq.n	800479e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	e007      	b.n	800479e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800478e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004792:	3301      	adds	r3, #1
 8004794:	b2db      	uxtb	r3, r3
 8004796:	b25a      	sxtb	r2, r3
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800479e:	2301      	movs	r3, #1
 80047a0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80047a2:	e001      	b.n	80047a8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	637b      	str	r3, [r7, #52]	; 0x34
 80047a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047aa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3738      	adds	r7, #56	; 0x38
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08c      	sub	sp, #48	; 0x30
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80047c8:	2300      	movs	r3, #0
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <xQueueReceive+0x2e>
	__asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	623b      	str	r3, [r7, #32]
 80047e8:	e7fe      	b.n	80047e8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d103      	bne.n	80047f8 <xQueueReceive+0x3c>
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <xQueueReceive+0x40>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <xQueueReceive+0x42>
 80047fc:	2300      	movs	r3, #0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <xQueueReceive+0x5a>
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	e7fe      	b.n	8004814 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004816:	f001 f823 	bl	8005860 <xTaskGetSchedulerState>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d102      	bne.n	8004826 <xQueueReceive+0x6a>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <xQueueReceive+0x6e>
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <xQueueReceive+0x70>
 800482a:	2300      	movs	r3, #0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d109      	bne.n	8004844 <xQueueReceive+0x88>
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e7fe      	b.n	8004842 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004844:	f001 fee2 	bl	800660c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01f      	beq.n	8004894 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004858:	f000 f8f6 	bl	8004a48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	1e5a      	subs	r2, r3, #1
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00f      	beq.n	800488c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	3310      	adds	r3, #16
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fe39 	bl	80054e8 <xTaskRemoveFromEventList>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800487c:	4b3c      	ldr	r3, [pc, #240]	; (8004970 <xQueueReceive+0x1b4>)
 800487e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800488c:	f001 feec 	bl	8006668 <vPortExitCritical>
				return pdPASS;
 8004890:	2301      	movs	r3, #1
 8004892:	e069      	b.n	8004968 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d103      	bne.n	80048a2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800489a:	f001 fee5 	bl	8006668 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800489e:	2300      	movs	r3, #0
 80048a0:	e062      	b.n	8004968 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048a8:	f107 0310 	add.w	r3, r7, #16
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fe7d 	bl	80055ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048b2:	2301      	movs	r3, #1
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048b6:	f001 fed7 	bl	8006668 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048ba:	f000 fbf3 	bl	80050a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048be:	f001 fea5 	bl	800660c <vPortEnterCritical>
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048c8:	b25b      	sxtb	r3, r3
 80048ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ce:	d103      	bne.n	80048d8 <xQueueReceive+0x11c>
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048de:	b25b      	sxtb	r3, r3
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e4:	d103      	bne.n	80048ee <xQueueReceive+0x132>
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048ee:	f001 febb 	bl	8006668 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048f2:	1d3a      	adds	r2, r7, #4
 80048f4:	f107 0310 	add.w	r3, r7, #16
 80048f8:	4611      	mov	r1, r2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fe6c 	bl	80055d8 <xTaskCheckForTimeOut>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d123      	bne.n	800494e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004908:	f000 f916 	bl	8004b38 <prvIsQueueEmpty>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d017      	beq.n	8004942 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	3324      	adds	r3, #36	; 0x24
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	4611      	mov	r1, r2
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fd96 	bl	800544c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004922:	f000 f8b7 	bl	8004a94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004926:	f000 fbcb 	bl	80050c0 <xTaskResumeAll>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d189      	bne.n	8004844 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004930:	4b0f      	ldr	r3, [pc, #60]	; (8004970 <xQueueReceive+0x1b4>)
 8004932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	e780      	b.n	8004844 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004944:	f000 f8a6 	bl	8004a94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004948:	f000 fbba 	bl	80050c0 <xTaskResumeAll>
 800494c:	e77a      	b.n	8004844 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800494e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004950:	f000 f8a0 	bl	8004a94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004954:	f000 fbb4 	bl	80050c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800495a:	f000 f8ed 	bl	8004b38 <prvIsQueueEmpty>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	f43f af6f 	beq.w	8004844 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004966:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004968:	4618      	mov	r0, r3
 800496a:	3730      	adds	r7, #48	; 0x30
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	e000ed04 	.word	0xe000ed04

08004974 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10d      	bne.n	80049ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d14d      	bne.n	8004a36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 ff7c 	bl	800589c <xTaskPriorityDisinherit>
 80049a4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	e043      	b.n	8004a36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d119      	bne.n	80049e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6898      	ldr	r0, [r3, #8]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	461a      	mov	r2, r3
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	f002 fd4e 	bl	8007460 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	441a      	add	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d32b      	bcc.n	8004a36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	609a      	str	r2, [r3, #8]
 80049e6:	e026      	b.n	8004a36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	68d8      	ldr	r0, [r3, #12]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	461a      	mov	r2, r3
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	f002 fd34 	bl	8007460 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	425b      	negs	r3, r3
 8004a02:	441a      	add	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d207      	bcs.n	8004a24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	425b      	negs	r3, r3
 8004a1e:	441a      	add	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d105      	bne.n	8004a36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a3e:	697b      	ldr	r3, [r7, #20]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d018      	beq.n	8004a8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	441a      	add	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d303      	bcc.n	8004a7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68d9      	ldr	r1, [r3, #12]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	461a      	mov	r2, r3
 8004a86:	6838      	ldr	r0, [r7, #0]
 8004a88:	f002 fcea 	bl	8007460 <memcpy>
	}
}
 8004a8c:	bf00      	nop
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a9c:	f001 fdb6 	bl	800660c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004aa8:	e011      	b.n	8004ace <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d012      	beq.n	8004ad8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3324      	adds	r3, #36	; 0x24
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fd16 	bl	80054e8 <xTaskRemoveFromEventList>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ac2:	f000 fde9 	bl	8005698 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	dce9      	bgt.n	8004aaa <prvUnlockQueue+0x16>
 8004ad6:	e000      	b.n	8004ada <prvUnlockQueue+0x46>
					break;
 8004ad8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	22ff      	movs	r2, #255	; 0xff
 8004ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ae2:	f001 fdc1 	bl	8006668 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ae6:	f001 fd91 	bl	800660c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004af0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004af2:	e011      	b.n	8004b18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d012      	beq.n	8004b22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3310      	adds	r3, #16
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fcf1 	bl	80054e8 <xTaskRemoveFromEventList>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b0c:	f000 fdc4 	bl	8005698 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b10:	7bbb      	ldrb	r3, [r7, #14]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	dce9      	bgt.n	8004af4 <prvUnlockQueue+0x60>
 8004b20:	e000      	b.n	8004b24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	22ff      	movs	r2, #255	; 0xff
 8004b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b2c:	f001 fd9c 	bl	8006668 <vPortExitCritical>
}
 8004b30:	bf00      	nop
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b40:	f001 fd64 	bl	800660c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d102      	bne.n	8004b52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	e001      	b.n	8004b56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b56:	f001 fd87 	bl	8006668 <vPortExitCritical>

	return xReturn;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b6c:	f001 fd4e 	bl	800660c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d102      	bne.n	8004b82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e001      	b.n	8004b86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b86:	f001 fd6f 	bl	8006668 <vPortExitCritical>

	return xReturn;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e014      	b.n	8004bce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ba4:	4a0e      	ldr	r2, [pc, #56]	; (8004be0 <vQueueAddToRegistry+0x4c>)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10b      	bne.n	8004bc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004bb0:	490b      	ldr	r1, [pc, #44]	; (8004be0 <vQueueAddToRegistry+0x4c>)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004bba:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <vQueueAddToRegistry+0x4c>)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004bc6:	e005      	b.n	8004bd4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b07      	cmp	r3, #7
 8004bd2:	d9e7      	bls.n	8004ba4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004bd4:	bf00      	nop
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	20001938 	.word	0x20001938

08004be4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004bf4:	f001 fd0a 	bl	800660c <vPortEnterCritical>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bfe:	b25b      	sxtb	r3, r3
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c04:	d103      	bne.n	8004c0e <vQueueWaitForMessageRestricted+0x2a>
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c14:	b25b      	sxtb	r3, r3
 8004c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1a:	d103      	bne.n	8004c24 <vQueueWaitForMessageRestricted+0x40>
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c24:	f001 fd20 	bl	8006668 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d106      	bne.n	8004c3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	3324      	adds	r3, #36	; 0x24
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fc2b 	bl	8005494 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c3e:	6978      	ldr	r0, [r7, #20]
 8004c40:	f7ff ff28 	bl	8004a94 <prvUnlockQueue>
	}
 8004c44:	bf00      	nop
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08e      	sub	sp, #56	; 0x38
 8004c50:	af04      	add	r7, sp, #16
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d109      	bne.n	8004c74 <xTaskCreateStatic+0x28>
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	623b      	str	r3, [r7, #32]
 8004c72:	e7fe      	b.n	8004c72 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <xTaskCreateStatic+0x42>
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	e7fe      	b.n	8004c8c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c8e:	235c      	movs	r3, #92	; 0x5c
 8004c90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b5c      	cmp	r3, #92	; 0x5c
 8004c96:	d009      	beq.n	8004cac <xTaskCreateStatic+0x60>
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	e7fe      	b.n	8004caa <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01e      	beq.n	8004cf0 <xTaskCreateStatic+0xa4>
 8004cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01b      	beq.n	8004cf0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004cca:	2300      	movs	r3, #0
 8004ccc:	9303      	str	r3, [sp, #12]
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	9302      	str	r3, [sp, #8]
 8004cd2:	f107 0314 	add.w	r3, r7, #20
 8004cd6:	9301      	str	r3, [sp, #4]
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f850 	bl	8004d88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ce8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cea:	f000 f8d3 	bl	8004e94 <prvAddNewTaskToReadyList>
 8004cee:	e001      	b.n	8004cf4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004cf4:	697b      	ldr	r3, [r7, #20]
	}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3728      	adds	r7, #40	; 0x28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b08c      	sub	sp, #48	; 0x30
 8004d02:	af04      	add	r7, sp, #16
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	603b      	str	r3, [r7, #0]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d0e:	88fb      	ldrh	r3, [r7, #6]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f001 fd94 	bl	8006840 <pvPortMalloc>
 8004d18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00e      	beq.n	8004d3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004d20:	205c      	movs	r0, #92	; 0x5c
 8004d22:	f001 fd8d 	bl	8006840 <pvPortMalloc>
 8004d26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
 8004d34:	e005      	b.n	8004d42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d36:	6978      	ldr	r0, [r7, #20]
 8004d38:	f001 fe44 	bl	80069c4 <vPortFree>
 8004d3c:	e001      	b.n	8004d42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d017      	beq.n	8004d78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d50:	88fa      	ldrh	r2, [r7, #6]
 8004d52:	2300      	movs	r3, #0
 8004d54:	9303      	str	r3, [sp, #12]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	9302      	str	r3, [sp, #8]
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f80e 	bl	8004d88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d6c:	69f8      	ldr	r0, [r7, #28]
 8004d6e:	f000 f891 	bl	8004e94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d72:	2301      	movs	r3, #1
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	e002      	b.n	8004d7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d78:	f04f 33ff 	mov.w	r3, #4294967295
 8004d7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
	}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3720      	adds	r7, #32
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	461a      	mov	r2, r3
 8004da0:	21a5      	movs	r1, #165	; 0xa5
 8004da2:	f002 fb68 	bl	8007476 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004db0:	3b01      	subs	r3, #1
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	f023 0307 	bic.w	r3, r3, #7
 8004dbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <prvInitialiseNewTask+0x56>
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	e7fe      	b.n	8004ddc <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	e012      	b.n	8004e0a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	4413      	add	r3, r2
 8004dea:	7819      	ldrb	r1, [r3, #0]
 8004dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	3334      	adds	r3, #52	; 0x34
 8004df4:	460a      	mov	r2, r1
 8004df6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d006      	beq.n	8004e12 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	3301      	adds	r3, #1
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	2b0f      	cmp	r3, #15
 8004e0e:	d9e9      	bls.n	8004de4 <prvInitialiseNewTask+0x5c>
 8004e10:	e000      	b.n	8004e14 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004e12:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	2b37      	cmp	r3, #55	; 0x37
 8004e20:	d901      	bls.n	8004e26 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e22:	2337      	movs	r3, #55	; 0x37
 8004e24:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e2a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e30:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	2200      	movs	r2, #0
 8004e36:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff f961 	bl	8004104 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	3318      	adds	r3, #24
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff f95c 	bl	8004104 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	2200      	movs	r2, #0
 8004e66:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	68f9      	ldr	r1, [r7, #12]
 8004e74:	69b8      	ldr	r0, [r7, #24]
 8004e76:	f001 fa9f 	bl	80063b8 <pxPortInitialiseStack>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e8c:	bf00      	nop
 8004e8e:	3720      	adds	r7, #32
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e9c:	f001 fbb6 	bl	800660c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ea0:	4b2d      	ldr	r3, [pc, #180]	; (8004f58 <prvAddNewTaskToReadyList+0xc4>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	4a2c      	ldr	r2, [pc, #176]	; (8004f58 <prvAddNewTaskToReadyList+0xc4>)
 8004ea8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004eaa:	4b2c      	ldr	r3, [pc, #176]	; (8004f5c <prvAddNewTaskToReadyList+0xc8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d109      	bne.n	8004ec6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004eb2:	4a2a      	ldr	r2, [pc, #168]	; (8004f5c <prvAddNewTaskToReadyList+0xc8>)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004eb8:	4b27      	ldr	r3, [pc, #156]	; (8004f58 <prvAddNewTaskToReadyList+0xc4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d110      	bne.n	8004ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ec0:	f000 fc0e 	bl	80056e0 <prvInitialiseTaskLists>
 8004ec4:	e00d      	b.n	8004ee2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ec6:	4b26      	ldr	r3, [pc, #152]	; (8004f60 <prvAddNewTaskToReadyList+0xcc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ece:	4b23      	ldr	r3, [pc, #140]	; (8004f5c <prvAddNewTaskToReadyList+0xc8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d802      	bhi.n	8004ee2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004edc:	4a1f      	ldr	r2, [pc, #124]	; (8004f5c <prvAddNewTaskToReadyList+0xc8>)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ee2:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <prvAddNewTaskToReadyList+0xd0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <prvAddNewTaskToReadyList+0xd0>)
 8004eea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004eec:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <prvAddNewTaskToReadyList+0xd0>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef8:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <prvAddNewTaskToReadyList+0xd4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d903      	bls.n	8004f08 <prvAddNewTaskToReadyList+0x74>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <prvAddNewTaskToReadyList+0xd4>)
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <prvAddNewTaskToReadyList+0xd8>)
 8004f16:	441a      	add	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	f7ff f8fd 	bl	800411e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f24:	f001 fba0 	bl	8006668 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f28:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <prvAddNewTaskToReadyList+0xcc>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00e      	beq.n	8004f4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <prvAddNewTaskToReadyList+0xc8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d207      	bcs.n	8004f4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <prvAddNewTaskToReadyList+0xdc>)
 8004f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000bbc 	.word	0x20000bbc
 8004f5c:	200006e8 	.word	0x200006e8
 8004f60:	20000bc8 	.word	0x20000bc8
 8004f64:	20000bd8 	.word	0x20000bd8
 8004f68:	20000bc4 	.word	0x20000bc4
 8004f6c:	200006ec 	.word	0x200006ec
 8004f70:	e000ed04 	.word	0xe000ed04

08004f74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d016      	beq.n	8004fb4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f86:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <vTaskDelay+0x60>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <vTaskDelay+0x2e>
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	60bb      	str	r3, [r7, #8]
 8004fa0:	e7fe      	b.n	8004fa0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004fa2:	f000 f87f 	bl	80050a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fea7 	bl	8005cfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004fae:	f000 f887 	bl	80050c0 <xTaskResumeAll>
 8004fb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d107      	bne.n	8004fca <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004fba:	4b07      	ldr	r3, [pc, #28]	; (8004fd8 <vTaskDelay+0x64>)
 8004fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20000be4 	.word	0x20000be4
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	; 0x28
 8004fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fea:	463a      	mov	r2, r7
 8004fec:	1d39      	adds	r1, r7, #4
 8004fee:	f107 0308 	add.w	r3, r7, #8
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff f832 	bl	800405c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	9202      	str	r2, [sp, #8]
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	2300      	movs	r3, #0
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	2300      	movs	r3, #0
 8005008:	460a      	mov	r2, r1
 800500a:	4920      	ldr	r1, [pc, #128]	; (800508c <vTaskStartScheduler+0xb0>)
 800500c:	4820      	ldr	r0, [pc, #128]	; (8005090 <vTaskStartScheduler+0xb4>)
 800500e:	f7ff fe1d 	bl	8004c4c <xTaskCreateStatic>
 8005012:	4602      	mov	r2, r0
 8005014:	4b1f      	ldr	r3, [pc, #124]	; (8005094 <vTaskStartScheduler+0xb8>)
 8005016:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005018:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <vTaskStartScheduler+0xb8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005020:	2301      	movs	r3, #1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e001      	b.n	800502a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d102      	bne.n	8005036 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005030:	f000 feb8 	bl	8005da4 <xTimerCreateTimerTask>
 8005034:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d115      	bne.n	8005068 <vTaskStartScheduler+0x8c>
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800504e:	4b12      	ldr	r3, [pc, #72]	; (8005098 <vTaskStartScheduler+0xbc>)
 8005050:	f04f 32ff 	mov.w	r2, #4294967295
 8005054:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <vTaskStartScheduler+0xc0>)
 8005058:	2201      	movs	r2, #1
 800505a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800505c:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <vTaskStartScheduler+0xc4>)
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005062:	f001 fa35 	bl	80064d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005066:	e00d      	b.n	8005084 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d109      	bne.n	8005084 <vTaskStartScheduler+0xa8>
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	e7fe      	b.n	8005082 <vTaskStartScheduler+0xa6>
}
 8005084:	bf00      	nop
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	08007670 	.word	0x08007670
 8005090:	080056b1 	.word	0x080056b1
 8005094:	20000be0 	.word	0x20000be0
 8005098:	20000bdc 	.word	0x20000bdc
 800509c:	20000bc8 	.word	0x20000bc8
 80050a0:	20000bc0 	.word	0x20000bc0

080050a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80050a8:	4b04      	ldr	r3, [pc, #16]	; (80050bc <vTaskSuspendAll+0x18>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3301      	adds	r3, #1
 80050ae:	4a03      	ldr	r2, [pc, #12]	; (80050bc <vTaskSuspendAll+0x18>)
 80050b0:	6013      	str	r3, [r2, #0]
}
 80050b2:	bf00      	nop
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	20000be4 	.word	0x20000be4

080050c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050ce:	4b41      	ldr	r3, [pc, #260]	; (80051d4 <xTaskResumeAll+0x114>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <xTaskResumeAll+0x2a>
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	e7fe      	b.n	80050e8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050ea:	f001 fa8f 	bl	800660c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050ee:	4b39      	ldr	r3, [pc, #228]	; (80051d4 <xTaskResumeAll+0x114>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	4a37      	ldr	r2, [pc, #220]	; (80051d4 <xTaskResumeAll+0x114>)
 80050f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050f8:	4b36      	ldr	r3, [pc, #216]	; (80051d4 <xTaskResumeAll+0x114>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d162      	bne.n	80051c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005100:	4b35      	ldr	r3, [pc, #212]	; (80051d8 <xTaskResumeAll+0x118>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d05e      	beq.n	80051c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005108:	e02f      	b.n	800516a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800510a:	4b34      	ldr	r3, [pc, #208]	; (80051dc <xTaskResumeAll+0x11c>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3318      	adds	r3, #24
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff f85e 	bl	80041d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3304      	adds	r3, #4
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff f859 	bl	80041d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512a:	4b2d      	ldr	r3, [pc, #180]	; (80051e0 <xTaskResumeAll+0x120>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d903      	bls.n	800513a <xTaskResumeAll+0x7a>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	4a2a      	ldr	r2, [pc, #168]	; (80051e0 <xTaskResumeAll+0x120>)
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4a27      	ldr	r2, [pc, #156]	; (80051e4 <xTaskResumeAll+0x124>)
 8005148:	441a      	add	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3304      	adds	r3, #4
 800514e:	4619      	mov	r1, r3
 8005150:	4610      	mov	r0, r2
 8005152:	f7fe ffe4 	bl	800411e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515a:	4b23      	ldr	r3, [pc, #140]	; (80051e8 <xTaskResumeAll+0x128>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	429a      	cmp	r2, r3
 8005162:	d302      	bcc.n	800516a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005164:	4b21      	ldr	r3, [pc, #132]	; (80051ec <xTaskResumeAll+0x12c>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800516a:	4b1c      	ldr	r3, [pc, #112]	; (80051dc <xTaskResumeAll+0x11c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1cb      	bne.n	800510a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005178:	f000 fb4c 	bl	8005814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800517c:	4b1c      	ldr	r3, [pc, #112]	; (80051f0 <xTaskResumeAll+0x130>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d010      	beq.n	80051aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005188:	f000 f846 	bl	8005218 <xTaskIncrementTick>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005192:	4b16      	ldr	r3, [pc, #88]	; (80051ec <xTaskResumeAll+0x12c>)
 8005194:	2201      	movs	r2, #1
 8005196:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3b01      	subs	r3, #1
 800519c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1f1      	bne.n	8005188 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80051a4:	4b12      	ldr	r3, [pc, #72]	; (80051f0 <xTaskResumeAll+0x130>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051aa:	4b10      	ldr	r3, [pc, #64]	; (80051ec <xTaskResumeAll+0x12c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d009      	beq.n	80051c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051b2:	2301      	movs	r3, #1
 80051b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051b6:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <xTaskResumeAll+0x134>)
 80051b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051c6:	f001 fa4f 	bl	8006668 <vPortExitCritical>

	return xAlreadyYielded;
 80051ca:	68bb      	ldr	r3, [r7, #8]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20000be4 	.word	0x20000be4
 80051d8:	20000bbc 	.word	0x20000bbc
 80051dc:	20000b7c 	.word	0x20000b7c
 80051e0:	20000bc4 	.word	0x20000bc4
 80051e4:	200006ec 	.word	0x200006ec
 80051e8:	200006e8 	.word	0x200006e8
 80051ec:	20000bd0 	.word	0x20000bd0
 80051f0:	20000bcc 	.word	0x20000bcc
 80051f4:	e000ed04 	.word	0xe000ed04

080051f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <xTaskGetTickCount+0x1c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005204:	687b      	ldr	r3, [r7, #4]
}
 8005206:	4618      	mov	r0, r3
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20000bc0 	.word	0x20000bc0

08005218 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005222:	4b51      	ldr	r3, [pc, #324]	; (8005368 <xTaskIncrementTick+0x150>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	f040 808d 	bne.w	8005346 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800522c:	4b4f      	ldr	r3, [pc, #316]	; (800536c <xTaskIncrementTick+0x154>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3301      	adds	r3, #1
 8005232:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005234:	4a4d      	ldr	r2, [pc, #308]	; (800536c <xTaskIncrementTick+0x154>)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d11f      	bne.n	8005280 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005240:	4b4b      	ldr	r3, [pc, #300]	; (8005370 <xTaskIncrementTick+0x158>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <xTaskIncrementTick+0x46>
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	e7fe      	b.n	800525c <xTaskIncrementTick+0x44>
 800525e:	4b44      	ldr	r3, [pc, #272]	; (8005370 <xTaskIncrementTick+0x158>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	4b43      	ldr	r3, [pc, #268]	; (8005374 <xTaskIncrementTick+0x15c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a41      	ldr	r2, [pc, #260]	; (8005370 <xTaskIncrementTick+0x158>)
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	4a41      	ldr	r2, [pc, #260]	; (8005374 <xTaskIncrementTick+0x15c>)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	4b41      	ldr	r3, [pc, #260]	; (8005378 <xTaskIncrementTick+0x160>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3301      	adds	r3, #1
 8005278:	4a3f      	ldr	r2, [pc, #252]	; (8005378 <xTaskIncrementTick+0x160>)
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	f000 faca 	bl	8005814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005280:	4b3e      	ldr	r3, [pc, #248]	; (800537c <xTaskIncrementTick+0x164>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	429a      	cmp	r2, r3
 8005288:	d34e      	bcc.n	8005328 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800528a:	4b39      	ldr	r3, [pc, #228]	; (8005370 <xTaskIncrementTick+0x158>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <xTaskIncrementTick+0x80>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <xTaskIncrementTick+0x82>
 8005298:	2300      	movs	r3, #0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d004      	beq.n	80052a8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800529e:	4b37      	ldr	r3, [pc, #220]	; (800537c <xTaskIncrementTick+0x164>)
 80052a0:	f04f 32ff 	mov.w	r2, #4294967295
 80052a4:	601a      	str	r2, [r3, #0]
					break;
 80052a6:	e03f      	b.n	8005328 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80052a8:	4b31      	ldr	r3, [pc, #196]	; (8005370 <xTaskIncrementTick+0x158>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d203      	bcs.n	80052c8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052c0:	4a2e      	ldr	r2, [pc, #184]	; (800537c <xTaskIncrementTick+0x164>)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6013      	str	r3, [r2, #0]
						break;
 80052c6:	e02f      	b.n	8005328 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	3304      	adds	r3, #4
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fe ff83 	bl	80041d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d004      	beq.n	80052e4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	3318      	adds	r3, #24
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fe ff7a 	bl	80041d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	4b25      	ldr	r3, [pc, #148]	; (8005380 <xTaskIncrementTick+0x168>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d903      	bls.n	80052f8 <xTaskIncrementTick+0xe0>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	4a22      	ldr	r2, [pc, #136]	; (8005380 <xTaskIncrementTick+0x168>)
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4a1f      	ldr	r2, [pc, #124]	; (8005384 <xTaskIncrementTick+0x16c>)
 8005306:	441a      	add	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	3304      	adds	r3, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4610      	mov	r0, r2
 8005310:	f7fe ff05 	bl	800411e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005318:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <xTaskIncrementTick+0x170>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	429a      	cmp	r2, r3
 8005320:	d3b3      	bcc.n	800528a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005322:	2301      	movs	r3, #1
 8005324:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005326:	e7b0      	b.n	800528a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005328:	4b17      	ldr	r3, [pc, #92]	; (8005388 <xTaskIncrementTick+0x170>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532e:	4915      	ldr	r1, [pc, #84]	; (8005384 <xTaskIncrementTick+0x16c>)
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d907      	bls.n	8005350 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005340:	2301      	movs	r3, #1
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	e004      	b.n	8005350 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005346:	4b11      	ldr	r3, [pc, #68]	; (800538c <xTaskIncrementTick+0x174>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3301      	adds	r3, #1
 800534c:	4a0f      	ldr	r2, [pc, #60]	; (800538c <xTaskIncrementTick+0x174>)
 800534e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005350:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <xTaskIncrementTick+0x178>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005358:	2301      	movs	r3, #1
 800535a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800535c:	697b      	ldr	r3, [r7, #20]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20000be4 	.word	0x20000be4
 800536c:	20000bc0 	.word	0x20000bc0
 8005370:	20000b74 	.word	0x20000b74
 8005374:	20000b78 	.word	0x20000b78
 8005378:	20000bd4 	.word	0x20000bd4
 800537c:	20000bdc 	.word	0x20000bdc
 8005380:	20000bc4 	.word	0x20000bc4
 8005384:	200006ec 	.word	0x200006ec
 8005388:	200006e8 	.word	0x200006e8
 800538c:	20000bcc 	.word	0x20000bcc
 8005390:	20000bd0 	.word	0x20000bd0

08005394 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800539a:	4b27      	ldr	r3, [pc, #156]	; (8005438 <vTaskSwitchContext+0xa4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053a2:	4b26      	ldr	r3, [pc, #152]	; (800543c <vTaskSwitchContext+0xa8>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053a8:	e040      	b.n	800542c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80053aa:	4b24      	ldr	r3, [pc, #144]	; (800543c <vTaskSwitchContext+0xa8>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80053b0:	4b23      	ldr	r3, [pc, #140]	; (8005440 <vTaskSwitchContext+0xac>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	e00f      	b.n	80053d8 <vTaskSwitchContext+0x44>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d109      	bne.n	80053d2 <vTaskSwitchContext+0x3e>
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	607b      	str	r3, [r7, #4]
 80053d0:	e7fe      	b.n	80053d0 <vTaskSwitchContext+0x3c>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	491a      	ldr	r1, [pc, #104]	; (8005444 <vTaskSwitchContext+0xb0>)
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0e5      	beq.n	80053b8 <vTaskSwitchContext+0x24>
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4a13      	ldr	r2, [pc, #76]	; (8005444 <vTaskSwitchContext+0xb0>)
 80053f8:	4413      	add	r3, r2
 80053fa:	60bb      	str	r3, [r7, #8]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	605a      	str	r2, [r3, #4]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	3308      	adds	r3, #8
 800540e:	429a      	cmp	r2, r3
 8005410:	d104      	bne.n	800541c <vTaskSwitchContext+0x88>
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	605a      	str	r2, [r3, #4]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	4a09      	ldr	r2, [pc, #36]	; (8005448 <vTaskSwitchContext+0xb4>)
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	4a06      	ldr	r2, [pc, #24]	; (8005440 <vTaskSwitchContext+0xac>)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6013      	str	r3, [r2, #0]
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	20000be4 	.word	0x20000be4
 800543c:	20000bd0 	.word	0x20000bd0
 8005440:	20000bc4 	.word	0x20000bc4
 8005444:	200006ec 	.word	0x200006ec
 8005448:	200006e8 	.word	0x200006e8

0800544c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d109      	bne.n	8005470 <vTaskPlaceOnEventList+0x24>
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	e7fe      	b.n	800546e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005470:	4b07      	ldr	r3, [pc, #28]	; (8005490 <vTaskPlaceOnEventList+0x44>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3318      	adds	r3, #24
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7fe fe74 	bl	8004166 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800547e:	2101      	movs	r1, #1
 8005480:	6838      	ldr	r0, [r7, #0]
 8005482:	f000 fc3b 	bl	8005cfc <prvAddCurrentTaskToDelayedList>
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	200006e8 	.word	0x200006e8

08005494 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d109      	bne.n	80054ba <vTaskPlaceOnEventListRestricted+0x26>
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	e7fe      	b.n	80054b8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054ba:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <vTaskPlaceOnEventListRestricted+0x50>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3318      	adds	r3, #24
 80054c0:	4619      	mov	r1, r3
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f7fe fe2b 	bl	800411e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295
 80054d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	68b8      	ldr	r0, [r7, #8]
 80054d8:	f000 fc10 	bl	8005cfc <prvAddCurrentTaskToDelayedList>
	}
 80054dc:	bf00      	nop
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	200006e8 	.word	0x200006e8

080054e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <xTaskRemoveFromEventList+0x2a>
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	e7fe      	b.n	8005510 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	3318      	adds	r3, #24
 8005516:	4618      	mov	r0, r3
 8005518:	f7fe fe5e 	bl	80041d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800551c:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <xTaskRemoveFromEventList+0xac>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d11d      	bne.n	8005560 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	3304      	adds	r3, #4
 8005528:	4618      	mov	r0, r3
 800552a:	f7fe fe55 	bl	80041d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005532:	4b19      	ldr	r3, [pc, #100]	; (8005598 <xTaskRemoveFromEventList+0xb0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d903      	bls.n	8005542 <xTaskRemoveFromEventList+0x5a>
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553e:	4a16      	ldr	r2, [pc, #88]	; (8005598 <xTaskRemoveFromEventList+0xb0>)
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4a13      	ldr	r2, [pc, #76]	; (800559c <xTaskRemoveFromEventList+0xb4>)
 8005550:	441a      	add	r2, r3
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	3304      	adds	r3, #4
 8005556:	4619      	mov	r1, r3
 8005558:	4610      	mov	r0, r2
 800555a:	f7fe fde0 	bl	800411e <vListInsertEnd>
 800555e:	e005      	b.n	800556c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	3318      	adds	r3, #24
 8005564:	4619      	mov	r1, r3
 8005566:	480e      	ldr	r0, [pc, #56]	; (80055a0 <xTaskRemoveFromEventList+0xb8>)
 8005568:	f7fe fdd9 	bl	800411e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005570:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <xTaskRemoveFromEventList+0xbc>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	429a      	cmp	r2, r3
 8005578:	d905      	bls.n	8005586 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800557a:	2301      	movs	r3, #1
 800557c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800557e:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <xTaskRemoveFromEventList+0xc0>)
 8005580:	2201      	movs	r2, #1
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e001      	b.n	800558a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800558a:	697b      	ldr	r3, [r7, #20]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20000be4 	.word	0x20000be4
 8005598:	20000bc4 	.word	0x20000bc4
 800559c:	200006ec 	.word	0x200006ec
 80055a0:	20000b7c 	.word	0x20000b7c
 80055a4:	200006e8 	.word	0x200006e8
 80055a8:	20000bd0 	.word	0x20000bd0

080055ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055b4:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <vTaskInternalSetTimeOutState+0x24>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <vTaskInternalSetTimeOutState+0x28>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	605a      	str	r2, [r3, #4]
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	20000bd4 	.word	0x20000bd4
 80055d4:	20000bc0 	.word	0x20000bc0

080055d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d109      	bne.n	80055fc <xTaskCheckForTimeOut+0x24>
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	e7fe      	b.n	80055fa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <xTaskCheckForTimeOut+0x3e>
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	e7fe      	b.n	8005614 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005616:	f000 fff9 	bl	800660c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800561a:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <xTaskCheckForTimeOut+0xb8>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d102      	bne.n	800563a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	e023      	b.n	8005682 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	4b15      	ldr	r3, [pc, #84]	; (8005694 <xTaskCheckForTimeOut+0xbc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d007      	beq.n	8005656 <xTaskCheckForTimeOut+0x7e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	429a      	cmp	r2, r3
 800564e:	d302      	bcc.n	8005656 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005650:	2301      	movs	r3, #1
 8005652:	61fb      	str	r3, [r7, #28]
 8005654:	e015      	b.n	8005682 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	429a      	cmp	r2, r3
 800565e:	d20b      	bcs.n	8005678 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	1ad2      	subs	r2, r2, r3
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff ff9d 	bl	80055ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005672:	2300      	movs	r3, #0
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	e004      	b.n	8005682 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800567e:	2301      	movs	r3, #1
 8005680:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005682:	f000 fff1 	bl	8006668 <vPortExitCritical>

	return xReturn;
 8005686:	69fb      	ldr	r3, [r7, #28]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3720      	adds	r7, #32
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20000bc0 	.word	0x20000bc0
 8005694:	20000bd4 	.word	0x20000bd4

08005698 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800569c:	4b03      	ldr	r3, [pc, #12]	; (80056ac <vTaskMissedYield+0x14>)
 800569e:	2201      	movs	r2, #1
 80056a0:	601a      	str	r2, [r3, #0]
}
 80056a2:	bf00      	nop
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	20000bd0 	.word	0x20000bd0

080056b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056b8:	f000 f852 	bl	8005760 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <prvIdleTask+0x28>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d9f9      	bls.n	80056b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <prvIdleTask+0x2c>)
 80056c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056d4:	e7f0      	b.n	80056b8 <prvIdleTask+0x8>
 80056d6:	bf00      	nop
 80056d8:	200006ec 	.word	0x200006ec
 80056dc:	e000ed04 	.word	0xe000ed04

080056e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056e6:	2300      	movs	r3, #0
 80056e8:	607b      	str	r3, [r7, #4]
 80056ea:	e00c      	b.n	8005706 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4a12      	ldr	r2, [pc, #72]	; (8005740 <prvInitialiseTaskLists+0x60>)
 80056f8:	4413      	add	r3, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fe fce2 	bl	80040c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3301      	adds	r3, #1
 8005704:	607b      	str	r3, [r7, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b37      	cmp	r3, #55	; 0x37
 800570a:	d9ef      	bls.n	80056ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800570c:	480d      	ldr	r0, [pc, #52]	; (8005744 <prvInitialiseTaskLists+0x64>)
 800570e:	f7fe fcd9 	bl	80040c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005712:	480d      	ldr	r0, [pc, #52]	; (8005748 <prvInitialiseTaskLists+0x68>)
 8005714:	f7fe fcd6 	bl	80040c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005718:	480c      	ldr	r0, [pc, #48]	; (800574c <prvInitialiseTaskLists+0x6c>)
 800571a:	f7fe fcd3 	bl	80040c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800571e:	480c      	ldr	r0, [pc, #48]	; (8005750 <prvInitialiseTaskLists+0x70>)
 8005720:	f7fe fcd0 	bl	80040c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005724:	480b      	ldr	r0, [pc, #44]	; (8005754 <prvInitialiseTaskLists+0x74>)
 8005726:	f7fe fccd 	bl	80040c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800572a:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <prvInitialiseTaskLists+0x78>)
 800572c:	4a05      	ldr	r2, [pc, #20]	; (8005744 <prvInitialiseTaskLists+0x64>)
 800572e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005730:	4b0a      	ldr	r3, [pc, #40]	; (800575c <prvInitialiseTaskLists+0x7c>)
 8005732:	4a05      	ldr	r2, [pc, #20]	; (8005748 <prvInitialiseTaskLists+0x68>)
 8005734:	601a      	str	r2, [r3, #0]
}
 8005736:	bf00      	nop
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	200006ec 	.word	0x200006ec
 8005744:	20000b4c 	.word	0x20000b4c
 8005748:	20000b60 	.word	0x20000b60
 800574c:	20000b7c 	.word	0x20000b7c
 8005750:	20000b90 	.word	0x20000b90
 8005754:	20000ba8 	.word	0x20000ba8
 8005758:	20000b74 	.word	0x20000b74
 800575c:	20000b78 	.word	0x20000b78

08005760 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005766:	e019      	b.n	800579c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005768:	f000 ff50 	bl	800660c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800576c:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <prvCheckTasksWaitingTermination+0x4c>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3304      	adds	r3, #4
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe fd2d 	bl	80041d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800577e:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <prvCheckTasksWaitingTermination+0x50>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3b01      	subs	r3, #1
 8005784:	4a0a      	ldr	r2, [pc, #40]	; (80057b0 <prvCheckTasksWaitingTermination+0x50>)
 8005786:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <prvCheckTasksWaitingTermination+0x54>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3b01      	subs	r3, #1
 800578e:	4a09      	ldr	r2, [pc, #36]	; (80057b4 <prvCheckTasksWaitingTermination+0x54>)
 8005790:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005792:	f000 ff69 	bl	8006668 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f80e 	bl	80057b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <prvCheckTasksWaitingTermination+0x54>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e1      	bne.n	8005768 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057a4:	bf00      	nop
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	20000b90 	.word	0x20000b90
 80057b0:	20000bbc 	.word	0x20000bbc
 80057b4:	20000ba4 	.word	0x20000ba4

080057b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d108      	bne.n	80057dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	4618      	mov	r0, r3
 80057d0:	f001 f8f8 	bl	80069c4 <vPortFree>
				vPortFree( pxTCB );
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f001 f8f5 	bl	80069c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057da:	e017      	b.n	800580c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d103      	bne.n	80057ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f001 f8ec 	bl	80069c4 <vPortFree>
	}
 80057ec:	e00e      	b.n	800580c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d009      	beq.n	800580c <prvDeleteTCB+0x54>
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	e7fe      	b.n	800580a <prvDeleteTCB+0x52>
	}
 800580c:	bf00      	nop
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581a:	4b0f      	ldr	r3, [pc, #60]	; (8005858 <prvResetNextTaskUnblockTime+0x44>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <prvResetNextTaskUnblockTime+0x14>
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <prvResetNextTaskUnblockTime+0x16>
 8005828:	2300      	movs	r3, #0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d004      	beq.n	8005838 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800582e:	4b0b      	ldr	r3, [pc, #44]	; (800585c <prvResetNextTaskUnblockTime+0x48>)
 8005830:	f04f 32ff 	mov.w	r2, #4294967295
 8005834:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005836:	e008      	b.n	800584a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005838:	4b07      	ldr	r3, [pc, #28]	; (8005858 <prvResetNextTaskUnblockTime+0x44>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	4a05      	ldr	r2, [pc, #20]	; (800585c <prvResetNextTaskUnblockTime+0x48>)
 8005848:	6013      	str	r3, [r2, #0]
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	20000b74 	.word	0x20000b74
 800585c:	20000bdc 	.word	0x20000bdc

08005860 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005866:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <xTaskGetSchedulerState+0x34>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800586e:	2301      	movs	r3, #1
 8005870:	607b      	str	r3, [r7, #4]
 8005872:	e008      	b.n	8005886 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005874:	4b08      	ldr	r3, [pc, #32]	; (8005898 <xTaskGetSchedulerState+0x38>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800587c:	2302      	movs	r3, #2
 800587e:	607b      	str	r3, [r7, #4]
 8005880:	e001      	b.n	8005886 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005882:	2300      	movs	r3, #0
 8005884:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005886:	687b      	ldr	r3, [r7, #4]
	}
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	20000bc8 	.word	0x20000bc8
 8005898:	20000be4 	.word	0x20000be4

0800589c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d054      	beq.n	800595c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058b2:	4b2d      	ldr	r3, [pc, #180]	; (8005968 <xTaskPriorityDisinherit+0xcc>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d009      	beq.n	80058d0 <xTaskPriorityDisinherit+0x34>
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	e7fe      	b.n	80058ce <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d109      	bne.n	80058ec <xTaskPriorityDisinherit+0x50>
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	60bb      	str	r3, [r7, #8]
 80058ea:	e7fe      	b.n	80058ea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f0:	1e5a      	subs	r2, r3, #1
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	429a      	cmp	r2, r3
 8005900:	d02c      	beq.n	800595c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005906:	2b00      	cmp	r3, #0
 8005908:	d128      	bne.n	800595c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	3304      	adds	r3, #4
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe fc62 	bl	80041d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005920:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	4b0f      	ldr	r3, [pc, #60]	; (800596c <xTaskPriorityDisinherit+0xd0>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d903      	bls.n	800593c <xTaskPriorityDisinherit+0xa0>
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	4a0c      	ldr	r2, [pc, #48]	; (800596c <xTaskPriorityDisinherit+0xd0>)
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005940:	4613      	mov	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4a09      	ldr	r2, [pc, #36]	; (8005970 <xTaskPriorityDisinherit+0xd4>)
 800594a:	441a      	add	r2, r3
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	3304      	adds	r3, #4
 8005950:	4619      	mov	r1, r3
 8005952:	4610      	mov	r0, r2
 8005954:	f7fe fbe3 	bl	800411e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005958:	2301      	movs	r3, #1
 800595a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800595c:	697b      	ldr	r3, [r7, #20]
	}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	200006e8 	.word	0x200006e8
 800596c:	20000bc4 	.word	0x20000bc4
 8005970:	200006ec 	.word	0x200006ec

08005974 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005982:	f000 fe43 	bl	800660c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005986:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <xTaskNotifyWait+0xac>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d01a      	beq.n	80059ca <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005994:	4b22      	ldr	r3, [pc, #136]	; (8005a20 <xTaskNotifyWait+0xac>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	43d2      	mvns	r2, r2
 800599e:	400a      	ands	r2, r1
 80059a0:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80059a2:	4b1f      	ldr	r3, [pc, #124]	; (8005a20 <xTaskNotifyWait+0xac>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00b      	beq.n	80059ca <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059b2:	2101      	movs	r1, #1
 80059b4:	6838      	ldr	r0, [r7, #0]
 80059b6:	f000 f9a1 	bl	8005cfc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80059ba:	4b1a      	ldr	r3, [pc, #104]	; (8005a24 <xTaskNotifyWait+0xb0>)
 80059bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80059ca:	f000 fe4d 	bl	8006668 <vPortExitCritical>

		taskENTER_CRITICAL();
 80059ce:	f000 fe1d 	bl	800660c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80059d8:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <xTaskNotifyWait+0xac>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80059e2:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <xTaskNotifyWait+0xac>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d002      	beq.n	80059f6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	e008      	b.n	8005a08 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80059f6:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <xTaskNotifyWait+0xac>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	43d2      	mvns	r2, r2
 8005a00:	400a      	ands	r2, r1
 8005a02:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8005a04:	2301      	movs	r3, #1
 8005a06:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <xTaskNotifyWait+0xac>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8005a12:	f000 fe29 	bl	8006668 <vPortExitCritical>

		return xReturn;
 8005a16:	697b      	ldr	r3, [r7, #20]
	}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	200006e8 	.word	0x200006e8
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	4613      	mov	r3, r2
 8005a36:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d109      	bne.n	8005a56 <xTaskGenericNotify+0x2e>
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	61bb      	str	r3, [r7, #24]
 8005a54:	e7fe      	b.n	8005a54 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005a5a:	f000 fdd7 	bl	800660c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005a72:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d827      	bhi.n	8005ad2 <xTaskGenericNotify+0xaa>
 8005a82:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <xTaskGenericNotify+0x60>)
 8005a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a88:	08005ad3 	.word	0x08005ad3
 8005a8c:	08005a9d 	.word	0x08005a9d
 8005a90:	08005aab 	.word	0x08005aab
 8005a94:	08005ab7 	.word	0x08005ab7
 8005a98:	08005abf 	.word	0x08005abf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005aa8:	e013      	b.n	8005ad2 <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005ab4:	e00d      	b.n	8005ad2 <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005abc:	e009      	b.n	8005ad2 <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005abe:	7ffb      	ldrb	r3, [r7, #31]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d003      	beq.n	8005acc <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005aca:	e001      	b.n	8005ad0 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005ad0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005ad2:	7ffb      	ldrb	r3, [r7, #31]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d139      	bne.n	8005b4c <xTaskGenericNotify+0x124>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fe fb7b 	bl	80041d8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae6:	4b1d      	ldr	r3, [pc, #116]	; (8005b5c <xTaskGenericNotify+0x134>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d903      	bls.n	8005af6 <xTaskGenericNotify+0xce>
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	4a1a      	ldr	r2, [pc, #104]	; (8005b5c <xTaskGenericNotify+0x134>)
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4a17      	ldr	r2, [pc, #92]	; (8005b60 <xTaskGenericNotify+0x138>)
 8005b04:	441a      	add	r2, r3
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	f7fe fb06 	bl	800411e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d009      	beq.n	8005b2e <xTaskGenericNotify+0x106>
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	e7fe      	b.n	8005b2c <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b32:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <xTaskGenericNotify+0x13c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d907      	bls.n	8005b4c <xTaskGenericNotify+0x124>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <xTaskGenericNotify+0x140>)
 8005b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005b4c:	f000 fd8c 	bl	8006668 <vPortExitCritical>

		return xReturn;
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3728      	adds	r7, #40	; 0x28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000bc4 	.word	0x20000bc4
 8005b60:	200006ec 	.word	0x200006ec
 8005b64:	200006e8 	.word	0x200006e8
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08e      	sub	sp, #56	; 0x38
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d109      	bne.n	8005b9a <xTaskGenericNotifyFromISR+0x2e>
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
 8005b98:	e7fe      	b.n	8005b98 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b9a:	f000 fe13 	bl	80067c4 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005ba2:	f3ef 8211 	mrs	r2, BASEPRI
 8005ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	623a      	str	r2, [r7, #32]
 8005bb8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005bba:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	2202      	movs	r2, #2
 8005bda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d829      	bhi.n	8005c38 <xTaskGenericNotifyFromISR+0xcc>
 8005be4:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <xTaskGenericNotifyFromISR+0x80>)
 8005be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bea:	bf00      	nop
 8005bec:	08005c39 	.word	0x08005c39
 8005bf0:	08005c01 	.word	0x08005c01
 8005bf4:	08005c0f 	.word	0x08005c0f
 8005bf8:	08005c1b 	.word	0x08005c1b
 8005bfc:	08005c23 	.word	0x08005c23
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	431a      	orrs	r2, r3
 8005c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005c0c:	e014      	b.n	8005c38 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005c18:	e00e      	b.n	8005c38 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005c20:	e00a      	b.n	8005c38 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005c22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d003      	beq.n	8005c32 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005c30:	e001      	b.n	8005c36 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005c36:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005c38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d146      	bne.n	8005cce <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8005c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	e7fe      	b.n	8005c5a <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c5c:	4b21      	ldr	r3, [pc, #132]	; (8005ce4 <xTaskGenericNotifyFromISR+0x178>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d11d      	bne.n	8005ca0 <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c66:	3304      	adds	r3, #4
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fe fab5 	bl	80041d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c72:	4b1d      	ldr	r3, [pc, #116]	; (8005ce8 <xTaskGenericNotifyFromISR+0x17c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d903      	bls.n	8005c82 <xTaskGenericNotifyFromISR+0x116>
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	4a1a      	ldr	r2, [pc, #104]	; (8005ce8 <xTaskGenericNotifyFromISR+0x17c>)
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4a17      	ldr	r2, [pc, #92]	; (8005cec <xTaskGenericNotifyFromISR+0x180>)
 8005c90:	441a      	add	r2, r3
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	3304      	adds	r3, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f7fe fa40 	bl	800411e <vListInsertEnd>
 8005c9e:	e005      	b.n	8005cac <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	3318      	adds	r3, #24
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4812      	ldr	r0, [pc, #72]	; (8005cf0 <xTaskGenericNotifyFromISR+0x184>)
 8005ca8:	f7fe fa39 	bl	800411e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb0:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <xTaskGenericNotifyFromISR+0x188>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d909      	bls.n	8005cce <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	e002      	b.n	8005cce <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <xTaskGenericNotifyFromISR+0x18c>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3738      	adds	r7, #56	; 0x38
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000be4 	.word	0x20000be4
 8005ce8:	20000bc4 	.word	0x20000bc4
 8005cec:	200006ec 	.word	0x200006ec
 8005cf0:	20000b7c 	.word	0x20000b7c
 8005cf4:	200006e8 	.word	0x200006e8
 8005cf8:	20000bd0 	.word	0x20000bd0

08005cfc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d06:	4b21      	ldr	r3, [pc, #132]	; (8005d8c <prvAddCurrentTaskToDelayedList+0x90>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d0c:	4b20      	ldr	r3, [pc, #128]	; (8005d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3304      	adds	r3, #4
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe fa60 	bl	80041d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1e:	d10a      	bne.n	8005d36 <prvAddCurrentTaskToDelayedList+0x3a>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d007      	beq.n	8005d36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d26:	4b1a      	ldr	r3, [pc, #104]	; (8005d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4819      	ldr	r0, [pc, #100]	; (8005d94 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d30:	f7fe f9f5 	bl	800411e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d34:	e026      	b.n	8005d84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d3e:	4b14      	ldr	r3, [pc, #80]	; (8005d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d209      	bcs.n	8005d62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d4e:	4b12      	ldr	r3, [pc, #72]	; (8005d98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f7fe fa03 	bl	8004166 <vListInsert>
}
 8005d60:	e010      	b.n	8005d84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d62:	4b0e      	ldr	r3, [pc, #56]	; (8005d9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	f7fe f9f9 	bl	8004166 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d74:	4b0a      	ldr	r3, [pc, #40]	; (8005da0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d202      	bcs.n	8005d84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d7e:	4a08      	ldr	r2, [pc, #32]	; (8005da0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6013      	str	r3, [r2, #0]
}
 8005d84:	bf00      	nop
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	20000bc0 	.word	0x20000bc0
 8005d90:	200006e8 	.word	0x200006e8
 8005d94:	20000ba8 	.word	0x20000ba8
 8005d98:	20000b78 	.word	0x20000b78
 8005d9c:	20000b74 	.word	0x20000b74
 8005da0:	20000bdc 	.word	0x20000bdc

08005da4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08a      	sub	sp, #40	; 0x28
 8005da8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005dae:	f000 fac3 	bl	8006338 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005db2:	4b1c      	ldr	r3, [pc, #112]	; (8005e24 <xTimerCreateTimerTask+0x80>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d021      	beq.n	8005dfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005dc2:	1d3a      	adds	r2, r7, #4
 8005dc4:	f107 0108 	add.w	r1, r7, #8
 8005dc8:	f107 030c 	add.w	r3, r7, #12
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fe f95f 	bl	8004090 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	9202      	str	r2, [sp, #8]
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	2302      	movs	r3, #2
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	2300      	movs	r3, #0
 8005de2:	460a      	mov	r2, r1
 8005de4:	4910      	ldr	r1, [pc, #64]	; (8005e28 <xTimerCreateTimerTask+0x84>)
 8005de6:	4811      	ldr	r0, [pc, #68]	; (8005e2c <xTimerCreateTimerTask+0x88>)
 8005de8:	f7fe ff30 	bl	8004c4c <xTaskCreateStatic>
 8005dec:	4602      	mov	r2, r0
 8005dee:	4b10      	ldr	r3, [pc, #64]	; (8005e30 <xTimerCreateTimerTask+0x8c>)
 8005df0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005df2:	4b0f      	ldr	r3, [pc, #60]	; (8005e30 <xTimerCreateTimerTask+0x8c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d109      	bne.n	8005e18 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	e7fe      	b.n	8005e16 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005e18:	697b      	ldr	r3, [r7, #20]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000c18 	.word	0x20000c18
 8005e28:	08007678 	.word	0x08007678
 8005e2c:	08005f4d 	.word	0x08005f4d
 8005e30:	20000c1c 	.word	0x20000c1c

08005e34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08a      	sub	sp, #40	; 0x28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d109      	bne.n	8005e60 <xTimerGenericCommand+0x2c>
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	623b      	str	r3, [r7, #32]
 8005e5e:	e7fe      	b.n	8005e5e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e60:	4b19      	ldr	r3, [pc, #100]	; (8005ec8 <xTimerGenericCommand+0x94>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d02a      	beq.n	8005ebe <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b05      	cmp	r3, #5
 8005e78:	dc18      	bgt.n	8005eac <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e7a:	f7ff fcf1 	bl	8005860 <xTaskGetSchedulerState>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d109      	bne.n	8005e98 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e84:	4b10      	ldr	r3, [pc, #64]	; (8005ec8 <xTimerGenericCommand+0x94>)
 8005e86:	6818      	ldr	r0, [r3, #0]
 8005e88:	f107 0110 	add.w	r1, r7, #16
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e90:	f7fe fb06 	bl	80044a0 <xQueueGenericSend>
 8005e94:	6278      	str	r0, [r7, #36]	; 0x24
 8005e96:	e012      	b.n	8005ebe <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e98:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <xTimerGenericCommand+0x94>)
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	f107 0110 	add.w	r1, r7, #16
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f7fe fafc 	bl	80044a0 <xQueueGenericSend>
 8005ea8:	6278      	str	r0, [r7, #36]	; 0x24
 8005eaa:	e008      	b.n	8005ebe <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005eac:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <xTimerGenericCommand+0x94>)
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	f107 0110 	add.w	r1, r7, #16
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	f7fe fbec 	bl	8004694 <xQueueGenericSendFromISR>
 8005ebc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3728      	adds	r7, #40	; 0x28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20000c18 	.word	0x20000c18

08005ecc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ed6:	4b1c      	ldr	r3, [pc, #112]	; (8005f48 <prvProcessExpiredTimer+0x7c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe f977 	bl	80041d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d121      	bne.n	8005f36 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	699a      	ldr	r2, [r3, #24]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	18d1      	adds	r1, r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	6978      	ldr	r0, [r7, #20]
 8005f00:	f000 f8c8 	bl	8006094 <prvInsertTimerInActiveList>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d015      	beq.n	8005f36 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	2100      	movs	r1, #0
 8005f14:	6978      	ldr	r0, [r7, #20]
 8005f16:	f7ff ff8d 	bl	8005e34 <xTimerGenericCommand>
 8005f1a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <prvProcessExpiredTimer+0x6a>
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	e7fe      	b.n	8005f34 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	6978      	ldr	r0, [r7, #20]
 8005f3c:	4798      	blx	r3
}
 8005f3e:	bf00      	nop
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000c10 	.word	0x20000c10

08005f4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f54:	f107 0308 	add.w	r3, r7, #8
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 f857 	bl	800600c <prvGetNextExpireTime>
 8005f5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	4619      	mov	r1, r3
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 f803 	bl	8005f70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f6a:	f000 f8d5 	bl	8006118 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f6e:	e7f1      	b.n	8005f54 <prvTimerTask+0x8>

08005f70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f7a:	f7ff f893 	bl	80050a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f7e:	f107 0308 	add.w	r3, r7, #8
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 f866 	bl	8006054 <prvSampleTimeNow>
 8005f88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d130      	bne.n	8005ff2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <prvProcessTimerOrBlockTask+0x3c>
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d806      	bhi.n	8005fac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f9e:	f7ff f88f 	bl	80050c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005fa2:	68f9      	ldr	r1, [r7, #12]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff ff91 	bl	8005ecc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005faa:	e024      	b.n	8005ff6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005fb2:	4b13      	ldr	r3, [pc, #76]	; (8006000 <prvProcessTimerOrBlockTask+0x90>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bf0c      	ite	eq
 8005fbc:	2301      	moveq	r3, #1
 8005fbe:	2300      	movne	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005fc4:	4b0f      	ldr	r3, [pc, #60]	; (8006004 <prvProcessTimerOrBlockTask+0x94>)
 8005fc6:	6818      	ldr	r0, [r3, #0]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	f7fe fe07 	bl	8004be4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005fd6:	f7ff f873 	bl	80050c0 <xTaskResumeAll>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005fe0:	4b09      	ldr	r3, [pc, #36]	; (8006008 <prvProcessTimerOrBlockTask+0x98>)
 8005fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	f3bf 8f6f 	isb	sy
}
 8005ff0:	e001      	b.n	8005ff6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ff2:	f7ff f865 	bl	80050c0 <xTaskResumeAll>
}
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000c14 	.word	0x20000c14
 8006004:	20000c18 	.word	0x20000c18
 8006008:	e000ed04 	.word	0xe000ed04

0800600c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006014:	4b0e      	ldr	r3, [pc, #56]	; (8006050 <prvGetNextExpireTime+0x44>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	bf0c      	ite	eq
 800601e:	2301      	moveq	r3, #1
 8006020:	2300      	movne	r3, #0
 8006022:	b2db      	uxtb	r3, r3
 8006024:	461a      	mov	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d105      	bne.n	800603e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006032:	4b07      	ldr	r3, [pc, #28]	; (8006050 <prvGetNextExpireTime+0x44>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	e001      	b.n	8006042 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006042:	68fb      	ldr	r3, [r7, #12]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	20000c10 	.word	0x20000c10

08006054 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800605c:	f7ff f8cc 	bl	80051f8 <xTaskGetTickCount>
 8006060:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006062:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <prvSampleTimeNow+0x3c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	429a      	cmp	r2, r3
 800606a:	d205      	bcs.n	8006078 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800606c:	f000 f904 	bl	8006278 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e002      	b.n	800607e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800607e:	4a04      	ldr	r2, [pc, #16]	; (8006090 <prvSampleTimeNow+0x3c>)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006084:	68fb      	ldr	r3, [r7, #12]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000c20 	.word	0x20000c20

08006094 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060a2:	2300      	movs	r3, #0
 80060a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d812      	bhi.n	80060e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	1ad2      	subs	r2, r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d302      	bcc.n	80060ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80060c8:	2301      	movs	r3, #1
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	e01b      	b.n	8006106 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060ce:	4b10      	ldr	r3, [pc, #64]	; (8006110 <prvInsertTimerInActiveList+0x7c>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4619      	mov	r1, r3
 80060d8:	4610      	mov	r0, r2
 80060da:	f7fe f844 	bl	8004166 <vListInsert>
 80060de:	e012      	b.n	8006106 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d206      	bcs.n	80060f6 <prvInsertTimerInActiveList+0x62>
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d302      	bcc.n	80060f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80060f0:	2301      	movs	r3, #1
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	e007      	b.n	8006106 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060f6:	4b07      	ldr	r3, [pc, #28]	; (8006114 <prvInsertTimerInActiveList+0x80>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3304      	adds	r3, #4
 80060fe:	4619      	mov	r1, r3
 8006100:	4610      	mov	r0, r2
 8006102:	f7fe f830 	bl	8004166 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006106:	697b      	ldr	r3, [r7, #20]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000c14 	.word	0x20000c14
 8006114:	20000c10 	.word	0x20000c10

08006118 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08e      	sub	sp, #56	; 0x38
 800611c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800611e:	e099      	b.n	8006254 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	da17      	bge.n	8006156 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006126:	1d3b      	adds	r3, r7, #4
 8006128:	3304      	adds	r3, #4
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612e:	2b00      	cmp	r3, #0
 8006130:	d109      	bne.n	8006146 <prvProcessReceivedCommands+0x2e>
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	e7fe      	b.n	8006144 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800614c:	6850      	ldr	r0, [r2, #4]
 800614e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006150:	6892      	ldr	r2, [r2, #8]
 8006152:	4611      	mov	r1, r2
 8006154:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	db7a      	blt.n	8006252 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d004      	beq.n	8006172 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	3304      	adds	r3, #4
 800616c:	4618      	mov	r0, r3
 800616e:	f7fe f833 	bl	80041d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006172:	463b      	mov	r3, r7
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff ff6d 	bl	8006054 <prvSampleTimeNow>
 800617a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b09      	cmp	r3, #9
 8006180:	d868      	bhi.n	8006254 <prvProcessReceivedCommands+0x13c>
 8006182:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <prvProcessReceivedCommands+0x70>)
 8006184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006188:	080061b1 	.word	0x080061b1
 800618c:	080061b1 	.word	0x080061b1
 8006190:	080061b1 	.word	0x080061b1
 8006194:	08006255 	.word	0x08006255
 8006198:	0800620b 	.word	0x0800620b
 800619c:	08006241 	.word	0x08006241
 80061a0:	080061b1 	.word	0x080061b1
 80061a4:	080061b1 	.word	0x080061b1
 80061a8:	08006255 	.word	0x08006255
 80061ac:	0800620b 	.word	0x0800620b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	18d1      	adds	r1, r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061be:	f7ff ff69 	bl	8006094 <prvInsertTimerInActiveList>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d045      	beq.n	8006254 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d13d      	bne.n	8006254 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	441a      	add	r2, r3
 80061e0:	2300      	movs	r3, #0
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	2300      	movs	r3, #0
 80061e6:	2100      	movs	r1, #0
 80061e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ea:	f7ff fe23 	bl	8005e34 <xTimerGenericCommand>
 80061ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d12e      	bne.n	8006254 <prvProcessReceivedCommands+0x13c>
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	61bb      	str	r3, [r7, #24]
 8006208:	e7fe      	b.n	8006208 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d109      	bne.n	800622c <prvProcessReceivedCommands+0x114>
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	e7fe      	b.n	800622a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	699a      	ldr	r2, [r3, #24]
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	18d1      	adds	r1, r2, r3
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800623a:	f7ff ff2b 	bl	8006094 <prvInsertTimerInActiveList>
					break;
 800623e:	e009      	b.n	8006254 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006246:	2b00      	cmp	r3, #0
 8006248:	d104      	bne.n	8006254 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800624a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800624c:	f000 fbba 	bl	80069c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006250:	e000      	b.n	8006254 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006252:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006254:	4b07      	ldr	r3, [pc, #28]	; (8006274 <prvProcessReceivedCommands+0x15c>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	1d39      	adds	r1, r7, #4
 800625a:	2200      	movs	r2, #0
 800625c:	4618      	mov	r0, r3
 800625e:	f7fe faad 	bl	80047bc <xQueueReceive>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	f47f af5b 	bne.w	8006120 <prvProcessReceivedCommands+0x8>
	}
}
 800626a:	bf00      	nop
 800626c:	3730      	adds	r7, #48	; 0x30
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000c18 	.word	0x20000c18

08006278 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800627e:	e044      	b.n	800630a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006280:	4b2b      	ldr	r3, [pc, #172]	; (8006330 <prvSwitchTimerLists+0xb8>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800628a:	4b29      	ldr	r3, [pc, #164]	; (8006330 <prvSwitchTimerLists+0xb8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3304      	adds	r3, #4
 8006298:	4618      	mov	r0, r3
 800629a:	f7fd ff9d 	bl	80041d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d12d      	bne.n	800630a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4413      	add	r3, r2
 80062b6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d90e      	bls.n	80062de <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062cc:	4b18      	ldr	r3, [pc, #96]	; (8006330 <prvSwitchTimerLists+0xb8>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3304      	adds	r3, #4
 80062d4:	4619      	mov	r1, r3
 80062d6:	4610      	mov	r0, r2
 80062d8:	f7fd ff45 	bl	8004166 <vListInsert>
 80062dc:	e015      	b.n	800630a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062de:	2300      	movs	r3, #0
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	2300      	movs	r3, #0
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	2100      	movs	r1, #0
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f7ff fda3 	bl	8005e34 <xTimerGenericCommand>
 80062ee:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d109      	bne.n	800630a <prvSwitchTimerLists+0x92>
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	e7fe      	b.n	8006308 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800630a:	4b09      	ldr	r3, [pc, #36]	; (8006330 <prvSwitchTimerLists+0xb8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1b5      	bne.n	8006280 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006314:	4b06      	ldr	r3, [pc, #24]	; (8006330 <prvSwitchTimerLists+0xb8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800631a:	4b06      	ldr	r3, [pc, #24]	; (8006334 <prvSwitchTimerLists+0xbc>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a04      	ldr	r2, [pc, #16]	; (8006330 <prvSwitchTimerLists+0xb8>)
 8006320:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006322:	4a04      	ldr	r2, [pc, #16]	; (8006334 <prvSwitchTimerLists+0xbc>)
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	6013      	str	r3, [r2, #0]
}
 8006328:	bf00      	nop
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	20000c10 	.word	0x20000c10
 8006334:	20000c14 	.word	0x20000c14

08006338 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800633e:	f000 f965 	bl	800660c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006342:	4b15      	ldr	r3, [pc, #84]	; (8006398 <prvCheckForValidListAndQueue+0x60>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d120      	bne.n	800638c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800634a:	4814      	ldr	r0, [pc, #80]	; (800639c <prvCheckForValidListAndQueue+0x64>)
 800634c:	f7fd feba 	bl	80040c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006350:	4813      	ldr	r0, [pc, #76]	; (80063a0 <prvCheckForValidListAndQueue+0x68>)
 8006352:	f7fd feb7 	bl	80040c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006356:	4b13      	ldr	r3, [pc, #76]	; (80063a4 <prvCheckForValidListAndQueue+0x6c>)
 8006358:	4a10      	ldr	r2, [pc, #64]	; (800639c <prvCheckForValidListAndQueue+0x64>)
 800635a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800635c:	4b12      	ldr	r3, [pc, #72]	; (80063a8 <prvCheckForValidListAndQueue+0x70>)
 800635e:	4a10      	ldr	r2, [pc, #64]	; (80063a0 <prvCheckForValidListAndQueue+0x68>)
 8006360:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006362:	2300      	movs	r3, #0
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	4b11      	ldr	r3, [pc, #68]	; (80063ac <prvCheckForValidListAndQueue+0x74>)
 8006368:	4a11      	ldr	r2, [pc, #68]	; (80063b0 <prvCheckForValidListAndQueue+0x78>)
 800636a:	2110      	movs	r1, #16
 800636c:	200a      	movs	r0, #10
 800636e:	f7fd ffc5 	bl	80042fc <xQueueGenericCreateStatic>
 8006372:	4602      	mov	r2, r0
 8006374:	4b08      	ldr	r3, [pc, #32]	; (8006398 <prvCheckForValidListAndQueue+0x60>)
 8006376:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006378:	4b07      	ldr	r3, [pc, #28]	; (8006398 <prvCheckForValidListAndQueue+0x60>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <prvCheckForValidListAndQueue+0x60>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	490b      	ldr	r1, [pc, #44]	; (80063b4 <prvCheckForValidListAndQueue+0x7c>)
 8006386:	4618      	mov	r0, r3
 8006388:	f7fe fc04 	bl	8004b94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800638c:	f000 f96c 	bl	8006668 <vPortExitCritical>
}
 8006390:	bf00      	nop
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000c18 	.word	0x20000c18
 800639c:	20000be8 	.word	0x20000be8
 80063a0:	20000bfc 	.word	0x20000bfc
 80063a4:	20000c10 	.word	0x20000c10
 80063a8:	20000c14 	.word	0x20000c14
 80063ac:	20000cc4 	.word	0x20000cc4
 80063b0:	20000c24 	.word	0x20000c24
 80063b4:	08007680 	.word	0x08007680

080063b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	3b04      	subs	r3, #4
 80063c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3b04      	subs	r3, #4
 80063d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f023 0201 	bic.w	r2, r3, #1
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3b04      	subs	r3, #4
 80063e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063e8:	4a0c      	ldr	r2, [pc, #48]	; (800641c <pxPortInitialiseStack+0x64>)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3b14      	subs	r3, #20
 80063f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3b04      	subs	r3, #4
 80063fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f06f 0202 	mvn.w	r2, #2
 8006406:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3b20      	subs	r3, #32
 800640c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800640e:	68fb      	ldr	r3, [r7, #12]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	08006421 	.word	0x08006421

08006420 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006426:	2300      	movs	r3, #0
 8006428:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800642a:	4b11      	ldr	r3, [pc, #68]	; (8006470 <prvTaskExitError+0x50>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006432:	d009      	beq.n	8006448 <prvTaskExitError+0x28>
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	e7fe      	b.n	8006446 <prvTaskExitError+0x26>
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800645a:	bf00      	nop
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0fc      	beq.n	800645c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006462:	bf00      	nop
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	20000008 	.word	0x20000008
	...

08006480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006480:	4b07      	ldr	r3, [pc, #28]	; (80064a0 <pxCurrentTCBConst2>)
 8006482:	6819      	ldr	r1, [r3, #0]
 8006484:	6808      	ldr	r0, [r1, #0]
 8006486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648a:	f380 8809 	msr	PSP, r0
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f04f 0000 	mov.w	r0, #0
 8006496:	f380 8811 	msr	BASEPRI, r0
 800649a:	4770      	bx	lr
 800649c:	f3af 8000 	nop.w

080064a0 <pxCurrentTCBConst2>:
 80064a0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop

080064a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064a8:	4808      	ldr	r0, [pc, #32]	; (80064cc <prvPortStartFirstTask+0x24>)
 80064aa:	6800      	ldr	r0, [r0, #0]
 80064ac:	6800      	ldr	r0, [r0, #0]
 80064ae:	f380 8808 	msr	MSP, r0
 80064b2:	f04f 0000 	mov.w	r0, #0
 80064b6:	f380 8814 	msr	CONTROL, r0
 80064ba:	b662      	cpsie	i
 80064bc:	b661      	cpsie	f
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	df00      	svc	0
 80064c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064ca:	bf00      	nop
 80064cc:	e000ed08 	.word	0xe000ed08

080064d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064d6:	4b44      	ldr	r3, [pc, #272]	; (80065e8 <xPortStartScheduler+0x118>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a44      	ldr	r2, [pc, #272]	; (80065ec <xPortStartScheduler+0x11c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d109      	bne.n	80064f4 <xPortStartScheduler+0x24>
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	613b      	str	r3, [r7, #16]
 80064f2:	e7fe      	b.n	80064f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064f4:	4b3c      	ldr	r3, [pc, #240]	; (80065e8 <xPortStartScheduler+0x118>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a3d      	ldr	r2, [pc, #244]	; (80065f0 <xPortStartScheduler+0x120>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d109      	bne.n	8006512 <xPortStartScheduler+0x42>
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	e7fe      	b.n	8006510 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006512:	4b38      	ldr	r3, [pc, #224]	; (80065f4 <xPortStartScheduler+0x124>)
 8006514:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	22ff      	movs	r2, #255	; 0xff
 8006522:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	b2db      	uxtb	r3, r3
 8006530:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006534:	b2da      	uxtb	r2, r3
 8006536:	4b30      	ldr	r3, [pc, #192]	; (80065f8 <xPortStartScheduler+0x128>)
 8006538:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800653a:	4b30      	ldr	r3, [pc, #192]	; (80065fc <xPortStartScheduler+0x12c>)
 800653c:	2207      	movs	r2, #7
 800653e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006540:	e009      	b.n	8006556 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006542:	4b2e      	ldr	r3, [pc, #184]	; (80065fc <xPortStartScheduler+0x12c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3b01      	subs	r3, #1
 8006548:	4a2c      	ldr	r2, [pc, #176]	; (80065fc <xPortStartScheduler+0x12c>)
 800654a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	b2db      	uxtb	r3, r3
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	b2db      	uxtb	r3, r3
 8006554:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	b2db      	uxtb	r3, r3
 800655a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655e:	2b80      	cmp	r3, #128	; 0x80
 8006560:	d0ef      	beq.n	8006542 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006562:	4b26      	ldr	r3, [pc, #152]	; (80065fc <xPortStartScheduler+0x12c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f1c3 0307 	rsb	r3, r3, #7
 800656a:	2b04      	cmp	r3, #4
 800656c:	d009      	beq.n	8006582 <xPortStartScheduler+0xb2>
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	60bb      	str	r3, [r7, #8]
 8006580:	e7fe      	b.n	8006580 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006582:	4b1e      	ldr	r3, [pc, #120]	; (80065fc <xPortStartScheduler+0x12c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	021b      	lsls	r3, r3, #8
 8006588:	4a1c      	ldr	r2, [pc, #112]	; (80065fc <xPortStartScheduler+0x12c>)
 800658a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800658c:	4b1b      	ldr	r3, [pc, #108]	; (80065fc <xPortStartScheduler+0x12c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006594:	4a19      	ldr	r2, [pc, #100]	; (80065fc <xPortStartScheduler+0x12c>)
 8006596:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	b2da      	uxtb	r2, r3
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065a0:	4b17      	ldr	r3, [pc, #92]	; (8006600 <xPortStartScheduler+0x130>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a16      	ldr	r2, [pc, #88]	; (8006600 <xPortStartScheduler+0x130>)
 80065a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065ac:	4b14      	ldr	r3, [pc, #80]	; (8006600 <xPortStartScheduler+0x130>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a13      	ldr	r2, [pc, #76]	; (8006600 <xPortStartScheduler+0x130>)
 80065b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80065b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065b8:	f000 f8d6 	bl	8006768 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065bc:	4b11      	ldr	r3, [pc, #68]	; (8006604 <xPortStartScheduler+0x134>)
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065c2:	f000 f8f5 	bl	80067b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065c6:	4b10      	ldr	r3, [pc, #64]	; (8006608 <xPortStartScheduler+0x138>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a0f      	ldr	r2, [pc, #60]	; (8006608 <xPortStartScheduler+0x138>)
 80065cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065d2:	f7ff ff69 	bl	80064a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065d6:	f7fe fedd 	bl	8005394 <vTaskSwitchContext>
	prvTaskExitError();
 80065da:	f7ff ff21 	bl	8006420 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	e000ed00 	.word	0xe000ed00
 80065ec:	410fc271 	.word	0x410fc271
 80065f0:	410fc270 	.word	0x410fc270
 80065f4:	e000e400 	.word	0xe000e400
 80065f8:	20000d14 	.word	0x20000d14
 80065fc:	20000d18 	.word	0x20000d18
 8006600:	e000ed20 	.word	0xe000ed20
 8006604:	20000008 	.word	0x20000008
 8006608:	e000ef34 	.word	0xe000ef34

0800660c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006624:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <vPortEnterCritical+0x54>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3301      	adds	r3, #1
 800662a:	4a0d      	ldr	r2, [pc, #52]	; (8006660 <vPortEnterCritical+0x54>)
 800662c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800662e:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <vPortEnterCritical+0x54>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d10e      	bne.n	8006654 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006636:	4b0b      	ldr	r3, [pc, #44]	; (8006664 <vPortEnterCritical+0x58>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d009      	beq.n	8006654 <vPortEnterCritical+0x48>
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	603b      	str	r3, [r7, #0]
 8006652:	e7fe      	b.n	8006652 <vPortEnterCritical+0x46>
	}
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	20000008 	.word	0x20000008
 8006664:	e000ed04 	.word	0xe000ed04

08006668 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800666e:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <vPortExitCritical+0x4c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d109      	bne.n	800668a <vPortExitCritical+0x22>
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	607b      	str	r3, [r7, #4]
 8006688:	e7fe      	b.n	8006688 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800668a:	4b0a      	ldr	r3, [pc, #40]	; (80066b4 <vPortExitCritical+0x4c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3b01      	subs	r3, #1
 8006690:	4a08      	ldr	r2, [pc, #32]	; (80066b4 <vPortExitCritical+0x4c>)
 8006692:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006694:	4b07      	ldr	r3, [pc, #28]	; (80066b4 <vPortExitCritical+0x4c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d104      	bne.n	80066a6 <vPortExitCritical+0x3e>
 800669c:	2300      	movs	r3, #0
 800669e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80066a6:	bf00      	nop
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	20000008 	.word	0x20000008
	...

080066c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066c0:	f3ef 8009 	mrs	r0, PSP
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	4b15      	ldr	r3, [pc, #84]	; (8006720 <pxCurrentTCBConst>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	f01e 0f10 	tst.w	lr, #16
 80066d0:	bf08      	it	eq
 80066d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066da:	6010      	str	r0, [r2, #0]
 80066dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066e4:	f380 8811 	msr	BASEPRI, r0
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f7fe fe50 	bl	8005394 <vTaskSwitchContext>
 80066f4:	f04f 0000 	mov.w	r0, #0
 80066f8:	f380 8811 	msr	BASEPRI, r0
 80066fc:	bc09      	pop	{r0, r3}
 80066fe:	6819      	ldr	r1, [r3, #0]
 8006700:	6808      	ldr	r0, [r1, #0]
 8006702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006706:	f01e 0f10 	tst.w	lr, #16
 800670a:	bf08      	it	eq
 800670c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006710:	f380 8809 	msr	PSP, r0
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	f3af 8000 	nop.w

08006720 <pxCurrentTCBConst>:
 8006720:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006724:	bf00      	nop
 8006726:	bf00      	nop

08006728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006740:	f7fe fd6a 	bl	8005218 <xTaskIncrementTick>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800674a:	4b06      	ldr	r3, [pc, #24]	; (8006764 <SysTick_Handler+0x3c>)
 800674c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	2300      	movs	r3, #0
 8006754:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800675c:	bf00      	nop
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	e000ed04 	.word	0xe000ed04

08006768 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800676c:	4b0b      	ldr	r3, [pc, #44]	; (800679c <vPortSetupTimerInterrupt+0x34>)
 800676e:	2200      	movs	r2, #0
 8006770:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006772:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <vPortSetupTimerInterrupt+0x38>)
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006778:	4b0a      	ldr	r3, [pc, #40]	; (80067a4 <vPortSetupTimerInterrupt+0x3c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a0a      	ldr	r2, [pc, #40]	; (80067a8 <vPortSetupTimerInterrupt+0x40>)
 800677e:	fba2 2303 	umull	r2, r3, r2, r3
 8006782:	099b      	lsrs	r3, r3, #6
 8006784:	4a09      	ldr	r2, [pc, #36]	; (80067ac <vPortSetupTimerInterrupt+0x44>)
 8006786:	3b01      	subs	r3, #1
 8006788:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800678a:	4b04      	ldr	r3, [pc, #16]	; (800679c <vPortSetupTimerInterrupt+0x34>)
 800678c:	2207      	movs	r2, #7
 800678e:	601a      	str	r2, [r3, #0]
}
 8006790:	bf00      	nop
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	e000e010 	.word	0xe000e010
 80067a0:	e000e018 	.word	0xe000e018
 80067a4:	2000000c 	.word	0x2000000c
 80067a8:	10624dd3 	.word	0x10624dd3
 80067ac:	e000e014 	.word	0xe000e014

080067b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067c0 <vPortEnableVFP+0x10>
 80067b4:	6801      	ldr	r1, [r0, #0]
 80067b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067ba:	6001      	str	r1, [r0, #0]
 80067bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067be:	bf00      	nop
 80067c0:	e000ed88 	.word	0xe000ed88

080067c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067ca:	f3ef 8305 	mrs	r3, IPSR
 80067ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b0f      	cmp	r3, #15
 80067d4:	d913      	bls.n	80067fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067d6:	4a16      	ldr	r2, [pc, #88]	; (8006830 <vPortValidateInterruptPriority+0x6c>)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067e0:	4b14      	ldr	r3, [pc, #80]	; (8006834 <vPortValidateInterruptPriority+0x70>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	7afa      	ldrb	r2, [r7, #11]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d209      	bcs.n	80067fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	607b      	str	r3, [r7, #4]
 80067fc:	e7fe      	b.n	80067fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067fe:	4b0e      	ldr	r3, [pc, #56]	; (8006838 <vPortValidateInterruptPriority+0x74>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006806:	4b0d      	ldr	r3, [pc, #52]	; (800683c <vPortValidateInterruptPriority+0x78>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d909      	bls.n	8006822 <vPortValidateInterruptPriority+0x5e>
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	e7fe      	b.n	8006820 <vPortValidateInterruptPriority+0x5c>
	}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	e000e3f0 	.word	0xe000e3f0
 8006834:	20000d14 	.word	0x20000d14
 8006838:	e000ed0c 	.word	0xe000ed0c
 800683c:	20000d18 	.word	0x20000d18

08006840 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08a      	sub	sp, #40	; 0x28
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006848:	2300      	movs	r3, #0
 800684a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800684c:	f7fe fc2a 	bl	80050a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006850:	4b57      	ldr	r3, [pc, #348]	; (80069b0 <pvPortMalloc+0x170>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006858:	f000 f90c 	bl	8006a74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800685c:	4b55      	ldr	r3, [pc, #340]	; (80069b4 <pvPortMalloc+0x174>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4013      	ands	r3, r2
 8006864:	2b00      	cmp	r3, #0
 8006866:	f040 808c 	bne.w	8006982 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d01c      	beq.n	80068aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006870:	2208      	movs	r2, #8
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4413      	add	r3, r2
 8006876:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	2b00      	cmp	r3, #0
 8006880:	d013      	beq.n	80068aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f023 0307 	bic.w	r3, r3, #7
 8006888:	3308      	adds	r3, #8
 800688a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	2b00      	cmp	r3, #0
 8006894:	d009      	beq.n	80068aa <pvPortMalloc+0x6a>
 8006896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	e7fe      	b.n	80068a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d068      	beq.n	8006982 <pvPortMalloc+0x142>
 80068b0:	4b41      	ldr	r3, [pc, #260]	; (80069b8 <pvPortMalloc+0x178>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d863      	bhi.n	8006982 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068ba:	4b40      	ldr	r3, [pc, #256]	; (80069bc <pvPortMalloc+0x17c>)
 80068bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068be:	4b3f      	ldr	r3, [pc, #252]	; (80069bc <pvPortMalloc+0x17c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068c4:	e004      	b.n	80068d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d903      	bls.n	80068e2 <pvPortMalloc+0xa2>
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f1      	bne.n	80068c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068e2:	4b33      	ldr	r3, [pc, #204]	; (80069b0 <pvPortMalloc+0x170>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d04a      	beq.n	8006982 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2208      	movs	r2, #8
 80068f2:	4413      	add	r3, r2
 80068f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	1ad2      	subs	r2, r2, r3
 8006906:	2308      	movs	r3, #8
 8006908:	005b      	lsls	r3, r3, #1
 800690a:	429a      	cmp	r2, r3
 800690c:	d91e      	bls.n	800694c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800690e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4413      	add	r3, r2
 8006914:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	2b00      	cmp	r3, #0
 800691e:	d009      	beq.n	8006934 <pvPortMalloc+0xf4>
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	613b      	str	r3, [r7, #16]
 8006932:	e7fe      	b.n	8006932 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	1ad2      	subs	r2, r2, r3
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006946:	69b8      	ldr	r0, [r7, #24]
 8006948:	f000 f8f6 	bl	8006b38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800694c:	4b1a      	ldr	r3, [pc, #104]	; (80069b8 <pvPortMalloc+0x178>)
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	4a18      	ldr	r2, [pc, #96]	; (80069b8 <pvPortMalloc+0x178>)
 8006958:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800695a:	4b17      	ldr	r3, [pc, #92]	; (80069b8 <pvPortMalloc+0x178>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	4b18      	ldr	r3, [pc, #96]	; (80069c0 <pvPortMalloc+0x180>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d203      	bcs.n	800696e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006966:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <pvPortMalloc+0x178>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a15      	ldr	r2, [pc, #84]	; (80069c0 <pvPortMalloc+0x180>)
 800696c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	4b10      	ldr	r3, [pc, #64]	; (80069b4 <pvPortMalloc+0x174>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	431a      	orrs	r2, r3
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006982:	f7fe fb9d 	bl	80050c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	2b00      	cmp	r3, #0
 800698e:	d009      	beq.n	80069a4 <pvPortMalloc+0x164>
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	e7fe      	b.n	80069a2 <pvPortMalloc+0x162>
	return pvReturn;
 80069a4:	69fb      	ldr	r3, [r7, #28]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3728      	adds	r7, #40	; 0x28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20001924 	.word	0x20001924
 80069b4:	20001930 	.word	0x20001930
 80069b8:	20001928 	.word	0x20001928
 80069bc:	2000191c 	.word	0x2000191c
 80069c0:	2000192c 	.word	0x2000192c

080069c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d046      	beq.n	8006a64 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069d6:	2308      	movs	r3, #8
 80069d8:	425b      	negs	r3, r3
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4413      	add	r3, r2
 80069de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	4b20      	ldr	r3, [pc, #128]	; (8006a6c <vPortFree+0xa8>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4013      	ands	r3, r2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d109      	bne.n	8006a06 <vPortFree+0x42>
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e7fe      	b.n	8006a04 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d009      	beq.n	8006a22 <vPortFree+0x5e>
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	60bb      	str	r3, [r7, #8]
 8006a20:	e7fe      	b.n	8006a20 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	4b11      	ldr	r3, [pc, #68]	; (8006a6c <vPortFree+0xa8>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d019      	beq.n	8006a64 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d115      	bne.n	8006a64 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	4b0b      	ldr	r3, [pc, #44]	; (8006a6c <vPortFree+0xa8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	43db      	mvns	r3, r3
 8006a42:	401a      	ands	r2, r3
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a48:	f7fe fb2c 	bl	80050a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	4b07      	ldr	r3, [pc, #28]	; (8006a70 <vPortFree+0xac>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4413      	add	r3, r2
 8006a56:	4a06      	ldr	r2, [pc, #24]	; (8006a70 <vPortFree+0xac>)
 8006a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a5a:	6938      	ldr	r0, [r7, #16]
 8006a5c:	f000 f86c 	bl	8006b38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a60:	f7fe fb2e 	bl	80050c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a64:	bf00      	nop
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20001930 	.word	0x20001930
 8006a70:	20001928 	.word	0x20001928

08006a74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006a7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a80:	4b27      	ldr	r3, [pc, #156]	; (8006b20 <prvHeapInit+0xac>)
 8006a82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00c      	beq.n	8006aa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3307      	adds	r3, #7
 8006a92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0307 	bic.w	r3, r3, #7
 8006a9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	4a1f      	ldr	r2, [pc, #124]	; (8006b20 <prvHeapInit+0xac>)
 8006aa4:	4413      	add	r3, r2
 8006aa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006aac:	4a1d      	ldr	r2, [pc, #116]	; (8006b24 <prvHeapInit+0xb0>)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ab2:	4b1c      	ldr	r3, [pc, #112]	; (8006b24 <prvHeapInit+0xb0>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	4413      	add	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0307 	bic.w	r3, r3, #7
 8006ace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <prvHeapInit+0xb4>)
 8006ad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ad6:	4b14      	ldr	r3, [pc, #80]	; (8006b28 <prvHeapInit+0xb4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2200      	movs	r2, #0
 8006adc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ade:	4b12      	ldr	r3, [pc, #72]	; (8006b28 <prvHeapInit+0xb4>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	1ad2      	subs	r2, r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006af4:	4b0c      	ldr	r3, [pc, #48]	; (8006b28 <prvHeapInit+0xb4>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	4a0a      	ldr	r2, [pc, #40]	; (8006b2c <prvHeapInit+0xb8>)
 8006b02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <prvHeapInit+0xbc>)
 8006b0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <prvHeapInit+0xc0>)
 8006b0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b12:	601a      	str	r2, [r3, #0]
}
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	20000d1c 	.word	0x20000d1c
 8006b24:	2000191c 	.word	0x2000191c
 8006b28:	20001924 	.word	0x20001924
 8006b2c:	2000192c 	.word	0x2000192c
 8006b30:	20001928 	.word	0x20001928
 8006b34:	20001930 	.word	0x20001930

08006b38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b40:	4b28      	ldr	r3, [pc, #160]	; (8006be4 <prvInsertBlockIntoFreeList+0xac>)
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	e002      	b.n	8006b4c <prvInsertBlockIntoFreeList+0x14>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d8f7      	bhi.n	8006b46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	4413      	add	r3, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d108      	bne.n	8006b7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	441a      	add	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	441a      	add	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d118      	bne.n	8006bc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	4b15      	ldr	r3, [pc, #84]	; (8006be8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d00d      	beq.n	8006bb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	e008      	b.n	8006bc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bb6:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <prvInsertBlockIntoFreeList+0xb0>)
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	e003      	b.n	8006bc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d002      	beq.n	8006bd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bd6:	bf00      	nop
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	2000191c 	.word	0x2000191c
 8006be8:	20001924 	.word	0x20001924

08006bec <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8006bf0:	4b0d      	ldr	r3, [pc, #52]	; (8006c28 <MX_CRC_Init+0x3c>)
 8006bf2:	4a0e      	ldr	r2, [pc, #56]	; (8006c2c <MX_CRC_Init+0x40>)
 8006bf4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8006bf6:	4b0c      	ldr	r3, [pc, #48]	; (8006c28 <MX_CRC_Init+0x3c>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8006bfc:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <MX_CRC_Init+0x3c>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8006c02:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <MX_CRC_Init+0x3c>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8006c08:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <MX_CRC_Init+0x3c>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8006c0e:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <MX_CRC_Init+0x3c>)
 8006c10:	2201      	movs	r2, #1
 8006c12:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006c14:	4804      	ldr	r0, [pc, #16]	; (8006c28 <MX_CRC_Init+0x3c>)
 8006c16:	f7f9 fc23 	bl	8000460 <HAL_CRC_Init>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8006c20:	f000 f9d6 	bl	8006fd0 <Error_Handler>
  }

}
 8006c24:	bf00      	nop
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	20001978 	.word	0x20001978
 8006c2c:	40023000 	.word	0x40023000

08006c30 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a0a      	ldr	r2, [pc, #40]	; (8006c68 <HAL_CRC_MspInit+0x38>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d10b      	bne.n	8006c5a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006c42:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <HAL_CRC_MspInit+0x3c>)
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	4a09      	ldr	r2, [pc, #36]	; (8006c6c <HAL_CRC_MspInit+0x3c>)
 8006c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c4c:	6153      	str	r3, [r2, #20]
 8006c4e:	4b07      	ldr	r3, [pc, #28]	; (8006c6c <HAL_CRC_MspInit+0x3c>)
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8006c5a:	bf00      	nop
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40023000 	.word	0x40023000
 8006c6c:	40021000 	.word	0x40021000

08006c70 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of dataQueue */
  dataQueueHandle = osMessageQueueNew (128, sizeof(uint32_t), &dataQueue_attributes);
 8006c74:	4a10      	ldr	r2, [pc, #64]	; (8006cb8 <MX_FREERTOS_Init+0x48>)
 8006c76:	2104      	movs	r1, #4
 8006c78:	2080      	movs	r0, #128	; 0x80
 8006c7a:	f7fd f969 	bl	8003f50 <osMessageQueueNew>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	4b0e      	ldr	r3, [pc, #56]	; (8006cbc <MX_FREERTOS_Init+0x4c>)
 8006c82:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of measureTask */
  measureTaskHandle = osThreadNew(StartMeasurement, NULL, &measureTask_attributes);
 8006c84:	4a0e      	ldr	r2, [pc, #56]	; (8006cc0 <MX_FREERTOS_Init+0x50>)
 8006c86:	2100      	movs	r1, #0
 8006c88:	480e      	ldr	r0, [pc, #56]	; (8006cc4 <MX_FREERTOS_Init+0x54>)
 8006c8a:	f7fc ff93 	bl	8003bb4 <osThreadNew>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <MX_FREERTOS_Init+0x58>)
 8006c92:	601a      	str	r2, [r3, #0]

  /* creation of UARTTransmit */
  UARTTransmitHandle = osThreadNew(TransmitTask, NULL, &UARTTransmit_attributes);
 8006c94:	4a0d      	ldr	r2, [pc, #52]	; (8006ccc <MX_FREERTOS_Init+0x5c>)
 8006c96:	2100      	movs	r1, #0
 8006c98:	480d      	ldr	r0, [pc, #52]	; (8006cd0 <MX_FREERTOS_Init+0x60>)
 8006c9a:	f7fc ff8b 	bl	8003bb4 <osThreadNew>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <MX_FREERTOS_Init+0x64>)
 8006ca2:	601a      	str	r2, [r3, #0]

  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(HeartBeatTask, NULL, &HeartBeat_attributes);
 8006ca4:	4a0c      	ldr	r2, [pc, #48]	; (8006cd8 <MX_FREERTOS_Init+0x68>)
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	480c      	ldr	r0, [pc, #48]	; (8006cdc <MX_FREERTOS_Init+0x6c>)
 8006caa:	f7fc ff83 	bl	8003bb4 <osThreadNew>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ce0 <MX_FREERTOS_Init+0x70>)
 8006cb2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8006cb4:	bf00      	nop
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	08007748 	.word	0x08007748
 8006cbc:	200019a8 	.word	0x200019a8
 8006cc0:	080076dc 	.word	0x080076dc
 8006cc4:	08006ce5 	.word	0x08006ce5
 8006cc8:	200019a0 	.word	0x200019a0
 8006ccc:	08007700 	.word	0x08007700
 8006cd0:	08006d0d 	.word	0x08006d0d
 8006cd4:	2000199c 	.word	0x2000199c
 8006cd8:	08007724 	.word	0x08007724
 8006cdc:	08006d21 	.word	0x08006d21
 8006ce0:	200019a4 	.word	0x200019a4

08006ce4 <StartMeasurement>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasurement */
void StartMeasurement(void *argument)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMeasurement */
	/* Infinite loop */
	uint8_t cmd;
	osStatus_t status = {0};
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]
	//HAL_UART_Transmit(&huart2, &d, 1,0);
	HAL_UART_Receive_IT(&huart2, &cmd, 1);
 8006cf0:	f107 030b 	add.w	r3, r7, #11
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4803      	ldr	r0, [pc, #12]	; (8006d08 <StartMeasurement+0x24>)
 8006cfa:	f7fb fff1 	bl	8002ce0 <HAL_UART_Receive_IT>

	for (;;) {

		osDelay(1);
 8006cfe:	2001      	movs	r0, #1
 8006d00:	f7fd f8f8 	bl	8003ef4 <osDelay>
 8006d04:	e7fb      	b.n	8006cfe <StartMeasurement+0x1a>
 8006d06:	bf00      	nop
 8006d08:	20001a50 	.word	0x20001a50

08006d0c <TransmitTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_TransmitTask */
void TransmitTask(void *argument)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TransmitTask */
	/* Infinite loop */
	osStatus_t status = {0};
 8006d14:	2300      	movs	r3, #0
 8006d16:	60fb      	str	r3, [r7, #12]
	for (;;) {

		osDelay(1);
 8006d18:	2001      	movs	r0, #1
 8006d1a:	f7fd f8eb 	bl	8003ef4 <osDelay>
 8006d1e:	e7fb      	b.n	8006d18 <TransmitTask+0xc>

08006d20 <HeartBeatTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HeartBeatTask */
void HeartBeatTask(void *argument)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HeartBeatTask */
	uint32_t running = 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (running == 0) {
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d108      	bne.n	8006d44 <HeartBeatTask+0x24>
			osThreadFlagsWait(ThreadFlagHBStart, osFlagsWaitAny, osWaitForever);
 8006d32:	f04f 32ff 	mov.w	r2, #4294967295
 8006d36:	2100      	movs	r1, #0
 8006d38:	2001      	movs	r0, #1
 8006d3a:	f7fd f847 	bl	8003dcc <osThreadFlagsWait>
			running = 1;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	e7f3      	b.n	8006d2c <HeartBeatTask+0xc>
		} else {
			osStatus_t status = osThreadFlagsWait(ThreadFlagHBStop, osFlagsWaitAny, 100);
 8006d44:	2264      	movs	r2, #100	; 0x64
 8006d46:	2100      	movs	r1, #0
 8006d48:	2002      	movs	r0, #2
 8006d4a:	f7fd f83f 	bl	8003dcc <osThreadFlagsWait>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	60bb      	str	r3, [r7, #8]
			if (status == osErrorTimeout ) {
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f113 0f02 	cmn.w	r3, #2
 8006d58:	d105      	bne.n	8006d66 <HeartBeatTask+0x46>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8006d5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d5e:	4803      	ldr	r0, [pc, #12]	; (8006d6c <HeartBeatTask+0x4c>)
 8006d60:	f7f9 ff70 	bl	8000c44 <HAL_GPIO_TogglePin>
 8006d64:	e7e2      	b.n	8006d2c <HeartBeatTask+0xc>
			} else {
				running = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60fb      	str	r3, [r7, #12]
		if (running == 0) {
 8006d6a:	e7df      	b.n	8006d2c <HeartBeatTask+0xc>
 8006d6c:	48000400 	.word	0x48000400

08006d70 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08a      	sub	sp, #40	; 0x28
 8006d74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d76:	f107 0314 	add.w	r3, r7, #20
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	605a      	str	r2, [r3, #4]
 8006d80:	609a      	str	r2, [r3, #8]
 8006d82:	60da      	str	r2, [r3, #12]
 8006d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d86:	4b56      	ldr	r3, [pc, #344]	; (8006ee0 <MX_GPIO_Init+0x170>)
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	4a55      	ldr	r2, [pc, #340]	; (8006ee0 <MX_GPIO_Init+0x170>)
 8006d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d90:	6153      	str	r3, [r2, #20]
 8006d92:	4b53      	ldr	r3, [pc, #332]	; (8006ee0 <MX_GPIO_Init+0x170>)
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006d9e:	4b50      	ldr	r3, [pc, #320]	; (8006ee0 <MX_GPIO_Init+0x170>)
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	4a4f      	ldr	r2, [pc, #316]	; (8006ee0 <MX_GPIO_Init+0x170>)
 8006da4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006da8:	6153      	str	r3, [r2, #20]
 8006daa:	4b4d      	ldr	r3, [pc, #308]	; (8006ee0 <MX_GPIO_Init+0x170>)
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006db6:	4b4a      	ldr	r3, [pc, #296]	; (8006ee0 <MX_GPIO_Init+0x170>)
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	4a49      	ldr	r2, [pc, #292]	; (8006ee0 <MX_GPIO_Init+0x170>)
 8006dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dc0:	6153      	str	r3, [r2, #20]
 8006dc2:	4b47      	ldr	r3, [pc, #284]	; (8006ee0 <MX_GPIO_Init+0x170>)
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dca:	60bb      	str	r3, [r7, #8]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dce:	4b44      	ldr	r3, [pc, #272]	; (8006ee0 <MX_GPIO_Init+0x170>)
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	4a43      	ldr	r2, [pc, #268]	; (8006ee0 <MX_GPIO_Init+0x170>)
 8006dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dd8:	6153      	str	r3, [r2, #20]
 8006dda:	4b41      	ldr	r3, [pc, #260]	; (8006ee0 <MX_GPIO_Init+0x170>)
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006de2:	607b      	str	r3, [r7, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006de6:	4b3e      	ldr	r3, [pc, #248]	; (8006ee0 <MX_GPIO_Init+0x170>)
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	4a3d      	ldr	r2, [pc, #244]	; (8006ee0 <MX_GPIO_Init+0x170>)
 8006dec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006df0:	6153      	str	r3, [r2, #20]
 8006df2:	4b3b      	ldr	r3, [pc, #236]	; (8006ee0 <MX_GPIO_Init+0x170>)
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|LD2_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f242 4130 	movw	r1, #9264	; 0x2430
 8006e04:	4837      	ldr	r0, [pc, #220]	; (8006ee4 <MX_GPIO_Init+0x174>)
 8006e06:	f7f9 feed 	bl	8000be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006e10:	4b35      	ldr	r3, [pc, #212]	; (8006ee8 <MX_GPIO_Init+0x178>)
 8006e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006e18:	f107 0314 	add.w	r3, r7, #20
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4833      	ldr	r0, [pc, #204]	; (8006eec <MX_GPIO_Init+0x17c>)
 8006e20:	f7f9 fcac 	bl	800077c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC7 
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8006e24:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006e28:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e32:	f107 0314 	add.w	r3, r7, #20
 8006e36:	4619      	mov	r1, r3
 8006e38:	482c      	ldr	r0, [pc, #176]	; (8006eec <MX_GPIO_Init+0x17c>)
 8006e3a:	f7f9 fc9f 	bl	800077c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5 
                           PA6 PA7 PA8 PA9 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8006e3e:	f649 33f3 	movw	r3, #39923	; 0x9bf3
 8006e42:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e44:	2303      	movs	r3, #3
 8006e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e4c:	f107 0314 	add.w	r3, r7, #20
 8006e50:	4619      	mov	r1, r3
 8006e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e56:	f7f9 fc91 	bl	800077c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11 
                           PB12 PB14 PB15 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11 
 8006e5a:	f64d 33c7 	movw	r3, #56263	; 0xdbc7
 8006e5e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e60:	2303      	movs	r3, #3
 8006e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e68:	f107 0314 	add.w	r3, r7, #20
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	481d      	ldr	r0, [pc, #116]	; (8006ee4 <MX_GPIO_Init+0x174>)
 8006e70:	f7f9 fc84 	bl	800077c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PBPin PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|LD2_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8006e74:	f242 4330 	movw	r3, #9264	; 0x2430
 8006e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e82:	2300      	movs	r3, #0
 8006e84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e86:	f107 0314 	add.w	r3, r7, #20
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4815      	ldr	r0, [pc, #84]	; (8006ee4 <MX_GPIO_Init+0x174>)
 8006e8e:	f7f9 fc75 	bl	800077c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006e98:	4b15      	ldr	r3, [pc, #84]	; (8006ef0 <MX_GPIO_Init+0x180>)
 8006e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ea0:	f107 0314 	add.w	r3, r7, #20
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006eaa:	f7f9 fc67 	bl	800077c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006eae:	2304      	movs	r3, #4
 8006eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006eba:	f107 0314 	add.w	r3, r7, #20
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	480c      	ldr	r0, [pc, #48]	; (8006ef4 <MX_GPIO_Init+0x184>)
 8006ec2:	f7f9 fc5b 	bl	800077c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2105      	movs	r1, #5
 8006eca:	2028      	movs	r0, #40	; 0x28
 8006ecc:	f7f9 fa84 	bl	80003d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006ed0:	2028      	movs	r0, #40	; 0x28
 8006ed2:	f7f9 faad 	bl	8000430 <HAL_NVIC_EnableIRQ>

}
 8006ed6:	bf00      	nop
 8006ed8:	3728      	adds	r7, #40	; 0x28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	40021000 	.word	0x40021000
 8006ee4:	48000400 	.word	0x48000400
 8006ee8:	10210000 	.word	0x10210000
 8006eec:	48000800 	.word	0x48000800
 8006ef0:	10110000 	.word	0x10110000
 8006ef4:	48000c00 	.word	0x48000c00

08006ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006efc:	f7f9 f968 	bl	80001d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006f00:	f000 f80f 	bl	8006f22 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006f04:	f7ff ff34 	bl	8006d70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8006f08:	f000 f9e2 	bl	80072d0 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8006f0c:	f7ff fe6e 	bl	8006bec <MX_CRC_Init>
  MX_SPI3_Init();
 8006f10:	f000 f870 	bl	8006ff4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8006f14:	f7fc fde6 	bl	8003ae4 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8006f18:	f7ff feaa 	bl	8006c70 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8006f1c:	f7fc fe16 	bl	8003b4c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8006f20:	e7fe      	b.n	8006f20 <main+0x28>

08006f22 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b090      	sub	sp, #64	; 0x40
 8006f26:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006f28:	f107 0318 	add.w	r3, r7, #24
 8006f2c:	2228      	movs	r2, #40	; 0x28
 8006f2e:	2100      	movs	r1, #0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 faa0 	bl	8007476 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006f36:	1d3b      	adds	r3, r7, #4
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	605a      	str	r2, [r3, #4]
 8006f3e:	609a      	str	r2, [r3, #8]
 8006f40:	60da      	str	r2, [r3, #12]
 8006f42:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006f44:	2301      	movs	r3, #1
 8006f46:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006f48:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8006f4c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006f52:	2301      	movs	r3, #1
 8006f54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006f56:	2302      	movs	r3, #2
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8006f60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006f66:	f107 0318 	add.w	r3, r7, #24
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7f9 feb6 	bl	8000cdc <HAL_RCC_OscConfig>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8006f76:	f000 f82b 	bl	8006fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006f7a:	230f      	movs	r3, #15
 8006f7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006f7e:	2302      	movs	r3, #2
 8006f80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006f90:	1d3b      	adds	r3, r7, #4
 8006f92:	2101      	movs	r1, #1
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fa fead 	bl	8001cf4 <HAL_RCC_ClockConfig>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006fa0:	f000 f816 	bl	8006fd0 <Error_Handler>
  }
}
 8006fa4:	bf00      	nop
 8006fa6:	3740      	adds	r7, #64	; 0x40
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a04      	ldr	r2, [pc, #16]	; (8006fcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d101      	bne.n	8006fc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006fbe:	f7f9 f91d 	bl	80001fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006fc2:	bf00      	nop
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	40012c00 	.word	0x40012c00

08006fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006fd4:	bf00      	nop
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8006ff8:	4b1b      	ldr	r3, [pc, #108]	; (8007068 <MX_SPI3_Init+0x74>)
 8006ffa:	4a1c      	ldr	r2, [pc, #112]	; (800706c <MX_SPI3_Init+0x78>)
 8006ffc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006ffe:	4b1a      	ldr	r3, [pc, #104]	; (8007068 <MX_SPI3_Init+0x74>)
 8007000:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007004:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007006:	4b18      	ldr	r3, [pc, #96]	; (8007068 <MX_SPI3_Init+0x74>)
 8007008:	2200      	movs	r2, #0
 800700a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800700c:	4b16      	ldr	r3, [pc, #88]	; (8007068 <MX_SPI3_Init+0x74>)
 800700e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007012:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007014:	4b14      	ldr	r3, [pc, #80]	; (8007068 <MX_SPI3_Init+0x74>)
 8007016:	2200      	movs	r2, #0
 8007018:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800701a:	4b13      	ldr	r3, [pc, #76]	; (8007068 <MX_SPI3_Init+0x74>)
 800701c:	2200      	movs	r2, #0
 800701e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007020:	4b11      	ldr	r3, [pc, #68]	; (8007068 <MX_SPI3_Init+0x74>)
 8007022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007026:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007028:	4b0f      	ldr	r3, [pc, #60]	; (8007068 <MX_SPI3_Init+0x74>)
 800702a:	2200      	movs	r2, #0
 800702c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800702e:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <MX_SPI3_Init+0x74>)
 8007030:	2200      	movs	r2, #0
 8007032:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007034:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <MX_SPI3_Init+0x74>)
 8007036:	2200      	movs	r2, #0
 8007038:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800703a:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <MX_SPI3_Init+0x74>)
 800703c:	2200      	movs	r2, #0
 800703e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007040:	4b09      	ldr	r3, [pc, #36]	; (8007068 <MX_SPI3_Init+0x74>)
 8007042:	2207      	movs	r2, #7
 8007044:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007046:	4b08      	ldr	r3, [pc, #32]	; (8007068 <MX_SPI3_Init+0x74>)
 8007048:	2200      	movs	r2, #0
 800704a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800704c:	4b06      	ldr	r3, [pc, #24]	; (8007068 <MX_SPI3_Init+0x74>)
 800704e:	2208      	movs	r2, #8
 8007050:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007052:	4805      	ldr	r0, [pc, #20]	; (8007068 <MX_SPI3_Init+0x74>)
 8007054:	f7fb f96a 	bl	800232c <HAL_SPI_Init>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800705e:	f7ff ffb7 	bl	8006fd0 <Error_Handler>
  }

}
 8007062:	bf00      	nop
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	200019ac 	.word	0x200019ac
 800706c:	40003c00 	.word	0x40003c00

08007070 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08a      	sub	sp, #40	; 0x28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007078:	f107 0314 	add.w	r3, r7, #20
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	605a      	str	r2, [r3, #4]
 8007082:	609a      	str	r2, [r3, #8]
 8007084:	60da      	str	r2, [r3, #12]
 8007086:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a17      	ldr	r2, [pc, #92]	; (80070ec <HAL_SPI_MspInit+0x7c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d128      	bne.n	80070e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007092:	4b17      	ldr	r3, [pc, #92]	; (80070f0 <HAL_SPI_MspInit+0x80>)
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	4a16      	ldr	r2, [pc, #88]	; (80070f0 <HAL_SPI_MspInit+0x80>)
 8007098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800709c:	61d3      	str	r3, [r2, #28]
 800709e:	4b14      	ldr	r3, [pc, #80]	; (80070f0 <HAL_SPI_MspInit+0x80>)
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070aa:	4b11      	ldr	r3, [pc, #68]	; (80070f0 <HAL_SPI_MspInit+0x80>)
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	4a10      	ldr	r2, [pc, #64]	; (80070f0 <HAL_SPI_MspInit+0x80>)
 80070b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070b4:	6153      	str	r3, [r2, #20]
 80070b6:	4b0e      	ldr	r3, [pc, #56]	; (80070f0 <HAL_SPI_MspInit+0x80>)
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80070c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80070c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070c8:	2302      	movs	r3, #2
 80070ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070cc:	2300      	movs	r3, #0
 80070ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80070d0:	2303      	movs	r3, #3
 80070d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80070d4:	2306      	movs	r3, #6
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070d8:	f107 0314 	add.w	r3, r7, #20
 80070dc:	4619      	mov	r1, r3
 80070de:	4805      	ldr	r0, [pc, #20]	; (80070f4 <HAL_SPI_MspInit+0x84>)
 80070e0:	f7f9 fb4c 	bl	800077c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80070e4:	bf00      	nop
 80070e6:	3728      	adds	r7, #40	; 0x28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	40003c00 	.word	0x40003c00
 80070f0:	40021000 	.word	0x40021000
 80070f4:	48000800 	.word	0x48000800

080070f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070fe:	4b11      	ldr	r3, [pc, #68]	; (8007144 <HAL_MspInit+0x4c>)
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	4a10      	ldr	r2, [pc, #64]	; (8007144 <HAL_MspInit+0x4c>)
 8007104:	f043 0301 	orr.w	r3, r3, #1
 8007108:	6193      	str	r3, [r2, #24]
 800710a:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <HAL_MspInit+0x4c>)
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	607b      	str	r3, [r7, #4]
 8007114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007116:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <HAL_MspInit+0x4c>)
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	4a0a      	ldr	r2, [pc, #40]	; (8007144 <HAL_MspInit+0x4c>)
 800711c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007120:	61d3      	str	r3, [r2, #28]
 8007122:	4b08      	ldr	r3, [pc, #32]	; (8007144 <HAL_MspInit+0x4c>)
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800712a:	603b      	str	r3, [r7, #0]
 800712c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800712e:	2200      	movs	r2, #0
 8007130:	210f      	movs	r1, #15
 8007132:	f06f 0001 	mvn.w	r0, #1
 8007136:	f7f9 f94f 	bl	80003d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	40021000 	.word	0x40021000

08007148 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08c      	sub	sp, #48	; 0x30
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8007158:	2200      	movs	r2, #0
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	2019      	movs	r0, #25
 800715e:	f7f9 f93b 	bl	80003d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8007162:	2019      	movs	r0, #25
 8007164:	f7f9 f964 	bl	8000430 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007168:	4b1e      	ldr	r3, [pc, #120]	; (80071e4 <HAL_InitTick+0x9c>)
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	4a1d      	ldr	r2, [pc, #116]	; (80071e4 <HAL_InitTick+0x9c>)
 800716e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007172:	6193      	str	r3, [r2, #24]
 8007174:	4b1b      	ldr	r3, [pc, #108]	; (80071e4 <HAL_InitTick+0x9c>)
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007180:	f107 0210 	add.w	r2, r7, #16
 8007184:	f107 0314 	add.w	r3, r7, #20
 8007188:	4611      	mov	r1, r2
 800718a:	4618      	mov	r0, r3
 800718c:	f7fb f88c 	bl	80022a8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007190:	f7fb f868 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8007194:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	4a13      	ldr	r2, [pc, #76]	; (80071e8 <HAL_InitTick+0xa0>)
 800719a:	fba2 2303 	umull	r2, r3, r2, r3
 800719e:	0c9b      	lsrs	r3, r3, #18
 80071a0:	3b01      	subs	r3, #1
 80071a2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80071a4:	4b11      	ldr	r3, [pc, #68]	; (80071ec <HAL_InitTick+0xa4>)
 80071a6:	4a12      	ldr	r2, [pc, #72]	; (80071f0 <HAL_InitTick+0xa8>)
 80071a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80071aa:	4b10      	ldr	r3, [pc, #64]	; (80071ec <HAL_InitTick+0xa4>)
 80071ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80071b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80071b2:	4a0e      	ldr	r2, [pc, #56]	; (80071ec <HAL_InitTick+0xa4>)
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80071b8:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <HAL_InitTick+0xa4>)
 80071ba:	2200      	movs	r2, #0
 80071bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071be:	4b0b      	ldr	r3, [pc, #44]	; (80071ec <HAL_InitTick+0xa4>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80071c4:	4809      	ldr	r0, [pc, #36]	; (80071ec <HAL_InitTick+0xa4>)
 80071c6:	f7fb fa3d 	bl	8002644 <HAL_TIM_Base_Init>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d104      	bne.n	80071da <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80071d0:	4806      	ldr	r0, [pc, #24]	; (80071ec <HAL_InitTick+0xa4>)
 80071d2:	f7fb fad5 	bl	8002780 <HAL_TIM_Base_Start_IT>
 80071d6:	4603      	mov	r3, r0
 80071d8:	e000      	b.n	80071dc <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3730      	adds	r7, #48	; 0x30
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	40021000 	.word	0x40021000
 80071e8:	431bde83 	.word	0x431bde83
 80071ec:	20001a10 	.word	0x20001a10
 80071f0:	40012c00 	.word	0x40012c00

080071f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80071f8:	bf00      	nop
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007202:	b480      	push	{r7}
 8007204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007206:	e7fe      	b.n	8007206 <HardFault_Handler+0x4>

08007208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800720c:	e7fe      	b.n	800720c <MemManage_Handler+0x4>

0800720e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800720e:	b480      	push	{r7}
 8007210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007212:	e7fe      	b.n	8007212 <BusFault_Handler+0x4>

08007214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007214:	b480      	push	{r7}
 8007216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007218:	e7fe      	b.n	8007218 <UsageFault_Handler+0x4>

0800721a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800721a:	b480      	push	{r7}
 800721c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800721e:	bf00      	nop
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800722c:	4802      	ldr	r0, [pc, #8]	; (8007238 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800722e:	f7fb faff 	bl	8002830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007232:	bf00      	nop
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20001a10 	.word	0x20001a10

0800723c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007240:	4802      	ldr	r0, [pc, #8]	; (800724c <USART2_IRQHandler+0x10>)
 8007242:	f7fb fdef 	bl	8002e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007246:	bf00      	nop
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20001a50 	.word	0x20001a50

08007250 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007254:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007258:	f7f9 fd1c 	bl	8000c94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800725c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007260:	f7f9 fd18 	bl	8000c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007264:	bf00      	nop
 8007266:	bd80      	pop	{r7, pc}

08007268 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800726c:	4b08      	ldr	r3, [pc, #32]	; (8007290 <SystemInit+0x28>)
 800726e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007272:	4a07      	ldr	r2, [pc, #28]	; (8007290 <SystemInit+0x28>)
 8007274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800727c:	4b04      	ldr	r3, [pc, #16]	; (8007290 <SystemInit+0x28>)
 800727e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007282:	609a      	str	r2, [r3, #8]
#endif
}
 8007284:	bf00      	nop
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	e000ed00 	.word	0xe000ed00

08007294 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
#include "cmsis_os2.h"
extern osThreadId_t measureTaskHandle;
/*Called if buffer is full! So make sure you are using the right buffer size for controll
 * commands*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(measureTaskHandle, 0x1);
 800729c:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <HAL_UART_RxCpltCallback+0x20>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2101      	movs	r1, #1
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fc fd30 	bl	8003d08 <osThreadFlagsSet>
	__NOP();
 80072a8:	bf00      	nop
}
 80072aa:	bf00      	nop
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	200019a0 	.word	0x200019a0

080072b8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	//Disabled in DataHandler Thread
	HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80072c0:	2012      	movs	r0, #18
 80072c2:	f7f9 f8b5 	bl	8000430 <HAL_NVIC_EnableIRQ>
	__NOP();
 80072c6:	bf00      	nop
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80072d4:	4b14      	ldr	r3, [pc, #80]	; (8007328 <MX_USART2_UART_Init+0x58>)
 80072d6:	4a15      	ldr	r2, [pc, #84]	; (800732c <MX_USART2_UART_Init+0x5c>)
 80072d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 80072da:	4b13      	ldr	r3, [pc, #76]	; (8007328 <MX_USART2_UART_Init+0x58>)
 80072dc:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80072e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80072e2:	4b11      	ldr	r3, [pc, #68]	; (8007328 <MX_USART2_UART_Init+0x58>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80072e8:	4b0f      	ldr	r3, [pc, #60]	; (8007328 <MX_USART2_UART_Init+0x58>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80072ee:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <MX_USART2_UART_Init+0x58>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80072f4:	4b0c      	ldr	r3, [pc, #48]	; (8007328 <MX_USART2_UART_Init+0x58>)
 80072f6:	220c      	movs	r2, #12
 80072f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80072fa:	4b0b      	ldr	r3, [pc, #44]	; (8007328 <MX_USART2_UART_Init+0x58>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007300:	4b09      	ldr	r3, [pc, #36]	; (8007328 <MX_USART2_UART_Init+0x58>)
 8007302:	2200      	movs	r2, #0
 8007304:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007306:	4b08      	ldr	r3, [pc, #32]	; (8007328 <MX_USART2_UART_Init+0x58>)
 8007308:	2200      	movs	r2, #0
 800730a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800730c:	4b06      	ldr	r3, [pc, #24]	; (8007328 <MX_USART2_UART_Init+0x58>)
 800730e:	2200      	movs	r2, #0
 8007310:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007312:	4805      	ldr	r0, [pc, #20]	; (8007328 <MX_USART2_UART_Init+0x58>)
 8007314:	f7fb fc60 	bl	8002bd8 <HAL_UART_Init>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800731e:	f7ff fe57 	bl	8006fd0 <Error_Handler>
  }

}
 8007322:	bf00      	nop
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20001a50 	.word	0x20001a50
 800732c:	40004400 	.word	0x40004400

08007330 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08a      	sub	sp, #40	; 0x28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007338:	f107 0314 	add.w	r3, r7, #20
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	605a      	str	r2, [r3, #4]
 8007342:	609a      	str	r2, [r3, #8]
 8007344:	60da      	str	r2, [r3, #12]
 8007346:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a1b      	ldr	r2, [pc, #108]	; (80073bc <HAL_UART_MspInit+0x8c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d130      	bne.n	80073b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007352:	4b1b      	ldr	r3, [pc, #108]	; (80073c0 <HAL_UART_MspInit+0x90>)
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	4a1a      	ldr	r2, [pc, #104]	; (80073c0 <HAL_UART_MspInit+0x90>)
 8007358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800735c:	61d3      	str	r3, [r2, #28]
 800735e:	4b18      	ldr	r3, [pc, #96]	; (80073c0 <HAL_UART_MspInit+0x90>)
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007366:	613b      	str	r3, [r7, #16]
 8007368:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800736a:	4b15      	ldr	r3, [pc, #84]	; (80073c0 <HAL_UART_MspInit+0x90>)
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	4a14      	ldr	r2, [pc, #80]	; (80073c0 <HAL_UART_MspInit+0x90>)
 8007370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007374:	6153      	str	r3, [r2, #20]
 8007376:	4b12      	ldr	r3, [pc, #72]	; (80073c0 <HAL_UART_MspInit+0x90>)
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007382:	230c      	movs	r3, #12
 8007384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007386:	2302      	movs	r3, #2
 8007388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800738a:	2300      	movs	r3, #0
 800738c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800738e:	2300      	movs	r3, #0
 8007390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007392:	2307      	movs	r3, #7
 8007394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007396:	f107 0314 	add.w	r3, r7, #20
 800739a:	4619      	mov	r1, r3
 800739c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80073a0:	f7f9 f9ec 	bl	800077c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80073a4:	2200      	movs	r2, #0
 80073a6:	2105      	movs	r1, #5
 80073a8:	2026      	movs	r0, #38	; 0x26
 80073aa:	f7f9 f815 	bl	80003d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80073ae:	2026      	movs	r0, #38	; 0x26
 80073b0:	f7f9 f83e 	bl	8000430 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80073b4:	bf00      	nop
 80073b6:	3728      	adds	r7, #40	; 0x28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	40004400 	.word	0x40004400
 80073c0:	40021000 	.word	0x40021000

080073c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80073c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80073fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80073c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80073ca:	e003      	b.n	80073d4 <LoopCopyDataInit>

080073cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80073cc:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80073ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80073d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80073d2:	3104      	adds	r1, #4

080073d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80073d4:	480b      	ldr	r0, [pc, #44]	; (8007404 <LoopForever+0xa>)
	ldr	r3, =_edata
 80073d6:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <LoopForever+0xe>)
	adds	r2, r0, r1
 80073d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80073da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80073dc:	d3f6      	bcc.n	80073cc <CopyDataInit>
	ldr	r2, =_sbss
 80073de:	4a0b      	ldr	r2, [pc, #44]	; (800740c <LoopForever+0x12>)
	b	LoopFillZerobss
 80073e0:	e002      	b.n	80073e8 <LoopFillZerobss>

080073e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80073e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80073e4:	f842 3b04 	str.w	r3, [r2], #4

080073e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80073e8:	4b09      	ldr	r3, [pc, #36]	; (8007410 <LoopForever+0x16>)
	cmp	r2, r3
 80073ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80073ec:	d3f9      	bcc.n	80073e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80073ee:	f7ff ff3b 	bl	8007268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80073f2:	f000 f811 	bl	8007418 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80073f6:	f7ff fd7f 	bl	8006ef8 <main>

080073fa <LoopForever>:

LoopForever:
    b LoopForever
 80073fa:	e7fe      	b.n	80073fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80073fc:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8007400:	08007780 	.word	0x08007780
	ldr	r0, =_sdata
 8007404:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007408:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800740c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8007410:	20001ad0 	.word	0x20001ad0

08007414 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007414:	e7fe      	b.n	8007414 <ADC1_IRQHandler>
	...

08007418 <__libc_init_array>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	4e0d      	ldr	r6, [pc, #52]	; (8007450 <__libc_init_array+0x38>)
 800741c:	4c0d      	ldr	r4, [pc, #52]	; (8007454 <__libc_init_array+0x3c>)
 800741e:	1ba4      	subs	r4, r4, r6
 8007420:	10a4      	asrs	r4, r4, #2
 8007422:	2500      	movs	r5, #0
 8007424:	42a5      	cmp	r5, r4
 8007426:	d109      	bne.n	800743c <__libc_init_array+0x24>
 8007428:	4e0b      	ldr	r6, [pc, #44]	; (8007458 <__libc_init_array+0x40>)
 800742a:	4c0c      	ldr	r4, [pc, #48]	; (800745c <__libc_init_array+0x44>)
 800742c:	f000 f82c 	bl	8007488 <_init>
 8007430:	1ba4      	subs	r4, r4, r6
 8007432:	10a4      	asrs	r4, r4, #2
 8007434:	2500      	movs	r5, #0
 8007436:	42a5      	cmp	r5, r4
 8007438:	d105      	bne.n	8007446 <__libc_init_array+0x2e>
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007440:	4798      	blx	r3
 8007442:	3501      	adds	r5, #1
 8007444:	e7ee      	b.n	8007424 <__libc_init_array+0xc>
 8007446:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800744a:	4798      	blx	r3
 800744c:	3501      	adds	r5, #1
 800744e:	e7f2      	b.n	8007436 <__libc_init_array+0x1e>
 8007450:	08007778 	.word	0x08007778
 8007454:	08007778 	.word	0x08007778
 8007458:	08007778 	.word	0x08007778
 800745c:	0800777c 	.word	0x0800777c

08007460 <memcpy>:
 8007460:	b510      	push	{r4, lr}
 8007462:	1e43      	subs	r3, r0, #1
 8007464:	440a      	add	r2, r1
 8007466:	4291      	cmp	r1, r2
 8007468:	d100      	bne.n	800746c <memcpy+0xc>
 800746a:	bd10      	pop	{r4, pc}
 800746c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007470:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007474:	e7f7      	b.n	8007466 <memcpy+0x6>

08007476 <memset>:
 8007476:	4402      	add	r2, r0
 8007478:	4603      	mov	r3, r0
 800747a:	4293      	cmp	r3, r2
 800747c:	d100      	bne.n	8007480 <memset+0xa>
 800747e:	4770      	bx	lr
 8007480:	f803 1b01 	strb.w	r1, [r3], #1
 8007484:	e7f9      	b.n	800747a <memset+0x4>
	...

08007488 <_init>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr

08007494 <_fini>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	bf00      	nop
 8007498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749a:	bc08      	pop	{r3}
 800749c:	469e      	mov	lr, r3
 800749e:	4770      	bx	lr
