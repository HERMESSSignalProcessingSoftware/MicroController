
STAMPTEst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08008854  08008854  00018854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b54  08008b54  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008b54  08008b54  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b54  08008b54  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b54  08008b54  00018b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b58  08008b58  00018b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a98  20000074  08008bd0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b0c  08008bd0  00021b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cef0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037de  00000000  00000000  0003cf94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015b0  00000000  00000000  00040778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013f8  00000000  00000000  00041d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bedc  00000000  00000000  00043120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015996  00000000  00000000  0005effc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009caa9  00000000  00000000  00074992  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011143b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c88  00000000  00000000  001114b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800883c 	.word	0x0800883c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800883c 	.word	0x0800883c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <HAL_Init+0x28>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <HAL_Init+0x28>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000290:	2003      	movs	r0, #3
 8000292:	f001 fb41 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000296:	2000      	movs	r0, #0
 8000298:	f007 fd26 	bl	8007ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800029c:	f007 fcfc 	bl	8007c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40022000 	.word	0x40022000

080002ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <HAL_IncTick+0x20>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	461a      	mov	r2, r3
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <HAL_IncTick+0x24>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4413      	add	r3, r2
 80002bc:	4a04      	ldr	r2, [pc, #16]	; (80002d0 <HAL_IncTick+0x24>)
 80002be:	6013      	str	r3, [r2, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000004 	.word	0x20000004
 80002d0:	200019a4 	.word	0x200019a4

080002d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <HAL_GetTick+0x14>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	200019a4 	.word	0x200019a4

080002ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b09a      	sub	sp, #104	; 0x68
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000330:	2300      	movs	r3, #0
 8000332:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000336:	2300      	movs	r3, #0
 8000338:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800033a:	2300      	movs	r3, #0
 800033c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d101      	bne.n	8000348 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000344:	2301      	movs	r3, #1
 8000346:	e274      	b.n	8000832 <HAL_ADC_Init+0x50a>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000350:	d003      	beq.n	800035a <HAL_ADC_Init+0x32>
 8000352:	21f9      	movs	r1, #249	; 0xf9
 8000354:	4882      	ldr	r0, [pc, #520]	; (8000560 <HAL_ADC_Init+0x238>)
 8000356:	f007 fc94 	bl	8007c82 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d012      	beq.n	8000388 <HAL_ADC_Init+0x60>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800036a:	d00d      	beq.n	8000388 <HAL_ADC_Init+0x60>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000374:	d008      	beq.n	8000388 <HAL_ADC_Init+0x60>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800037e:	d003      	beq.n	8000388 <HAL_ADC_Init+0x60>
 8000380:	21fa      	movs	r1, #250	; 0xfa
 8000382:	4877      	ldr	r0, [pc, #476]	; (8000560 <HAL_ADC_Init+0x238>)
 8000384:	f007 fc7d 	bl	8007c82 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d00f      	beq.n	80003b0 <HAL_ADC_Init+0x88>
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	2b08      	cmp	r3, #8
 8000396:	d00b      	beq.n	80003b0 <HAL_ADC_Init+0x88>
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	2b10      	cmp	r3, #16
 800039e:	d007      	beq.n	80003b0 <HAL_ADC_Init+0x88>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	2b18      	cmp	r3, #24
 80003a6:	d003      	beq.n	80003b0 <HAL_ADC_Init+0x88>
 80003a8:	21fb      	movs	r1, #251	; 0xfb
 80003aa:	486d      	ldr	r0, [pc, #436]	; (8000560 <HAL_ADC_Init+0x238>)
 80003ac:	f007 fc69 	bl	8007c82 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d007      	beq.n	80003c8 <HAL_ADC_Init+0xa0>
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	68db      	ldr	r3, [r3, #12]
 80003bc:	2b20      	cmp	r3, #32
 80003be:	d003      	beq.n	80003c8 <HAL_ADC_Init+0xa0>
 80003c0:	21fc      	movs	r1, #252	; 0xfc
 80003c2:	4867      	ldr	r0, [pc, #412]	; (8000560 <HAL_ADC_Init+0x238>)
 80003c4:	f007 fc5d 	bl	8007c82 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	691b      	ldr	r3, [r3, #16]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d007      	beq.n	80003e0 <HAL_ADC_Init+0xb8>
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d003      	beq.n	80003e0 <HAL_ADC_Init+0xb8>
 80003d8:	21fd      	movs	r1, #253	; 0xfd
 80003da:	4861      	ldr	r0, [pc, #388]	; (8000560 <HAL_ADC_Init+0x238>)
 80003dc:	f007 fc51 	bl	8007c82 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	7e5b      	ldrb	r3, [r3, #25]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d007      	beq.n	80003f8 <HAL_ADC_Init+0xd0>
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	7e5b      	ldrb	r3, [r3, #25]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d003      	beq.n	80003f8 <HAL_ADC_Init+0xd0>
 80003f0:	21fe      	movs	r1, #254	; 0xfe
 80003f2:	485b      	ldr	r0, [pc, #364]	; (8000560 <HAL_ADC_Init+0x238>)
 80003f4:	f007 fc45 	bl	8007c82 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d012      	beq.n	8000426 <HAL_ADC_Init+0xfe>
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000408:	d00d      	beq.n	8000426 <HAL_ADC_Init+0xfe>
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800040e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000412:	d008      	beq.n	8000426 <HAL_ADC_Init+0xfe>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000418:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800041c:	d003      	beq.n	8000426 <HAL_ADC_Init+0xfe>
 800041e:	21ff      	movs	r1, #255	; 0xff
 8000420:	484f      	ldr	r0, [pc, #316]	; (8000560 <HAL_ADC_Init+0x238>)
 8000422:	f007 fc2e 	bl	8007c82 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800042a:	2b00      	cmp	r3, #0
 800042c:	d02e      	beq.n	800048c <HAL_ADC_Init+0x164>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000432:	2b40      	cmp	r3, #64	; 0x40
 8000434:	d02a      	beq.n	800048c <HAL_ADC_Init+0x164>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800043a:	2b80      	cmp	r3, #128	; 0x80
 800043c:	d026      	beq.n	800048c <HAL_ADC_Init+0x164>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000442:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000446:	d021      	beq.n	800048c <HAL_ADC_Init+0x164>
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800044c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000450:	d01c      	beq.n	800048c <HAL_ADC_Init+0x164>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000456:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800045a:	d017      	beq.n	800048c <HAL_ADC_Init+0x164>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000460:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000464:	d012      	beq.n	800048c <HAL_ADC_Init+0x164>
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800046a:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 800046e:	d00d      	beq.n	800048c <HAL_ADC_Init+0x164>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000474:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000478:	d008      	beq.n	800048c <HAL_ADC_Init+0x164>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800047e:	2b01      	cmp	r3, #1
 8000480:	d004      	beq.n	800048c <HAL_ADC_Init+0x164>
 8000482:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000486:	4836      	ldr	r0, [pc, #216]	; (8000560 <HAL_ADC_Init+0x238>)
 8000488:	f007 fbfb 	bl	8007c82 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000492:	2b00      	cmp	r3, #0
 8000494:	d009      	beq.n	80004aa <HAL_ADC_Init+0x182>
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800049c:	2b01      	cmp	r3, #1
 800049e:	d004      	beq.n	80004aa <HAL_ADC_Init+0x182>
 80004a0:	f240 1101 	movw	r1, #257	; 0x101
 80004a4:	482e      	ldr	r0, [pc, #184]	; (8000560 <HAL_ADC_Init+0x238>)
 80004a6:	f007 fbec 	bl	8007c82 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	2b04      	cmp	r3, #4
 80004b0:	d008      	beq.n	80004c4 <HAL_ADC_Init+0x19c>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	2b08      	cmp	r3, #8
 80004b8:	d004      	beq.n	80004c4 <HAL_ADC_Init+0x19c>
 80004ba:	f44f 7181 	mov.w	r1, #258	; 0x102
 80004be:	4828      	ldr	r0, [pc, #160]	; (8000560 <HAL_ADC_Init+0x238>)
 80004c0:	f007 fbdf 	bl	8007c82 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d008      	beq.n	80004de <HAL_ADC_Init+0x1b6>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d004      	beq.n	80004de <HAL_ADC_Init+0x1b6>
 80004d4:	f240 1103 	movw	r1, #259	; 0x103
 80004d8:	4821      	ldr	r0, [pc, #132]	; (8000560 <HAL_ADC_Init+0x238>)
 80004da:	f007 fbd2 	bl	8007c82 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	7e1b      	ldrb	r3, [r3, #24]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d008      	beq.n	80004f8 <HAL_ADC_Init+0x1d0>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	7e1b      	ldrb	r3, [r3, #24]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d004      	beq.n	80004f8 <HAL_ADC_Init+0x1d0>
 80004ee:	f44f 7182 	mov.w	r1, #260	; 0x104
 80004f2:	481b      	ldr	r0, [pc, #108]	; (8000560 <HAL_ADC_Init+0x238>)
 80004f4:	f007 fbc5 	bl	8007c82 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	691b      	ldr	r3, [r3, #16]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d031      	beq.n	8000564 <HAL_ADC_Init+0x23c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	69db      	ldr	r3, [r3, #28]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d003      	beq.n	8000510 <HAL_ADC_Init+0x1e8>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	69db      	ldr	r3, [r3, #28]
 800050c:	2b10      	cmp	r3, #16
 800050e:	d904      	bls.n	800051a <HAL_ADC_Init+0x1f2>
 8000510:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000514:	4812      	ldr	r0, [pc, #72]	; (8000560 <HAL_ADC_Init+0x238>)
 8000516:	f007 fbb4 	bl	8007c82 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d009      	beq.n	8000538 <HAL_ADC_Init+0x210>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d004      	beq.n	8000538 <HAL_ADC_Init+0x210>
 800052e:	f240 1109 	movw	r1, #265	; 0x109
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <HAL_ADC_Init+0x238>)
 8000534:	f007 fba5 	bl	8007c82 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d010      	beq.n	8000564 <HAL_ADC_Init+0x23c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000546:	2b00      	cmp	r3, #0
 8000548:	d003      	beq.n	8000552 <HAL_ADC_Init+0x22a>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800054e:	2b08      	cmp	r3, #8
 8000550:	d908      	bls.n	8000564 <HAL_ADC_Init+0x23c>
 8000552:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8000556:	4802      	ldr	r0, [pc, #8]	; (8000560 <HAL_ADC_Init+0x238>)
 8000558:	f007 fb93 	bl	8007c82 <assert_failed>
 800055c:	e002      	b.n	8000564 <HAL_ADC_Init+0x23c>
 800055e:	bf00      	nop
 8000560:	08008854 	.word	0x08008854
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 0310 	and.w	r3, r3, #16
 800056c:	2b00      	cmp	r3, #0
 800056e:	d176      	bne.n	800065e <HAL_ADC_Init+0x336>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	2b00      	cmp	r3, #0
 8000576:	d152      	bne.n	800061e <HAL_ADC_Init+0x2f6>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2200      	movs	r2, #0
 800057c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f007 f96e 	bl	8007874 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d13b      	bne.n	800061e <HAL_ADC_Init+0x2f6>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f001 f8a8 	bl	80016fc <ADC_Disable>
 80005ac:	4603      	mov	r3, r0
 80005ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b6:	f003 0310 	and.w	r3, r3, #16
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d12f      	bne.n	800061e <HAL_ADC_Init+0x2f6>
 80005be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d12b      	bne.n	800061e <HAL_ADC_Init+0x2f6>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005ce:	f023 0302 	bic.w	r3, r3, #2
 80005d2:	f043 0202 	orr.w	r2, r3, #2
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80005e8:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005f8:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80005fa:	4b90      	ldr	r3, [pc, #576]	; (800083c <HAL_ADC_Init+0x514>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a90      	ldr	r2, [pc, #576]	; (8000840 <HAL_ADC_Init+0x518>)
 8000600:	fba2 2303 	umull	r2, r3, r2, r3
 8000604:	0c9a      	lsrs	r2, r3, #18
 8000606:	4613      	mov	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	4413      	add	r3, r2
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000610:	e002      	b.n	8000618 <HAL_ADC_Init+0x2f0>
          {
            wait_loop_index--;
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	3b01      	subs	r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f9      	bne.n	8000612 <HAL_ADC_Init+0x2ea>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	2b00      	cmp	r3, #0
 800062a:	d007      	beq.n	800063c <HAL_ADC_Init+0x314>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800063a:	d110      	bne.n	800065e <HAL_ADC_Init+0x336>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f023 0312 	bic.w	r3, r3, #18
 8000644:	f043 0210 	orr.w	r2, r3, #16
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000650:	f043 0201 	orr.w	r2, r3, #1
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	f003 0310 	and.w	r3, r3, #16
 8000666:	2b00      	cmp	r3, #0
 8000668:	f040 80d6 	bne.w	8000818 <HAL_ADC_Init+0x4f0>
 800066c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000670:	2b00      	cmp	r3, #0
 8000672:	f040 80d1 	bne.w	8000818 <HAL_ADC_Init+0x4f0>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000680:	2b00      	cmp	r3, #0
 8000682:	f040 80c9 	bne.w	8000818 <HAL_ADC_Init+0x4f0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800068e:	f043 0202 	orr.w	r2, r3, #2
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000696:	4b6b      	ldr	r3, [pc, #428]	; (8000844 <HAL_ADC_Init+0x51c>)
 8000698:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	f003 0303 	and.w	r3, r3, #3
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d108      	bne.n	80006be <HAL_ADC_Init+0x396>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d101      	bne.n	80006be <HAL_ADC_Init+0x396>
 80006ba:	2301      	movs	r3, #1
 80006bc:	e000      	b.n	80006c0 <HAL_ADC_Init+0x398>
 80006be:	2300      	movs	r3, #0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d11c      	bne.n	80006fe <HAL_ADC_Init+0x3d6>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80006c4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d010      	beq.n	80006ec <HAL_ADC_Init+0x3c4>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	f003 0303 	and.w	r3, r3, #3
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d107      	bne.n	80006e6 <HAL_ADC_Init+0x3be>
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d101      	bne.n	80006e6 <HAL_ADC_Init+0x3be>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <HAL_ADC_Init+0x3c0>
 80006e6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d108      	bne.n	80006fe <HAL_ADC_Init+0x3d6>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80006ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	431a      	orrs	r2, r3
 80006fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006fc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	7e5b      	ldrb	r3, [r3, #25]
 8000702:	035b      	lsls	r3, r3, #13
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000708:	2a01      	cmp	r2, #1
 800070a:	d002      	beq.n	8000712 <HAL_ADC_Init+0x3ea>
 800070c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000710:	e000      	b.n	8000714 <HAL_ADC_Init+0x3ec>
 8000712:	2200      	movs	r2, #0
 8000714:	431a      	orrs	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	68db      	ldr	r3, [r3, #12]
 800071a:	431a      	orrs	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	4313      	orrs	r3, r2
 8000722:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000724:	4313      	orrs	r3, r2
 8000726:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d11b      	bne.n	800076a <HAL_ADC_Init+0x442>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7e5b      	ldrb	r3, [r3, #25]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d109      	bne.n	800074e <HAL_ADC_Init+0x426>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073e:	3b01      	subs	r3, #1
 8000740:	045a      	lsls	r2, r3, #17
 8000742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000744:	4313      	orrs	r3, r2
 8000746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800074a:	663b      	str	r3, [r7, #96]	; 0x60
 800074c:	e00d      	b.n	800076a <HAL_ADC_Init+0x442>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000756:	f043 0220 	orr.w	r2, r3, #32
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	f043 0201 	orr.w	r2, r3, #1
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800076e:	2b01      	cmp	r3, #1
 8000770:	d007      	beq.n	8000782 <HAL_ADC_Init+0x45a>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077a:	4313      	orrs	r3, r2
 800077c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800077e:	4313      	orrs	r3, r2
 8000780:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	f003 030c 	and.w	r3, r3, #12
 800078c:	2b00      	cmp	r3, #0
 800078e:	d114      	bne.n	80007ba <HAL_ADC_Init+0x492>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	6812      	ldr	r2, [r2, #0]
 800079a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800079e:	f023 0302 	bic.w	r3, r3, #2
 80007a2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	7e1b      	ldrb	r3, [r3, #24]
 80007a8:	039a      	lsls	r2, r3, #14
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	4313      	orrs	r3, r2
 80007b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80007b6:	4313      	orrs	r3, r2
 80007b8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	68da      	ldr	r2, [r3, #12]
 80007c0:	4b21      	ldr	r3, [pc, #132]	; (8000848 <HAL_ADC_Init+0x520>)
 80007c2:	4013      	ands	r3, r2
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	6812      	ldr	r2, [r2, #0]
 80007c8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80007ca:	430b      	orrs	r3, r1
 80007cc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d10c      	bne.n	80007f0 <HAL_ADC_Init+0x4c8>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	f023 010f 	bic.w	r1, r3, #15
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	69db      	ldr	r3, [r3, #28]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	430a      	orrs	r2, r1
 80007ec:	631a      	str	r2, [r3, #48]	; 0x30
 80007ee:	e007      	b.n	8000800 <HAL_ADC_Init+0x4d8>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f022 020f 	bic.w	r2, r2, #15
 80007fe:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f023 0303 	bic.w	r3, r3, #3
 800080e:	f043 0201 	orr.w	r2, r3, #1
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	641a      	str	r2, [r3, #64]	; 0x40
 8000816:	e00a      	b.n	800082e <HAL_ADC_Init+0x506>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f023 0312 	bic.w	r3, r3, #18
 8000820:	f043 0210 	orr.w	r2, r3, #16
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000828:	2301      	movs	r3, #1
 800082a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800082e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000832:	4618      	mov	r0, r3
 8000834:	3768      	adds	r7, #104	; 0x68
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000000c 	.word	0x2000000c
 8000840:	431bde83 	.word	0x431bde83
 8000844:	50000300 	.word	0x50000300
 8000848:	fff0c007 	.word	0xfff0c007

0800084c <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000854:	2300      	movs	r3, #0
 8000856:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000860:	d004      	beq.n	800086c <HAL_ADC_Start_IT+0x20>
 8000862:	f240 71f7 	movw	r1, #2039	; 0x7f7
 8000866:	484a      	ldr	r0, [pc, #296]	; (8000990 <HAL_ADC_Start_IT+0x144>)
 8000868:	f007 fa0b 	bl	8007c82 <assert_failed>
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	2b00      	cmp	r3, #0
 8000878:	f040 8083 	bne.w	8000982 <HAL_ADC_Start_IT+0x136>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000882:	2b01      	cmp	r3, #1
 8000884:	d101      	bne.n	800088a <HAL_ADC_Start_IT+0x3e>
 8000886:	2302      	movs	r3, #2
 8000888:	e07e      	b.n	8000988 <HAL_ADC_Start_IT+0x13c>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2201      	movs	r2, #1
 800088e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f000 fed4 	bl	8001640 <ADC_Enable>
 8000898:	4603      	mov	r3, r0
 800089a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d16a      	bne.n	8000978 <HAL_ADC_Start_IT+0x12c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80008aa:	f023 0301 	bic.w	r3, r3, #1
 80008ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d007      	beq.n	80008e0 <HAL_ADC_Start_IT+0x94>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008ec:	d106      	bne.n	80008fc <HAL_ADC_Start_IT+0xb0>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f023 0206 	bic.w	r2, r3, #6
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	645a      	str	r2, [r3, #68]	; 0x44
 80008fa:	e002      	b.n	8000902 <HAL_ADC_Start_IT+0xb6>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	221c      	movs	r2, #28
 8000910:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	2b08      	cmp	r3, #8
 8000918:	d110      	bne.n	800093c <HAL_ADC_Start_IT+0xf0>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	685a      	ldr	r2, [r3, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f022 0204 	bic.w	r2, r2, #4
 8000928:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f042 0208 	orr.w	r2, r2, #8
 8000938:	605a      	str	r2, [r3, #4]
          break;
 800093a:	e008      	b.n	800094e <HAL_ADC_Start_IT+0x102>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	685a      	ldr	r2, [r3, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f042 020c 	orr.w	r2, r2, #12
 800094a:	605a      	str	r2, [r3, #4]
          break;
 800094c:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000952:	2b01      	cmp	r3, #1
 8000954:	d107      	bne.n	8000966 <HAL_ADC_Start_IT+0x11a>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	685a      	ldr	r2, [r3, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f022 0210 	bic.w	r2, r2, #16
 8000964:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f042 0204 	orr.w	r2, r2, #4
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	e006      	b.n	8000986 <HAL_ADC_Start_IT+0x13a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000980:	e001      	b.n	8000986 <HAL_ADC_Start_IT+0x13a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000982:	2302      	movs	r3, #2
 8000984:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000986:	7bfb      	ldrb	r3, [r7, #15]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	08008854 	.word	0x08008854

08000994 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009a4:	d004      	beq.n	80009b0 <HAL_ADC_GetValue+0x1c>
 80009a6:	f640 21f1 	movw	r1, #2801	; 0xaf1
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <HAL_ADC_GetValue+0x2c>)
 80009ac:	f007 f969 	bl	8007c82 <assert_failed>

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	08008854 	.word	0x08008854

080009c4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009e0:	d004      	beq.n	80009ec <HAL_ADC_IRQHandler+0x28>
 80009e2:	f44f 6133 	mov.w	r1, #2864	; 0xb30
 80009e6:	4880      	ldr	r0, [pc, #512]	; (8000be8 <HAL_ADC_IRQHandler+0x224>)
 80009e8:	f007 f94b 	bl	8007c82 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	7e5b      	ldrb	r3, [r3, #25]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d008      	beq.n	8000a06 <HAL_ADC_IRQHandler+0x42>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7e5b      	ldrb	r3, [r3, #25]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d004      	beq.n	8000a06 <HAL_ADC_IRQHandler+0x42>
 80009fc:	f640 3131 	movw	r1, #2865	; 0xb31
 8000a00:	4879      	ldr	r0, [pc, #484]	; (8000be8 <HAL_ADC_IRQHandler+0x224>)
 8000a02:	f007 f93e 	bl	8007c82 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	d008      	beq.n	8000a20 <HAL_ADC_IRQHandler+0x5c>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	2b08      	cmp	r3, #8
 8000a14:	d004      	beq.n	8000a20 <HAL_ADC_IRQHandler+0x5c>
 8000a16:	f640 3132 	movw	r1, #2866	; 0xb32
 8000a1a:	4873      	ldr	r0, [pc, #460]	; (8000be8 <HAL_ADC_IRQHandler+0x224>)
 8000a1c:	f007 f931 	bl	8007c82 <assert_failed>
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	d106      	bne.n	8000a3c <HAL_ADC_IRQHandler+0x78>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	2b04      	cmp	r3, #4
 8000a3a:	d00d      	beq.n	8000a58 <HAL_ADC_IRQHandler+0x94>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000a46:	2b08      	cmp	r3, #8
 8000a48:	d15e      	bne.n	8000b08 <HAL_ADC_IRQHandler+0x144>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f003 0308 	and.w	r3, r3, #8
 8000a54:	2b08      	cmp	r3, #8
 8000a56:	d157      	bne.n	8000b08 <HAL_ADC_IRQHandler+0x144>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	f003 0310 	and.w	r3, r3, #16
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d105      	bne.n	8000a70 <HAL_ADC_IRQHandler+0xac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d139      	bne.n	8000afa <HAL_ADC_IRQHandler+0x136>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d134      	bne.n	8000afa <HAL_ADC_IRQHandler+0x136>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	2b08      	cmp	r3, #8
 8000a9c:	d12d      	bne.n	8000afa <HAL_ADC_IRQHandler+0x136>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d11a      	bne.n	8000ae2 <HAL_ADC_IRQHandler+0x11e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f022 020c 	bic.w	r2, r2, #12
 8000aba:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d112      	bne.n	8000afa <HAL_ADC_IRQHandler+0x136>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f043 0201 	orr.w	r2, r3, #1
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	641a      	str	r2, [r3, #64]	; 0x40
 8000ae0:	e00b      	b.n	8000afa <HAL_ADC_IRQHandler+0x136>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f043 0210 	orr.w	r2, r3, #16
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f043 0201 	orr.w	r2, r3, #1
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff fbf6 	bl	80002ec <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	220c      	movs	r2, #12
 8000b06:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0320 	and.w	r3, r3, #32
 8000b12:	2b20      	cmp	r3, #32
 8000b14:	d106      	bne.n	8000b24 <HAL_ADC_IRQHandler+0x160>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 0320 	and.w	r3, r3, #32
 8000b20:	2b20      	cmp	r3, #32
 8000b22:	d00d      	beq.n	8000b40 <HAL_ADC_IRQHandler+0x17c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000b2e:	2b40      	cmp	r3, #64	; 0x40
 8000b30:	d16f      	bne.n	8000c12 <HAL_ADC_IRQHandler+0x24e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3c:	2b40      	cmp	r3, #64	; 0x40
 8000b3e:	d168      	bne.n	8000c12 <HAL_ADC_IRQHandler+0x24e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d010      	beq.n	8000b84 <HAL_ADC_IRQHandler+0x1c0>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d14b      	bne.n	8000c04 <HAL_ADC_IRQHandler+0x240>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d144      	bne.n	8000c04 <HAL_ADC_IRQHandler+0x240>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d13f      	bne.n	8000c04 <HAL_ADC_IRQHandler+0x240>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b8e:	2b40      	cmp	r3, #64	; 0x40
 8000b90:	d138      	bne.n	8000c04 <HAL_ADC_IRQHandler+0x240>
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d12f      	bne.n	8000c04 <HAL_ADC_IRQHandler+0x240>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d11c      	bne.n	8000bec <HAL_ADC_IRQHandler+0x228>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000bc0:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d114      	bne.n	8000c04 <HAL_ADC_IRQHandler+0x240>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f043 0201 	orr.w	r2, r3, #1
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	641a      	str	r2, [r3, #64]	; 0x40
 8000be6:	e00d      	b.n	8000c04 <HAL_ADC_IRQHandler+0x240>
 8000be8:	08008854 	.word	0x08008854
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f043 0210 	orr.w	r2, r3, #16
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfc:	f043 0201 	orr.w	r2, r3, #1
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 f8cb 	bl	8000da0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2260      	movs	r2, #96	; 0x60
 8000c10:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1c:	2b80      	cmp	r3, #128	; 0x80
 8000c1e:	d113      	bne.n	8000c48 <HAL_ADC_IRQHandler+0x284>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2a:	2b80      	cmp	r3, #128	; 0x80
 8000c2c:	d10c      	bne.n	8000c48 <HAL_ADC_IRQHandler+0x284>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff fb60 	bl	8000300 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c56:	d115      	bne.n	8000c84 <HAL_ADC_IRQHandler+0x2c0>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c66:	d10d      	bne.n	8000c84 <HAL_ADC_IRQHandler+0x2c0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f000 f8a7 	bl	8000dc8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c82:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c92:	d115      	bne.n	8000cc0 <HAL_ADC_IRQHandler+0x2fc>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ca2:	d10d      	bne.n	8000cc0 <HAL_ADC_IRQHandler+0x2fc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f000 f893 	bl	8000ddc <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cbe:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0310 	and.w	r3, r3, #16
 8000cca:	2b10      	cmp	r3, #16
 8000ccc:	d13d      	bne.n	8000d4a <HAL_ADC_IRQHandler+0x386>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	2b10      	cmp	r3, #16
 8000cda:	d136      	bne.n	8000d4a <HAL_ADC_IRQHandler+0x386>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d102      	bne.n	8000cea <HAL_ADC_IRQHandler+0x326>
    {
      overrun_error = 1U;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e019      	b.n	8000d1e <HAL_ADC_IRQHandler+0x35a>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cea:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <HAL_ADC_IRQHandler+0x3d8>)
 8000cec:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 031f 	and.w	r3, r3, #31
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d109      	bne.n	8000d0e <HAL_ADC_IRQHandler+0x34a>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d10a      	bne.n	8000d1e <HAL_ADC_IRQHandler+0x35a>
        {
          overrun_error = 1U;  
 8000d08:	2301      	movs	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	e007      	b.n	8000d1e <HAL_ADC_IRQHandler+0x35a>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_ADC_IRQHandler+0x35a>
        {
          overrun_error = 1U;  
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d10e      	bne.n	8000d42 <HAL_ADC_IRQHandler+0x37e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	f043 0202 	orr.w	r2, r3, #2
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff fae9 	bl	8000314 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2210      	movs	r2, #16
 8000d48:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d58:	d11b      	bne.n	8000d92 <HAL_ADC_IRQHandler+0x3ce>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d68:	d113      	bne.n	8000d92 <HAL_ADC_IRQHandler+0x3ce>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f043 0208 	orr.w	r2, r3, #8
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d8a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 f811 	bl	8000db4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	50000300 	.word	0x50000300

08000da0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b09a      	sub	sp, #104	; 0x68
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e0c:	d004      	beq.n	8000e18 <HAL_ADC_ConfigChannel+0x28>
 8000e0e:	f241 517c 	movw	r1, #5500	; 0x157c
 8000e12:	4897      	ldr	r0, [pc, #604]	; (8001070 <HAL_ADC_ConfigChannel+0x280>)
 8000e14:	f006 ff35 	bl	8007c82 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d040      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d03c      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d038      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d034      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b05      	cmp	r3, #5
 8000e3e:	d030      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b06      	cmp	r3, #6
 8000e46:	d02c      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b07      	cmp	r3, #7
 8000e4e:	d028      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b08      	cmp	r3, #8
 8000e56:	d024      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b09      	cmp	r3, #9
 8000e5e:	d020      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b0a      	cmp	r3, #10
 8000e66:	d01c      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b0b      	cmp	r3, #11
 8000e6e:	d018      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b0c      	cmp	r3, #12
 8000e76:	d014      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b0d      	cmp	r3, #13
 8000e7e:	d010      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b0e      	cmp	r3, #14
 8000e86:	d00c      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d008      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b10      	cmp	r3, #16
 8000e96:	d004      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0xb2>
 8000e98:	f241 517d 	movw	r1, #5501	; 0x157d
 8000e9c:	4874      	ldr	r0, [pc, #464]	; (8001070 <HAL_ADC_ConfigChannel+0x280>)
 8000e9e:	f006 fef0 	bl	8007c82 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d020      	beq.n	8000eec <HAL_ADC_ConfigChannel+0xfc>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d01c      	beq.n	8000eec <HAL_ADC_ConfigChannel+0xfc>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d018      	beq.n	8000eec <HAL_ADC_ConfigChannel+0xfc>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d014      	beq.n	8000eec <HAL_ADC_ConfigChannel+0xfc>
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d010      	beq.n	8000eec <HAL_ADC_ConfigChannel+0xfc>
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	2b05      	cmp	r3, #5
 8000ed0:	d00c      	beq.n	8000eec <HAL_ADC_ConfigChannel+0xfc>
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d008      	beq.n	8000eec <HAL_ADC_ConfigChannel+0xfc>
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	2b07      	cmp	r3, #7
 8000ee0:	d004      	beq.n	8000eec <HAL_ADC_ConfigChannel+0xfc>
 8000ee2:	f241 517e 	movw	r1, #5502	; 0x157e
 8000ee6:	4862      	ldr	r0, [pc, #392]	; (8001070 <HAL_ADC_ConfigChannel+0x280>)
 8000ee8:	f006 fecb 	bl	8007c82 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d008      	beq.n	8000f06 <HAL_ADC_ConfigChannel+0x116>
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d004      	beq.n	8000f06 <HAL_ADC_ConfigChannel+0x116>
 8000efc:	f241 517f 	movw	r1, #5503	; 0x157f
 8000f00:	485b      	ldr	r0, [pc, #364]	; (8001070 <HAL_ADC_ConfigChannel+0x280>)
 8000f02:	f006 febe 	bl	8007c82 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d014      	beq.n	8000f38 <HAL_ADC_ConfigChannel+0x148>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d010      	beq.n	8000f38 <HAL_ADC_ConfigChannel+0x148>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d00c      	beq.n	8000f38 <HAL_ADC_ConfigChannel+0x148>
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d008      	beq.n	8000f38 <HAL_ADC_ConfigChannel+0x148>
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	d004      	beq.n	8000f38 <HAL_ADC_ConfigChannel+0x148>
 8000f2e:	f44f 51ac 	mov.w	r1, #5504	; 0x1580
 8000f32:	484f      	ldr	r0, [pc, #316]	; (8001070 <HAL_ADC_ConfigChannel+0x280>)
 8000f34:	f006 fea5 	bl	8007c82 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	f003 0318 	and.w	r3, r3, #24
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d104      	bne.n	8000f50 <HAL_ADC_ConfigChannel+0x160>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f4e:	d326      	bcc.n	8000f9e <HAL_ADC_ConfigChannel+0x1ae>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	f003 0318 	and.w	r3, r3, #24
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d104      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x178>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f66:	d31a      	bcc.n	8000f9e <HAL_ADC_ConfigChannel+0x1ae>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	f003 0318 	and.w	r3, r3, #24
 8000f72:	2b10      	cmp	r3, #16
 8000f74:	d103      	bne.n	8000f7e <HAL_ADC_ConfigChannel+0x18e>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	2bff      	cmp	r3, #255	; 0xff
 8000f7c:	d90f      	bls.n	8000f9e <HAL_ADC_ConfigChannel+0x1ae>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	f003 0318 	and.w	r3, r3, #24
 8000f88:	2b18      	cmp	r3, #24
 8000f8a:	d103      	bne.n	8000f94 <HAL_ADC_ConfigChannel+0x1a4>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	2b3f      	cmp	r3, #63	; 0x3f
 8000f92:	d904      	bls.n	8000f9e <HAL_ADC_ConfigChannel+0x1ae>
 8000f94:	f241 5181 	movw	r1, #5505	; 0x1581
 8000f98:	4835      	ldr	r0, [pc, #212]	; (8001070 <HAL_ADC_ConfigChannel+0x280>)
 8000f9a:	f006 fe72 	bl	8007c82 <assert_failed>
  
  
  /* Verification of channel number: Channels 1 to 14 are available in        */  
  /* differential mode. Channels 15U, 16U, 17U, 18 can be used only in           */
  /* single-ended mode.                                                       */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d066      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x284>
  {
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	f000 809f 	beq.w	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	f000 809a 	beq.w	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	f000 8095 	beq.w	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	f000 8090 	beq.w	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	f000 808b 	beq.w	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b06      	cmp	r3, #6
 8000fde:	f000 8086 	beq.w	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b07      	cmp	r3, #7
 8000fe8:	f000 8081 	beq.w	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d07c      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b09      	cmp	r3, #9
 8000ffa:	d078      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b0a      	cmp	r3, #10
 8001002:	d074      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b0b      	cmp	r3, #11
 800100a:	d070      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b0c      	cmp	r3, #12
 8001012:	d06c      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b0d      	cmp	r3, #13
 800101a:	d068      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b0e      	cmp	r3, #14
 8001022:	d064      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d060      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b10      	cmp	r3, #16
 8001032:	d05c      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b11      	cmp	r3, #17
 800103a:	d058      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b12      	cmp	r3, #18
 8001042:	d054      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d050      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b11      	cmp	r3, #17
 8001052:	d04c      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b11      	cmp	r3, #17
 800105a:	d048      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b11      	cmp	r3, #17
 8001062:	d044      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8001064:	f241 5189 	movw	r1, #5513	; 0x1589
 8001068:	4801      	ldr	r0, [pc, #4]	; (8001070 <HAL_ADC_ConfigChannel+0x280>)
 800106a:	f006 fe0a 	bl	8007c82 <assert_failed>
 800106e:	e03e      	b.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8001070:	08008854 	.word	0x08008854
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d038      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d034      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b03      	cmp	r3, #3
 800108a:	d030      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b04      	cmp	r3, #4
 8001092:	d02c      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b05      	cmp	r3, #5
 800109a:	d028      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b06      	cmp	r3, #6
 80010a2:	d024      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b07      	cmp	r3, #7
 80010aa:	d020      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d01c      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b09      	cmp	r3, #9
 80010ba:	d018      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b0a      	cmp	r3, #10
 80010c2:	d014      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b0b      	cmp	r3, #11
 80010ca:	d010      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b0c      	cmp	r3, #12
 80010d2:	d00c      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b0d      	cmp	r3, #13
 80010da:	d008      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b0e      	cmp	r3, #14
 80010e2:	d004      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x2fe>
 80010e4:	f241 518d 	movw	r1, #5517	; 0x158d
 80010e8:	489e      	ldr	r0, [pc, #632]	; (8001364 <HAL_ADC_ConfigChannel+0x574>)
 80010ea:	f006 fdca 	bl	8007c82 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d101      	bne.n	80010fc <HAL_ADC_ConfigChannel+0x30c>
 80010f8:	2302      	movs	r3, #2
 80010fa:	e297      	b.n	800162c <HAL_ADC_ConfigChannel+0x83c>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	2b00      	cmp	r3, #0
 8001110:	f040 827b 	bne.w	800160a <HAL_ADC_ConfigChannel+0x81a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b04      	cmp	r3, #4
 800111a:	d81c      	bhi.n	8001156 <HAL_ADC_ConfigChannel+0x366>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	461a      	mov	r2, r3
 8001130:	231f      	movs	r3, #31
 8001132:	4093      	lsls	r3, r2
 8001134:	43db      	mvns	r3, r3
 8001136:	4019      	ands	r1, r3
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa00 f203 	lsl.w	r2, r0, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	631a      	str	r2, [r3, #48]	; 0x30
 8001154:	e063      	b.n	800121e <HAL_ADC_ConfigChannel+0x42e>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b09      	cmp	r3, #9
 800115c:	d81e      	bhi.n	800119c <HAL_ADC_ConfigChannel+0x3ac>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	3b1e      	subs	r3, #30
 8001172:	221f      	movs	r2, #31
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	4019      	ands	r1, r3
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	3b1e      	subs	r3, #30
 800118e:	fa00 f203 	lsl.w	r2, r0, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	430a      	orrs	r2, r1
 8001198:	635a      	str	r2, [r3, #52]	; 0x34
 800119a:	e040      	b.n	800121e <HAL_ADC_ConfigChannel+0x42e>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b0e      	cmp	r3, #14
 80011a2:	d81e      	bhi.n	80011e2 <HAL_ADC_ConfigChannel+0x3f2>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	3b3c      	subs	r3, #60	; 0x3c
 80011b8:	221f      	movs	r2, #31
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	4019      	ands	r1, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	3b3c      	subs	r3, #60	; 0x3c
 80011d4:	fa00 f203 	lsl.w	r2, r0, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	639a      	str	r2, [r3, #56]	; 0x38
 80011e0:	e01d      	b.n	800121e <HAL_ADC_ConfigChannel+0x42e>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	3b5a      	subs	r3, #90	; 0x5a
 80011f6:	221f      	movs	r2, #31
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	4019      	ands	r1, r3
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	3b5a      	subs	r3, #90	; 0x5a
 8001212:	fa00 f203 	lsl.w	r2, r0, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 030c 	and.w	r3, r3, #12
 8001228:	2b00      	cmp	r3, #0
 800122a:	f040 80e8 	bne.w	80013fe <HAL_ADC_ConfigChannel+0x60e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b09      	cmp	r3, #9
 8001234:	d91c      	bls.n	8001270 <HAL_ADC_ConfigChannel+0x480>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6999      	ldr	r1, [r3, #24]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	3b1e      	subs	r3, #30
 8001248:	2207      	movs	r2, #7
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	4019      	ands	r1, r3
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	6898      	ldr	r0, [r3, #8]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	3b1e      	subs	r3, #30
 8001262:	fa00 f203 	lsl.w	r2, r0, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	619a      	str	r2, [r3, #24]
 800126e:	e019      	b.n	80012a4 <HAL_ADC_ConfigChannel+0x4b4>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6959      	ldr	r1, [r3, #20]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	2207      	movs	r2, #7
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	4019      	ands	r1, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	6898      	ldr	r0, [r3, #8]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	fa00 f203 	lsl.w	r2, r0, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	695a      	ldr	r2, [r3, #20]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	08db      	lsrs	r3, r3, #3
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d852      	bhi.n	800136c <HAL_ADC_ConfigChannel+0x57c>
 80012c6:	a201      	add	r2, pc, #4	; (adr r2, 80012cc <HAL_ADC_ConfigChannel+0x4dc>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	080012dd 	.word	0x080012dd
 80012d0:	080012ff 	.word	0x080012ff
 80012d4:	08001321 	.word	0x08001321
 80012d8:	08001343 	.word	0x08001343
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_ADC_ConfigChannel+0x578>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	0691      	lsls	r1, r2, #26
 80012ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012ee:	430a      	orrs	r2, r1
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012fa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012fc:	e082      	b.n	8001404 <HAL_ADC_ConfigChannel+0x614>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_ADC_ConfigChannel+0x578>)
 8001306:	4013      	ands	r3, r2
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	0691      	lsls	r1, r2, #26
 800130e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001310:	430a      	orrs	r2, r1
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800131c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800131e:	e071      	b.n	8001404 <HAL_ADC_ConfigChannel+0x614>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_ADC_ConfigChannel+0x578>)
 8001328:	4013      	ands	r3, r2
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	0691      	lsls	r1, r2, #26
 8001330:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001332:	430a      	orrs	r2, r1
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800133e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001340:	e060      	b.n	8001404 <HAL_ADC_ConfigChannel+0x614>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <HAL_ADC_ConfigChannel+0x578>)
 800134a:	4013      	ands	r3, r2
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	0691      	lsls	r1, r2, #26
 8001352:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001354:	430a      	orrs	r2, r1
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001360:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001362:	e04f      	b.n	8001404 <HAL_ADC_ConfigChannel+0x614>
 8001364:	08008854 	.word	0x08008854
 8001368:	83fff000 	.word	0x83fff000
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	069b      	lsls	r3, r3, #26
 800137c:	429a      	cmp	r2, r3
 800137e:	d107      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800138e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001396:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	069b      	lsls	r3, r3, #26
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d107      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x5c4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013b2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	069b      	lsls	r3, r3, #26
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d107      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x5e8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013d6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	069b      	lsls	r3, r3, #26
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d10a      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x612>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013fa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80013fc:	e001      	b.n	8001402 <HAL_ADC_ConfigChannel+0x612>
    }

  }
 80013fe:	bf00      	nop
 8001400:	e000      	b.n	8001404 <HAL_ADC_ConfigChannel+0x614>
      break;
 8001402:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d108      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x634>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x634>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <HAL_ADC_ConfigChannel+0x636>
 8001424:	2300      	movs	r3, #0
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 80fa 	bne.w	8001620 <HAL_ADC_ConfigChannel+0x830>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d00f      	beq.n	8001454 <HAL_ADC_ConfigChannel+0x664>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2201      	movs	r2, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	400a      	ands	r2, r1
 800144e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001452:	e049      	b.n	80014e8 <HAL_ADC_ConfigChannel+0x6f8>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2201      	movs	r2, #1
 8001462:	409a      	lsls	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b09      	cmp	r3, #9
 8001474:	d91c      	bls.n	80014b0 <HAL_ADC_ConfigChannel+0x6c0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6999      	ldr	r1, [r3, #24]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	3b1b      	subs	r3, #27
 8001488:	2207      	movs	r2, #7
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	4019      	ands	r1, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	6898      	ldr	r0, [r3, #8]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	3b1b      	subs	r3, #27
 80014a2:	fa00 f203 	lsl.w	r2, r0, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	619a      	str	r2, [r3, #24]
 80014ae:	e01b      	b.n	80014e8 <HAL_ADC_ConfigChannel+0x6f8>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6959      	ldr	r1, [r3, #20]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	2207      	movs	r2, #7
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4019      	ands	r1, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	6898      	ldr	r0, [r3, #8]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	fa00 f203 	lsl.w	r2, r0, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e8:	4b52      	ldr	r3, [pc, #328]	; (8001634 <HAL_ADC_ConfigChannel+0x844>)
 80014ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b10      	cmp	r3, #16
 80014f2:	d105      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x710>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d014      	beq.n	800152a <HAL_ADC_ConfigChannel+0x73a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001504:	2b11      	cmp	r3, #17
 8001506:	d105      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x724>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00a      	beq.n	800152a <HAL_ADC_ConfigChannel+0x73a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001518:	2b12      	cmp	r3, #18
 800151a:	f040 8081 	bne.w	8001620 <HAL_ADC_ConfigChannel+0x830>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800151e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001526:	2b00      	cmp	r3, #0
 8001528:	d17a      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x830>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b01      	cmp	r3, #1
 800153a:	d108      	bne.n	800154e <HAL_ADC_ConfigChannel+0x75e>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_ADC_ConfigChannel+0x75e>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_ADC_ConfigChannel+0x760>
 800154e:	2300      	movs	r3, #0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d150      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x806>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001554:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001556:	2b00      	cmp	r3, #0
 8001558:	d010      	beq.n	800157c <HAL_ADC_ConfigChannel+0x78c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d107      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x786>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x786>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_ADC_ConfigChannel+0x788>
 8001576:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001578:	2b00      	cmp	r3, #0
 800157a:	d13c      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x806>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b10      	cmp	r3, #16
 8001582:	d11d      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x7d0>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800158c:	d118      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x7d0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800158e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001598:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800159a:	4b27      	ldr	r3, [pc, #156]	; (8001638 <HAL_ADC_ConfigChannel+0x848>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a27      	ldr	r2, [pc, #156]	; (800163c <HAL_ADC_ConfigChannel+0x84c>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	0c9a      	lsrs	r2, r3, #18
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015b0:	e002      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x7c8>
          {
            wait_loop_index--;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f9      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x7c2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015be:	e02e      	b.n	800161e <HAL_ADC_ConfigChannel+0x82e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b11      	cmp	r3, #17
 80015c6:	d10b      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x7f0>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015d0:	d106      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x7f0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80015d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80015da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015dc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015de:	e01e      	b.n	800161e <HAL_ADC_ConfigChannel+0x82e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b12      	cmp	r3, #18
 80015e6:	d11a      	bne.n	800161e <HAL_ADC_ConfigChannel+0x82e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80015e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015f2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015f4:	e013      	b.n	800161e <HAL_ADC_ConfigChannel+0x82e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f043 0220 	orr.w	r2, r3, #32
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001608:	e00a      	b.n	8001620 <HAL_ADC_ConfigChannel+0x830>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f043 0220 	orr.w	r2, r3, #32
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800161c:	e000      	b.n	8001620 <HAL_ADC_ConfigChannel+0x830>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800161e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001628:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800162c:	4618      	mov	r0, r3
 800162e:	3768      	adds	r7, #104	; 0x68
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	50000300 	.word	0x50000300
 8001638:	2000000c 	.word	0x2000000c
 800163c:	431bde83 	.word	0x431bde83

08001640 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	2b01      	cmp	r3, #1
 8001658:	d108      	bne.n	800166c <ADC_Enable+0x2c>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <ADC_Enable+0x2c>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <ADC_Enable+0x2e>
 800166c:	2300      	movs	r3, #0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d13c      	bne.n	80016ec <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <ADC_Enable+0xb8>)
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00d      	beq.n	800169c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f043 0210 	orr.w	r2, r3, #16
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	f043 0201 	orr.w	r2, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e028      	b.n	80016ee <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80016ac:	f7fe fe12 	bl	80002d4 <HAL_GetTick>
 80016b0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016b2:	e014      	b.n	80016de <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016b4:	f7fe fe0e 	bl	80002d4 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d90d      	bls.n	80016de <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f043 0210 	orr.w	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e007      	b.n	80016ee <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d1e3      	bne.n	80016b4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	8000003f 	.word	0x8000003f

080016fc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b01      	cmp	r3, #1
 8001714:	d108      	bne.n	8001728 <ADC_Disable+0x2c>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <ADC_Disable+0x2c>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <ADC_Disable+0x2e>
 8001728:	2300      	movs	r3, #0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d040      	beq.n	80017b0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 030d 	and.w	r3, r3, #13
 8001738:	2b01      	cmp	r3, #1
 800173a:	d10f      	bne.n	800175c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0202 	orr.w	r2, r2, #2
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2203      	movs	r2, #3
 8001752:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001754:	f7fe fdbe 	bl	80002d4 <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800175a:	e022      	b.n	80017a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f043 0210 	orr.w	r2, r3, #16
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e01c      	b.n	80017b2 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001778:	f7fe fdac 	bl	80002d4 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d90d      	bls.n	80017a2 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f043 0210 	orr.w	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e007      	b.n	80017b2 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d0e3      	beq.n	8001778 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db0b      	blt.n	800184a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <__NVIC_EnableIRQ+0x38>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b07      	cmp	r3, #7
 8001924:	d00f      	beq.n	8001946 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b06      	cmp	r3, #6
 800192a:	d00c      	beq.n	8001946 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b05      	cmp	r3, #5
 8001930:	d009      	beq.n	8001946 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b04      	cmp	r3, #4
 8001936:	d006      	beq.n	8001946 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d003      	beq.n	8001946 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800193e:	21ac      	movs	r1, #172	; 0xac
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001942:	f006 f99e 	bl	8007c82 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ff38 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	08008890 	.word	0x08008890

08001958 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d903      	bls.n	8001978 <HAL_NVIC_SetPriority+0x20>
 8001970:	21c4      	movs	r1, #196	; 0xc4
 8001972:	480e      	ldr	r0, [pc, #56]	; (80019ac <HAL_NVIC_SetPriority+0x54>)
 8001974:	f006 f985 	bl	8007c82 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b0f      	cmp	r3, #15
 800197c:	d903      	bls.n	8001986 <HAL_NVIC_SetPriority+0x2e>
 800197e:	21c5      	movs	r1, #197	; 0xc5
 8001980:	480a      	ldr	r0, [pc, #40]	; (80019ac <HAL_NVIC_SetPriority+0x54>)
 8001982:	f006 f97e 	bl	8007c82 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001986:	f7ff ff3d 	bl	8001804 <__NVIC_GetPriorityGrouping>
 800198a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	68b9      	ldr	r1, [r7, #8]
 8001990:	6978      	ldr	r0, [r7, #20]
 8001992:	f7ff ff8d 	bl	80018b0 <NVIC_EncodePriority>
 8001996:	4602      	mov	r2, r0
 8001998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff5c 	bl	800185c <__NVIC_SetPriority>
}
 80019a4:	bf00      	nop
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	08008890 	.word	0x08008890

080019b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	da03      	bge.n	80019ca <HAL_NVIC_EnableIRQ+0x1a>
 80019c2:	21d8      	movs	r1, #216	; 0xd8
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <HAL_NVIC_EnableIRQ+0x2c>)
 80019c6:	f006 f95c 	bl	8007c82 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff ff26 	bl	8001820 <__NVIC_EnableIRQ>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	08008890 	.word	0x08008890

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019f4:	d013      	beq.n	8001a1e <HAL_GPIO_Init+0x3e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a37      	ldr	r2, [pc, #220]	; (8001ad8 <HAL_GPIO_Init+0xf8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00f      	beq.n	8001a1e <HAL_GPIO_Init+0x3e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a36      	ldr	r2, [pc, #216]	; (8001adc <HAL_GPIO_Init+0xfc>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d00b      	beq.n	8001a1e <HAL_GPIO_Init+0x3e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a35      	ldr	r2, [pc, #212]	; (8001ae0 <HAL_GPIO_Init+0x100>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d007      	beq.n	8001a1e <HAL_GPIO_Init+0x3e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a34      	ldr	r2, [pc, #208]	; (8001ae4 <HAL_GPIO_Init+0x104>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x3e>
 8001a16:	21ba      	movs	r1, #186	; 0xba
 8001a18:	4833      	ldr	r0, [pc, #204]	; (8001ae8 <HAL_GPIO_Init+0x108>)
 8001a1a:	f006 f932 	bl	8007c82 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_GPIO_Init+0x54>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x5c>
 8001a34:	21bb      	movs	r1, #187	; 0xbb
 8001a36:	482c      	ldr	r0, [pc, #176]	; (8001ae8 <HAL_GPIO_Init+0x108>)
 8001a38:	f006 f923 	bl	8007c82 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d035      	beq.n	8001ab0 <HAL_GPIO_Init+0xd0>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d031      	beq.n	8001ab0 <HAL_GPIO_Init+0xd0>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b11      	cmp	r3, #17
 8001a52:	d02d      	beq.n	8001ab0 <HAL_GPIO_Init+0xd0>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d029      	beq.n	8001ab0 <HAL_GPIO_Init+0xd0>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b12      	cmp	r3, #18
 8001a62:	d025      	beq.n	8001ab0 <HAL_GPIO_Init+0xd0>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4a20      	ldr	r2, [pc, #128]	; (8001aec <HAL_GPIO_Init+0x10c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d020      	beq.n	8001ab0 <HAL_GPIO_Init+0xd0>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a1f      	ldr	r2, [pc, #124]	; (8001af0 <HAL_GPIO_Init+0x110>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d01b      	beq.n	8001ab0 <HAL_GPIO_Init+0xd0>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <HAL_GPIO_Init+0x114>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d016      	beq.n	8001ab0 <HAL_GPIO_Init+0xd0>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a1c      	ldr	r2, [pc, #112]	; (8001af8 <HAL_GPIO_Init+0x118>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d011      	beq.n	8001ab0 <HAL_GPIO_Init+0xd0>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4a1a      	ldr	r2, [pc, #104]	; (8001afc <HAL_GPIO_Init+0x11c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d00c      	beq.n	8001ab0 <HAL_GPIO_Init+0xd0>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a19      	ldr	r2, [pc, #100]	; (8001b00 <HAL_GPIO_Init+0x120>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d007      	beq.n	8001ab0 <HAL_GPIO_Init+0xd0>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0xd0>
 8001aa8:	21bc      	movs	r1, #188	; 0xbc
 8001aaa:	480f      	ldr	r0, [pc, #60]	; (8001ae8 <HAL_GPIO_Init+0x108>)
 8001aac:	f006 f8e9 	bl	8007c82 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 81b6 	beq.w	8001e26 <HAL_GPIO_Init+0x446>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	f000 81b1 	beq.w	8001e26 <HAL_GPIO_Init+0x446>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	f000 81ac 	beq.w	8001e26 <HAL_GPIO_Init+0x446>
 8001ace:	21bd      	movs	r1, #189	; 0xbd
 8001ad0:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <HAL_GPIO_Init+0x108>)
 8001ad2:	f006 f8d6 	bl	8007c82 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad6:	e1a6      	b.n	8001e26 <HAL_GPIO_Init+0x446>
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	48000c00 	.word	0x48000c00
 8001ae4:	48001400 	.word	0x48001400
 8001ae8:	080088cc 	.word	0x080088cc
 8001aec:	10110000 	.word	0x10110000
 8001af0:	10210000 	.word	0x10210000
 8001af4:	10310000 	.word	0x10310000
 8001af8:	10120000 	.word	0x10120000
 8001afc:	10220000 	.word	0x10220000
 8001b00:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	4013      	ands	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8182 	beq.w	8001e20 <HAL_GPIO_Init+0x440>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x14c>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b12      	cmp	r3, #18
 8001b2a:	d147      	bne.n	8001bbc <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b32:	d013      	beq.n	8001b5c <HAL_GPIO_Init+0x17c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a81      	ldr	r2, [pc, #516]	; (8001d3c <HAL_GPIO_Init+0x35c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00f      	beq.n	8001b5c <HAL_GPIO_Init+0x17c>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a80      	ldr	r2, [pc, #512]	; (8001d40 <HAL_GPIO_Init+0x360>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00b      	beq.n	8001b5c <HAL_GPIO_Init+0x17c>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a7f      	ldr	r2, [pc, #508]	; (8001d44 <HAL_GPIO_Init+0x364>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d007      	beq.n	8001b5c <HAL_GPIO_Init+0x17c>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a7e      	ldr	r2, [pc, #504]	; (8001d48 <HAL_GPIO_Init+0x368>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x17c>
 8001b54:	21cc      	movs	r1, #204	; 0xcc
 8001b56:	487d      	ldr	r0, [pc, #500]	; (8001d4c <HAL_GPIO_Init+0x36c>)
 8001b58:	f006 f893 	bl	8007c82 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	2b0c      	cmp	r3, #12
 8001b62:	d907      	bls.n	8001b74 <HAL_GPIO_Init+0x194>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x194>
 8001b6c:	21cd      	movs	r1, #205	; 0xcd
 8001b6e:	4877      	ldr	r0, [pc, #476]	; (8001d4c <HAL_GPIO_Init+0x36c>)
 8001b70:	f006 f887 	bl	8007c82 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	08da      	lsrs	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3208      	adds	r2, #8
 8001bb6:	6939      	ldr	r1, [r7, #16]
 8001bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d00b      	beq.n	8001c10 <HAL_GPIO_Init+0x230>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d007      	beq.n	8001c10 <HAL_GPIO_Init+0x230>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c04:	2b11      	cmp	r3, #17
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x230>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b12      	cmp	r3, #18
 8001c0e:	d140      	bne.n	8001c92 <HAL_GPIO_Init+0x2b2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <HAL_GPIO_Init+0x250>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d007      	beq.n	8001c30 <HAL_GPIO_Init+0x250>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x250>
 8001c28:	21e1      	movs	r1, #225	; 0xe1
 8001c2a:	4848      	ldr	r0, [pc, #288]	; (8001d4c <HAL_GPIO_Init+0x36c>)
 8001c2c:	f006 f829 	bl	8007c82 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c66:	2201      	movs	r2, #1
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	f003 0201 	and.w	r2, r3, #1
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 80a8 	beq.w	8001e20 <HAL_GPIO_Init+0x440>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <HAL_GPIO_Init+0x370>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a1e      	ldr	r2, [pc, #120]	; (8001d50 <HAL_GPIO_Init+0x370>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <HAL_GPIO_Init+0x370>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ce8:	4a1a      	ldr	r2, [pc, #104]	; (8001d54 <HAL_GPIO_Init+0x374>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d12:	d021      	beq.n	8001d58 <HAL_GPIO_Init+0x378>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <HAL_GPIO_Init+0x35c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00d      	beq.n	8001d38 <HAL_GPIO_Init+0x358>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_GPIO_Init+0x360>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d007      	beq.n	8001d34 <HAL_GPIO_Init+0x354>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <HAL_GPIO_Init+0x364>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d101      	bne.n	8001d30 <HAL_GPIO_Init+0x350>
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e014      	b.n	8001d5a <HAL_GPIO_Init+0x37a>
 8001d30:	2305      	movs	r3, #5
 8001d32:	e012      	b.n	8001d5a <HAL_GPIO_Init+0x37a>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e010      	b.n	8001d5a <HAL_GPIO_Init+0x37a>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e00e      	b.n	8001d5a <HAL_GPIO_Init+0x37a>
 8001d3c:	48000400 	.word	0x48000400
 8001d40:	48000800 	.word	0x48000800
 8001d44:	48000c00 	.word	0x48000c00
 8001d48:	48001400 	.word	0x48001400
 8001d4c:	080088cc 	.word	0x080088cc
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010000 	.word	0x40010000
 8001d58:	2300      	movs	r3, #0
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	f002 0203 	and.w	r2, r2, #3
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	4093      	lsls	r3, r2
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d6a:	4935      	ldr	r1, [pc, #212]	; (8001e40 <HAL_GPIO_Init+0x460>)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d78:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <HAL_GPIO_Init+0x464>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x3bc>
        {
          temp |= iocurrent;
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d9c:	4a29      	ldr	r2, [pc, #164]	; (8001e44 <HAL_GPIO_Init+0x464>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001da2:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <HAL_GPIO_Init+0x464>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x3e6>
        {
          temp |= iocurrent;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <HAL_GPIO_Init+0x464>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_GPIO_Init+0x464>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x410>
        {
          temp |= iocurrent;
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <HAL_GPIO_Init+0x464>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_GPIO_Init+0x464>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x43a>
        {
          temp |= iocurrent;
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <HAL_GPIO_Init+0x464>)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	3301      	adds	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f47f ae67 	bne.w	8001b04 <HAL_GPIO_Init+0x124>
  }
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40010000 	.word	0x40010000
 8001e44:	40010400 	.word	0x40010400

08001e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001e58:	887b      	ldrh	r3, [r7, #2]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d004      	beq.n	8001e68 <HAL_GPIO_WritePin+0x20>
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	0c1b      	lsrs	r3, r3, #16
 8001e62:	041b      	lsls	r3, r3, #16
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d004      	beq.n	8001e72 <HAL_GPIO_WritePin+0x2a>
 8001e68:	f240 11a7 	movw	r1, #423	; 0x1a7
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <HAL_GPIO_WritePin+0x5c>)
 8001e6e:	f005 ff08 	bl	8007c82 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001e72:	787b      	ldrb	r3, [r7, #1]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <HAL_GPIO_WritePin+0x40>
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d004      	beq.n	8001e88 <HAL_GPIO_WritePin+0x40>
 8001e7e:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8001e82:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <HAL_GPIO_WritePin+0x5c>)
 8001e84:	f005 fefd 	bl	8007c82 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001e88:	787b      	ldrb	r3, [r7, #1]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e8e:	887a      	ldrh	r2, [r7, #2]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	080088cc 	.word	0x080088cc

08001ea8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001eb4:	887b      	ldrh	r3, [r7, #2]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d004      	beq.n	8001ec4 <HAL_GPIO_TogglePin+0x1c>
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	0c1b      	lsrs	r3, r3, #16
 8001ebe:	041b      	lsls	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <HAL_GPIO_TogglePin+0x26>
 8001ec4:	f240 11bd 	movw	r1, #445	; 0x1bd
 8001ec8:	480a      	ldr	r0, [pc, #40]	; (8001ef4 <HAL_GPIO_TogglePin+0x4c>)
 8001eca:	f005 feda 	bl	8007c82 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	887b      	ldrh	r3, [r7, #2]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <HAL_GPIO_TogglePin+0x3c>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001eda:	887b      	ldrh	r3, [r7, #2]
 8001edc:	041a      	lsls	r2, r3, #16
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001ee2:	e002      	b.n	8001eea <HAL_GPIO_TogglePin+0x42>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ee4:	887a      	ldrh	r2, [r7, #2]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	619a      	str	r2, [r3, #24]
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	080088cc 	.word	0x080088cc

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f000 bff7 	b.w	8002f00 <HAL_RCC_OscConfig+0x1008>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_OscConfig+0x66>
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d119      	bne.n	8001f5e <HAL_RCC_OscConfig+0x66>
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d112      	bne.n	8001f5e <HAL_RCC_OscConfig+0x66>
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10b      	bne.n	8001f5e <HAL_RCC_OscConfig+0x66>
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d104      	bne.n	8001f5e <HAL_RCC_OscConfig+0x66>
 8001f54:	f240 114b 	movw	r1, #331	; 0x14b
 8001f58:	48c3      	ldr	r0, [pc, #780]	; (8002268 <HAL_RCC_OscConfig+0x370>)
 8001f5a:	f005 fe92 	bl	8007c82 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8182 	beq.w	8002272 <HAL_RCC_OscConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d010      	beq.n	8001f9a <HAL_RCC_OscConfig+0xa2>
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCC_OscConfig+0xa2>
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f8e:	d004      	beq.n	8001f9a <HAL_RCC_OscConfig+0xa2>
 8001f90:	f240 1151 	movw	r1, #337	; 0x151
 8001f94:	48b4      	ldr	r0, [pc, #720]	; (8002268 <HAL_RCC_OscConfig+0x370>)
 8001f96:	f005 fe74 	bl	8007c82 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f9a:	4bb4      	ldr	r3, [pc, #720]	; (800226c <HAL_RCC_OscConfig+0x374>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d00c      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fa6:	4bb1      	ldr	r3, [pc, #708]	; (800226c <HAL_RCC_OscConfig+0x374>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d159      	bne.n	8002066 <HAL_RCC_OscConfig+0x16e>
 8001fb2:	4bae      	ldr	r3, [pc, #696]	; (800226c <HAL_RCC_OscConfig+0x374>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbe:	d152      	bne.n	8002066 <HAL_RCC_OscConfig+0x16e>
 8001fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fd4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d102      	bne.n	8001ff2 <HAL_RCC_OscConfig+0xfa>
 8001fec:	4b9f      	ldr	r3, [pc, #636]	; (800226c <HAL_RCC_OscConfig+0x374>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	e015      	b.n	800201e <HAL_RCC_OscConfig+0x126>
 8001ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002006:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800200a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800200e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800201a:	4b94      	ldr	r3, [pc, #592]	; (800226c <HAL_RCC_OscConfig+0x374>)
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002022:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002026:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800202a:	fa92 f2a2 	rbit	r2, r2
 800202e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002032:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002036:	fab2 f282 	clz	r2, r2
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f042 0220 	orr.w	r2, r2, #32
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f002 021f 	and.w	r2, r2, #31
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f202 	lsl.w	r2, r1, r2
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 810e 	beq.w	8002270 <HAL_RCC_OscConfig+0x378>
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 8108 	bne.w	8002270 <HAL_RCC_OscConfig+0x378>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	f000 bf4d 	b.w	8002f00 <HAL_RCC_OscConfig+0x1008>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002070:	d106      	bne.n	8002080 <HAL_RCC_OscConfig+0x188>
 8002072:	4b7e      	ldr	r3, [pc, #504]	; (800226c <HAL_RCC_OscConfig+0x374>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a7d      	ldr	r2, [pc, #500]	; (800226c <HAL_RCC_OscConfig+0x374>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e030      	b.n	80020e2 <HAL_RCC_OscConfig+0x1ea>
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1ac>
 800208a:	4b78      	ldr	r3, [pc, #480]	; (800226c <HAL_RCC_OscConfig+0x374>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a77      	ldr	r2, [pc, #476]	; (800226c <HAL_RCC_OscConfig+0x374>)
 8002090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	4b75      	ldr	r3, [pc, #468]	; (800226c <HAL_RCC_OscConfig+0x374>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a74      	ldr	r2, [pc, #464]	; (800226c <HAL_RCC_OscConfig+0x374>)
 800209c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e01e      	b.n	80020e2 <HAL_RCC_OscConfig+0x1ea>
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ae:	d10c      	bne.n	80020ca <HAL_RCC_OscConfig+0x1d2>
 80020b0:	4b6e      	ldr	r3, [pc, #440]	; (800226c <HAL_RCC_OscConfig+0x374>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a6d      	ldr	r2, [pc, #436]	; (800226c <HAL_RCC_OscConfig+0x374>)
 80020b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4b6b      	ldr	r3, [pc, #428]	; (800226c <HAL_RCC_OscConfig+0x374>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a6a      	ldr	r2, [pc, #424]	; (800226c <HAL_RCC_OscConfig+0x374>)
 80020c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	e00b      	b.n	80020e2 <HAL_RCC_OscConfig+0x1ea>
 80020ca:	4b68      	ldr	r3, [pc, #416]	; (800226c <HAL_RCC_OscConfig+0x374>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a67      	ldr	r2, [pc, #412]	; (800226c <HAL_RCC_OscConfig+0x374>)
 80020d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b65      	ldr	r3, [pc, #404]	; (800226c <HAL_RCC_OscConfig+0x374>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a64      	ldr	r2, [pc, #400]	; (800226c <HAL_RCC_OscConfig+0x374>)
 80020dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020e2:	4b62      	ldr	r3, [pc, #392]	; (800226c <HAL_RCC_OscConfig+0x374>)
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	f023 020f 	bic.w	r2, r3, #15
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	495e      	ldr	r1, [pc, #376]	; (800226c <HAL_RCC_OscConfig+0x374>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d059      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2bc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7fe f8e8 	bl	80002d4 <HAL_GetTick>
 8002104:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_OscConfig+0x228>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800210a:	f7fe f8e3 	bl	80002d4 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d902      	bls.n	8002120 <HAL_RCC_OscConfig+0x228>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	f000 bef0 	b.w	8002f00 <HAL_RCC_OscConfig+0x1008>
 8002120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002124:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002134:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b01      	cmp	r3, #1
 800214a:	d102      	bne.n	8002152 <HAL_RCC_OscConfig+0x25a>
 800214c:	4b47      	ldr	r3, [pc, #284]	; (800226c <HAL_RCC_OscConfig+0x374>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	e015      	b.n	800217e <HAL_RCC_OscConfig+0x286>
 8002152:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002156:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800216e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800217a:	4b3c      	ldr	r3, [pc, #240]	; (800226c <HAL_RCC_OscConfig+0x374>)
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002182:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002186:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800218a:	fa92 f2a2 	rbit	r2, r2
 800218e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002192:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002196:	fab2 f282 	clz	r2, r2
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	f042 0220 	orr.w	r2, r2, #32
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	f002 021f 	and.w	r2, r2, #31
 80021a6:	2101      	movs	r1, #1
 80021a8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0ab      	beq.n	800210a <HAL_RCC_OscConfig+0x212>
 80021b2:	e05e      	b.n	8002272 <HAL_RCC_OscConfig+0x37a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7fe f88e 	bl	80002d4 <HAL_GetTick>
 80021b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x2dc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021be:	f7fe f889 	bl	80002d4 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d902      	bls.n	80021d4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	f000 be96 	b.w	8002f00 <HAL_RCC_OscConfig+0x1008>
 80021d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80021e8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ec:	fab3 f383 	clz	r3, r3
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d102      	bne.n	8002206 <HAL_RCC_OscConfig+0x30e>
 8002200:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HAL_RCC_OscConfig+0x374>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	e015      	b.n	8002232 <HAL_RCC_OscConfig+0x33a>
 8002206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800220a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800221a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800221e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002222:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <HAL_RCC_OscConfig+0x374>)
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002236:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800223a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800223e:	fa92 f2a2 	rbit	r2, r2
 8002242:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002246:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800224a:	fab2 f282 	clz	r2, r2
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	f042 0220 	orr.w	r2, r2, #32
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	f002 021f 	and.w	r2, r2, #31
 800225a:	2101      	movs	r1, #1
 800225c:	fa01 f202 	lsl.w	r2, r1, r2
 8002260:	4013      	ands	r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1ab      	bne.n	80021be <HAL_RCC_OscConfig+0x2c6>
 8002266:	e004      	b.n	8002272 <HAL_RCC_OscConfig+0x37a>
 8002268:	08008908 	.word	0x08008908
 800226c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 818c 	beq.w	800259a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d009      	beq.n	80022a0 <HAL_RCC_OscConfig+0x3a8>
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d004      	beq.n	80022a0 <HAL_RCC_OscConfig+0x3a8>
 8002296:	f240 1189 	movw	r1, #393	; 0x189
 800229a:	48a7      	ldr	r0, [pc, #668]	; (8002538 <HAL_RCC_OscConfig+0x640>)
 800229c:	f005 fcf1 	bl	8007c82 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	2b1f      	cmp	r3, #31
 80022a8:	d904      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3bc>
 80022aa:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80022ae:	48a2      	ldr	r0, [pc, #648]	; (8002538 <HAL_RCC_OscConfig+0x640>)
 80022b0:	f005 fce7 	bl	8007c82 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022b4:	4ba1      	ldr	r3, [pc, #644]	; (800253c <HAL_RCC_OscConfig+0x644>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00b      	beq.n	80022d8 <HAL_RCC_OscConfig+0x3e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022c0:	4b9e      	ldr	r3, [pc, #632]	; (800253c <HAL_RCC_OscConfig+0x644>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d16c      	bne.n	80023a6 <HAL_RCC_OscConfig+0x4ae>
 80022cc:	4b9b      	ldr	r3, [pc, #620]	; (800253c <HAL_RCC_OscConfig+0x644>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d166      	bne.n	80023a6 <HAL_RCC_OscConfig+0x4ae>
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80022ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d102      	bne.n	8002308 <HAL_RCC_OscConfig+0x410>
 8002302:	4b8e      	ldr	r3, [pc, #568]	; (800253c <HAL_RCC_OscConfig+0x644>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	e013      	b.n	8002330 <HAL_RCC_OscConfig+0x438>
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800231a:	2302      	movs	r3, #2
 800231c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002320:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800232c:	4b83      	ldr	r3, [pc, #524]	; (800253c <HAL_RCC_OscConfig+0x644>)
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	2202      	movs	r2, #2
 8002332:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002336:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800233a:	fa92 f2a2 	rbit	r2, r2
 800233e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002342:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002346:	fab2 f282 	clz	r2, r2
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	f042 0220 	orr.w	r2, r2, #32
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f002 021f 	and.w	r2, r2, #31
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f202 	lsl.w	r2, r1, r2
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <HAL_RCC_OscConfig+0x47a>
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d002      	beq.n	8002372 <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	f000 bdc7 	b.w	8002f00 <HAL_RCC_OscConfig+0x1008>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002372:	4b72      	ldr	r3, [pc, #456]	; (800253c <HAL_RCC_OscConfig+0x644>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	21f8      	movs	r1, #248	; 0xf8
 8002382:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800238a:	fa91 f1a1 	rbit	r1, r1
 800238e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002392:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002396:	fab1 f181 	clz	r1, r1
 800239a:	b2c9      	uxtb	r1, r1
 800239c:	408b      	lsls	r3, r1
 800239e:	4967      	ldr	r1, [pc, #412]	; (800253c <HAL_RCC_OscConfig+0x644>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a4:	e0f9      	b.n	800259a <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8085 	beq.w	80024bc <HAL_RCC_OscConfig+0x5c4>
 80023b2:	2301      	movs	r3, #1
 80023b4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80023c4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	461a      	mov	r2, r3
 80023da:	2301      	movs	r3, #1
 80023dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7fd ff79 	bl	80002d4 <HAL_GetTick>
 80023e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_OscConfig+0x506>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e8:	f7fd ff74 	bl	80002d4 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d902      	bls.n	80023fe <HAL_RCC_OscConfig+0x506>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	f000 bd81 	b.w	8002f00 <HAL_RCC_OscConfig+0x1008>
 80023fe:	2302      	movs	r3, #2
 8002400:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002410:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d102      	bne.n	800242e <HAL_RCC_OscConfig+0x536>
 8002428:	4b44      	ldr	r3, [pc, #272]	; (800253c <HAL_RCC_OscConfig+0x644>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	e013      	b.n	8002456 <HAL_RCC_OscConfig+0x55e>
 800242e:	2302      	movs	r3, #2
 8002430:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002440:	2302      	movs	r3, #2
 8002442:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002446:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002452:	4b3a      	ldr	r3, [pc, #232]	; (800253c <HAL_RCC_OscConfig+0x644>)
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	2202      	movs	r2, #2
 8002458:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800245c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002460:	fa92 f2a2 	rbit	r2, r2
 8002464:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002468:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800246c:	fab2 f282 	clz	r2, r2
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	f042 0220 	orr.w	r2, r2, #32
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	f002 021f 	and.w	r2, r2, #31
 800247c:	2101      	movs	r1, #1
 800247e:	fa01 f202 	lsl.w	r2, r1, r2
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0af      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4f0>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	4b2c      	ldr	r3, [pc, #176]	; (800253c <HAL_RCC_OscConfig+0x644>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	21f8      	movs	r1, #248	; 0xf8
 8002498:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80024a0:	fa91 f1a1 	rbit	r1, r1
 80024a4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80024a8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80024ac:	fab1 f181 	clz	r1, r1
 80024b0:	b2c9      	uxtb	r1, r1
 80024b2:	408b      	lsls	r3, r1
 80024b4:	4921      	ldr	r1, [pc, #132]	; (800253c <HAL_RCC_OscConfig+0x644>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
 80024ba:	e06e      	b.n	800259a <HAL_RCC_OscConfig+0x6a2>
 80024bc:	2301      	movs	r3, #1
 80024be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80024ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	461a      	mov	r2, r3
 80024e4:	2300      	movs	r3, #0
 80024e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fd fef4 	bl	80002d4 <HAL_GetTick>
 80024ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f0:	e00a      	b.n	8002508 <HAL_RCC_OscConfig+0x610>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f2:	f7fd feef 	bl	80002d4 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d902      	bls.n	8002508 <HAL_RCC_OscConfig+0x610>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	f000 bcfc 	b.w	8002f00 <HAL_RCC_OscConfig+0x1008>
 8002508:	2302      	movs	r3, #2
 800250a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800251a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d106      	bne.n	8002540 <HAL_RCC_OscConfig+0x648>
 8002532:	4b02      	ldr	r3, [pc, #8]	; (800253c <HAL_RCC_OscConfig+0x644>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	e017      	b.n	8002568 <HAL_RCC_OscConfig+0x670>
 8002538:	08008908 	.word	0x08008908
 800253c:	40021000 	.word	0x40021000
 8002540:	2302      	movs	r3, #2
 8002542:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002552:	2302      	movs	r3, #2
 8002554:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002558:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002564:	4bbf      	ldr	r3, [pc, #764]	; (8002864 <HAL_RCC_OscConfig+0x96c>)
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	2202      	movs	r2, #2
 800256a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800256e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002572:	fa92 f2a2 	rbit	r2, r2
 8002576:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800257a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800257e:	fab2 f282 	clz	r2, r2
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	f042 0220 	orr.w	r2, r2, #32
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	f002 021f 	and.w	r2, r2, #31
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f202 	lsl.w	r2, r1, r2
 8002594:	4013      	ands	r3, r2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1ab      	bne.n	80024f2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80e6 	beq.w	8002776 <HAL_RCC_OscConfig+0x87e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d009      	beq.n	80025c8 <HAL_RCC_OscConfig+0x6d0>
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d004      	beq.n	80025c8 <HAL_RCC_OscConfig+0x6d0>
 80025be:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 80025c2:	48a9      	ldr	r0, [pc, #676]	; (8002868 <HAL_RCC_OscConfig+0x970>)
 80025c4:	f005 fb5d 	bl	8007c82 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d065      	beq.n	800269e <HAL_RCC_OscConfig+0x7a6>
 80025d2:	2301      	movs	r3, #1
 80025d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80025e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	4b9e      	ldr	r3, [pc, #632]	; (800286c <HAL_RCC_OscConfig+0x974>)
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	461a      	mov	r2, r3
 80025f8:	2301      	movs	r3, #1
 80025fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fc:	f7fd fe6a 	bl	80002d4 <HAL_GetTick>
 8002600:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002604:	e00a      	b.n	800261c <HAL_RCC_OscConfig+0x724>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002606:	f7fd fe65 	bl	80002d4 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d902      	bls.n	800261c <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	f000 bc72 	b.w	8002f00 <HAL_RCC_OscConfig+0x1008>
 800261c:	2302      	movs	r3, #2
 800261e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800262e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002632:	2202      	movs	r2, #2
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f2a3 	rbit	r2, r3
 8002640:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800264a:	2202      	movs	r2, #2
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	fa93 f2a3 	rbit	r2, r3
 8002658:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800265c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265e:	4b81      	ldr	r3, [pc, #516]	; (8002864 <HAL_RCC_OscConfig+0x96c>)
 8002660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002662:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002666:	2102      	movs	r1, #2
 8002668:	6019      	str	r1, [r3, #0]
 800266a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	fa93 f1a3 	rbit	r1, r3
 8002674:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002678:	6019      	str	r1, [r3, #0]
  return result;
 800267a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2101      	movs	r1, #1
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0b4      	beq.n	8002606 <HAL_RCC_OscConfig+0x70e>
 800269c:	e06b      	b.n	8002776 <HAL_RCC_OscConfig+0x87e>
 800269e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	fa93 f2a3 	rbit	r2, r3
 80026b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026b4:	601a      	str	r2, [r3, #0]
  return result;
 80026b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026ba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b69      	ldr	r3, [pc, #420]	; (800286c <HAL_RCC_OscConfig+0x974>)
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	461a      	mov	r2, r3
 80026cc:	2300      	movs	r3, #0
 80026ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d0:	f7fd fe00 	bl	80002d4 <HAL_GetTick>
 80026d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x7f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026da:	f7fd fdfb 	bl	80002d4 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d902      	bls.n	80026f0 <HAL_RCC_OscConfig+0x7f8>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	f000 bc08 	b.w	8002f00 <HAL_RCC_OscConfig+0x1008>
 80026f0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026f4:	2202      	movs	r2, #2
 80026f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	fa93 f2a3 	rbit	r2, r3
 8002702:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800270c:	2202      	movs	r2, #2
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	fa93 f2a3 	rbit	r2, r3
 800271a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002724:	2202      	movs	r2, #2
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	fa93 f2a3 	rbit	r2, r3
 8002732:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002736:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002738:	4b4a      	ldr	r3, [pc, #296]	; (8002864 <HAL_RCC_OscConfig+0x96c>)
 800273a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800273c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002740:	2102      	movs	r1, #2
 8002742:	6019      	str	r1, [r3, #0]
 8002744:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	fa93 f1a3 	rbit	r1, r3
 800274e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002752:	6019      	str	r1, [r3, #0]
  return result;
 8002754:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1b1      	bne.n	80026da <HAL_RCC_OscConfig+0x7e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8170 	beq.w	8002a66 <HAL_RCC_OscConfig+0xb6e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00e      	beq.n	80027b4 <HAL_RCC_OscConfig+0x8bc>
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d009      	beq.n	80027b4 <HAL_RCC_OscConfig+0x8bc>
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b05      	cmp	r3, #5
 80027a8:	d004      	beq.n	80027b4 <HAL_RCC_OscConfig+0x8bc>
 80027aa:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80027ae:	482e      	ldr	r0, [pc, #184]	; (8002868 <HAL_RCC_OscConfig+0x970>)
 80027b0:	f005 fa67 	bl	8007c82 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b4:	4b2b      	ldr	r3, [pc, #172]	; (8002864 <HAL_RCC_OscConfig+0x96c>)
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d112      	bne.n	80027e6 <HAL_RCC_OscConfig+0x8ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c0:	4b28      	ldr	r3, [pc, #160]	; (8002864 <HAL_RCC_OscConfig+0x96c>)
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	4a27      	ldr	r2, [pc, #156]	; (8002864 <HAL_RCC_OscConfig+0x96c>)
 80027c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ca:	61d3      	str	r3, [r2, #28]
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <HAL_RCC_OscConfig+0x96c>)
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80027d4:	f107 0308 	add.w	r3, r7, #8
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80027e0:	2301      	movs	r3, #1
 80027e2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e6:	4b22      	ldr	r3, [pc, #136]	; (8002870 <HAL_RCC_OscConfig+0x978>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d11a      	bne.n	8002828 <HAL_RCC_OscConfig+0x930>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f2:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <HAL_RCC_OscConfig+0x978>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1e      	ldr	r2, [pc, #120]	; (8002870 <HAL_RCC_OscConfig+0x978>)
 80027f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fe:	f7fd fd69 	bl	80002d4 <HAL_GetTick>
 8002802:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002806:	e009      	b.n	800281c <HAL_RCC_OscConfig+0x924>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002808:	f7fd fd64 	bl	80002d4 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b64      	cmp	r3, #100	; 0x64
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x924>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e371      	b.n	8002f00 <HAL_RCC_OscConfig+0x1008>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_RCC_OscConfig+0x978>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ef      	beq.n	8002808 <HAL_RCC_OscConfig+0x910>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d106      	bne.n	8002840 <HAL_RCC_OscConfig+0x948>
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <HAL_RCC_OscConfig+0x96c>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a0b      	ldr	r2, [pc, #44]	; (8002864 <HAL_RCC_OscConfig+0x96c>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6213      	str	r3, [r2, #32]
 800283e:	e037      	b.n	80028b0 <HAL_RCC_OscConfig+0x9b8>
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d114      	bne.n	8002874 <HAL_RCC_OscConfig+0x97c>
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_RCC_OscConfig+0x96c>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4a05      	ldr	r2, [pc, #20]	; (8002864 <HAL_RCC_OscConfig+0x96c>)
 8002850:	f023 0301 	bic.w	r3, r3, #1
 8002854:	6213      	str	r3, [r2, #32]
 8002856:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_RCC_OscConfig+0x96c>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4a02      	ldr	r2, [pc, #8]	; (8002864 <HAL_RCC_OscConfig+0x96c>)
 800285c:	f023 0304 	bic.w	r3, r3, #4
 8002860:	6213      	str	r3, [r2, #32]
 8002862:	e025      	b.n	80028b0 <HAL_RCC_OscConfig+0x9b8>
 8002864:	40021000 	.word	0x40021000
 8002868:	08008908 	.word	0x08008908
 800286c:	10908120 	.word	0x10908120
 8002870:	40007000 	.word	0x40007000
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b05      	cmp	r3, #5
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x9a0>
 800287e:	4b5e      	ldr	r3, [pc, #376]	; (80029f8 <HAL_RCC_OscConfig+0xb00>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4a5d      	ldr	r2, [pc, #372]	; (80029f8 <HAL_RCC_OscConfig+0xb00>)
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	6213      	str	r3, [r2, #32]
 800288a:	4b5b      	ldr	r3, [pc, #364]	; (80029f8 <HAL_RCC_OscConfig+0xb00>)
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	4a5a      	ldr	r2, [pc, #360]	; (80029f8 <HAL_RCC_OscConfig+0xb00>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6213      	str	r3, [r2, #32]
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_OscConfig+0x9b8>
 8002898:	4b57      	ldr	r3, [pc, #348]	; (80029f8 <HAL_RCC_OscConfig+0xb00>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4a56      	ldr	r2, [pc, #344]	; (80029f8 <HAL_RCC_OscConfig+0xb00>)
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	6213      	str	r3, [r2, #32]
 80028a4:	4b54      	ldr	r3, [pc, #336]	; (80029f8 <HAL_RCC_OscConfig+0xb00>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4a53      	ldr	r2, [pc, #332]	; (80029f8 <HAL_RCC_OscConfig+0xb00>)
 80028aa:	f023 0304 	bic.w	r3, r3, #4
 80028ae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d064      	beq.n	8002984 <HAL_RCC_OscConfig+0xa8c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ba:	f7fd fd0b 	bl	80002d4 <HAL_GetTick>
 80028be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0x9e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fd fd06 	bl	80002d4 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x9e4>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e311      	b.n	8002f00 <HAL_RCC_OscConfig+0x1008>
 80028dc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028e0:	2202      	movs	r2, #2
 80028e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	fa93 f2a3 	rbit	r2, r3
 80028ee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80028f8:	2202      	movs	r2, #2
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	fa93 f2a3 	rbit	r2, r3
 8002906:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800290a:	601a      	str	r2, [r3, #0]
  return result;
 800290c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002910:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	095b      	lsrs	r3, r3, #5
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d102      	bne.n	800292c <HAL_RCC_OscConfig+0xa34>
 8002926:	4b34      	ldr	r3, [pc, #208]	; (80029f8 <HAL_RCC_OscConfig+0xb00>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	e00d      	b.n	8002948 <HAL_RCC_OscConfig+0xa50>
 800292c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002930:	2202      	movs	r2, #2
 8002932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	fa93 f2a3 	rbit	r2, r3
 800293e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	4b2c      	ldr	r3, [pc, #176]	; (80029f8 <HAL_RCC_OscConfig+0xb00>)
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800294c:	2102      	movs	r1, #2
 800294e:	6011      	str	r1, [r2, #0]
 8002950:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	fa92 f1a2 	rbit	r1, r2
 800295a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800295e:	6011      	str	r1, [r2, #0]
  return result;
 8002960:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	fab2 f282 	clz	r2, r2
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f002 021f 	and.w	r2, r2, #31
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f202 	lsl.w	r2, r1, r2
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0a0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x9cc>
 8002982:	e066      	b.n	8002a52 <HAL_RCC_OscConfig+0xb5a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002984:	f7fd fca6 	bl	80002d4 <HAL_GetTick>
 8002988:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298c:	e00b      	b.n	80029a6 <HAL_RCC_OscConfig+0xaae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7fd fca1 	bl	80002d4 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0xaae>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e2ac      	b.n	8002f00 <HAL_RCC_OscConfig+0x1008>
 80029a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80029aa:	2202      	movs	r2, #2
 80029ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	fa93 f2a3 	rbit	r2, r3
 80029b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80029c2:	2202      	movs	r2, #2
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	fa93 f2a3 	rbit	r2, r3
 80029d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029d4:	601a      	str	r2, [r3, #0]
  return result;
 80029d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f043 0302 	orr.w	r3, r3, #2
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d105      	bne.n	80029fc <HAL_RCC_OscConfig+0xb04>
 80029f0:	4b01      	ldr	r3, [pc, #4]	; (80029f8 <HAL_RCC_OscConfig+0xb00>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	e010      	b.n	8002a18 <HAL_RCC_OscConfig+0xb20>
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000
 80029fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a00:	2202      	movs	r2, #2
 8002a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	fa93 f2a3 	rbit	r2, r3
 8002a0e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	4bb6      	ldr	r3, [pc, #728]	; (8002cf0 <HAL_RCC_OscConfig+0xdf8>)
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	6011      	str	r1, [r2, #0]
 8002a20:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	fa92 f1a2 	rbit	r1, r2
 8002a2a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002a2e:	6011      	str	r1, [r2, #0]
  return result;
 8002a30:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	fab2 f282 	clz	r2, r2
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	f002 021f 	and.w	r2, r2, #31
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d19d      	bne.n	800298e <HAL_RCC_OscConfig+0xa96>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a52:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d105      	bne.n	8002a66 <HAL_RCC_OscConfig+0xb6e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5a:	4ba5      	ldr	r3, [pc, #660]	; (8002cf0 <HAL_RCC_OscConfig+0xdf8>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4aa4      	ldr	r2, [pc, #656]	; (8002cf0 <HAL_RCC_OscConfig+0xdf8>)
 8002a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a64:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00e      	beq.n	8002a8e <HAL_RCC_OscConfig+0xb96>
 8002a70:	1d3b      	adds	r3, r7, #4
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d009      	beq.n	8002a8e <HAL_RCC_OscConfig+0xb96>
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d004      	beq.n	8002a8e <HAL_RCC_OscConfig+0xb96>
 8002a84:	f240 213a 	movw	r1, #570	; 0x23a
 8002a88:	489a      	ldr	r0, [pc, #616]	; (8002cf4 <HAL_RCC_OscConfig+0xdfc>)
 8002a8a:	f005 f8fa 	bl	8007c82 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8232 	beq.w	8002efe <HAL_RCC_OscConfig+0x1006>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a9a:	4b95      	ldr	r3, [pc, #596]	; (8002cf0 <HAL_RCC_OscConfig+0xdf8>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	f000 820c 	beq.w	8002ec0 <HAL_RCC_OscConfig+0xfc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	f040 8184 	bne.w	8002dbc <HAL_RCC_OscConfig+0xec4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xbdc>
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac8:	d004      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xbdc>
 8002aca:	f240 2143 	movw	r1, #579	; 0x243
 8002ace:	4889      	ldr	r0, [pc, #548]	; (8002cf4 <HAL_RCC_OscConfig+0xdfc>)
 8002ad0:	f005 f8d7 	bl	8007c82 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d058      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc98>
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ae8:	d052      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc98>
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002af4:	d04c      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc98>
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b00:	d046      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc98>
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b0c:	d040      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc98>
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b18:	d03a      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc98>
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b24:	d034      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc98>
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b30:	d02e      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc98>
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b3c:	d028      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc98>
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b48:	d022      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc98>
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b54:	d01c      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc98>
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b60:	d016      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc98>
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b6c:	d010      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc98>
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc98>
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002b84:	d004      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc98>
 8002b86:	f44f 7111 	mov.w	r1, #580	; 0x244
 8002b8a:	485a      	ldr	r0, [pc, #360]	; (8002cf4 <HAL_RCC_OscConfig+0xdfc>)
 8002b8c:	f005 f879 	bl	8007c82 <assert_failed>
 8002b90:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	fa93 f2a3 	rbit	r2, r3
 8002ba4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ba8:	601a      	str	r2, [r3, #0]
  return result;
 8002baa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002bae:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fd fb85 	bl	80002d4 <HAL_GetTick>
 8002bca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bce:	e009      	b.n	8002be4 <HAL_RCC_OscConfig+0xcec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7fd fb80 	bl	80002d4 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0xcec>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e18d      	b.n	8002f00 <HAL_RCC_OscConfig+0x1008>
 8002be4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002be8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	fa93 f2a3 	rbit	r2, r3
 8002bf8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002bfc:	601a      	str	r2, [r3, #0]
  return result;
 8002bfe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d102      	bne.n	8002c1e <HAL_RCC_OscConfig+0xd26>
 8002c18:	4b35      	ldr	r3, [pc, #212]	; (8002cf0 <HAL_RCC_OscConfig+0xdf8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	e01b      	b.n	8002c56 <HAL_RCC_OscConfig+0xd5e>
 8002c1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	fa93 f2a3 	rbit	r2, r3
 8002c32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	fa93 f2a3 	rbit	r2, r3
 8002c4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <HAL_RCC_OscConfig+0xdf8>)
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c5a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c5e:	6011      	str	r1, [r2, #0]
 8002c60:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	fa92 f1a2 	rbit	r1, r2
 8002c6a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002c6e:	6011      	str	r1, [r2, #0]
  return result;
 8002c70:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	fab2 f282 	clz	r2, r2
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	f042 0220 	orr.w	r2, r2, #32
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f002 021f 	and.w	r2, r2, #31
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d19e      	bne.n	8002bd0 <HAL_RCC_OscConfig+0xcd8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <HAL_RCC_OscConfig+0xdf8>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	430b      	orrs	r3, r1
 8002ca8:	4911      	ldr	r1, [pc, #68]	; (8002cf0 <HAL_RCC_OscConfig+0xdf8>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	604b      	str	r3, [r1, #4]
 8002cae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	fa93 f2a3 	rbit	r2, r3
 8002cc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cc6:	601a      	str	r2, [r3, #0]
  return result;
 8002cc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ccc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	461a      	mov	r2, r3
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fd faf6 	bl	80002d4 <HAL_GetTick>
 8002ce8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cec:	e00e      	b.n	8002d0c <HAL_RCC_OscConfig+0xe14>
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	08008908 	.word	0x08008908
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fd faec 	bl	80002d4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0xe14>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e0f9      	b.n	8002f00 <HAL_RCC_OscConfig+0x1008>
 8002d0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d24:	601a      	str	r2, [r3, #0]
  return result;
 8002d26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <HAL_RCC_OscConfig+0xe4e>
 8002d40:	4b72      	ldr	r3, [pc, #456]	; (8002f0c <HAL_RCC_OscConfig+0x1014>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	e01b      	b.n	8002d7e <HAL_RCC_OscConfig+0xe86>
 8002d46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	fa93 f2a3 	rbit	r2, r3
 8002d5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	fa93 f2a3 	rbit	r2, r3
 8002d74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	4b64      	ldr	r3, [pc, #400]	; (8002f0c <HAL_RCC_OscConfig+0x1014>)
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d82:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d86:	6011      	str	r1, [r2, #0]
 8002d88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	fa92 f1a2 	rbit	r1, r2
 8002d92:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d96:	6011      	str	r1, [r2, #0]
  return result;
 8002d98:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	fab2 f282 	clz	r2, r2
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	f042 0220 	orr.w	r2, r2, #32
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	f002 021f 	and.w	r2, r2, #31
 8002dae:	2101      	movs	r1, #1
 8002db0:	fa01 f202 	lsl.w	r2, r1, r2
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d09e      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xe00>
 8002dba:	e0a0      	b.n	8002efe <HAL_RCC_OscConfig+0x1006>
 8002dbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dd4:	601a      	str	r2, [r3, #0]
  return result;
 8002dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dda:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002de6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	461a      	mov	r2, r3
 8002dee:	2300      	movs	r3, #0
 8002df0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fd fa6f 	bl	80002d4 <HAL_GetTick>
 8002df6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfa:	e009      	b.n	8002e10 <HAL_RCC_OscConfig+0xf18>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7fd fa6a 	bl	80002d4 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0xf18>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e077      	b.n	8002f00 <HAL_RCC_OscConfig+0x1008>
 8002e10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	fa93 f2a3 	rbit	r2, r3
 8002e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e28:	601a      	str	r2, [r3, #0]
  return result;
 8002e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d102      	bne.n	8002e4a <HAL_RCC_OscConfig+0xf52>
 8002e44:	4b31      	ldr	r3, [pc, #196]	; (8002f0c <HAL_RCC_OscConfig+0x1014>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	e01b      	b.n	8002e82 <HAL_RCC_OscConfig+0xf8a>
 8002e4a:	f107 0320 	add.w	r3, r7, #32
 8002e4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	f107 0320 	add.w	r3, r7, #32
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	fa93 f2a3 	rbit	r2, r3
 8002e5e:	f107 031c 	add.w	r3, r7, #28
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	f107 0318 	add.w	r3, r7, #24
 8002e68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	f107 0318 	add.w	r3, r7, #24
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	fa93 f2a3 	rbit	r2, r3
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <HAL_RCC_OscConfig+0x1014>)
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f107 0210 	add.w	r2, r7, #16
 8002e86:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e8a:	6011      	str	r1, [r2, #0]
 8002e8c:	f107 0210 	add.w	r2, r7, #16
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	fa92 f1a2 	rbit	r1, r2
 8002e96:	f107 020c 	add.w	r2, r7, #12
 8002e9a:	6011      	str	r1, [r2, #0]
  return result;
 8002e9c:	f107 020c 	add.w	r2, r7, #12
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	fab2 f282 	clz	r2, r2
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	f042 0220 	orr.w	r2, r2, #32
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	f002 021f 	and.w	r2, r2, #31
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d19e      	bne.n	8002dfc <HAL_RCC_OscConfig+0xf04>
 8002ebe:	e01e      	b.n	8002efe <HAL_RCC_OscConfig+0x1006>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec0:	1d3b      	adds	r3, r7, #4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_OscConfig+0xfd6>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e018      	b.n	8002f00 <HAL_RCC_OscConfig+0x1008>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_RCC_OscConfig+0x1014>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ed6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002eda:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d108      	bne.n	8002efa <HAL_RCC_OscConfig+0x1002>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ee8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002eec:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0x1006>
#endif
        {
          return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <HAL_RCC_OscConfig+0x1008>
        }
      }
    }
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000

08002f10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b09e      	sub	sp, #120	; 0x78
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e203      	b.n	8003330 <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d116      	bne.n	8002f62 <HAL_RCC_ClockConfig+0x52>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d110      	bne.n	8002f62 <HAL_RCC_ClockConfig+0x52>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <HAL_RCC_ClockConfig+0x52>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d104      	bne.n	8002f62 <HAL_RCC_ClockConfig+0x52>
 8002f58:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002f5c:	48a5      	ldr	r0, [pc, #660]	; (80031f4 <HAL_RCC_ClockConfig+0x2e4>)
 8002f5e:	f004 fe90 	bl	8007c82 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x6e>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d007      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x6e>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d004      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x6e>
 8002f74:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8002f78:	489e      	ldr	r0, [pc, #632]	; (80031f4 <HAL_RCC_ClockConfig+0x2e4>)
 8002f7a:	f004 fe82 	bl	8007c82 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f7e:	4b9e      	ldr	r3, [pc, #632]	; (80031f8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d910      	bls.n	8002fae <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8c:	4b9a      	ldr	r3, [pc, #616]	; (80031f8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f023 0207 	bic.w	r2, r3, #7
 8002f94:	4998      	ldr	r1, [pc, #608]	; (80031f8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9c:	4b96      	ldr	r3, [pc, #600]	; (80031f8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e1c0      	b.n	8003330 <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d031      	beq.n	800301e <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d024      	beq.n	800300c <HAL_RCC_ClockConfig+0xfc>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b80      	cmp	r3, #128	; 0x80
 8002fc8:	d020      	beq.n	800300c <HAL_RCC_ClockConfig+0xfc>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b90      	cmp	r3, #144	; 0x90
 8002fd0:	d01c      	beq.n	800300c <HAL_RCC_ClockConfig+0xfc>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2ba0      	cmp	r3, #160	; 0xa0
 8002fd8:	d018      	beq.n	800300c <HAL_RCC_ClockConfig+0xfc>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2bb0      	cmp	r3, #176	; 0xb0
 8002fe0:	d014      	beq.n	800300c <HAL_RCC_ClockConfig+0xfc>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2bc0      	cmp	r3, #192	; 0xc0
 8002fe8:	d010      	beq.n	800300c <HAL_RCC_ClockConfig+0xfc>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2bd0      	cmp	r3, #208	; 0xd0
 8002ff0:	d00c      	beq.n	800300c <HAL_RCC_ClockConfig+0xfc>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2be0      	cmp	r3, #224	; 0xe0
 8002ff8:	d008      	beq.n	800300c <HAL_RCC_ClockConfig+0xfc>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2bf0      	cmp	r3, #240	; 0xf0
 8003000:	d004      	beq.n	800300c <HAL_RCC_ClockConfig+0xfc>
 8003002:	f240 21db 	movw	r1, #731	; 0x2db
 8003006:	487b      	ldr	r0, [pc, #492]	; (80031f4 <HAL_RCC_ClockConfig+0x2e4>)
 8003008:	f004 fe3b 	bl	8007c82 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800300c:	4b7b      	ldr	r3, [pc, #492]	; (80031fc <HAL_RCC_ClockConfig+0x2ec>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4978      	ldr	r1, [pc, #480]	; (80031fc <HAL_RCC_ClockConfig+0x2ec>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 80f3 	beq.w	8003212 <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00c      	beq.n	800304e <HAL_RCC_ClockConfig+0x13e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d008      	beq.n	800304e <HAL_RCC_ClockConfig+0x13e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d004      	beq.n	800304e <HAL_RCC_ClockConfig+0x13e>
 8003044:	f240 21e2 	movw	r1, #738	; 0x2e2
 8003048:	486a      	ldr	r0, [pc, #424]	; (80031f4 <HAL_RCC_ClockConfig+0x2e4>)
 800304a:	f004 fe1a 	bl	8007c82 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d13c      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x1c0>
 8003056:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800305a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	d102      	bne.n	8003080 <HAL_RCC_ClockConfig+0x170>
 800307a:	4b60      	ldr	r3, [pc, #384]	; (80031fc <HAL_RCC_ClockConfig+0x2ec>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	e00f      	b.n	80030a0 <HAL_RCC_ClockConfig+0x190>
 8003080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003084:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	667b      	str	r3, [r7, #100]	; 0x64
 800308e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003092:	663b      	str	r3, [r7, #96]	; 0x60
 8003094:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800309c:	4b57      	ldr	r3, [pc, #348]	; (80031fc <HAL_RCC_ClockConfig+0x2ec>)
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80030a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030a8:	fa92 f2a2 	rbit	r2, r2
 80030ac:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030b0:	fab2 f282 	clz	r2, r2
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	f042 0220 	orr.w	r2, r2, #32
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	f002 021f 	and.w	r2, r2, #31
 80030c0:	2101      	movs	r1, #1
 80030c2:	fa01 f202 	lsl.w	r2, r1, r2
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d17b      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e12f      	b.n	8003330 <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d13c      	bne.n	8003152 <HAL_RCC_ClockConfig+0x242>
 80030d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d102      	bne.n	8003102 <HAL_RCC_ClockConfig+0x1f2>
 80030fc:	4b3f      	ldr	r3, [pc, #252]	; (80031fc <HAL_RCC_ClockConfig+0x2ec>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	e00f      	b.n	8003122 <HAL_RCC_ClockConfig+0x212>
 8003102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003106:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	647b      	str	r3, [r7, #68]	; 0x44
 8003110:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003114:	643b      	str	r3, [r7, #64]	; 0x40
 8003116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800311e:	4b37      	ldr	r3, [pc, #220]	; (80031fc <HAL_RCC_ClockConfig+0x2ec>)
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003126:	63ba      	str	r2, [r7, #56]	; 0x38
 8003128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800312a:	fa92 f2a2 	rbit	r2, r2
 800312e:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003132:	fab2 f282 	clz	r2, r2
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	f042 0220 	orr.w	r2, r2, #32
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	f002 021f 	and.w	r2, r2, #31
 8003142:	2101      	movs	r1, #1
 8003144:	fa01 f202 	lsl.w	r2, r1, r2
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d13a      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e0ee      	b.n	8003330 <HAL_RCC_ClockConfig+0x420>
 8003152:	2302      	movs	r3, #2
 8003154:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d102      	bne.n	800317a <HAL_RCC_ClockConfig+0x26a>
 8003174:	4b21      	ldr	r3, [pc, #132]	; (80031fc <HAL_RCC_ClockConfig+0x2ec>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	e00d      	b.n	8003196 <HAL_RCC_ClockConfig+0x286>
 800317a:	2302      	movs	r3, #2
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	fa93 f3a3 	rbit	r3, r3
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
 8003186:	2302      	movs	r3, #2
 8003188:	623b      	str	r3, [r7, #32]
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <HAL_RCC_ClockConfig+0x2ec>)
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	2202      	movs	r2, #2
 8003198:	61ba      	str	r2, [r7, #24]
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	fa92 f2a2 	rbit	r2, r2
 80031a0:	617a      	str	r2, [r7, #20]
  return result;
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	fab2 f282 	clz	r2, r2
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	f042 0220 	orr.w	r2, r2, #32
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	f002 021f 	and.w	r2, r2, #31
 80031b4:	2101      	movs	r1, #1
 80031b6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0b5      	b.n	8003330 <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c4:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <HAL_RCC_ClockConfig+0x2ec>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f023 0203 	bic.w	r2, r3, #3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	490a      	ldr	r1, [pc, #40]	; (80031fc <HAL_RCC_ClockConfig+0x2ec>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d6:	f7fd f87d 	bl	80002d4 <HAL_GetTick>
 80031da:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031dc:	e010      	b.n	8003200 <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031de:	f7fd f879 	bl	80002d4 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d907      	bls.n	8003200 <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e09d      	b.n	8003330 <HAL_RCC_ClockConfig+0x420>
 80031f4:	08008908 	.word	0x08008908
 80031f8:	40022000 	.word	0x40022000
 80031fc:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003200:	4b4d      	ldr	r3, [pc, #308]	; (8003338 <HAL_RCC_ClockConfig+0x428>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 020c 	and.w	r2, r3, #12
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	429a      	cmp	r2, r3
 8003210:	d1e5      	bne.n	80031de <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003212:	4b4a      	ldr	r3, [pc, #296]	; (800333c <HAL_RCC_ClockConfig+0x42c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d210      	bcs.n	8003242 <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003220:	4b46      	ldr	r3, [pc, #280]	; (800333c <HAL_RCC_ClockConfig+0x42c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f023 0207 	bic.w	r2, r3, #7
 8003228:	4944      	ldr	r1, [pc, #272]	; (800333c <HAL_RCC_ClockConfig+0x42c>)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003230:	4b42      	ldr	r3, [pc, #264]	; (800333c <HAL_RCC_ClockConfig+0x42c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d001      	beq.n	8003242 <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e076      	b.n	8003330 <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d025      	beq.n	800329a <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d018      	beq.n	8003288 <HAL_RCC_ClockConfig+0x378>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325e:	d013      	beq.n	8003288 <HAL_RCC_ClockConfig+0x378>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003268:	d00e      	beq.n	8003288 <HAL_RCC_ClockConfig+0x378>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003272:	d009      	beq.n	8003288 <HAL_RCC_ClockConfig+0x378>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800327c:	d004      	beq.n	8003288 <HAL_RCC_ClockConfig+0x378>
 800327e:	f240 311e 	movw	r1, #798	; 0x31e
 8003282:	482f      	ldr	r0, [pc, #188]	; (8003340 <HAL_RCC_ClockConfig+0x430>)
 8003284:	f004 fcfd 	bl	8007c82 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003288:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <HAL_RCC_ClockConfig+0x428>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4928      	ldr	r1, [pc, #160]	; (8003338 <HAL_RCC_ClockConfig+0x428>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d026      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d018      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x3d0>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b6:	d013      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x3d0>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80032c0:	d00e      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x3d0>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80032ca:	d009      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x3d0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032d4:	d004      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x3d0>
 80032d6:	f240 3125 	movw	r1, #805	; 0x325
 80032da:	4819      	ldr	r0, [pc, #100]	; (8003340 <HAL_RCC_ClockConfig+0x430>)
 80032dc:	f004 fcd1 	bl	8007c82 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032e0:	4b15      	ldr	r3, [pc, #84]	; (8003338 <HAL_RCC_ClockConfig+0x428>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4912      	ldr	r1, [pc, #72]	; (8003338 <HAL_RCC_ClockConfig+0x428>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032f4:	f000 f82c 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 80032f8:	4601      	mov	r1, r0
 80032fa:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <HAL_RCC_ClockConfig+0x428>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003302:	22f0      	movs	r2, #240	; 0xf0
 8003304:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	fa92 f2a2 	rbit	r2, r2
 800330c:	60fa      	str	r2, [r7, #12]
  return result;
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	fab2 f282 	clz	r2, r2
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	40d3      	lsrs	r3, r2
 8003318:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <HAL_RCC_ClockConfig+0x434>)
 800331a:	5cd3      	ldrb	r3, [r2, r3]
 800331c:	fa21 f303 	lsr.w	r3, r1, r3
 8003320:	4a09      	ldr	r2, [pc, #36]	; (8003348 <HAL_RCC_ClockConfig+0x438>)
 8003322:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <HAL_RCC_ClockConfig+0x43c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f004 fcdd 	bl	8007ce8 <HAL_InitTick>
  
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3778      	adds	r7, #120	; 0x78
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	40022000 	.word	0x40022000
 8003340:	08008908 	.word	0x08008908
 8003344:	08008b08 	.word	0x08008b08
 8003348:	2000000c 	.word	0x2000000c
 800334c:	20000000 	.word	0x20000000

08003350 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003350:	b480      	push	{r7}
 8003352:	b08b      	sub	sp, #44	; 0x2c
 8003354:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	2300      	movs	r3, #0
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800336a:	4b29      	ldr	r3, [pc, #164]	; (8003410 <HAL_RCC_GetSysClockFreq+0xc0>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b04      	cmp	r3, #4
 8003378:	d002      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0x30>
 800337a:	2b08      	cmp	r3, #8
 800337c:	d003      	beq.n	8003386 <HAL_RCC_GetSysClockFreq+0x36>
 800337e:	e03c      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003380:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003382:	623b      	str	r3, [r7, #32]
      break;
 8003384:	e03c      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800338c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003390:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	fa92 f2a2 	rbit	r2, r2
 8003398:	607a      	str	r2, [r7, #4]
  return result;
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	fab2 f282 	clz	r2, r2
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	40d3      	lsrs	r3, r2
 80033a4:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033a6:	5cd3      	ldrb	r3, [r2, r3]
 80033a8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033aa:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	220f      	movs	r2, #15
 80033b4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	fa92 f2a2 	rbit	r2, r2
 80033bc:	60fa      	str	r2, [r7, #12]
  return result;
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	fab2 f282 	clz	r2, r2
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	40d3      	lsrs	r3, r2
 80033c8:	4a14      	ldr	r2, [pc, #80]	; (800341c <HAL_RCC_GetSysClockFreq+0xcc>)
 80033ca:	5cd3      	ldrb	r3, [r2, r3]
 80033cc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033d8:	4a0e      	ldr	r2, [pc, #56]	; (8003414 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
 80033e8:	e004      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	4a0c      	ldr	r2, [pc, #48]	; (8003420 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	623b      	str	r3, [r7, #32]
      break;
 80033f8:	e002      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033fc:	623b      	str	r3, [r7, #32]
      break;
 80033fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003400:	6a3b      	ldr	r3, [r7, #32]
}
 8003402:	4618      	mov	r0, r3
 8003404:	372c      	adds	r7, #44	; 0x2c
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000
 8003414:	007a1200 	.word	0x007a1200
 8003418:	08008a64 	.word	0x08008a64
 800341c:	08008a74 	.word	0x08008a74
 8003420:	003d0900 	.word	0x003d0900

08003424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <HAL_RCC_GetHCLKFreq+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	2000000c 	.word	0x2000000c

0800343c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003442:	f7ff ffef 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003446:	4601      	mov	r1, r0
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003450:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003454:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	fa92 f2a2 	rbit	r2, r2
 800345c:	603a      	str	r2, [r7, #0]
  return result;
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	fab2 f282 	clz	r2, r2
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	40d3      	lsrs	r3, r2
 8003468:	4a04      	ldr	r2, [pc, #16]	; (800347c <HAL_RCC_GetPCLK1Freq+0x40>)
 800346a:	5cd3      	ldrb	r3, [r2, r3]
 800346c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000
 800347c:	08008b18 	.word	0x08008b18

08003480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003486:	f7ff ffcd 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 800348a:	4601      	mov	r1, r0
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003494:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003498:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	fa92 f2a2 	rbit	r2, r2
 80034a0:	603a      	str	r2, [r7, #0]
  return result;
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	fab2 f282 	clz	r2, r2
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	40d3      	lsrs	r3, r2
 80034ac:	4a04      	ldr	r2, [pc, #16]	; (80034c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80034ae:	5cd3      	ldrb	r3, [r2, r3]
 80034b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	08008b18 	.word	0x08008b18

080034c4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d104      	bne.n	80034de <HAL_RCC_GetClockConfig+0x1a>
 80034d4:	f240 4184 	movw	r1, #1156	; 0x484
 80034d8:	4818      	ldr	r0, [pc, #96]	; (800353c <HAL_RCC_GetClockConfig+0x78>)
 80034da:	f004 fbd2 	bl	8007c82 <assert_failed>
  assert_param(pFLatency != NULL);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d104      	bne.n	80034ee <HAL_RCC_GetClockConfig+0x2a>
 80034e4:	f240 4185 	movw	r1, #1157	; 0x485
 80034e8:	4814      	ldr	r0, [pc, #80]	; (800353c <HAL_RCC_GetClockConfig+0x78>)
 80034ea:	f004 fbca 	bl	8007c82 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	220f      	movs	r2, #15
 80034f2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034f4:	4b12      	ldr	r3, [pc, #72]	; (8003540 <HAL_RCC_GetClockConfig+0x7c>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0203 	and.w	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <HAL_RCC_GetClockConfig+0x7c>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <HAL_RCC_GetClockConfig+0x7c>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_GetClockConfig+0x7c>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	08db      	lsrs	r3, r3, #3
 800351e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <HAL_RCC_GetClockConfig+0x80>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0207 	and.w	r2, r3, #7
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	601a      	str	r2, [r3, #0]
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	08008908 	.word	0x08008908
 8003540:	40021000 	.word	0x40021000
 8003544:	40022000 	.word	0x40022000

08003548 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b092      	sub	sp, #72	; 0x48
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a63      	ldr	r2, [pc, #396]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d903      	bls.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x22>
 8003562:	2171      	movs	r1, #113	; 0x71
 8003564:	4862      	ldr	r0, [pc, #392]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003566:	f004 fb8c 	bl	8007c82 <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80f4 	beq.w	8003760 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d012      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003588:	d00d      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003592:	d008      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800359c:	d003      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800359e:	2177      	movs	r1, #119	; 0x77
 80035a0:	4853      	ldr	r0, [pc, #332]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035a2:	f004 fb6e 	bl	8007c82 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 80035a6:	2300      	movs	r3, #0
 80035a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ac:	4b51      	ldr	r3, [pc, #324]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10e      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b8:	4b4e      	ldr	r3, [pc, #312]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	4a4d      	ldr	r2, [pc, #308]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c2:	61d3      	str	r3, [r2, #28]
 80035c4:	4b4b      	ldr	r3, [pc, #300]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	4b48      	ldr	r3, [pc, #288]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d118      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e2:	4b45      	ldr	r3, [pc, #276]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a44      	ldr	r2, [pc, #272]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ee:	f7fc fe71 	bl	80002d4 <HAL_GetTick>
 80035f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	e008      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f6:	f7fc fe6d 	bl	80002d4 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b64      	cmp	r3, #100	; 0x64
 8003602:	d901      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e228      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x512>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003608:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003614:	4b37      	ldr	r3, [pc, #220]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800361e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 808a 	beq.w	800373a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003630:	429a      	cmp	r2, r3
 8003632:	f000 8082 	beq.w	800373a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003636:	4b2f      	ldr	r3, [pc, #188]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003644:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	fa93 f3a3 	rbit	r3, r3
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	4b28      	ldr	r3, [pc, #160]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	461a      	mov	r2, r3
 8003660:	2301      	movs	r3, #1
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003668:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003674:	fab3 f383 	clz	r3, r3
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	461a      	mov	r2, r3
 8003684:	2300      	movs	r3, #0
 8003686:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003688:	4a1a      	ldr	r2, [pc, #104]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800368a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800368e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d050      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fc fe1c 	bl	80002d4 <HAL_GetTick>
 800369c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	e00a      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7fc fe18 	bl	80002d4 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e1d1      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x512>
 80036b6:	2302      	movs	r3, #2
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	fa93 f3a3 	rbit	r3, r3
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
 80036c2:	2302      	movs	r3, #2
 80036c4:	623b      	str	r3, [r7, #32]
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	61fb      	str	r3, [r7, #28]
  return result;
 80036ce:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d0:	fab3 f383 	clz	r3, r3
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f043 0302 	orr.w	r3, r3, #2
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d10d      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80036e4:	4b03      	ldr	r3, [pc, #12]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	e012      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80036ea:	bf00      	nop
 80036ec:	001f92e1 	.word	0x001f92e1
 80036f0:	08008940 	.word	0x08008940
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40007000 	.word	0x40007000
 80036fc:	10908100 	.word	0x10908100
 8003700:	2302      	movs	r3, #2
 8003702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	4ba2      	ldr	r3, [pc, #648]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	2202      	movs	r2, #2
 8003712:	613a      	str	r2, [r7, #16]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	fa92 f2a2 	rbit	r2, r2
 800371a:	60fa      	str	r2, [r7, #12]
  return result;
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	fab2 f282 	clz	r2, r2
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	f002 021f 	and.w	r2, r2, #31
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f202 	lsl.w	r2, r1, r2
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0b2      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800373a:	4b97      	ldr	r3, [pc, #604]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4994      	ldr	r1, [pc, #592]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003748:	4313      	orrs	r3, r2
 800374a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800374c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003754:	4b90      	ldr	r3, [pc, #576]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	4a8f      	ldr	r2, [pc, #572]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800375a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01c      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00f      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d00b      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d007      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d003      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800378c:	21be      	movs	r1, #190	; 0xbe
 800378e:	4883      	ldr	r0, [pc, #524]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003790:	f004 fa77 	bl	8007c82 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003794:	4b80      	ldr	r3, [pc, #512]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	f023 0203 	bic.w	r2, r3, #3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	497d      	ldr	r1, [pc, #500]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d014      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x282>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d003      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x282>
 80037c2:	21e0      	movs	r1, #224	; 0xe0
 80037c4:	4875      	ldr	r0, [pc, #468]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80037c6:	f004 fa5c 	bl	8007c82 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ca:	4b73      	ldr	r3, [pc, #460]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f023 0210 	bic.w	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	4970      	ldr	r1, [pc, #448]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d015      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f0:	d007      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80037fa:	21ee      	movs	r1, #238	; 0xee
 80037fc:	4867      	ldr	r0, [pc, #412]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80037fe:	f004 fa40 	bl	8007c82 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003802:	4b65      	ldr	r3, [pc, #404]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4962      	ldr	r1, [pc, #392]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d015      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b20      	cmp	r3, #32
 800382e:	d004      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 8003830:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003834:	4859      	ldr	r0, [pc, #356]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003836:	f004 fa24 	bl	8007c82 <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800383a:	4b57      	ldr	r3, [pc, #348]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f023 0220 	bic.w	r2, r3, #32
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	4954      	ldr	r1, [pc, #336]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003848:	4313      	orrs	r3, r2
 800384a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d015      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	2b40      	cmp	r3, #64	; 0x40
 8003866:	d004      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003868:	f44f 718a 	mov.w	r1, #276	; 0x114
 800386c:	484b      	ldr	r0, [pc, #300]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800386e:	f004 fa08 	bl	8007c82 <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003872:	4b49      	ldr	r3, [pc, #292]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	4946      	ldr	r1, [pc, #280]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003880:	4313      	orrs	r3, r2
 8003882:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800388c:	2b00      	cmp	r3, #0
 800388e:	d016      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d009      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038a0:	d004      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x364>
 80038a2:	f240 113d 	movw	r1, #317	; 0x13d
 80038a6:	483d      	ldr	r0, [pc, #244]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80038a8:	f004 f9eb 	bl	8007c82 <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038ac:	4b3a      	ldr	r3, [pc, #232]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	4937      	ldr	r1, [pc, #220]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d04d      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d040      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038da:	d03b      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80038e4:	d036      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80038ee:	d031      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80038f8:	d02c      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003902:	d027      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 800390c:	d022      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8003916:	d01d      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8003920:	d018      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800392a:	d013      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003934:	d00e      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 800393e:	d009      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003948:	d004      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800394a:	f240 114d 	movw	r1, #333	; 0x14d
 800394e:	4813      	ldr	r0, [pc, #76]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003950:	f004 f997 	bl	8007c82 <assert_failed>
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003954:	4b10      	ldr	r3, [pc, #64]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	490d      	ldr	r1, [pc, #52]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003962:	4313      	orrs	r3, r2
 8003964:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d01b      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x446>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003982:	d004      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003984:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8003988:	4804      	ldr	r0, [pc, #16]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800398a:	f004 f97a 	bl	8007c82 <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800398e:	4b02      	ldr	r3, [pc, #8]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003996:	e003      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8003998:	40021000 	.word	0x40021000
 800399c:	08008940 	.word	0x08008940
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	492f      	ldr	r1, [pc, #188]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d016      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c6:	d004      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80039c8:	f240 11af 	movw	r1, #431	; 0x1af
 80039cc:	4826      	ldr	r0, [pc, #152]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 80039ce:	f004 f958 	bl	8007c82 <assert_failed>
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80039d2:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	4921      	ldr	r1, [pc, #132]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d016      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d009      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a00:	d004      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8003a02:	f240 11b9 	movw	r1, #441	; 0x1b9
 8003a06:	4818      	ldr	r0, [pc, #96]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8003a08:	f004 f93b 	bl	8007c82 <assert_failed>
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003a0c:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	4912      	ldr	r1, [pc, #72]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x510>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a3a:	d004      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003a3c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003a40:	4809      	ldr	r0, [pc, #36]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8003a42:	f004 f91e 	bl	8007c82 <assert_failed>
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003a46:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	4904      	ldr	r1, [pc, #16]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3748      	adds	r7, #72	; 0x48
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
 8003a68:	08008940 	.word	0x08008940

08003a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e079      	b.n	8003b72 <HAL_TIM_Base_Init+0x106>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a3e      	ldr	r2, [pc, #248]	; (8003b7c <HAL_TIM_Base_Init+0x110>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d01d      	beq.n	8003ac4 <HAL_TIM_Base_Init+0x58>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a90:	d018      	beq.n	8003ac4 <HAL_TIM_Base_Init+0x58>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a3a      	ldr	r2, [pc, #232]	; (8003b80 <HAL_TIM_Base_Init+0x114>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d013      	beq.n	8003ac4 <HAL_TIM_Base_Init+0x58>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a38      	ldr	r2, [pc, #224]	; (8003b84 <HAL_TIM_Base_Init+0x118>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00e      	beq.n	8003ac4 <HAL_TIM_Base_Init+0x58>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a37      	ldr	r2, [pc, #220]	; (8003b88 <HAL_TIM_Base_Init+0x11c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d009      	beq.n	8003ac4 <HAL_TIM_Base_Init+0x58>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a35      	ldr	r2, [pc, #212]	; (8003b8c <HAL_TIM_Base_Init+0x120>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <HAL_TIM_Base_Init+0x58>
 8003aba:	f240 1119 	movw	r1, #281	; 0x119
 8003abe:	4834      	ldr	r0, [pc, #208]	; (8003b90 <HAL_TIM_Base_Init+0x124>)
 8003ac0:	f004 f8df 	bl	8007c82 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d014      	beq.n	8003af6 <HAL_TIM_Base_Init+0x8a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d010      	beq.n	8003af6 <HAL_TIM_Base_Init+0x8a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d00c      	beq.n	8003af6 <HAL_TIM_Base_Init+0x8a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d008      	beq.n	8003af6 <HAL_TIM_Base_Init+0x8a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b60      	cmp	r3, #96	; 0x60
 8003aea:	d004      	beq.n	8003af6 <HAL_TIM_Base_Init+0x8a>
 8003aec:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8003af0:	4827      	ldr	r0, [pc, #156]	; (8003b90 <HAL_TIM_Base_Init+0x124>)
 8003af2:	f004 f8c6 	bl	8007c82 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00e      	beq.n	8003b1c <HAL_TIM_Base_Init+0xb0>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b06:	d009      	beq.n	8003b1c <HAL_TIM_Base_Init+0xb0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b10:	d004      	beq.n	8003b1c <HAL_TIM_Base_Init+0xb0>
 8003b12:	f240 111b 	movw	r1, #283	; 0x11b
 8003b16:	481e      	ldr	r0, [pc, #120]	; (8003b90 <HAL_TIM_Base_Init+0x124>)
 8003b18:	f004 f8b3 	bl	8007c82 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_TIM_Base_Init+0xca>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b80      	cmp	r3, #128	; 0x80
 8003b2a:	d004      	beq.n	8003b36 <HAL_TIM_Base_Init+0xca>
 8003b2c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8003b30:	4817      	ldr	r0, [pc, #92]	; (8003b90 <HAL_TIM_Base_Init+0x124>)
 8003b32:	f004 f8a6 	bl	8007c82 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <HAL_TIM_Base_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f822 	bl	8003b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3304      	adds	r3, #4
 8003b60:	4619      	mov	r1, r3
 8003b62:	4610      	mov	r0, r2
 8003b64:	f000 f9c0 	bl	8003ee8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40001000 	.word	0x40001000
 8003b84:	40014000 	.word	0x40014000
 8003b88:	40014400 	.word	0x40014400
 8003b8c:	40014800 	.word	0x40014800
 8003b90:	0800899c 	.word	0x0800899c

08003b94 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a21      	ldr	r2, [pc, #132]	; (8003c3c <HAL_TIM_Base_Start_IT+0x94>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01d      	beq.n	8003bf6 <HAL_TIM_Base_Start_IT+0x4e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc2:	d018      	beq.n	8003bf6 <HAL_TIM_Base_Start_IT+0x4e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <HAL_TIM_Base_Start_IT+0x98>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <HAL_TIM_Base_Start_IT+0x4e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <HAL_TIM_Base_Start_IT+0x9c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_TIM_Base_Start_IT+0x4e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1a      	ldr	r2, [pc, #104]	; (8003c48 <HAL_TIM_Base_Start_IT+0xa0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d009      	beq.n	8003bf6 <HAL_TIM_Base_Start_IT+0x4e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <HAL_TIM_Base_Start_IT+0xa4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_TIM_Base_Start_IT+0x4e>
 8003bec:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003bf0:	4817      	ldr	r0, [pc, #92]	; (8003c50 <HAL_TIM_Base_Start_IT+0xa8>)
 8003bf2:	f004 f846 	bl	8007c82 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0201 	orr.w	r2, r2, #1
 8003c04:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <HAL_TIM_Base_Start_IT+0xac>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b06      	cmp	r3, #6
 8003c16:	d00b      	beq.n	8003c30 <HAL_TIM_Base_Start_IT+0x88>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1e:	d007      	beq.n	8003c30 <HAL_TIM_Base_Start_IT+0x88>
  {
    __HAL_TIM_ENABLE(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	40001000 	.word	0x40001000
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800
 8003c50:	0800899c 	.word	0x0800899c
 8003c54:	00010007 	.word	0x00010007

08003c58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d122      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d11b      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0202 	mvn.w	r2, #2
 8003c84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f905 	bl	8003eaa <HAL_TIM_IC_CaptureCallback>
 8003ca0:	e005      	b.n	8003cae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f8f7 	bl	8003e96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f908 	bl	8003ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d122      	bne.n	8003d08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d11b      	bne.n	8003d08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0204 	mvn.w	r2, #4
 8003cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f8db 	bl	8003eaa <HAL_TIM_IC_CaptureCallback>
 8003cf4:	e005      	b.n	8003d02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f8cd 	bl	8003e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f8de 	bl	8003ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d122      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d11b      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0208 	mvn.w	r2, #8
 8003d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2204      	movs	r2, #4
 8003d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f8b1 	bl	8003eaa <HAL_TIM_IC_CaptureCallback>
 8003d48:	e005      	b.n	8003d56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f8a3 	bl	8003e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f8b4 	bl	8003ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b10      	cmp	r3, #16
 8003d68:	d122      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d11b      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0210 	mvn.w	r2, #16
 8003d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2208      	movs	r2, #8
 8003d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f887 	bl	8003eaa <HAL_TIM_IC_CaptureCallback>
 8003d9c:	e005      	b.n	8003daa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f879 	bl	8003e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f88a 	bl	8003ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d10e      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d107      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0201 	mvn.w	r2, #1
 8003dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f003 ff3a 	bl	8007c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de6:	2b80      	cmp	r3, #128	; 0x80
 8003de8:	d10e      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df4:	2b80      	cmp	r3, #128	; 0x80
 8003df6:	d107      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8e8 	bl	8003fd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e16:	d10e      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e22:	2b80      	cmp	r3, #128	; 0x80
 8003e24:	d107      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f8db 	bl	8003fec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e40:	2b40      	cmp	r3, #64	; 0x40
 8003e42:	d10e      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4e:	2b40      	cmp	r3, #64	; 0x40
 8003e50:	d107      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f838 	bl	8003ed2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d10e      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b20      	cmp	r3, #32
 8003e7c:	d107      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f06f 0220 	mvn.w	r2, #32
 8003e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f89b 	bl	8003fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a2e      	ldr	r2, [pc, #184]	; (8003fb4 <TIM_Base_SetConfig+0xcc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0x20>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f06:	d108      	bne.n	8003f1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a25      	ldr	r2, [pc, #148]	; (8003fb4 <TIM_Base_SetConfig+0xcc>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_Base_SetConfig+0x5a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f28:	d00b      	beq.n	8003f42 <TIM_Base_SetConfig+0x5a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <TIM_Base_SetConfig+0xd0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_Base_SetConfig+0x5a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a21      	ldr	r2, [pc, #132]	; (8003fbc <TIM_Base_SetConfig+0xd4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_Base_SetConfig+0x5a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a20      	ldr	r2, [pc, #128]	; (8003fc0 <TIM_Base_SetConfig+0xd8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d108      	bne.n	8003f54 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <TIM_Base_SetConfig+0xcc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00b      	beq.n	8003f98 <TIM_Base_SetConfig+0xb0>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a0d      	ldr	r2, [pc, #52]	; (8003fb8 <TIM_Base_SetConfig+0xd0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d007      	beq.n	8003f98 <TIM_Base_SetConfig+0xb0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a0c      	ldr	r2, [pc, #48]	; (8003fbc <TIM_Base_SetConfig+0xd4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_Base_SetConfig+0xb0>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <TIM_Base_SetConfig+0xd8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d103      	bne.n	8003fa0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	615a      	str	r2, [r3, #20]
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40012c00 	.word	0x40012c00
 8003fb8:	40014000 	.word	0x40014000
 8003fbc:	40014400 	.word	0x40014400
 8003fc0:	40014800 	.word	0x40014800

08003fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e06d      	b.n	80040ee <HAL_UART_Init+0xee>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d014      	beq.n	8004044 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a36      	ldr	r2, [pc, #216]	; (80040f8 <HAL_UART_Init+0xf8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d023      	beq.n	800406c <HAL_UART_Init+0x6c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a34      	ldr	r2, [pc, #208]	; (80040fc <HAL_UART_Init+0xfc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01e      	beq.n	800406c <HAL_UART_Init+0x6c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a33      	ldr	r2, [pc, #204]	; (8004100 <HAL_UART_Init+0x100>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d019      	beq.n	800406c <HAL_UART_Init+0x6c>
 8004038:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800403c:	4831      	ldr	r0, [pc, #196]	; (8004104 <HAL_UART_Init+0x104>)
 800403e:	f003 fe20 	bl	8007c82 <assert_failed>
 8004042:	e013      	b.n	800406c <HAL_UART_Init+0x6c>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a2b      	ldr	r2, [pc, #172]	; (80040f8 <HAL_UART_Init+0xf8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00e      	beq.n	800406c <HAL_UART_Init+0x6c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2a      	ldr	r2, [pc, #168]	; (80040fc <HAL_UART_Init+0xfc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d009      	beq.n	800406c <HAL_UART_Init+0x6c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a28      	ldr	r2, [pc, #160]	; (8004100 <HAL_UART_Init+0x100>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <HAL_UART_Init+0x6c>
 8004062:	f240 112f 	movw	r1, #303	; 0x12f
 8004066:	4827      	ldr	r0, [pc, #156]	; (8004104 <HAL_UART_Init+0x104>)
 8004068:	f003 fe0b 	bl	8007c82 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004070:	2b00      	cmp	r3, #0
 8004072:	d106      	bne.n	8004082 <HAL_UART_Init+0x82>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f003 ff37 	bl	8007ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2224      	movs	r2, #36	; 0x24
 8004086:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f8c9 	bl	8004230 <UART_SetConfig>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_UART_Init+0xa8>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e022      	b.n	80040ee <HAL_UART_Init+0xee>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <HAL_UART_Init+0xb6>
  {
    UART_AdvFeatureConfig(huart);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 facd 	bl	8004650 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fbf2 	bl	80048d0 <UART_CheckIdleState>
 80040ec:	4603      	mov	r3, r0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40013800 	.word	0x40013800
 80040fc:	40004400 	.word	0x40004400
 8004100:	40004800 	.word	0x40004800
 8004104:	080089d4 	.word	0x080089d4

08004108 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08a      	sub	sp, #40	; 0x28
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411c:	2b20      	cmp	r3, #32
 800411e:	f040 8081 	bne.w	8004224 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <HAL_UART_Transmit+0x26>
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e079      	b.n	8004226 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_UART_Transmit+0x38>
 800413c:	2302      	movs	r3, #2
 800413e:	e072      	b.n	8004226 <HAL_UART_Transmit+0x11e>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2221      	movs	r2, #33	; 0x21
 8004152:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004154:	f7fc f8be 	bl	80002d4 <HAL_GetTick>
 8004158:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	88fa      	ldrh	r2, [r7, #6]
 800415e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	88fa      	ldrh	r2, [r7, #6]
 8004166:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004172:	d108      	bne.n	8004186 <HAL_UART_Transmit+0x7e>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d104      	bne.n	8004186 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800417c:	2300      	movs	r3, #0
 800417e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	e003      	b.n	800418e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800418e:	e02d      	b.n	80041ec <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	2200      	movs	r2, #0
 8004198:	2180      	movs	r1, #128	; 0x80
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fbdd 	bl	800495a <UART_WaitOnFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e03d      	b.n	8004226 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10b      	bne.n	80041c8 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	881a      	ldrh	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041bc:	b292      	uxth	r2, r2
 80041be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	3302      	adds	r3, #2
 80041c4:	61bb      	str	r3, [r7, #24]
 80041c6:	e008      	b.n	80041da <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	781a      	ldrb	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	b292      	uxth	r2, r2
 80041d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	3301      	adds	r3, #1
 80041d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1cb      	bne.n	8004190 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2200      	movs	r2, #0
 8004200:	2140      	movs	r1, #64	; 0x40
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fba9 	bl	800495a <UART_WaitOnFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e009      	b.n	8004226 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	e000      	b.n	8004226 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004224:	2302      	movs	r3, #2
  }
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004238:	2300      	movs	r3, #0
 800423a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4a9f      	ldr	r2, [pc, #636]	; (80044c4 <UART_SetConfig+0x294>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d904      	bls.n	8004254 <UART_SetConfig+0x24>
 800424a:	f640 21a2 	movw	r1, #2722	; 0xaa2
 800424e:	489e      	ldr	r0, [pc, #632]	; (80044c8 <UART_SetConfig+0x298>)
 8004250:	f003 fd17 	bl	8007c82 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800425c:	d00d      	beq.n	800427a <UART_SetConfig+0x4a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <UART_SetConfig+0x4a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426e:	d004      	beq.n	800427a <UART_SetConfig+0x4a>
 8004270:	f640 21a3 	movw	r1, #2723	; 0xaa3
 8004274:	4894      	ldr	r0, [pc, #592]	; (80044c8 <UART_SetConfig+0x298>)
 8004276:	f003 fd04 	bl	8007c82 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004282:	d012      	beq.n	80042aa <UART_SetConfig+0x7a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00e      	beq.n	80042aa <UART_SetConfig+0x7a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004294:	d009      	beq.n	80042aa <UART_SetConfig+0x7a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429e:	d004      	beq.n	80042aa <UART_SetConfig+0x7a>
 80042a0:	f640 21a4 	movw	r1, #2724	; 0xaa4
 80042a4:	4888      	ldr	r0, [pc, #544]	; (80044c8 <UART_SetConfig+0x298>)
 80042a6:	f003 fcec 	bl	8007c82 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <UART_SetConfig+0x96>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ba:	d004      	beq.n	80042c6 <UART_SetConfig+0x96>
 80042bc:	f640 21a5 	movw	r1, #2725	; 0xaa5
 80042c0:	4881      	ldr	r0, [pc, #516]	; (80044c8 <UART_SetConfig+0x298>)
 80042c2:	f003 fcde 	bl	8007c82 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00e      	beq.n	80042ec <UART_SetConfig+0xbc>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d6:	d009      	beq.n	80042ec <UART_SetConfig+0xbc>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042e0:	d004      	beq.n	80042ec <UART_SetConfig+0xbc>
 80042e2:	f640 21a7 	movw	r1, #2727	; 0xaa7
 80042e6:	4878      	ldr	r0, [pc, #480]	; (80044c8 <UART_SetConfig+0x298>)
 80042e8:	f003 fccb 	bl	8007c82 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f023 030c 	bic.w	r3, r3, #12
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d103      	bne.n	8004300 <UART_SetConfig+0xd0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d104      	bne.n	800430a <UART_SetConfig+0xda>
 8004300:	f640 21a8 	movw	r1, #2728	; 0xaa8
 8004304:	4870      	ldr	r0, [pc, #448]	; (80044c8 <UART_SetConfig+0x298>)
 8004306:	f003 fcbc 	bl	8007c82 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d013      	beq.n	800433a <UART_SetConfig+0x10a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431a:	d00e      	beq.n	800433a <UART_SetConfig+0x10a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004324:	d009      	beq.n	800433a <UART_SetConfig+0x10a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800432e:	d004      	beq.n	800433a <UART_SetConfig+0x10a>
 8004330:	f640 21a9 	movw	r1, #2729	; 0xaa9
 8004334:	4864      	ldr	r0, [pc, #400]	; (80044c8 <UART_SetConfig+0x298>)
 8004336:	f003 fca4 	bl	8007c82 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <UART_SetConfig+0x126>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434a:	d004      	beq.n	8004356 <UART_SetConfig+0x126>
 800434c:	f640 21aa 	movw	r1, #2730	; 0xaaa
 8004350:	485d      	ldr	r0, [pc, #372]	; (80044c8 <UART_SetConfig+0x298>)
 8004352:	f003 fc96 	bl	8007c82 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b55      	ldr	r3, [pc, #340]	; (80044cc <UART_SetConfig+0x29c>)
 8004376:	4013      	ands	r3, r2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	6939      	ldr	r1, [r7, #16]
 800437e:	430b      	orrs	r3, r1
 8004380:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a43      	ldr	r2, [pc, #268]	; (80044d0 <UART_SetConfig+0x2a0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d120      	bne.n	8004408 <UART_SetConfig+0x1d8>
 80043c6:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <UART_SetConfig+0x2a4>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d816      	bhi.n	8004400 <UART_SetConfig+0x1d0>
 80043d2:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <UART_SetConfig+0x1a8>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	080043e9 	.word	0x080043e9
 80043dc:	080043f5 	.word	0x080043f5
 80043e0:	080043fb 	.word	0x080043fb
 80043e4:	080043ef 	.word	0x080043ef
 80043e8:	2300      	movs	r3, #0
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e01e      	b.n	800442c <UART_SetConfig+0x1fc>
 80043ee:	2302      	movs	r3, #2
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	e01b      	b.n	800442c <UART_SetConfig+0x1fc>
 80043f4:	2304      	movs	r3, #4
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e018      	b.n	800442c <UART_SetConfig+0x1fc>
 80043fa:	2308      	movs	r3, #8
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e015      	b.n	800442c <UART_SetConfig+0x1fc>
 8004400:	2310      	movs	r3, #16
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	bf00      	nop
 8004406:	e011      	b.n	800442c <UART_SetConfig+0x1fc>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a32      	ldr	r2, [pc, #200]	; (80044d8 <UART_SetConfig+0x2a8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d102      	bne.n	8004418 <UART_SetConfig+0x1e8>
 8004412:	2300      	movs	r3, #0
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e009      	b.n	800442c <UART_SetConfig+0x1fc>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a2f      	ldr	r2, [pc, #188]	; (80044dc <UART_SetConfig+0x2ac>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d102      	bne.n	8004428 <UART_SetConfig+0x1f8>
 8004422:	2300      	movs	r3, #0
 8004424:	77fb      	strb	r3, [r7, #31]
 8004426:	e001      	b.n	800442c <UART_SetConfig+0x1fc>
 8004428:	2310      	movs	r3, #16
 800442a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004434:	f040 8090 	bne.w	8004558 <UART_SetConfig+0x328>
  {
    switch (clocksource)
 8004438:	7ffb      	ldrb	r3, [r7, #31]
 800443a:	2b08      	cmp	r3, #8
 800443c:	d86c      	bhi.n	8004518 <UART_SetConfig+0x2e8>
 800443e:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <UART_SetConfig+0x214>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	08004469 	.word	0x08004469
 8004448:	08004489 	.word	0x08004489
 800444c:	080044a9 	.word	0x080044a9
 8004450:	08004519 	.word	0x08004519
 8004454:	080044e1 	.word	0x080044e1
 8004458:	08004519 	.word	0x08004519
 800445c:	08004519 	.word	0x08004519
 8004460:	08004519 	.word	0x08004519
 8004464:	08004501 	.word	0x08004501
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004468:	f7fe ffe8 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 800446c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	005a      	lsls	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	441a      	add	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004482:	b29b      	uxth	r3, r3
 8004484:	61bb      	str	r3, [r7, #24]
        break;
 8004486:	e04a      	b.n	800451e <UART_SetConfig+0x2ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004488:	f7fe fffa 	bl	8003480 <HAL_RCC_GetPCLK2Freq>
 800448c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	005a      	lsls	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	085b      	lsrs	r3, r3, #1
 8004498:	441a      	add	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	61bb      	str	r3, [r7, #24]
        break;
 80044a6:	e03a      	b.n	800451e <UART_SetConfig+0x2ee>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	085b      	lsrs	r3, r3, #1
 80044ae:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80044b2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6852      	ldr	r2, [r2, #4]
 80044ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	61bb      	str	r3, [r7, #24]
        break;
 80044c2:	e02c      	b.n	800451e <UART_SetConfig+0x2ee>
 80044c4:	00895440 	.word	0x00895440
 80044c8:	080089d4 	.word	0x080089d4
 80044cc:	efff69f3 	.word	0xefff69f3
 80044d0:	40013800 	.word	0x40013800
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40004400 	.word	0x40004400
 80044dc:	40004800 	.word	0x40004800
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e0:	f7fe ff36 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 80044e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	005a      	lsls	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	085b      	lsrs	r3, r3, #1
 80044f0:	441a      	add	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	61bb      	str	r3, [r7, #24]
        break;
 80044fe:	e00e      	b.n	800451e <UART_SetConfig+0x2ee>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	085b      	lsrs	r3, r3, #1
 8004506:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004512:	b29b      	uxth	r3, r3
 8004514:	61bb      	str	r3, [r7, #24]
        break;
 8004516:	e002      	b.n	800451e <UART_SetConfig+0x2ee>
      default:
        ret = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	75fb      	strb	r3, [r7, #23]
        break;
 800451c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b0f      	cmp	r3, #15
 8004522:	d916      	bls.n	8004552 <UART_SetConfig+0x322>
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452a:	d212      	bcs.n	8004552 <UART_SetConfig+0x322>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	b29b      	uxth	r3, r3
 8004530:	f023 030f 	bic.w	r3, r3, #15
 8004534:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	b29b      	uxth	r3, r3
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	b29a      	uxth	r2, r3
 8004542:	897b      	ldrh	r3, [r7, #10]
 8004544:	4313      	orrs	r3, r2
 8004546:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	897a      	ldrh	r2, [r7, #10]
 800454e:	60da      	str	r2, [r3, #12]
 8004550:	e072      	b.n	8004638 <UART_SetConfig+0x408>
    }
    else
    {
      ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
 8004556:	e06f      	b.n	8004638 <UART_SetConfig+0x408>
    }
  }
  else
  {
    switch (clocksource)
 8004558:	7ffb      	ldrb	r3, [r7, #31]
 800455a:	2b08      	cmp	r3, #8
 800455c:	d85b      	bhi.n	8004616 <UART_SetConfig+0x3e6>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0x334>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004589 	.word	0x08004589
 8004568:	080045a7 	.word	0x080045a7
 800456c:	080045c5 	.word	0x080045c5
 8004570:	08004617 	.word	0x08004617
 8004574:	080045e1 	.word	0x080045e1
 8004578:	08004617 	.word	0x08004617
 800457c:	08004617 	.word	0x08004617
 8004580:	08004617 	.word	0x08004617
 8004584:	080045ff 	.word	0x080045ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004588:	f7fe ff58 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 800458c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	085a      	lsrs	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	441a      	add	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	61bb      	str	r3, [r7, #24]
        break;
 80045a4:	e03a      	b.n	800461c <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045a6:	f7fe ff6b 	bl	8003480 <HAL_RCC_GetPCLK2Freq>
 80045aa:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	085a      	lsrs	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	441a      	add	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80045be:	b29b      	uxth	r3, r3
 80045c0:	61bb      	str	r3, [r7, #24]
        break;
 80045c2:	e02b      	b.n	800461c <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	085b      	lsrs	r3, r3, #1
 80045ca:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80045ce:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6852      	ldr	r2, [r2, #4]
 80045d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80045da:	b29b      	uxth	r3, r3
 80045dc:	61bb      	str	r3, [r7, #24]
        break;
 80045de:	e01d      	b.n	800461c <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045e0:	f7fe feb6 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 80045e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	085a      	lsrs	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	441a      	add	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	61bb      	str	r3, [r7, #24]
        break;
 80045fc:	e00e      	b.n	800461c <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	085b      	lsrs	r3, r3, #1
 8004604:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004610:	b29b      	uxth	r3, r3
 8004612:	61bb      	str	r3, [r7, #24]
        break;
 8004614:	e002      	b.n	800461c <UART_SetConfig+0x3ec>
      default:
        ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	75fb      	strb	r3, [r7, #23]
        break;
 800461a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	2b0f      	cmp	r3, #15
 8004620:	d908      	bls.n	8004634 <UART_SetConfig+0x404>
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004628:	d204      	bcs.n	8004634 <UART_SetConfig+0x404>
    {
      huart->Instance->BRR = usartdiv;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	60da      	str	r2, [r3, #12]
 8004632:	e001      	b.n	8004638 <UART_SetConfig+0x408>
    }
    else
    {
      ret = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004644:	7dfb      	ldrb	r3, [r7, #23]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop

08004650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	2bff      	cmp	r3, #255	; 0xff
 800465e:	d904      	bls.n	800466a <UART_AdvFeatureConfig+0x1a>
 8004660:	f640 3127 	movw	r1, #2855	; 0xb27
 8004664:	4898      	ldr	r0, [pc, #608]	; (80048c8 <UART_AdvFeatureConfig+0x278>)
 8004666:	f003 fb0c 	bl	8007c82 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d018      	beq.n	80046a8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <UART_AdvFeatureConfig+0x42>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004686:	d004      	beq.n	8004692 <UART_AdvFeatureConfig+0x42>
 8004688:	f640 312c 	movw	r1, #2860	; 0xb2c
 800468c:	488e      	ldr	r0, [pc, #568]	; (80048c8 <UART_AdvFeatureConfig+0x278>)
 800468e:	f003 faf8 	bl	8007c82 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d018      	beq.n	80046e6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d009      	beq.n	80046d0 <UART_AdvFeatureConfig+0x80>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c4:	d004      	beq.n	80046d0 <UART_AdvFeatureConfig+0x80>
 80046c6:	f640 3133 	movw	r1, #2867	; 0xb33
 80046ca:	487f      	ldr	r0, [pc, #508]	; (80048c8 <UART_AdvFeatureConfig+0x278>)
 80046cc:	f003 fad9 	bl	8007c82 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d018      	beq.n	8004724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <UART_AdvFeatureConfig+0xbe>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004702:	d004      	beq.n	800470e <UART_AdvFeatureConfig+0xbe>
 8004704:	f640 313a 	movw	r1, #2874	; 0xb3a
 8004708:	486f      	ldr	r0, [pc, #444]	; (80048c8 <UART_AdvFeatureConfig+0x278>)
 800470a:	f003 faba 	bl	8007c82 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d018      	beq.n	8004762 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004734:	2b00      	cmp	r3, #0
 8004736:	d009      	beq.n	800474c <UART_AdvFeatureConfig+0xfc>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004740:	d004      	beq.n	800474c <UART_AdvFeatureConfig+0xfc>
 8004742:	f640 3141 	movw	r1, #2881	; 0xb41
 8004746:	4860      	ldr	r0, [pc, #384]	; (80048c8 <UART_AdvFeatureConfig+0x278>)
 8004748:	f003 fa9b 	bl	8007c82 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b00      	cmp	r3, #0
 800476c:	d018      	beq.n	80047a0 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <UART_AdvFeatureConfig+0x13a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477e:	d004      	beq.n	800478a <UART_AdvFeatureConfig+0x13a>
 8004780:	f640 3148 	movw	r1, #2888	; 0xb48
 8004784:	4850      	ldr	r0, [pc, #320]	; (80048c8 <UART_AdvFeatureConfig+0x278>)
 8004786:	f003 fa7c 	bl	8007c82 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d018      	beq.n	80047de <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <UART_AdvFeatureConfig+0x178>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047bc:	d004      	beq.n	80047c8 <UART_AdvFeatureConfig+0x178>
 80047be:	f640 314f 	movw	r1, #2895	; 0xb4f
 80047c2:	4841      	ldr	r0, [pc, #260]	; (80048c8 <UART_AdvFeatureConfig+0x278>)
 80047c4:	f003 fa5d 	bl	8007c82 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d04a      	beq.n	8004880 <UART_AdvFeatureConfig+0x230>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a37      	ldr	r2, [pc, #220]	; (80048cc <UART_AdvFeatureConfig+0x27c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d004      	beq.n	80047fe <UART_AdvFeatureConfig+0x1ae>
 80047f4:	f640 3156 	movw	r1, #2902	; 0xb56
 80047f8:	4833      	ldr	r0, [pc, #204]	; (80048c8 <UART_AdvFeatureConfig+0x278>)
 80047fa:	f003 fa42 	bl	8007c82 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <UART_AdvFeatureConfig+0x1ca>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800480e:	d004      	beq.n	800481a <UART_AdvFeatureConfig+0x1ca>
 8004810:	f640 3157 	movw	r1, #2903	; 0xb57
 8004814:	482c      	ldr	r0, [pc, #176]	; (80048c8 <UART_AdvFeatureConfig+0x278>)
 8004816:	f003 fa34 	bl	8007c82 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004838:	d122      	bne.n	8004880 <UART_AdvFeatureConfig+0x230>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	2b00      	cmp	r3, #0
 8004840:	d013      	beq.n	800486a <UART_AdvFeatureConfig+0x21a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800484a:	d00e      	beq.n	800486a <UART_AdvFeatureConfig+0x21a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004854:	d009      	beq.n	800486a <UART_AdvFeatureConfig+0x21a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800485e:	d004      	beq.n	800486a <UART_AdvFeatureConfig+0x21a>
 8004860:	f640 315c 	movw	r1, #2908	; 0xb5c
 8004864:	4818      	ldr	r0, [pc, #96]	; (80048c8 <UART_AdvFeatureConfig+0x278>)
 8004866:	f003 fa0c 	bl	8007c82 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004888:	2b00      	cmp	r3, #0
 800488a:	d018      	beq.n	80048be <UART_AdvFeatureConfig+0x26e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <UART_AdvFeatureConfig+0x258>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004898:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800489c:	d004      	beq.n	80048a8 <UART_AdvFeatureConfig+0x258>
 800489e:	f640 3164 	movw	r1, #2916	; 0xb64
 80048a2:	4809      	ldr	r0, [pc, #36]	; (80048c8 <UART_AdvFeatureConfig+0x278>)
 80048a4:	f003 f9ed 	bl	8007c82 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]
  }
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	080089d4 	.word	0x080089d4
 80048cc:	40013800 	.word	0x40013800

080048d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80048de:	f7fb fcf9 	bl	80002d4 <HAL_GetTick>
 80048e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d10e      	bne.n	8004910 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f82a 	bl	800495a <UART_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e020      	b.n	8004952 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b04      	cmp	r3, #4
 800491c:	d10e      	bne.n	800493c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800491e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f814 	bl	800495a <UART_WaitOnFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e00a      	b.n	8004952 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	4613      	mov	r3, r2
 8004968:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496a:	e05d      	b.n	8004a28 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004972:	d059      	beq.n	8004a28 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004974:	f7fb fcae 	bl	80002d4 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	429a      	cmp	r2, r3
 8004982:	d302      	bcc.n	800498a <UART_WaitOnFlagUntilTimeout+0x30>
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d11b      	bne.n	80049c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004998:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0201 	bic.w	r2, r2, #1
 80049a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e042      	b.n	8004a48 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d02b      	beq.n	8004a28 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049de:	d123      	bne.n	8004a28 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049e8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e00f      	b.n	8004a48 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	69da      	ldr	r2, [r3, #28]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4013      	ands	r3, r2
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	bf0c      	ite	eq
 8004a38:	2301      	moveq	r3, #1
 8004a3a:	2300      	movne	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	461a      	mov	r2, r3
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d092      	beq.n	800496c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a56:	f3ef 8305 	mrs	r3, IPSR
 8004a5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10f      	bne.n	8004a82 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a62:	f3ef 8310 	mrs	r3, PRIMASK
 8004a66:	607b      	str	r3, [r7, #4]
  return(result);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <osKernelInitialize+0x32>
 8004a6e:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <osKernelInitialize+0x64>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d109      	bne.n	8004a8a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a76:	f3ef 8311 	mrs	r3, BASEPRI
 8004a7a:	603b      	str	r3, [r7, #0]
  return(result);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004a82:	f06f 0305 	mvn.w	r3, #5
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	e00c      	b.n	8004aa4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <osKernelInitialize+0x64>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d105      	bne.n	8004a9e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004a92:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <osKernelInitialize+0x64>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	e002      	b.n	8004aa4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000090 	.word	0x20000090

08004ab8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004abe:	f3ef 8305 	mrs	r3, IPSR
 8004ac2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10f      	bne.n	8004aea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aca:	f3ef 8310 	mrs	r3, PRIMASK
 8004ace:	607b      	str	r3, [r7, #4]
  return(result);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <osKernelStart+0x32>
 8004ad6:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <osKernelStart+0x64>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d109      	bne.n	8004af2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ade:	f3ef 8311 	mrs	r3, BASEPRI
 8004ae2:	603b      	str	r3, [r7, #0]
  return(result);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004aea:	f06f 0305 	mvn.w	r3, #5
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e00e      	b.n	8004b10 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004af2:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <osKernelStart+0x64>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d107      	bne.n	8004b0a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004afa:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <osKernelStart+0x64>)
 8004afc:	2202      	movs	r2, #2
 8004afe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004b00:	f001 fa1c 	bl	8005f3c <vTaskStartScheduler>
      stat = osOK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e002      	b.n	8004b10 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b10:	68fb      	ldr	r3, [r7, #12]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000090 	.word	0x20000090

08004b20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b092      	sub	sp, #72	; 0x48
 8004b24:	af04      	add	r7, sp, #16
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b30:	f3ef 8305 	mrs	r3, IPSR
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f040 8094 	bne.w	8004c66 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b42:	623b      	str	r3, [r7, #32]
  return(result);
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f040 808d 	bne.w	8004c66 <osThreadNew+0x146>
 8004b4c:	4b48      	ldr	r3, [pc, #288]	; (8004c70 <osThreadNew+0x150>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d106      	bne.n	8004b62 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b54:	f3ef 8311 	mrs	r3, BASEPRI
 8004b58:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f040 8082 	bne.w	8004c66 <osThreadNew+0x146>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d07e      	beq.n	8004c66 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004b68:	2380      	movs	r3, #128	; 0x80
 8004b6a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004b6c:	2318      	movs	r3, #24
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004b70:	2300      	movs	r3, #0
 8004b72:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004b74:	f107 031b 	add.w	r3, r7, #27
 8004b78:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d045      	beq.n	8004c12 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <osThreadNew+0x74>
        name = attr->name;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <osThreadNew+0x9a>
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	2b38      	cmp	r3, #56	; 0x38
 8004bac:	d805      	bhi.n	8004bba <osThreadNew+0x9a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <osThreadNew+0x9e>
        return (NULL);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e054      	b.n	8004c68 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	089b      	lsrs	r3, r3, #2
 8004bcc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00e      	beq.n	8004bf4 <osThreadNew+0xd4>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	2b5b      	cmp	r3, #91	; 0x5b
 8004bdc:	d90a      	bls.n	8004bf4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d006      	beq.n	8004bf4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <osThreadNew+0xd4>
        mem = 1;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf2:	e010      	b.n	8004c16 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10c      	bne.n	8004c16 <osThreadNew+0xf6>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d108      	bne.n	8004c16 <osThreadNew+0xf6>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d104      	bne.n	8004c16 <osThreadNew+0xf6>
          mem = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c10:	e001      	b.n	8004c16 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d110      	bne.n	8004c3e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c24:	9202      	str	r2, [sp, #8]
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 ffba 	bl	8005bac <xTaskCreateStatic>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	e013      	b.n	8004c66 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d110      	bne.n	8004c66 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	f107 0314 	add.w	r3, r7, #20
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f001 f801 	bl	8005c5e <xTaskCreate>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d001      	beq.n	8004c66 <osThreadNew+0x146>
          hTask = NULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c66:	697b      	ldr	r3, [r7, #20]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3738      	adds	r7, #56	; 0x38
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20000090 	.word	0x20000090

08004c74 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c7c:	f3ef 8305 	mrs	r3, IPSR
 8004c80:	613b      	str	r3, [r7, #16]
  return(result);
 8004c82:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10f      	bne.n	8004ca8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c88:	f3ef 8310 	mrs	r3, PRIMASK
 8004c8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d109      	bne.n	8004ca8 <osDelay+0x34>
 8004c94:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <osDelay+0x58>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d109      	bne.n	8004cb0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004ca0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <osDelay+0x3c>
    stat = osErrorISR;
 8004ca8:	f06f 0305 	mvn.w	r3, #5
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	e007      	b.n	8004cc0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f001 f90a 	bl	8005ed4 <vTaskDelay>
    }
  }

  return (stat);
 8004cc0:	697b      	ldr	r3, [r7, #20]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000090 	.word	0x20000090

08004cd0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08c      	sub	sp, #48	; 0x30
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ce0:	f3ef 8305 	mrs	r3, IPSR
 8004ce4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ce6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d170      	bne.n	8004dce <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cec:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf0:	617b      	str	r3, [r7, #20]
  return(result);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d16a      	bne.n	8004dce <osMessageQueueNew+0xfe>
 8004cf8:	4b37      	ldr	r3, [pc, #220]	; (8004dd8 <osMessageQueueNew+0x108>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d105      	bne.n	8004d0c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d00:	f3ef 8311 	mrs	r3, BASEPRI
 8004d04:	613b      	str	r3, [r7, #16]
  return(result);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d160      	bne.n	8004dce <osMessageQueueNew+0xfe>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d05d      	beq.n	8004dce <osMessageQueueNew+0xfe>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d05a      	beq.n	8004dce <osMessageQueueNew+0xfe>
    mem = -1;
 8004d18:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d029      	beq.n	8004d78 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d012      	beq.n	8004d52 <osMessageQueueNew+0x82>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b4f      	cmp	r3, #79	; 0x4f
 8004d32:	d90e      	bls.n	8004d52 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	695a      	ldr	r2, [r3, #20]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d302      	bcc.n	8004d52 <osMessageQueueNew+0x82>
        mem = 1;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	623b      	str	r3, [r7, #32]
 8004d50:	e014      	b.n	8004d7c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d110      	bne.n	8004d7c <osMessageQueueNew+0xac>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10c      	bne.n	8004d7c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d108      	bne.n	8004d7c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d104      	bne.n	8004d7c <osMessageQueueNew+0xac>
          mem = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	623b      	str	r3, [r7, #32]
 8004d76:	e001      	b.n	8004d7c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d10c      	bne.n	8004d9c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6899      	ldr	r1, [r3, #8]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f9e4 	bl	8005160 <xQueueGenericCreateStatic>
 8004d98:	6278      	str	r0, [r7, #36]	; 0x24
 8004d9a:	e008      	b.n	8004dae <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d105      	bne.n	8004dae <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004da2:	2200      	movs	r2, #0
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 fa4c 	bl	8005244 <xQueueGenericCreate>
 8004dac:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00c      	beq.n	8004dce <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <osMessageQueueNew+0xf2>
        name = attr->name;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	61fb      	str	r3, [r7, #28]
 8004dc0:	e001      	b.n	8004dc6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004dc6:	69f9      	ldr	r1, [r7, #28]
 8004dc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dca:	f000 fe93 	bl	8005af4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3728      	adds	r7, #40	; 0x28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20000090 	.word	0x20000090

08004ddc <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	; 0x28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004df2:	f3ef 8305 	mrs	r3, IPSR
 8004df6:	61fb      	str	r3, [r7, #28]
  return(result);
 8004df8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10f      	bne.n	8004e1e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8004e02:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <osMessageQueueGet+0x42>
 8004e0a:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <osMessageQueueGet+0xdc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d12e      	bne.n	8004e70 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e12:	f3ef 8311 	mrs	r3, BASEPRI
 8004e16:	617b      	str	r3, [r7, #20]
  return(result);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d028      	beq.n	8004e70 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <osMessageQueueGet+0x54>
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <osMessageQueueGet+0x54>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004e30:	f06f 0303 	mvn.w	r3, #3
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004e36:	e038      	b.n	8004eaa <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004e3c:	f107 0310 	add.w	r3, r7, #16
 8004e40:	461a      	mov	r2, r3
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	6a38      	ldr	r0, [r7, #32]
 8004e46:	f000 fcc7 	bl	80057d8 <xQueueReceiveFromISR>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d003      	beq.n	8004e58 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004e50:	f06f 0302 	mvn.w	r3, #2
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004e56:	e028      	b.n	8004eaa <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d025      	beq.n	8004eaa <osMessageQueueGet+0xce>
 8004e5e:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <osMessageQueueGet+0xe0>)
 8004e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004e6e:	e01c      	b.n	8004eaa <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <osMessageQueueGet+0xa0>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d103      	bne.n	8004e84 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004e7c:	f06f 0303 	mvn.w	r3, #3
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
 8004e82:	e013      	b.n	8004eac <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	6a38      	ldr	r0, [r7, #32]
 8004e8a:	f000 fbc9 	bl	8005620 <xQueueReceive>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d00b      	beq.n	8004eac <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004e9a:	f06f 0301 	mvn.w	r3, #1
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea0:	e004      	b.n	8004eac <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004ea2:	f06f 0302 	mvn.w	r3, #2
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea8:	e000      	b.n	8004eac <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004eaa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3728      	adds	r7, #40	; 0x28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000090 	.word	0x20000090
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4a07      	ldr	r2, [pc, #28]	; (8004eec <vApplicationGetIdleTaskMemory+0x2c>)
 8004ed0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4a06      	ldr	r2, [pc, #24]	; (8004ef0 <vApplicationGetIdleTaskMemory+0x30>)
 8004ed6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2280      	movs	r2, #128	; 0x80
 8004edc:	601a      	str	r2, [r3, #0]
}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20000094 	.word	0x20000094
 8004ef0:	200000f0 	.word	0x200000f0

08004ef4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4a07      	ldr	r2, [pc, #28]	; (8004f20 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4a06      	ldr	r2, [pc, #24]	; (8004f24 <vApplicationGetTimerTaskMemory+0x30>)
 8004f0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f12:	601a      	str	r2, [r3, #0]
}
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	200002f0 	.word	0x200002f0
 8004f24:	2000034c 	.word	0x2000034c

08004f28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f103 0208 	add.w	r2, r3, #8
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f103 0208 	add.w	r2, r3, #8
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f103 0208 	add.w	r2, r3, #8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f82:	b480      	push	{r7}
 8004f84:	b085      	sub	sp, #20
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	601a      	str	r2, [r3, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe0:	d103      	bne.n	8004fea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e00c      	b.n	8005004 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3308      	adds	r3, #8
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	e002      	b.n	8004ff8 <vListInsert+0x2e>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	429a      	cmp	r2, r3
 8005002:	d2f6      	bcs.n	8004ff2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	601a      	str	r2, [r3, #0]
}
 8005030:	bf00      	nop
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6892      	ldr	r2, [r2, #8]
 8005052:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6852      	ldr	r2, [r2, #4]
 800505c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	d103      	bne.n	8005070 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	1e5a      	subs	r2, r3, #1
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d109      	bne.n	80050b8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	60bb      	str	r3, [r7, #8]
 80050b6:	e7fe      	b.n	80050b6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80050b8:	f002 f890 	bl	80071dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c4:	68f9      	ldr	r1, [r7, #12]
 80050c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050c8:	fb01 f303 	mul.w	r3, r1, r3
 80050cc:	441a      	add	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	3b01      	subs	r3, #1
 80050ea:	68f9      	ldr	r1, [r7, #12]
 80050ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050ee:	fb01 f303 	mul.w	r3, r1, r3
 80050f2:	441a      	add	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	22ff      	movs	r2, #255	; 0xff
 80050fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	22ff      	movs	r2, #255	; 0xff
 8005104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d114      	bne.n	8005138 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01a      	beq.n	800514c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3310      	adds	r3, #16
 800511a:	4618      	mov	r0, r3
 800511c:	f001 f994 	bl	8006448 <xTaskRemoveFromEventList>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d012      	beq.n	800514c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <xQueueGenericReset+0xcc>)
 8005128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	e009      	b.n	800514c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3310      	adds	r3, #16
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff fef3 	bl	8004f28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3324      	adds	r3, #36	; 0x24
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff feee 	bl	8004f28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800514c:	f002 f874 	bl	8007238 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005150:	2301      	movs	r3, #1
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	e000ed04 	.word	0xe000ed04

08005160 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08e      	sub	sp, #56	; 0x38
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d109      	bne.n	8005188 <xQueueGenericCreateStatic+0x28>
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	62bb      	str	r3, [r7, #40]	; 0x28
 8005186:	e7fe      	b.n	8005186 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d109      	bne.n	80051a2 <xQueueGenericCreateStatic+0x42>
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
 80051a0:	e7fe      	b.n	80051a0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <xQueueGenericCreateStatic+0x4e>
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <xQueueGenericCreateStatic+0x52>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <xQueueGenericCreateStatic+0x54>
 80051b2:	2300      	movs	r3, #0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d109      	bne.n	80051cc <xQueueGenericCreateStatic+0x6c>
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	623b      	str	r3, [r7, #32]
 80051ca:	e7fe      	b.n	80051ca <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <xQueueGenericCreateStatic+0x78>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <xQueueGenericCreateStatic+0x7c>
 80051d8:	2301      	movs	r3, #1
 80051da:	e000      	b.n	80051de <xQueueGenericCreateStatic+0x7e>
 80051dc:	2300      	movs	r3, #0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <xQueueGenericCreateStatic+0x96>
 80051e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	e7fe      	b.n	80051f4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051f6:	2350      	movs	r3, #80	; 0x50
 80051f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b50      	cmp	r3, #80	; 0x50
 80051fe:	d009      	beq.n	8005214 <xQueueGenericCreateStatic+0xb4>
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	e7fe      	b.n	8005212 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005226:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	4613      	mov	r3, r2
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 f842 	bl	80052be <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800523c:	4618      	mov	r0, r3
 800523e:	3730      	adds	r7, #48	; 0x30
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	; 0x28
 8005248:	af02      	add	r7, sp, #8
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	4613      	mov	r3, r2
 8005250:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d109      	bne.n	800526c <xQueueGenericCreate+0x28>
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	e7fe      	b.n	800526a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d102      	bne.n	8005278 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005272:	2300      	movs	r3, #0
 8005274:	61fb      	str	r3, [r7, #28]
 8005276:	e004      	b.n	8005282 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	fb02 f303 	mul.w	r3, r2, r3
 8005280:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	3350      	adds	r3, #80	; 0x50
 8005286:	4618      	mov	r0, r3
 8005288:	f002 f8c2 	bl	8007410 <pvPortMalloc>
 800528c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00f      	beq.n	80052b4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	3350      	adds	r3, #80	; 0x50
 8005298:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052a2:	79fa      	ldrb	r2, [r7, #7]
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	4613      	mov	r3, r2
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f805 	bl	80052be <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80052b4:	69bb      	ldr	r3, [r7, #24]
	}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d103      	bne.n	80052da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	e002      	b.n	80052e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052ec:	2101      	movs	r1, #1
 80052ee:	69b8      	ldr	r0, [r7, #24]
 80052f0:	f7ff fece 	bl	8005090 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	78fa      	ldrb	r2, [r7, #3]
 80052f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052fc:	bf00      	nop
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08e      	sub	sp, #56	; 0x38
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005312:	2300      	movs	r3, #0
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	2b00      	cmp	r3, #0
 800531e:	d109      	bne.n	8005334 <xQueueGenericSend+0x30>
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	62bb      	str	r3, [r7, #40]	; 0x28
 8005332:	e7fe      	b.n	8005332 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d103      	bne.n	8005342 <xQueueGenericSend+0x3e>
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <xQueueGenericSend+0x42>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <xQueueGenericSend+0x44>
 8005346:	2300      	movs	r3, #0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d109      	bne.n	8005360 <xQueueGenericSend+0x5c>
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	627b      	str	r3, [r7, #36]	; 0x24
 800535e:	e7fe      	b.n	800535e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d103      	bne.n	800536e <xQueueGenericSend+0x6a>
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <xQueueGenericSend+0x6e>
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <xQueueGenericSend+0x70>
 8005372:	2300      	movs	r3, #0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d109      	bne.n	800538c <xQueueGenericSend+0x88>
 8005378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	623b      	str	r3, [r7, #32]
 800538a:	e7fe      	b.n	800538a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800538c:	f001 fa18 	bl	80067c0 <xTaskGetSchedulerState>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d102      	bne.n	800539c <xQueueGenericSend+0x98>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <xQueueGenericSend+0x9c>
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <xQueueGenericSend+0x9e>
 80053a0:	2300      	movs	r3, #0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <xQueueGenericSend+0xb6>
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	61fb      	str	r3, [r7, #28]
 80053b8:	e7fe      	b.n	80053b8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053ba:	f001 ff0f 	bl	80071dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d302      	bcc.n	80053d0 <xQueueGenericSend+0xcc>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d129      	bne.n	8005424 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	68b9      	ldr	r1, [r7, #8]
 80053d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053d6:	f000 fa7c 	bl	80058d2 <prvCopyDataToQueue>
 80053da:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d010      	beq.n	8005406 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	3324      	adds	r3, #36	; 0x24
 80053e8:	4618      	mov	r0, r3
 80053ea:	f001 f82d 	bl	8006448 <xTaskRemoveFromEventList>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d013      	beq.n	800541c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053f4:	4b3f      	ldr	r3, [pc, #252]	; (80054f4 <xQueueGenericSend+0x1f0>)
 80053f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	e00a      	b.n	800541c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d007      	beq.n	800541c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800540c:	4b39      	ldr	r3, [pc, #228]	; (80054f4 <xQueueGenericSend+0x1f0>)
 800540e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800541c:	f001 ff0c 	bl	8007238 <vPortExitCritical>
				return pdPASS;
 8005420:	2301      	movs	r3, #1
 8005422:	e063      	b.n	80054ec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800542a:	f001 ff05 	bl	8007238 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800542e:	2300      	movs	r3, #0
 8005430:	e05c      	b.n	80054ec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005434:	2b00      	cmp	r3, #0
 8005436:	d106      	bne.n	8005446 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005438:	f107 0314 	add.w	r3, r7, #20
 800543c:	4618      	mov	r0, r3
 800543e:	f001 f865 	bl	800650c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005442:	2301      	movs	r3, #1
 8005444:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005446:	f001 fef7 	bl	8007238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800544a:	f000 fddb 	bl	8006004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800544e:	f001 fec5 	bl	80071dc <vPortEnterCritical>
 8005452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005458:	b25b      	sxtb	r3, r3
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545e:	d103      	bne.n	8005468 <xQueueGenericSend+0x164>
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800546e:	b25b      	sxtb	r3, r3
 8005470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005474:	d103      	bne.n	800547e <xQueueGenericSend+0x17a>
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800547e:	f001 fedb 	bl	8007238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005482:	1d3a      	adds	r2, r7, #4
 8005484:	f107 0314 	add.w	r3, r7, #20
 8005488:	4611      	mov	r1, r2
 800548a:	4618      	mov	r0, r3
 800548c:	f001 f854 	bl	8006538 <xTaskCheckForTimeOut>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d124      	bne.n	80054e0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005498:	f000 fb13 	bl	8005ac2 <prvIsQueueFull>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d018      	beq.n	80054d4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	3310      	adds	r3, #16
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	4611      	mov	r1, r2
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 ff7e 	bl	80063ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054b2:	f000 fa9e 	bl	80059f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054b6:	f000 fdb3 	bl	8006020 <xTaskResumeAll>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f47f af7c 	bne.w	80053ba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80054c2:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <xQueueGenericSend+0x1f0>)
 80054c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	e772      	b.n	80053ba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054d6:	f000 fa8c 	bl	80059f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054da:	f000 fda1 	bl	8006020 <xTaskResumeAll>
 80054de:	e76c      	b.n	80053ba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054e2:	f000 fa86 	bl	80059f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054e6:	f000 fd9b 	bl	8006020 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054ea:	2300      	movs	r3, #0
		}
	}
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3738      	adds	r7, #56	; 0x38
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	e000ed04 	.word	0xe000ed04

080054f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08e      	sub	sp, #56	; 0x38
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	2b00      	cmp	r3, #0
 800550e:	d109      	bne.n	8005524 <xQueueGenericSendFromISR+0x2c>
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
 8005522:	e7fe      	b.n	8005522 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <xQueueGenericSendFromISR+0x3a>
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <xQueueGenericSendFromISR+0x3e>
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <xQueueGenericSendFromISR+0x40>
 8005536:	2300      	movs	r3, #0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d109      	bne.n	8005550 <xQueueGenericSendFromISR+0x58>
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	623b      	str	r3, [r7, #32]
 800554e:	e7fe      	b.n	800554e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d103      	bne.n	800555e <xQueueGenericSendFromISR+0x66>
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <xQueueGenericSendFromISR+0x6a>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <xQueueGenericSendFromISR+0x6c>
 8005562:	2300      	movs	r3, #0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d109      	bne.n	800557c <xQueueGenericSendFromISR+0x84>
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	e7fe      	b.n	800557a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800557c:	f001 ff0a 	bl	8007394 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005580:	f3ef 8211 	mrs	r2, BASEPRI
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	61ba      	str	r2, [r7, #24]
 8005596:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005598:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d302      	bcc.n	80055ae <xQueueGenericSendFromISR+0xb6>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d12c      	bne.n	8005608 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055be:	f000 f988 	bl	80058d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055c2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d112      	bne.n	80055f2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d016      	beq.n	8005602 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	3324      	adds	r3, #36	; 0x24
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 ff35 	bl	8006448 <xTaskRemoveFromEventList>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00e      	beq.n	8005602 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	e007      	b.n	8005602 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055f6:	3301      	adds	r3, #1
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	b25a      	sxtb	r2, r3
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005602:	2301      	movs	r3, #1
 8005604:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005606:	e001      	b.n	800560c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005608:	2300      	movs	r3, #0
 800560a:	637b      	str	r3, [r7, #52]	; 0x34
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005618:	4618      	mov	r0, r3
 800561a:	3738      	adds	r7, #56	; 0x38
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b08c      	sub	sp, #48	; 0x30
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800562c:	2300      	movs	r3, #0
 800562e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	2b00      	cmp	r3, #0
 8005638:	d109      	bne.n	800564e <xQueueReceive+0x2e>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	623b      	str	r3, [r7, #32]
 800564c:	e7fe      	b.n	800564c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d103      	bne.n	800565c <xQueueReceive+0x3c>
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <xQueueReceive+0x40>
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <xQueueReceive+0x42>
 8005660:	2300      	movs	r3, #0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <xQueueReceive+0x5a>
 8005666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	61fb      	str	r3, [r7, #28]
 8005678:	e7fe      	b.n	8005678 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800567a:	f001 f8a1 	bl	80067c0 <xTaskGetSchedulerState>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d102      	bne.n	800568a <xQueueReceive+0x6a>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <xQueueReceive+0x6e>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <xQueueReceive+0x70>
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d109      	bne.n	80056a8 <xQueueReceive+0x88>
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	e7fe      	b.n	80056a6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80056a8:	f001 fd98 	bl	80071dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d01f      	beq.n	80056f8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056bc:	f000 f973 	bl	80059a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	1e5a      	subs	r2, r3, #1
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00f      	beq.n	80056f0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	3310      	adds	r3, #16
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 feb7 	bl	8006448 <xTaskRemoveFromEventList>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d007      	beq.n	80056f0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056e0:	4b3c      	ldr	r3, [pc, #240]	; (80057d4 <xQueueReceive+0x1b4>)
 80056e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056f0:	f001 fda2 	bl	8007238 <vPortExitCritical>
				return pdPASS;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e069      	b.n	80057cc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d103      	bne.n	8005706 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056fe:	f001 fd9b 	bl	8007238 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005702:	2300      	movs	r3, #0
 8005704:	e062      	b.n	80057cc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d106      	bne.n	800571a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800570c:	f107 0310 	add.w	r3, r7, #16
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fefb 	bl	800650c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005716:	2301      	movs	r3, #1
 8005718:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800571a:	f001 fd8d 	bl	8007238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800571e:	f000 fc71 	bl	8006004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005722:	f001 fd5b 	bl	80071dc <vPortEnterCritical>
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800572c:	b25b      	sxtb	r3, r3
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005732:	d103      	bne.n	800573c <xQueueReceive+0x11c>
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005742:	b25b      	sxtb	r3, r3
 8005744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005748:	d103      	bne.n	8005752 <xQueueReceive+0x132>
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005752:	f001 fd71 	bl	8007238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005756:	1d3a      	adds	r2, r7, #4
 8005758:	f107 0310 	add.w	r3, r7, #16
 800575c:	4611      	mov	r1, r2
 800575e:	4618      	mov	r0, r3
 8005760:	f000 feea 	bl	8006538 <xTaskCheckForTimeOut>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d123      	bne.n	80057b2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800576a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800576c:	f000 f993 	bl	8005a96 <prvIsQueueEmpty>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d017      	beq.n	80057a6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	3324      	adds	r3, #36	; 0x24
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	4611      	mov	r1, r2
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fe14 	bl	80063ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005786:	f000 f934 	bl	80059f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800578a:	f000 fc49 	bl	8006020 <xTaskResumeAll>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d189      	bne.n	80056a8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005794:	4b0f      	ldr	r3, [pc, #60]	; (80057d4 <xQueueReceive+0x1b4>)
 8005796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	e780      	b.n	80056a8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057a8:	f000 f923 	bl	80059f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057ac:	f000 fc38 	bl	8006020 <xTaskResumeAll>
 80057b0:	e77a      	b.n	80056a8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057b4:	f000 f91d 	bl	80059f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057b8:	f000 fc32 	bl	8006020 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057be:	f000 f96a 	bl	8005a96 <prvIsQueueEmpty>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f43f af6f 	beq.w	80056a8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3730      	adds	r7, #48	; 0x30
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	e000ed04 	.word	0xe000ed04

080057d8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08e      	sub	sp, #56	; 0x38
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d109      	bne.n	8005802 <xQueueReceiveFromISR+0x2a>
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	623b      	str	r3, [r7, #32]
 8005800:	e7fe      	b.n	8005800 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d103      	bne.n	8005810 <xQueueReceiveFromISR+0x38>
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <xQueueReceiveFromISR+0x3c>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <xQueueReceiveFromISR+0x3e>
 8005814:	2300      	movs	r3, #0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <xQueueReceiveFromISR+0x56>
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	61fb      	str	r3, [r7, #28]
 800582c:	e7fe      	b.n	800582c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800582e:	f001 fdb1 	bl	8007394 <vPortValidateInterruptPriority>
	__asm volatile
 8005832:	f3ef 8211 	mrs	r2, BASEPRI
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	61ba      	str	r2, [r7, #24]
 8005848:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800584a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800584c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	2b00      	cmp	r3, #0
 8005858:	d02f      	beq.n	80058ba <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005868:	f000 f89d 	bl	80059a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	1e5a      	subs	r2, r3, #1
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005874:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d112      	bne.n	80058a4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d016      	beq.n	80058b4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	3310      	adds	r3, #16
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fddc 	bl	8006448 <xTaskRemoveFromEventList>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00e      	beq.n	80058b4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00b      	beq.n	80058b4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	e007      	b.n	80058b4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80058a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058a8:	3301      	adds	r3, #1
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	b25a      	sxtb	r2, r3
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80058b4:	2301      	movs	r3, #1
 80058b6:	637b      	str	r3, [r7, #52]	; 0x34
 80058b8:	e001      	b.n	80058be <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	637b      	str	r3, [r7, #52]	; 0x34
 80058be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3738      	adds	r7, #56	; 0x38
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b086      	sub	sp, #24
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10d      	bne.n	800590c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d14d      	bne.n	8005994 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 ff7d 	bl	80067fc <xTaskPriorityDisinherit>
 8005902:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	605a      	str	r2, [r3, #4]
 800590a:	e043      	b.n	8005994 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d119      	bne.n	8005946 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6898      	ldr	r0, [r3, #8]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	461a      	mov	r2, r3
 800591c:	68b9      	ldr	r1, [r7, #8]
 800591e:	f002 fb7d 	bl	800801c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	441a      	add	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	429a      	cmp	r2, r3
 800593a:	d32b      	bcc.n	8005994 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	609a      	str	r2, [r3, #8]
 8005944:	e026      	b.n	8005994 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	68d8      	ldr	r0, [r3, #12]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	461a      	mov	r2, r3
 8005950:	68b9      	ldr	r1, [r7, #8]
 8005952:	f002 fb63 	bl	800801c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	425b      	negs	r3, r3
 8005960:	441a      	add	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d207      	bcs.n	8005982 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	425b      	negs	r3, r3
 800597c:	441a      	add	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b02      	cmp	r3, #2
 8005986:	d105      	bne.n	8005994 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	3b01      	subs	r3, #1
 8005992:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800599c:	697b      	ldr	r3, [r7, #20]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d018      	beq.n	80059ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	441a      	add	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d303      	bcc.n	80059da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68d9      	ldr	r1, [r3, #12]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	461a      	mov	r2, r3
 80059e4:	6838      	ldr	r0, [r7, #0]
 80059e6:	f002 fb19 	bl	800801c <memcpy>
	}
}
 80059ea:	bf00      	nop
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80059fa:	f001 fbef 	bl	80071dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a04:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a06:	e011      	b.n	8005a2c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d012      	beq.n	8005a36 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3324      	adds	r3, #36	; 0x24
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fd17 	bl	8006448 <xTaskRemoveFromEventList>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a20:	f000 fdea 	bl	80065f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	dce9      	bgt.n	8005a08 <prvUnlockQueue+0x16>
 8005a34:	e000      	b.n	8005a38 <prvUnlockQueue+0x46>
					break;
 8005a36:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	22ff      	movs	r2, #255	; 0xff
 8005a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a40:	f001 fbfa 	bl	8007238 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a44:	f001 fbca 	bl	80071dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a4e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a50:	e011      	b.n	8005a76 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d012      	beq.n	8005a80 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3310      	adds	r3, #16
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fcf2 	bl	8006448 <xTaskRemoveFromEventList>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a6a:	f000 fdc5 	bl	80065f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a6e:	7bbb      	ldrb	r3, [r7, #14]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	dce9      	bgt.n	8005a52 <prvUnlockQueue+0x60>
 8005a7e:	e000      	b.n	8005a82 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a80:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	22ff      	movs	r2, #255	; 0xff
 8005a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a8a:	f001 fbd5 	bl	8007238 <vPortExitCritical>
}
 8005a8e:	bf00      	nop
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b084      	sub	sp, #16
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a9e:	f001 fb9d 	bl	80071dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	e001      	b.n	8005ab4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ab4:	f001 fbc0 	bl	8007238 <vPortExitCritical>

	return xReturn;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005aca:	f001 fb87 	bl	80071dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d102      	bne.n	8005ae0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ada:	2301      	movs	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e001      	b.n	8005ae4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ae4:	f001 fba8 	bl	8007238 <vPortExitCritical>

	return xReturn;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	e014      	b.n	8005b2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b04:	4a0e      	ldr	r2, [pc, #56]	; (8005b40 <vQueueAddToRegistry+0x4c>)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10b      	bne.n	8005b28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b10:	490b      	ldr	r1, [pc, #44]	; (8005b40 <vQueueAddToRegistry+0x4c>)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b1a:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <vQueueAddToRegistry+0x4c>)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	4413      	add	r3, r2
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b26:	e005      	b.n	8005b34 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b07      	cmp	r3, #7
 8005b32:	d9e7      	bls.n	8005b04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	200019a8 	.word	0x200019a8

08005b44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b54:	f001 fb42 	bl	80071dc <vPortEnterCritical>
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b5e:	b25b      	sxtb	r3, r3
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d103      	bne.n	8005b6e <vQueueWaitForMessageRestricted+0x2a>
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b74:	b25b      	sxtb	r3, r3
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d103      	bne.n	8005b84 <vQueueWaitForMessageRestricted+0x40>
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b84:	f001 fb58 	bl	8007238 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d106      	bne.n	8005b9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	3324      	adds	r3, #36	; 0x24
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fc2b 	bl	80063f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b9e:	6978      	ldr	r0, [r7, #20]
 8005ba0:	f7ff ff27 	bl	80059f2 <prvUnlockQueue>
	}
 8005ba4:	bf00      	nop
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08e      	sub	sp, #56	; 0x38
 8005bb0:	af04      	add	r7, sp, #16
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <xTaskCreateStatic+0x28>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	623b      	str	r3, [r7, #32]
 8005bd2:	e7fe      	b.n	8005bd2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <xTaskCreateStatic+0x42>
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	e7fe      	b.n	8005bec <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bee:	235c      	movs	r3, #92	; 0x5c
 8005bf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b5c      	cmp	r3, #92	; 0x5c
 8005bf6:	d009      	beq.n	8005c0c <xTaskCreateStatic+0x60>
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	e7fe      	b.n	8005c0a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d01e      	beq.n	8005c50 <xTaskCreateStatic+0xa4>
 8005c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01b      	beq.n	8005c50 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	2202      	movs	r2, #2
 8005c26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9303      	str	r3, [sp, #12]
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	9302      	str	r3, [sp, #8]
 8005c32:	f107 0314 	add.w	r3, r7, #20
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 f850 	bl	8005ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c4a:	f000 f8d3 	bl	8005df4 <prvAddNewTaskToReadyList>
 8005c4e:	e001      	b.n	8005c54 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c54:	697b      	ldr	r3, [r7, #20]
	}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3728      	adds	r7, #40	; 0x28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b08c      	sub	sp, #48	; 0x30
 8005c62:	af04      	add	r7, sp, #16
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	603b      	str	r3, [r7, #0]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c6e:	88fb      	ldrh	r3, [r7, #6]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f001 fbcc 	bl	8007410 <pvPortMalloc>
 8005c78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00e      	beq.n	8005c9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005c80:	205c      	movs	r0, #92	; 0x5c
 8005c82:	f001 fbc5 	bl	8007410 <pvPortMalloc>
 8005c86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30
 8005c94:	e005      	b.n	8005ca2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c96:	6978      	ldr	r0, [r7, #20]
 8005c98:	f001 fc7c 	bl	8007594 <vPortFree>
 8005c9c:	e001      	b.n	8005ca2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d017      	beq.n	8005cd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005cb0:	88fa      	ldrh	r2, [r7, #6]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	9303      	str	r3, [sp, #12]
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	9302      	str	r3, [sp, #8]
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbc:	9301      	str	r3, [sp, #4]
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 f80e 	bl	8005ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ccc:	69f8      	ldr	r0, [r7, #28]
 8005cce:	f000 f891 	bl	8005df4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	61bb      	str	r3, [r7, #24]
 8005cd6:	e002      	b.n	8005cde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005cde:	69bb      	ldr	r3, [r7, #24]
	}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3720      	adds	r7, #32
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	461a      	mov	r2, r3
 8005d00:	21a5      	movs	r1, #165	; 0xa5
 8005d02:	f002 f996 	bl	8008032 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d10:	3b01      	subs	r3, #1
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	f023 0307 	bic.w	r3, r3, #7
 8005d1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d009      	beq.n	8005d3e <prvInitialiseNewTask+0x56>
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	e7fe      	b.n	8005d3c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61fb      	str	r3, [r7, #28]
 8005d42:	e012      	b.n	8005d6a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	4413      	add	r3, r2
 8005d4a:	7819      	ldrb	r1, [r3, #0]
 8005d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	4413      	add	r3, r2
 8005d52:	3334      	adds	r3, #52	; 0x34
 8005d54:	460a      	mov	r2, r1
 8005d56:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d006      	beq.n	8005d72 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	3301      	adds	r3, #1
 8005d68:	61fb      	str	r3, [r7, #28]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	2b0f      	cmp	r3, #15
 8005d6e:	d9e9      	bls.n	8005d44 <prvInitialiseNewTask+0x5c>
 8005d70:	e000      	b.n	8005d74 <prvInitialiseNewTask+0x8c>
		{
			break;
 8005d72:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	2b37      	cmp	r3, #55	; 0x37
 8005d80:	d901      	bls.n	8005d86 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d82:	2337      	movs	r3, #55	; 0x37
 8005d84:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d8a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d90:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	2200      	movs	r2, #0
 8005d96:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff f8e3 	bl	8004f68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	3318      	adds	r3, #24
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff f8de 	bl	8004f68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	68f9      	ldr	r1, [r7, #12]
 8005dd4:	69b8      	ldr	r0, [r7, #24]
 8005dd6:	f001 f8db 	bl	8006f90 <pxPortInitialiseStack>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dec:	bf00      	nop
 8005dee:	3720      	adds	r7, #32
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005dfc:	f001 f9ee 	bl	80071dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e00:	4b2d      	ldr	r3, [pc, #180]	; (8005eb8 <prvAddNewTaskToReadyList+0xc4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3301      	adds	r3, #1
 8005e06:	4a2c      	ldr	r2, [pc, #176]	; (8005eb8 <prvAddNewTaskToReadyList+0xc4>)
 8005e08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e0a:	4b2c      	ldr	r3, [pc, #176]	; (8005ebc <prvAddNewTaskToReadyList+0xc8>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d109      	bne.n	8005e26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e12:	4a2a      	ldr	r2, [pc, #168]	; (8005ebc <prvAddNewTaskToReadyList+0xc8>)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e18:	4b27      	ldr	r3, [pc, #156]	; (8005eb8 <prvAddNewTaskToReadyList+0xc4>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d110      	bne.n	8005e42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e20:	f000 fc0e 	bl	8006640 <prvInitialiseTaskLists>
 8005e24:	e00d      	b.n	8005e42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e26:	4b26      	ldr	r3, [pc, #152]	; (8005ec0 <prvAddNewTaskToReadyList+0xcc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d109      	bne.n	8005e42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e2e:	4b23      	ldr	r3, [pc, #140]	; (8005ebc <prvAddNewTaskToReadyList+0xc8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d802      	bhi.n	8005e42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e3c:	4a1f      	ldr	r2, [pc, #124]	; (8005ebc <prvAddNewTaskToReadyList+0xc8>)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e42:	4b20      	ldr	r3, [pc, #128]	; (8005ec4 <prvAddNewTaskToReadyList+0xd0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3301      	adds	r3, #1
 8005e48:	4a1e      	ldr	r2, [pc, #120]	; (8005ec4 <prvAddNewTaskToReadyList+0xd0>)
 8005e4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ec4 <prvAddNewTaskToReadyList+0xd0>)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e58:	4b1b      	ldr	r3, [pc, #108]	; (8005ec8 <prvAddNewTaskToReadyList+0xd4>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d903      	bls.n	8005e68 <prvAddNewTaskToReadyList+0x74>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	4a18      	ldr	r2, [pc, #96]	; (8005ec8 <prvAddNewTaskToReadyList+0xd4>)
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4a15      	ldr	r2, [pc, #84]	; (8005ecc <prvAddNewTaskToReadyList+0xd8>)
 8005e76:	441a      	add	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f7ff f87f 	bl	8004f82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e84:	f001 f9d8 	bl	8007238 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e88:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <prvAddNewTaskToReadyList+0xcc>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00e      	beq.n	8005eae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e90:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <prvAddNewTaskToReadyList+0xc8>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d207      	bcs.n	8005eae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ed0 <prvAddNewTaskToReadyList+0xdc>)
 8005ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eae:	bf00      	nop
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000c20 	.word	0x20000c20
 8005ebc:	2000074c 	.word	0x2000074c
 8005ec0:	20000c2c 	.word	0x20000c2c
 8005ec4:	20000c3c 	.word	0x20000c3c
 8005ec8:	20000c28 	.word	0x20000c28
 8005ecc:	20000750 	.word	0x20000750
 8005ed0:	e000ed04 	.word	0xe000ed04

08005ed4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d016      	beq.n	8005f14 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ee6:	4b13      	ldr	r3, [pc, #76]	; (8005f34 <vTaskDelay+0x60>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <vTaskDelay+0x2e>
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	60bb      	str	r3, [r7, #8]
 8005f00:	e7fe      	b.n	8005f00 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005f02:	f000 f87f 	bl	8006004 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f06:	2100      	movs	r1, #0
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fce3 	bl	80068d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f0e:	f000 f887 	bl	8006020 <xTaskResumeAll>
 8005f12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d107      	bne.n	8005f2a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005f1a:	4b07      	ldr	r3, [pc, #28]	; (8005f38 <vTaskDelay+0x64>)
 8005f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000c48 	.word	0x20000c48
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08a      	sub	sp, #40	; 0x28
 8005f40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f4a:	463a      	mov	r2, r7
 8005f4c:	1d39      	adds	r1, r7, #4
 8005f4e:	f107 0308 	add.w	r3, r7, #8
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe ffb4 	bl	8004ec0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	9202      	str	r2, [sp, #8]
 8005f60:	9301      	str	r3, [sp, #4]
 8005f62:	2300      	movs	r3, #0
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	2300      	movs	r3, #0
 8005f68:	460a      	mov	r2, r1
 8005f6a:	4920      	ldr	r1, [pc, #128]	; (8005fec <vTaskStartScheduler+0xb0>)
 8005f6c:	4820      	ldr	r0, [pc, #128]	; (8005ff0 <vTaskStartScheduler+0xb4>)
 8005f6e:	f7ff fe1d 	bl	8005bac <xTaskCreateStatic>
 8005f72:	4602      	mov	r2, r0
 8005f74:	4b1f      	ldr	r3, [pc, #124]	; (8005ff4 <vTaskStartScheduler+0xb8>)
 8005f76:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f78:	4b1e      	ldr	r3, [pc, #120]	; (8005ff4 <vTaskStartScheduler+0xb8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f80:	2301      	movs	r3, #1
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	e001      	b.n	8005f8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d102      	bne.n	8005f96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f90:	f000 fcf4 	bl	800697c <xTimerCreateTimerTask>
 8005f94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d115      	bne.n	8005fc8 <vTaskStartScheduler+0x8c>
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005fae:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <vTaskStartScheduler+0xbc>)
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005fb6:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <vTaskStartScheduler+0xc0>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005fbc:	4b10      	ldr	r3, [pc, #64]	; (8006000 <vTaskStartScheduler+0xc4>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fc2:	f001 f86d 	bl	80070a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005fc6:	e00d      	b.n	8005fe4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fce:	d109      	bne.n	8005fe4 <vTaskStartScheduler+0xa8>
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	e7fe      	b.n	8005fe2 <vTaskStartScheduler+0xa6>
}
 8005fe4:	bf00      	nop
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	08008a10 	.word	0x08008a10
 8005ff0:	08006611 	.word	0x08006611
 8005ff4:	20000c44 	.word	0x20000c44
 8005ff8:	20000c40 	.word	0x20000c40
 8005ffc:	20000c2c 	.word	0x20000c2c
 8006000:	20000c24 	.word	0x20000c24

08006004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006008:	4b04      	ldr	r3, [pc, #16]	; (800601c <vTaskSuspendAll+0x18>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3301      	adds	r3, #1
 800600e:	4a03      	ldr	r2, [pc, #12]	; (800601c <vTaskSuspendAll+0x18>)
 8006010:	6013      	str	r3, [r2, #0]
}
 8006012:	bf00      	nop
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	20000c48 	.word	0x20000c48

08006020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800602a:	2300      	movs	r3, #0
 800602c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800602e:	4b41      	ldr	r3, [pc, #260]	; (8006134 <xTaskResumeAll+0x114>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d109      	bne.n	800604a <xTaskResumeAll+0x2a>
 8006036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	603b      	str	r3, [r7, #0]
 8006048:	e7fe      	b.n	8006048 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800604a:	f001 f8c7 	bl	80071dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800604e:	4b39      	ldr	r3, [pc, #228]	; (8006134 <xTaskResumeAll+0x114>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3b01      	subs	r3, #1
 8006054:	4a37      	ldr	r2, [pc, #220]	; (8006134 <xTaskResumeAll+0x114>)
 8006056:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006058:	4b36      	ldr	r3, [pc, #216]	; (8006134 <xTaskResumeAll+0x114>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d162      	bne.n	8006126 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006060:	4b35      	ldr	r3, [pc, #212]	; (8006138 <xTaskResumeAll+0x118>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d05e      	beq.n	8006126 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006068:	e02f      	b.n	80060ca <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800606a:	4b34      	ldr	r3, [pc, #208]	; (800613c <xTaskResumeAll+0x11c>)
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3318      	adds	r3, #24
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe ffe0 	bl	800503c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3304      	adds	r3, #4
 8006080:	4618      	mov	r0, r3
 8006082:	f7fe ffdb 	bl	800503c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608a:	4b2d      	ldr	r3, [pc, #180]	; (8006140 <xTaskResumeAll+0x120>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d903      	bls.n	800609a <xTaskResumeAll+0x7a>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	4a2a      	ldr	r2, [pc, #168]	; (8006140 <xTaskResumeAll+0x120>)
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609e:	4613      	mov	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4a27      	ldr	r2, [pc, #156]	; (8006144 <xTaskResumeAll+0x124>)
 80060a8:	441a      	add	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3304      	adds	r3, #4
 80060ae:	4619      	mov	r1, r3
 80060b0:	4610      	mov	r0, r2
 80060b2:	f7fe ff66 	bl	8004f82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ba:	4b23      	ldr	r3, [pc, #140]	; (8006148 <xTaskResumeAll+0x128>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d302      	bcc.n	80060ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80060c4:	4b21      	ldr	r3, [pc, #132]	; (800614c <xTaskResumeAll+0x12c>)
 80060c6:	2201      	movs	r2, #1
 80060c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060ca:	4b1c      	ldr	r3, [pc, #112]	; (800613c <xTaskResumeAll+0x11c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1cb      	bne.n	800606a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060d8:	f000 fb4c 	bl	8006774 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80060dc:	4b1c      	ldr	r3, [pc, #112]	; (8006150 <xTaskResumeAll+0x130>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d010      	beq.n	800610a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060e8:	f000 f846 	bl	8006178 <xTaskIncrementTick>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80060f2:	4b16      	ldr	r3, [pc, #88]	; (800614c <xTaskResumeAll+0x12c>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1f1      	bne.n	80060e8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006104:	4b12      	ldr	r3, [pc, #72]	; (8006150 <xTaskResumeAll+0x130>)
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800610a:	4b10      	ldr	r3, [pc, #64]	; (800614c <xTaskResumeAll+0x12c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d009      	beq.n	8006126 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006112:	2301      	movs	r3, #1
 8006114:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006116:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <xTaskResumeAll+0x134>)
 8006118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006126:	f001 f887 	bl	8007238 <vPortExitCritical>

	return xAlreadyYielded;
 800612a:	68bb      	ldr	r3, [r7, #8]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	20000c48 	.word	0x20000c48
 8006138:	20000c20 	.word	0x20000c20
 800613c:	20000be0 	.word	0x20000be0
 8006140:	20000c28 	.word	0x20000c28
 8006144:	20000750 	.word	0x20000750
 8006148:	2000074c 	.word	0x2000074c
 800614c:	20000c34 	.word	0x20000c34
 8006150:	20000c30 	.word	0x20000c30
 8006154:	e000ed04 	.word	0xe000ed04

08006158 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <xTaskGetTickCount+0x1c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006164:	687b      	ldr	r3, [r7, #4]
}
 8006166:	4618      	mov	r0, r3
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20000c24 	.word	0x20000c24

08006178 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800617e:	2300      	movs	r3, #0
 8006180:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006182:	4b51      	ldr	r3, [pc, #324]	; (80062c8 <xTaskIncrementTick+0x150>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	f040 808d 	bne.w	80062a6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800618c:	4b4f      	ldr	r3, [pc, #316]	; (80062cc <xTaskIncrementTick+0x154>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3301      	adds	r3, #1
 8006192:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006194:	4a4d      	ldr	r2, [pc, #308]	; (80062cc <xTaskIncrementTick+0x154>)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d11f      	bne.n	80061e0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80061a0:	4b4b      	ldr	r3, [pc, #300]	; (80062d0 <xTaskIncrementTick+0x158>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d009      	beq.n	80061be <xTaskIncrementTick+0x46>
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	e7fe      	b.n	80061bc <xTaskIncrementTick+0x44>
 80061be:	4b44      	ldr	r3, [pc, #272]	; (80062d0 <xTaskIncrementTick+0x158>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	4b43      	ldr	r3, [pc, #268]	; (80062d4 <xTaskIncrementTick+0x15c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a41      	ldr	r2, [pc, #260]	; (80062d0 <xTaskIncrementTick+0x158>)
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	4a41      	ldr	r2, [pc, #260]	; (80062d4 <xTaskIncrementTick+0x15c>)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	4b41      	ldr	r3, [pc, #260]	; (80062d8 <xTaskIncrementTick+0x160>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3301      	adds	r3, #1
 80061d8:	4a3f      	ldr	r2, [pc, #252]	; (80062d8 <xTaskIncrementTick+0x160>)
 80061da:	6013      	str	r3, [r2, #0]
 80061dc:	f000 faca 	bl	8006774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061e0:	4b3e      	ldr	r3, [pc, #248]	; (80062dc <xTaskIncrementTick+0x164>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d34e      	bcc.n	8006288 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ea:	4b39      	ldr	r3, [pc, #228]	; (80062d0 <xTaskIncrementTick+0x158>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <xTaskIncrementTick+0x80>
 80061f4:	2301      	movs	r3, #1
 80061f6:	e000      	b.n	80061fa <xTaskIncrementTick+0x82>
 80061f8:	2300      	movs	r3, #0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d004      	beq.n	8006208 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061fe:	4b37      	ldr	r3, [pc, #220]	; (80062dc <xTaskIncrementTick+0x164>)
 8006200:	f04f 32ff 	mov.w	r2, #4294967295
 8006204:	601a      	str	r2, [r3, #0]
					break;
 8006206:	e03f      	b.n	8006288 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006208:	4b31      	ldr	r3, [pc, #196]	; (80062d0 <xTaskIncrementTick+0x158>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	429a      	cmp	r2, r3
 800621e:	d203      	bcs.n	8006228 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006220:	4a2e      	ldr	r2, [pc, #184]	; (80062dc <xTaskIncrementTick+0x164>)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6013      	str	r3, [r2, #0]
						break;
 8006226:	e02f      	b.n	8006288 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	3304      	adds	r3, #4
 800622c:	4618      	mov	r0, r3
 800622e:	f7fe ff05 	bl	800503c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	2b00      	cmp	r3, #0
 8006238:	d004      	beq.n	8006244 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	3318      	adds	r3, #24
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe fefc 	bl	800503c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006248:	4b25      	ldr	r3, [pc, #148]	; (80062e0 <xTaskIncrementTick+0x168>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	429a      	cmp	r2, r3
 800624e:	d903      	bls.n	8006258 <xTaskIncrementTick+0xe0>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006254:	4a22      	ldr	r2, [pc, #136]	; (80062e0 <xTaskIncrementTick+0x168>)
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4a1f      	ldr	r2, [pc, #124]	; (80062e4 <xTaskIncrementTick+0x16c>)
 8006266:	441a      	add	r2, r3
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	3304      	adds	r3, #4
 800626c:	4619      	mov	r1, r3
 800626e:	4610      	mov	r0, r2
 8006270:	f7fe fe87 	bl	8004f82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006278:	4b1b      	ldr	r3, [pc, #108]	; (80062e8 <xTaskIncrementTick+0x170>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627e:	429a      	cmp	r2, r3
 8006280:	d3b3      	bcc.n	80061ea <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006282:	2301      	movs	r3, #1
 8006284:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006286:	e7b0      	b.n	80061ea <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006288:	4b17      	ldr	r3, [pc, #92]	; (80062e8 <xTaskIncrementTick+0x170>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628e:	4915      	ldr	r1, [pc, #84]	; (80062e4 <xTaskIncrementTick+0x16c>)
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	440b      	add	r3, r1
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d907      	bls.n	80062b0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80062a0:	2301      	movs	r3, #1
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	e004      	b.n	80062b0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80062a6:	4b11      	ldr	r3, [pc, #68]	; (80062ec <xTaskIncrementTick+0x174>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3301      	adds	r3, #1
 80062ac:	4a0f      	ldr	r2, [pc, #60]	; (80062ec <xTaskIncrementTick+0x174>)
 80062ae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80062b0:	4b0f      	ldr	r3, [pc, #60]	; (80062f0 <xTaskIncrementTick+0x178>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80062b8:	2301      	movs	r3, #1
 80062ba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80062bc:	697b      	ldr	r3, [r7, #20]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000c48 	.word	0x20000c48
 80062cc:	20000c24 	.word	0x20000c24
 80062d0:	20000bd8 	.word	0x20000bd8
 80062d4:	20000bdc 	.word	0x20000bdc
 80062d8:	20000c38 	.word	0x20000c38
 80062dc:	20000c40 	.word	0x20000c40
 80062e0:	20000c28 	.word	0x20000c28
 80062e4:	20000750 	.word	0x20000750
 80062e8:	2000074c 	.word	0x2000074c
 80062ec:	20000c30 	.word	0x20000c30
 80062f0:	20000c34 	.word	0x20000c34

080062f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062fa:	4b27      	ldr	r3, [pc, #156]	; (8006398 <vTaskSwitchContext+0xa4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006302:	4b26      	ldr	r3, [pc, #152]	; (800639c <vTaskSwitchContext+0xa8>)
 8006304:	2201      	movs	r2, #1
 8006306:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006308:	e040      	b.n	800638c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800630a:	4b24      	ldr	r3, [pc, #144]	; (800639c <vTaskSwitchContext+0xa8>)
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006310:	4b23      	ldr	r3, [pc, #140]	; (80063a0 <vTaskSwitchContext+0xac>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	e00f      	b.n	8006338 <vTaskSwitchContext+0x44>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d109      	bne.n	8006332 <vTaskSwitchContext+0x3e>
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	607b      	str	r3, [r7, #4]
 8006330:	e7fe      	b.n	8006330 <vTaskSwitchContext+0x3c>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3b01      	subs	r3, #1
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	491a      	ldr	r1, [pc, #104]	; (80063a4 <vTaskSwitchContext+0xb0>)
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	440b      	add	r3, r1
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0e5      	beq.n	8006318 <vTaskSwitchContext+0x24>
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4613      	mov	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4a13      	ldr	r2, [pc, #76]	; (80063a4 <vTaskSwitchContext+0xb0>)
 8006358:	4413      	add	r3, r2
 800635a:	60bb      	str	r3, [r7, #8]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	605a      	str	r2, [r3, #4]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	3308      	adds	r3, #8
 800636e:	429a      	cmp	r2, r3
 8006370:	d104      	bne.n	800637c <vTaskSwitchContext+0x88>
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	605a      	str	r2, [r3, #4]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	4a09      	ldr	r2, [pc, #36]	; (80063a8 <vTaskSwitchContext+0xb4>)
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	4a06      	ldr	r2, [pc, #24]	; (80063a0 <vTaskSwitchContext+0xac>)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6013      	str	r3, [r2, #0]
}
 800638c:	bf00      	nop
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	20000c48 	.word	0x20000c48
 800639c:	20000c34 	.word	0x20000c34
 80063a0:	20000c28 	.word	0x20000c28
 80063a4:	20000750 	.word	0x20000750
 80063a8:	2000074c 	.word	0x2000074c

080063ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d109      	bne.n	80063d0 <vTaskPlaceOnEventList+0x24>
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	e7fe      	b.n	80063ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063d0:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <vTaskPlaceOnEventList+0x44>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3318      	adds	r3, #24
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7fe fdf6 	bl	8004fca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063de:	2101      	movs	r1, #1
 80063e0:	6838      	ldr	r0, [r7, #0]
 80063e2:	f000 fa77 	bl	80068d4 <prvAddCurrentTaskToDelayedList>
}
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	2000074c 	.word	0x2000074c

080063f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <vTaskPlaceOnEventListRestricted+0x26>
 8006406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	e7fe      	b.n	8006418 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800641a:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <vTaskPlaceOnEventListRestricted+0x50>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3318      	adds	r3, #24
 8006420:	4619      	mov	r1, r3
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f7fe fdad 	bl	8004f82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800642e:	f04f 33ff 	mov.w	r3, #4294967295
 8006432:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	68b8      	ldr	r0, [r7, #8]
 8006438:	f000 fa4c 	bl	80068d4 <prvAddCurrentTaskToDelayedList>
	}
 800643c:	bf00      	nop
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	2000074c 	.word	0x2000074c

08006448 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <xTaskRemoveFromEventList+0x2a>
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	e7fe      	b.n	8006470 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	3318      	adds	r3, #24
 8006476:	4618      	mov	r0, r3
 8006478:	f7fe fde0 	bl	800503c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800647c:	4b1d      	ldr	r3, [pc, #116]	; (80064f4 <xTaskRemoveFromEventList+0xac>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d11d      	bne.n	80064c0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	3304      	adds	r3, #4
 8006488:	4618      	mov	r0, r3
 800648a:	f7fe fdd7 	bl	800503c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006492:	4b19      	ldr	r3, [pc, #100]	; (80064f8 <xTaskRemoveFromEventList+0xb0>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d903      	bls.n	80064a2 <xTaskRemoveFromEventList+0x5a>
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	4a16      	ldr	r2, [pc, #88]	; (80064f8 <xTaskRemoveFromEventList+0xb0>)
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4a13      	ldr	r2, [pc, #76]	; (80064fc <xTaskRemoveFromEventList+0xb4>)
 80064b0:	441a      	add	r2, r3
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	3304      	adds	r3, #4
 80064b6:	4619      	mov	r1, r3
 80064b8:	4610      	mov	r0, r2
 80064ba:	f7fe fd62 	bl	8004f82 <vListInsertEnd>
 80064be:	e005      	b.n	80064cc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	3318      	adds	r3, #24
 80064c4:	4619      	mov	r1, r3
 80064c6:	480e      	ldr	r0, [pc, #56]	; (8006500 <xTaskRemoveFromEventList+0xb8>)
 80064c8:	f7fe fd5b 	bl	8004f82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d0:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <xTaskRemoveFromEventList+0xbc>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d905      	bls.n	80064e6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064da:	2301      	movs	r3, #1
 80064dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064de:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <xTaskRemoveFromEventList+0xc0>)
 80064e0:	2201      	movs	r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	e001      	b.n	80064ea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80064ea:	697b      	ldr	r3, [r7, #20]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000c48 	.word	0x20000c48
 80064f8:	20000c28 	.word	0x20000c28
 80064fc:	20000750 	.word	0x20000750
 8006500:	20000be0 	.word	0x20000be0
 8006504:	2000074c 	.word	0x2000074c
 8006508:	20000c34 	.word	0x20000c34

0800650c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006514:	4b06      	ldr	r3, [pc, #24]	; (8006530 <vTaskInternalSetTimeOutState+0x24>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800651c:	4b05      	ldr	r3, [pc, #20]	; (8006534 <vTaskInternalSetTimeOutState+0x28>)
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	605a      	str	r2, [r3, #4]
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	20000c38 	.word	0x20000c38
 8006534:	20000c24 	.word	0x20000c24

08006538 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d109      	bne.n	800655c <xTaskCheckForTimeOut+0x24>
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	613b      	str	r3, [r7, #16]
 800655a:	e7fe      	b.n	800655a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d109      	bne.n	8006576 <xTaskCheckForTimeOut+0x3e>
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e7fe      	b.n	8006574 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006576:	f000 fe31 	bl	80071dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800657a:	4b1d      	ldr	r3, [pc, #116]	; (80065f0 <xTaskCheckForTimeOut+0xb8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006592:	d102      	bne.n	800659a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006594:	2300      	movs	r3, #0
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	e023      	b.n	80065e2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	4b15      	ldr	r3, [pc, #84]	; (80065f4 <xTaskCheckForTimeOut+0xbc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d007      	beq.n	80065b6 <xTaskCheckForTimeOut+0x7e>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d302      	bcc.n	80065b6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065b0:	2301      	movs	r3, #1
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	e015      	b.n	80065e2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d20b      	bcs.n	80065d8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	1ad2      	subs	r2, r2, r3
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7ff ff9d 	bl	800650c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065d2:	2300      	movs	r3, #0
 80065d4:	61fb      	str	r3, [r7, #28]
 80065d6:	e004      	b.n	80065e2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065de:	2301      	movs	r3, #1
 80065e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065e2:	f000 fe29 	bl	8007238 <vPortExitCritical>

	return xReturn;
 80065e6:	69fb      	ldr	r3, [r7, #28]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3720      	adds	r7, #32
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000c24 	.word	0x20000c24
 80065f4:	20000c38 	.word	0x20000c38

080065f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065fc:	4b03      	ldr	r3, [pc, #12]	; (800660c <vTaskMissedYield+0x14>)
 80065fe:	2201      	movs	r2, #1
 8006600:	601a      	str	r2, [r3, #0]
}
 8006602:	bf00      	nop
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	20000c34 	.word	0x20000c34

08006610 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006618:	f000 f852 	bl	80066c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800661c:	4b06      	ldr	r3, [pc, #24]	; (8006638 <prvIdleTask+0x28>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d9f9      	bls.n	8006618 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006624:	4b05      	ldr	r3, [pc, #20]	; (800663c <prvIdleTask+0x2c>)
 8006626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006634:	e7f0      	b.n	8006618 <prvIdleTask+0x8>
 8006636:	bf00      	nop
 8006638:	20000750 	.word	0x20000750
 800663c:	e000ed04 	.word	0xe000ed04

08006640 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006646:	2300      	movs	r3, #0
 8006648:	607b      	str	r3, [r7, #4]
 800664a:	e00c      	b.n	8006666 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	4613      	mov	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4a12      	ldr	r2, [pc, #72]	; (80066a0 <prvInitialiseTaskLists+0x60>)
 8006658:	4413      	add	r3, r2
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe fc64 	bl	8004f28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3301      	adds	r3, #1
 8006664:	607b      	str	r3, [r7, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b37      	cmp	r3, #55	; 0x37
 800666a:	d9ef      	bls.n	800664c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800666c:	480d      	ldr	r0, [pc, #52]	; (80066a4 <prvInitialiseTaskLists+0x64>)
 800666e:	f7fe fc5b 	bl	8004f28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006672:	480d      	ldr	r0, [pc, #52]	; (80066a8 <prvInitialiseTaskLists+0x68>)
 8006674:	f7fe fc58 	bl	8004f28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006678:	480c      	ldr	r0, [pc, #48]	; (80066ac <prvInitialiseTaskLists+0x6c>)
 800667a:	f7fe fc55 	bl	8004f28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800667e:	480c      	ldr	r0, [pc, #48]	; (80066b0 <prvInitialiseTaskLists+0x70>)
 8006680:	f7fe fc52 	bl	8004f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006684:	480b      	ldr	r0, [pc, #44]	; (80066b4 <prvInitialiseTaskLists+0x74>)
 8006686:	f7fe fc4f 	bl	8004f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800668a:	4b0b      	ldr	r3, [pc, #44]	; (80066b8 <prvInitialiseTaskLists+0x78>)
 800668c:	4a05      	ldr	r2, [pc, #20]	; (80066a4 <prvInitialiseTaskLists+0x64>)
 800668e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006690:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <prvInitialiseTaskLists+0x7c>)
 8006692:	4a05      	ldr	r2, [pc, #20]	; (80066a8 <prvInitialiseTaskLists+0x68>)
 8006694:	601a      	str	r2, [r3, #0]
}
 8006696:	bf00      	nop
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000750 	.word	0x20000750
 80066a4:	20000bb0 	.word	0x20000bb0
 80066a8:	20000bc4 	.word	0x20000bc4
 80066ac:	20000be0 	.word	0x20000be0
 80066b0:	20000bf4 	.word	0x20000bf4
 80066b4:	20000c0c 	.word	0x20000c0c
 80066b8:	20000bd8 	.word	0x20000bd8
 80066bc:	20000bdc 	.word	0x20000bdc

080066c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066c6:	e019      	b.n	80066fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066c8:	f000 fd88 	bl	80071dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80066cc:	4b0f      	ldr	r3, [pc, #60]	; (800670c <prvCheckTasksWaitingTermination+0x4c>)
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3304      	adds	r3, #4
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fe fcaf 	bl	800503c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066de:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <prvCheckTasksWaitingTermination+0x50>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	4a0a      	ldr	r2, [pc, #40]	; (8006710 <prvCheckTasksWaitingTermination+0x50>)
 80066e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066e8:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <prvCheckTasksWaitingTermination+0x54>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	4a09      	ldr	r2, [pc, #36]	; (8006714 <prvCheckTasksWaitingTermination+0x54>)
 80066f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066f2:	f000 fda1 	bl	8007238 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f80e 	bl	8006718 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066fc:	4b05      	ldr	r3, [pc, #20]	; (8006714 <prvCheckTasksWaitingTermination+0x54>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1e1      	bne.n	80066c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006704:	bf00      	nop
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	20000bf4 	.word	0x20000bf4
 8006710:	20000c20 	.word	0x20000c20
 8006714:	20000c08 	.word	0x20000c08

08006718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006726:	2b00      	cmp	r3, #0
 8006728:	d108      	bne.n	800673c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672e:	4618      	mov	r0, r3
 8006730:	f000 ff30 	bl	8007594 <vPortFree>
				vPortFree( pxTCB );
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 ff2d 	bl	8007594 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800673a:	e017      	b.n	800676c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006742:	2b01      	cmp	r3, #1
 8006744:	d103      	bne.n	800674e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 ff24 	bl	8007594 <vPortFree>
	}
 800674c:	e00e      	b.n	800676c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006754:	2b02      	cmp	r3, #2
 8006756:	d009      	beq.n	800676c <prvDeleteTCB+0x54>
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	e7fe      	b.n	800676a <prvDeleteTCB+0x52>
	}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800677a:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <prvResetNextTaskUnblockTime+0x44>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <prvResetNextTaskUnblockTime+0x14>
 8006784:	2301      	movs	r3, #1
 8006786:	e000      	b.n	800678a <prvResetNextTaskUnblockTime+0x16>
 8006788:	2300      	movs	r3, #0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d004      	beq.n	8006798 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800678e:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <prvResetNextTaskUnblockTime+0x48>)
 8006790:	f04f 32ff 	mov.w	r2, #4294967295
 8006794:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006796:	e008      	b.n	80067aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006798:	4b07      	ldr	r3, [pc, #28]	; (80067b8 <prvResetNextTaskUnblockTime+0x44>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	4a05      	ldr	r2, [pc, #20]	; (80067bc <prvResetNextTaskUnblockTime+0x48>)
 80067a8:	6013      	str	r3, [r2, #0]
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	20000bd8 	.word	0x20000bd8
 80067bc:	20000c40 	.word	0x20000c40

080067c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067c6:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <xTaskGetSchedulerState+0x34>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d102      	bne.n	80067d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067ce:	2301      	movs	r3, #1
 80067d0:	607b      	str	r3, [r7, #4]
 80067d2:	e008      	b.n	80067e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067d4:	4b08      	ldr	r3, [pc, #32]	; (80067f8 <xTaskGetSchedulerState+0x38>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067dc:	2302      	movs	r3, #2
 80067de:	607b      	str	r3, [r7, #4]
 80067e0:	e001      	b.n	80067e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067e2:	2300      	movs	r3, #0
 80067e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067e6:	687b      	ldr	r3, [r7, #4]
	}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	20000c2c 	.word	0x20000c2c
 80067f8:	20000c48 	.word	0x20000c48

080067fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006808:	2300      	movs	r3, #0
 800680a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d054      	beq.n	80068bc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006812:	4b2d      	ldr	r3, [pc, #180]	; (80068c8 <xTaskPriorityDisinherit+0xcc>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	429a      	cmp	r2, r3
 800681a:	d009      	beq.n	8006830 <xTaskPriorityDisinherit+0x34>
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	e7fe      	b.n	800682e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006834:	2b00      	cmp	r3, #0
 8006836:	d109      	bne.n	800684c <xTaskPriorityDisinherit+0x50>
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	60bb      	str	r3, [r7, #8]
 800684a:	e7fe      	b.n	800684a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006850:	1e5a      	subs	r2, r3, #1
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685e:	429a      	cmp	r2, r3
 8006860:	d02c      	beq.n	80068bc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006866:	2b00      	cmp	r3, #0
 8006868:	d128      	bne.n	80068bc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	3304      	adds	r3, #4
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe fbe4 	bl	800503c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688c:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <xTaskPriorityDisinherit+0xd0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d903      	bls.n	800689c <xTaskPriorityDisinherit+0xa0>
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	4a0c      	ldr	r2, [pc, #48]	; (80068cc <xTaskPriorityDisinherit+0xd0>)
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4a09      	ldr	r2, [pc, #36]	; (80068d0 <xTaskPriorityDisinherit+0xd4>)
 80068aa:	441a      	add	r2, r3
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4619      	mov	r1, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	f7fe fb65 	bl	8004f82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068b8:	2301      	movs	r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068bc:	697b      	ldr	r3, [r7, #20]
	}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	2000074c 	.word	0x2000074c
 80068cc:	20000c28 	.word	0x20000c28
 80068d0:	20000750 	.word	0x20000750

080068d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80068de:	4b21      	ldr	r3, [pc, #132]	; (8006964 <prvAddCurrentTaskToDelayedList+0x90>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068e4:	4b20      	ldr	r3, [pc, #128]	; (8006968 <prvAddCurrentTaskToDelayedList+0x94>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3304      	adds	r3, #4
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe fba6 	bl	800503c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f6:	d10a      	bne.n	800690e <prvAddCurrentTaskToDelayedList+0x3a>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d007      	beq.n	800690e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068fe:	4b1a      	ldr	r3, [pc, #104]	; (8006968 <prvAddCurrentTaskToDelayedList+0x94>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3304      	adds	r3, #4
 8006904:	4619      	mov	r1, r3
 8006906:	4819      	ldr	r0, [pc, #100]	; (800696c <prvAddCurrentTaskToDelayedList+0x98>)
 8006908:	f7fe fb3b 	bl	8004f82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800690c:	e026      	b.n	800695c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4413      	add	r3, r2
 8006914:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006916:	4b14      	ldr	r3, [pc, #80]	; (8006968 <prvAddCurrentTaskToDelayedList+0x94>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	429a      	cmp	r2, r3
 8006924:	d209      	bcs.n	800693a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006926:	4b12      	ldr	r3, [pc, #72]	; (8006970 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <prvAddCurrentTaskToDelayedList+0x94>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3304      	adds	r3, #4
 8006930:	4619      	mov	r1, r3
 8006932:	4610      	mov	r0, r2
 8006934:	f7fe fb49 	bl	8004fca <vListInsert>
}
 8006938:	e010      	b.n	800695c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800693a:	4b0e      	ldr	r3, [pc, #56]	; (8006974 <prvAddCurrentTaskToDelayedList+0xa0>)
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4b0a      	ldr	r3, [pc, #40]	; (8006968 <prvAddCurrentTaskToDelayedList+0x94>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3304      	adds	r3, #4
 8006944:	4619      	mov	r1, r3
 8006946:	4610      	mov	r0, r2
 8006948:	f7fe fb3f 	bl	8004fca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <prvAddCurrentTaskToDelayedList+0xa4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	429a      	cmp	r2, r3
 8006954:	d202      	bcs.n	800695c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006956:	4a08      	ldr	r2, [pc, #32]	; (8006978 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	6013      	str	r3, [r2, #0]
}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20000c24 	.word	0x20000c24
 8006968:	2000074c 	.word	0x2000074c
 800696c:	20000c0c 	.word	0x20000c0c
 8006970:	20000bdc 	.word	0x20000bdc
 8006974:	20000bd8 	.word	0x20000bd8
 8006978:	20000c40 	.word	0x20000c40

0800697c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08a      	sub	sp, #40	; 0x28
 8006980:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006986:	f000 fac3 	bl	8006f10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800698a:	4b1c      	ldr	r3, [pc, #112]	; (80069fc <xTimerCreateTimerTask+0x80>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d021      	beq.n	80069d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006996:	2300      	movs	r3, #0
 8006998:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800699a:	1d3a      	adds	r2, r7, #4
 800699c:	f107 0108 	add.w	r1, r7, #8
 80069a0:	f107 030c 	add.w	r3, r7, #12
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fe faa5 	bl	8004ef4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80069aa:	6879      	ldr	r1, [r7, #4]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	9202      	str	r2, [sp, #8]
 80069b2:	9301      	str	r3, [sp, #4]
 80069b4:	2302      	movs	r3, #2
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	2300      	movs	r3, #0
 80069ba:	460a      	mov	r2, r1
 80069bc:	4910      	ldr	r1, [pc, #64]	; (8006a00 <xTimerCreateTimerTask+0x84>)
 80069be:	4811      	ldr	r0, [pc, #68]	; (8006a04 <xTimerCreateTimerTask+0x88>)
 80069c0:	f7ff f8f4 	bl	8005bac <xTaskCreateStatic>
 80069c4:	4602      	mov	r2, r0
 80069c6:	4b10      	ldr	r3, [pc, #64]	; (8006a08 <xTimerCreateTimerTask+0x8c>)
 80069c8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80069ca:	4b0f      	ldr	r3, [pc, #60]	; (8006a08 <xTimerCreateTimerTask+0x8c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80069d2:	2301      	movs	r3, #1
 80069d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d109      	bne.n	80069f0 <xTimerCreateTimerTask+0x74>
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	e7fe      	b.n	80069ee <xTimerCreateTimerTask+0x72>
	return xReturn;
 80069f0:	697b      	ldr	r3, [r7, #20]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20000c7c 	.word	0x20000c7c
 8006a00:	08008a18 	.word	0x08008a18
 8006a04:	08006b25 	.word	0x08006b25
 8006a08:	20000c80 	.word	0x20000c80

08006a0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08a      	sub	sp, #40	; 0x28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d109      	bne.n	8006a38 <xTimerGenericCommand+0x2c>
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	623b      	str	r3, [r7, #32]
 8006a36:	e7fe      	b.n	8006a36 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a38:	4b19      	ldr	r3, [pc, #100]	; (8006aa0 <xTimerGenericCommand+0x94>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d02a      	beq.n	8006a96 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b05      	cmp	r3, #5
 8006a50:	dc18      	bgt.n	8006a84 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a52:	f7ff feb5 	bl	80067c0 <xTaskGetSchedulerState>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d109      	bne.n	8006a70 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a5c:	4b10      	ldr	r3, [pc, #64]	; (8006aa0 <xTimerGenericCommand+0x94>)
 8006a5e:	6818      	ldr	r0, [r3, #0]
 8006a60:	f107 0110 	add.w	r1, r7, #16
 8006a64:	2300      	movs	r3, #0
 8006a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a68:	f7fe fc4c 	bl	8005304 <xQueueGenericSend>
 8006a6c:	6278      	str	r0, [r7, #36]	; 0x24
 8006a6e:	e012      	b.n	8006a96 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <xTimerGenericCommand+0x94>)
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	f107 0110 	add.w	r1, r7, #16
 8006a78:	2300      	movs	r3, #0
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f7fe fc42 	bl	8005304 <xQueueGenericSend>
 8006a80:	6278      	str	r0, [r7, #36]	; 0x24
 8006a82:	e008      	b.n	8006a96 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a84:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <xTimerGenericCommand+0x94>)
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	f107 0110 	add.w	r1, r7, #16
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	f7fe fd32 	bl	80054f8 <xQueueGenericSendFromISR>
 8006a94:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3728      	adds	r7, #40	; 0x28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20000c7c 	.word	0x20000c7c

08006aa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006aae:	4b1c      	ldr	r3, [pc, #112]	; (8006b20 <prvProcessExpiredTimer+0x7c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	3304      	adds	r3, #4
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fe fabd 	bl	800503c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d121      	bne.n	8006b0e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	18d1      	adds	r1, r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	6978      	ldr	r0, [r7, #20]
 8006ad8:	f000 f8c8 	bl	8006c6c <prvInsertTimerInActiveList>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d015      	beq.n	8006b0e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	2100      	movs	r1, #0
 8006aec:	6978      	ldr	r0, [r7, #20]
 8006aee:	f7ff ff8d 	bl	8006a0c <xTimerGenericCommand>
 8006af2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d109      	bne.n	8006b0e <prvProcessExpiredTimer+0x6a>
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	e7fe      	b.n	8006b0c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	6978      	ldr	r0, [r7, #20]
 8006b14:	4798      	blx	r3
}
 8006b16:	bf00      	nop
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000c74 	.word	0x20000c74

08006b24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b2c:	f107 0308 	add.w	r3, r7, #8
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 f857 	bl	8006be4 <prvGetNextExpireTime>
 8006b36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 f803 	bl	8006b48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006b42:	f000 f8d5 	bl	8006cf0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b46:	e7f1      	b.n	8006b2c <prvTimerTask+0x8>

08006b48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006b52:	f7ff fa57 	bl	8006004 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b56:	f107 0308 	add.w	r3, r7, #8
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f866 	bl	8006c2c <prvSampleTimeNow>
 8006b60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d130      	bne.n	8006bca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <prvProcessTimerOrBlockTask+0x3c>
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d806      	bhi.n	8006b84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b76:	f7ff fa53 	bl	8006020 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff ff91 	bl	8006aa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b82:	e024      	b.n	8006bce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d008      	beq.n	8006b9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b8a:	4b13      	ldr	r3, [pc, #76]	; (8006bd8 <prvProcessTimerOrBlockTask+0x90>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bf0c      	ite	eq
 8006b94:	2301      	moveq	r3, #1
 8006b96:	2300      	movne	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b9c:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <prvProcessTimerOrBlockTask+0x94>)
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	f7fe ffcb 	bl	8005b44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006bae:	f7ff fa37 	bl	8006020 <xTaskResumeAll>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10a      	bne.n	8006bce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006bb8:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <prvProcessTimerOrBlockTask+0x98>)
 8006bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	f3bf 8f6f 	isb	sy
}
 8006bc8:	e001      	b.n	8006bce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006bca:	f7ff fa29 	bl	8006020 <xTaskResumeAll>
}
 8006bce:	bf00      	nop
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20000c78 	.word	0x20000c78
 8006bdc:	20000c7c 	.word	0x20000c7c
 8006be0:	e000ed04 	.word	0xe000ed04

08006be4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006bec:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <prvGetNextExpireTime+0x44>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bf0c      	ite	eq
 8006bf6:	2301      	moveq	r3, #1
 8006bf8:	2300      	movne	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d105      	bne.n	8006c16 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c0a:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <prvGetNextExpireTime+0x44>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	e001      	b.n	8006c1a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	20000c74 	.word	0x20000c74

08006c2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c34:	f7ff fa90 	bl	8006158 <xTaskGetTickCount>
 8006c38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c3a:	4b0b      	ldr	r3, [pc, #44]	; (8006c68 <prvSampleTimeNow+0x3c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d205      	bcs.n	8006c50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006c44:	f000 f904 	bl	8006e50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e002      	b.n	8006c56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006c56:	4a04      	ldr	r2, [pc, #16]	; (8006c68 <prvSampleTimeNow+0x3c>)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000c84 	.word	0x20000c84

08006c6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d812      	bhi.n	8006cb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	1ad2      	subs	r2, r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d302      	bcc.n	8006ca6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	e01b      	b.n	8006cde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ca6:	4b10      	ldr	r3, [pc, #64]	; (8006ce8 <prvInsertTimerInActiveList+0x7c>)
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3304      	adds	r3, #4
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	f7fe f98a 	bl	8004fca <vListInsert>
 8006cb6:	e012      	b.n	8006cde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d206      	bcs.n	8006cce <prvInsertTimerInActiveList+0x62>
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d302      	bcc.n	8006cce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	e007      	b.n	8006cde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cce:	4b07      	ldr	r3, [pc, #28]	; (8006cec <prvInsertTimerInActiveList+0x80>)
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	f7fe f976 	bl	8004fca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006cde:	697b      	ldr	r3, [r7, #20]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20000c78 	.word	0x20000c78
 8006cec:	20000c74 	.word	0x20000c74

08006cf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08e      	sub	sp, #56	; 0x38
 8006cf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cf6:	e099      	b.n	8006e2c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	da17      	bge.n	8006d2e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006cfe:	1d3b      	adds	r3, r7, #4
 8006d00:	3304      	adds	r3, #4
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d109      	bne.n	8006d1e <prvProcessReceivedCommands+0x2e>
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	e7fe      	b.n	8006d1c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d24:	6850      	ldr	r0, [r2, #4]
 8006d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d28:	6892      	ldr	r2, [r2, #8]
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	db7a      	blt.n	8006e2a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d004      	beq.n	8006d4a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	3304      	adds	r3, #4
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fe f979 	bl	800503c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d4a:	463b      	mov	r3, r7
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7ff ff6d 	bl	8006c2c <prvSampleTimeNow>
 8006d52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b09      	cmp	r3, #9
 8006d58:	d868      	bhi.n	8006e2c <prvProcessReceivedCommands+0x13c>
 8006d5a:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <prvProcessReceivedCommands+0x70>)
 8006d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d60:	08006d89 	.word	0x08006d89
 8006d64:	08006d89 	.word	0x08006d89
 8006d68:	08006d89 	.word	0x08006d89
 8006d6c:	08006e2d 	.word	0x08006e2d
 8006d70:	08006de3 	.word	0x08006de3
 8006d74:	08006e19 	.word	0x08006e19
 8006d78:	08006d89 	.word	0x08006d89
 8006d7c:	08006d89 	.word	0x08006d89
 8006d80:	08006e2d 	.word	0x08006e2d
 8006d84:	08006de3 	.word	0x08006de3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	18d1      	adds	r1, r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d96:	f7ff ff69 	bl	8006c6c <prvInsertTimerInActiveList>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d045      	beq.n	8006e2c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006da6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d13d      	bne.n	8006e2c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	441a      	add	r2, r3
 8006db8:	2300      	movs	r3, #0
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dc2:	f7ff fe23 	bl	8006a0c <xTimerGenericCommand>
 8006dc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d12e      	bne.n	8006e2c <prvProcessReceivedCommands+0x13c>
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	61bb      	str	r3, [r7, #24]
 8006de0:	e7fe      	b.n	8006de0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d109      	bne.n	8006e04 <prvProcessReceivedCommands+0x114>
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	e7fe      	b.n	8006e02 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	699a      	ldr	r2, [r3, #24]
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	18d1      	adds	r1, r2, r3
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e12:	f7ff ff2b 	bl	8006c6c <prvInsertTimerInActiveList>
					break;
 8006e16:	e009      	b.n	8006e2c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d104      	bne.n	8006e2c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e24:	f000 fbb6 	bl	8007594 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e28:	e000      	b.n	8006e2c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006e2a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e2c:	4b07      	ldr	r3, [pc, #28]	; (8006e4c <prvProcessReceivedCommands+0x15c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	1d39      	adds	r1, r7, #4
 8006e32:	2200      	movs	r2, #0
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fe fbf3 	bl	8005620 <xQueueReceive>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f47f af5b 	bne.w	8006cf8 <prvProcessReceivedCommands+0x8>
	}
}
 8006e42:	bf00      	nop
 8006e44:	3730      	adds	r7, #48	; 0x30
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000c7c 	.word	0x20000c7c

08006e50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e56:	e044      	b.n	8006ee2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e58:	4b2b      	ldr	r3, [pc, #172]	; (8006f08 <prvSwitchTimerLists+0xb8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e62:	4b29      	ldr	r3, [pc, #164]	; (8006f08 <prvSwitchTimerLists+0xb8>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe f8e3 	bl	800503c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d12d      	bne.n	8006ee2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d90e      	bls.n	8006eb6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ea4:	4b18      	ldr	r3, [pc, #96]	; (8006f08 <prvSwitchTimerLists+0xb8>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4619      	mov	r1, r3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	f7fe f88b 	bl	8004fca <vListInsert>
 8006eb4:	e015      	b.n	8006ee2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f7ff fda3 	bl	8006a0c <xTimerGenericCommand>
 8006ec6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d109      	bne.n	8006ee2 <prvSwitchTimerLists+0x92>
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	e7fe      	b.n	8006ee0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ee2:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <prvSwitchTimerLists+0xb8>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1b5      	bne.n	8006e58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <prvSwitchTimerLists+0xb8>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ef2:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <prvSwitchTimerLists+0xbc>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a04      	ldr	r2, [pc, #16]	; (8006f08 <prvSwitchTimerLists+0xb8>)
 8006ef8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006efa:	4a04      	ldr	r2, [pc, #16]	; (8006f0c <prvSwitchTimerLists+0xbc>)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	6013      	str	r3, [r2, #0]
}
 8006f00:	bf00      	nop
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000c74 	.word	0x20000c74
 8006f0c:	20000c78 	.word	0x20000c78

08006f10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f16:	f000 f961 	bl	80071dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f1a:	4b15      	ldr	r3, [pc, #84]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d120      	bne.n	8006f64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f22:	4814      	ldr	r0, [pc, #80]	; (8006f74 <prvCheckForValidListAndQueue+0x64>)
 8006f24:	f7fe f800 	bl	8004f28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f28:	4813      	ldr	r0, [pc, #76]	; (8006f78 <prvCheckForValidListAndQueue+0x68>)
 8006f2a:	f7fd fffd 	bl	8004f28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f2e:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <prvCheckForValidListAndQueue+0x6c>)
 8006f30:	4a10      	ldr	r2, [pc, #64]	; (8006f74 <prvCheckForValidListAndQueue+0x64>)
 8006f32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f34:	4b12      	ldr	r3, [pc, #72]	; (8006f80 <prvCheckForValidListAndQueue+0x70>)
 8006f36:	4a10      	ldr	r2, [pc, #64]	; (8006f78 <prvCheckForValidListAndQueue+0x68>)
 8006f38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	4b11      	ldr	r3, [pc, #68]	; (8006f84 <prvCheckForValidListAndQueue+0x74>)
 8006f40:	4a11      	ldr	r2, [pc, #68]	; (8006f88 <prvCheckForValidListAndQueue+0x78>)
 8006f42:	2110      	movs	r1, #16
 8006f44:	200a      	movs	r0, #10
 8006f46:	f7fe f90b 	bl	8005160 <xQueueGenericCreateStatic>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f4e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f58:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	490b      	ldr	r1, [pc, #44]	; (8006f8c <prvCheckForValidListAndQueue+0x7c>)
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fe fdc8 	bl	8005af4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f64:	f000 f968 	bl	8007238 <vPortExitCritical>
}
 8006f68:	bf00      	nop
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20000c7c 	.word	0x20000c7c
 8006f74:	20000c4c 	.word	0x20000c4c
 8006f78:	20000c60 	.word	0x20000c60
 8006f7c:	20000c74 	.word	0x20000c74
 8006f80:	20000c78 	.word	0x20000c78
 8006f84:	20000d28 	.word	0x20000d28
 8006f88:	20000c88 	.word	0x20000c88
 8006f8c:	08008a20 	.word	0x08008a20

08006f90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3b04      	subs	r3, #4
 8006fa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3b04      	subs	r3, #4
 8006fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f023 0201 	bic.w	r2, r3, #1
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3b04      	subs	r3, #4
 8006fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fc0:	4a0c      	ldr	r2, [pc, #48]	; (8006ff4 <pxPortInitialiseStack+0x64>)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3b14      	subs	r3, #20
 8006fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3b04      	subs	r3, #4
 8006fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f06f 0202 	mvn.w	r2, #2
 8006fde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3b20      	subs	r3, #32
 8006fe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	08006ff9 	.word	0x08006ff9

08006ff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007002:	4b11      	ldr	r3, [pc, #68]	; (8007048 <prvTaskExitError+0x50>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700a:	d009      	beq.n	8007020 <prvTaskExitError+0x28>
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	e7fe      	b.n	800701e <prvTaskExitError+0x26>
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007032:	bf00      	nop
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0fc      	beq.n	8007034 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800703a:	bf00      	nop
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	20000008 	.word	0x20000008
 800704c:	00000000 	.word	0x00000000

08007050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007050:	4b07      	ldr	r3, [pc, #28]	; (8007070 <pxCurrentTCBConst2>)
 8007052:	6819      	ldr	r1, [r3, #0]
 8007054:	6808      	ldr	r0, [r1, #0]
 8007056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705a:	f380 8809 	msr	PSP, r0
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f04f 0000 	mov.w	r0, #0
 8007066:	f380 8811 	msr	BASEPRI, r0
 800706a:	4770      	bx	lr
 800706c:	f3af 8000 	nop.w

08007070 <pxCurrentTCBConst2>:
 8007070:	2000074c 	.word	0x2000074c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop

08007078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007078:	4808      	ldr	r0, [pc, #32]	; (800709c <prvPortStartFirstTask+0x24>)
 800707a:	6800      	ldr	r0, [r0, #0]
 800707c:	6800      	ldr	r0, [r0, #0]
 800707e:	f380 8808 	msr	MSP, r0
 8007082:	f04f 0000 	mov.w	r0, #0
 8007086:	f380 8814 	msr	CONTROL, r0
 800708a:	b662      	cpsie	i
 800708c:	b661      	cpsie	f
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	df00      	svc	0
 8007098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800709a:	bf00      	nop
 800709c:	e000ed08 	.word	0xe000ed08

080070a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070a6:	4b44      	ldr	r3, [pc, #272]	; (80071b8 <xPortStartScheduler+0x118>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a44      	ldr	r2, [pc, #272]	; (80071bc <xPortStartScheduler+0x11c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d109      	bne.n	80070c4 <xPortStartScheduler+0x24>
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	613b      	str	r3, [r7, #16]
 80070c2:	e7fe      	b.n	80070c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070c4:	4b3c      	ldr	r3, [pc, #240]	; (80071b8 <xPortStartScheduler+0x118>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a3d      	ldr	r2, [pc, #244]	; (80071c0 <xPortStartScheduler+0x120>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d109      	bne.n	80070e2 <xPortStartScheduler+0x42>
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	e7fe      	b.n	80070e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070e2:	4b38      	ldr	r3, [pc, #224]	; (80071c4 <xPortStartScheduler+0x124>)
 80070e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	22ff      	movs	r2, #255	; 0xff
 80070f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070fc:	78fb      	ldrb	r3, [r7, #3]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007104:	b2da      	uxtb	r2, r3
 8007106:	4b30      	ldr	r3, [pc, #192]	; (80071c8 <xPortStartScheduler+0x128>)
 8007108:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800710a:	4b30      	ldr	r3, [pc, #192]	; (80071cc <xPortStartScheduler+0x12c>)
 800710c:	2207      	movs	r2, #7
 800710e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007110:	e009      	b.n	8007126 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007112:	4b2e      	ldr	r3, [pc, #184]	; (80071cc <xPortStartScheduler+0x12c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3b01      	subs	r3, #1
 8007118:	4a2c      	ldr	r2, [pc, #176]	; (80071cc <xPortStartScheduler+0x12c>)
 800711a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800711c:	78fb      	ldrb	r3, [r7, #3]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	b2db      	uxtb	r3, r3
 8007124:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007126:	78fb      	ldrb	r3, [r7, #3]
 8007128:	b2db      	uxtb	r3, r3
 800712a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712e:	2b80      	cmp	r3, #128	; 0x80
 8007130:	d0ef      	beq.n	8007112 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007132:	4b26      	ldr	r3, [pc, #152]	; (80071cc <xPortStartScheduler+0x12c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f1c3 0307 	rsb	r3, r3, #7
 800713a:	2b04      	cmp	r3, #4
 800713c:	d009      	beq.n	8007152 <xPortStartScheduler+0xb2>
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	60bb      	str	r3, [r7, #8]
 8007150:	e7fe      	b.n	8007150 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007152:	4b1e      	ldr	r3, [pc, #120]	; (80071cc <xPortStartScheduler+0x12c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	021b      	lsls	r3, r3, #8
 8007158:	4a1c      	ldr	r2, [pc, #112]	; (80071cc <xPortStartScheduler+0x12c>)
 800715a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800715c:	4b1b      	ldr	r3, [pc, #108]	; (80071cc <xPortStartScheduler+0x12c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007164:	4a19      	ldr	r2, [pc, #100]	; (80071cc <xPortStartScheduler+0x12c>)
 8007166:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	b2da      	uxtb	r2, r3
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007170:	4b17      	ldr	r3, [pc, #92]	; (80071d0 <xPortStartScheduler+0x130>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a16      	ldr	r2, [pc, #88]	; (80071d0 <xPortStartScheduler+0x130>)
 8007176:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800717a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800717c:	4b14      	ldr	r3, [pc, #80]	; (80071d0 <xPortStartScheduler+0x130>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a13      	ldr	r2, [pc, #76]	; (80071d0 <xPortStartScheduler+0x130>)
 8007182:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007186:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007188:	f000 f8d6 	bl	8007338 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800718c:	4b11      	ldr	r3, [pc, #68]	; (80071d4 <xPortStartScheduler+0x134>)
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007192:	f000 f8f5 	bl	8007380 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007196:	4b10      	ldr	r3, [pc, #64]	; (80071d8 <xPortStartScheduler+0x138>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a0f      	ldr	r2, [pc, #60]	; (80071d8 <xPortStartScheduler+0x138>)
 800719c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071a2:	f7ff ff69 	bl	8007078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071a6:	f7ff f8a5 	bl	80062f4 <vTaskSwitchContext>
	prvTaskExitError();
 80071aa:	f7ff ff25 	bl	8006ff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	e000ed00 	.word	0xe000ed00
 80071bc:	410fc271 	.word	0x410fc271
 80071c0:	410fc270 	.word	0x410fc270
 80071c4:	e000e400 	.word	0xe000e400
 80071c8:	20000d78 	.word	0x20000d78
 80071cc:	20000d7c 	.word	0x20000d7c
 80071d0:	e000ed20 	.word	0xe000ed20
 80071d4:	20000008 	.word	0x20000008
 80071d8:	e000ef34 	.word	0xe000ef34

080071dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071f4:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <vPortEnterCritical+0x54>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3301      	adds	r3, #1
 80071fa:	4a0d      	ldr	r2, [pc, #52]	; (8007230 <vPortEnterCritical+0x54>)
 80071fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071fe:	4b0c      	ldr	r3, [pc, #48]	; (8007230 <vPortEnterCritical+0x54>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d10e      	bne.n	8007224 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007206:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <vPortEnterCritical+0x58>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d009      	beq.n	8007224 <vPortEnterCritical+0x48>
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	603b      	str	r3, [r7, #0]
 8007222:	e7fe      	b.n	8007222 <vPortEnterCritical+0x46>
	}
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	20000008 	.word	0x20000008
 8007234:	e000ed04 	.word	0xe000ed04

08007238 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800723e:	4b11      	ldr	r3, [pc, #68]	; (8007284 <vPortExitCritical+0x4c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d109      	bne.n	800725a <vPortExitCritical+0x22>
 8007246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	607b      	str	r3, [r7, #4]
 8007258:	e7fe      	b.n	8007258 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800725a:	4b0a      	ldr	r3, [pc, #40]	; (8007284 <vPortExitCritical+0x4c>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3b01      	subs	r3, #1
 8007260:	4a08      	ldr	r2, [pc, #32]	; (8007284 <vPortExitCritical+0x4c>)
 8007262:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007264:	4b07      	ldr	r3, [pc, #28]	; (8007284 <vPortExitCritical+0x4c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d104      	bne.n	8007276 <vPortExitCritical+0x3e>
 800726c:	2300      	movs	r3, #0
 800726e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20000008 	.word	0x20000008
	...

08007290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007290:	f3ef 8009 	mrs	r0, PSP
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	4b15      	ldr	r3, [pc, #84]	; (80072f0 <pxCurrentTCBConst>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	f01e 0f10 	tst.w	lr, #16
 80072a0:	bf08      	it	eq
 80072a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072aa:	6010      	str	r0, [r2, #0]
 80072ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072b4:	f380 8811 	msr	BASEPRI, r0
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f7ff f818 	bl	80062f4 <vTaskSwitchContext>
 80072c4:	f04f 0000 	mov.w	r0, #0
 80072c8:	f380 8811 	msr	BASEPRI, r0
 80072cc:	bc09      	pop	{r0, r3}
 80072ce:	6819      	ldr	r1, [r3, #0]
 80072d0:	6808      	ldr	r0, [r1, #0]
 80072d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d6:	f01e 0f10 	tst.w	lr, #16
 80072da:	bf08      	it	eq
 80072dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072e0:	f380 8809 	msr	PSP, r0
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	f3af 8000 	nop.w

080072f0 <pxCurrentTCBConst>:
 80072f0:	2000074c 	.word	0x2000074c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop

080072f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007310:	f7fe ff32 	bl	8006178 <xTaskIncrementTick>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800731a:	4b06      	ldr	r3, [pc, #24]	; (8007334 <SysTick_Handler+0x3c>)
 800731c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	2300      	movs	r3, #0
 8007324:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	e000ed04 	.word	0xe000ed04

08007338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007338:	b480      	push	{r7}
 800733a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800733c:	4b0b      	ldr	r3, [pc, #44]	; (800736c <vPortSetupTimerInterrupt+0x34>)
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <vPortSetupTimerInterrupt+0x38>)
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007348:	4b0a      	ldr	r3, [pc, #40]	; (8007374 <vPortSetupTimerInterrupt+0x3c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a0a      	ldr	r2, [pc, #40]	; (8007378 <vPortSetupTimerInterrupt+0x40>)
 800734e:	fba2 2303 	umull	r2, r3, r2, r3
 8007352:	099b      	lsrs	r3, r3, #6
 8007354:	4a09      	ldr	r2, [pc, #36]	; (800737c <vPortSetupTimerInterrupt+0x44>)
 8007356:	3b01      	subs	r3, #1
 8007358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800735a:	4b04      	ldr	r3, [pc, #16]	; (800736c <vPortSetupTimerInterrupt+0x34>)
 800735c:	2207      	movs	r2, #7
 800735e:	601a      	str	r2, [r3, #0]
}
 8007360:	bf00      	nop
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	e000e010 	.word	0xe000e010
 8007370:	e000e018 	.word	0xe000e018
 8007374:	2000000c 	.word	0x2000000c
 8007378:	10624dd3 	.word	0x10624dd3
 800737c:	e000e014 	.word	0xe000e014

08007380 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007380:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007390 <vPortEnableVFP+0x10>
 8007384:	6801      	ldr	r1, [r0, #0]
 8007386:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800738a:	6001      	str	r1, [r0, #0]
 800738c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800738e:	bf00      	nop
 8007390:	e000ed88 	.word	0xe000ed88

08007394 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800739a:	f3ef 8305 	mrs	r3, IPSR
 800739e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b0f      	cmp	r3, #15
 80073a4:	d913      	bls.n	80073ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073a6:	4a16      	ldr	r2, [pc, #88]	; (8007400 <vPortValidateInterruptPriority+0x6c>)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4413      	add	r3, r2
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073b0:	4b14      	ldr	r3, [pc, #80]	; (8007404 <vPortValidateInterruptPriority+0x70>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	7afa      	ldrb	r2, [r7, #11]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d209      	bcs.n	80073ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	607b      	str	r3, [r7, #4]
 80073cc:	e7fe      	b.n	80073cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073ce:	4b0e      	ldr	r3, [pc, #56]	; (8007408 <vPortValidateInterruptPriority+0x74>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073d6:	4b0d      	ldr	r3, [pc, #52]	; (800740c <vPortValidateInterruptPriority+0x78>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d909      	bls.n	80073f2 <vPortValidateInterruptPriority+0x5e>
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	603b      	str	r3, [r7, #0]
 80073f0:	e7fe      	b.n	80073f0 <vPortValidateInterruptPriority+0x5c>
	}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	e000e3f0 	.word	0xe000e3f0
 8007404:	20000d78 	.word	0x20000d78
 8007408:	e000ed0c 	.word	0xe000ed0c
 800740c:	20000d7c 	.word	0x20000d7c

08007410 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08a      	sub	sp, #40	; 0x28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007418:	2300      	movs	r3, #0
 800741a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800741c:	f7fe fdf2 	bl	8006004 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007420:	4b57      	ldr	r3, [pc, #348]	; (8007580 <pvPortMalloc+0x170>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007428:	f000 f90c 	bl	8007644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800742c:	4b55      	ldr	r3, [pc, #340]	; (8007584 <pvPortMalloc+0x174>)
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4013      	ands	r3, r2
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 808c 	bne.w	8007552 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01c      	beq.n	800747a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007440:	2208      	movs	r2, #8
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4413      	add	r3, r2
 8007446:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f003 0307 	and.w	r3, r3, #7
 800744e:	2b00      	cmp	r3, #0
 8007450:	d013      	beq.n	800747a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f023 0307 	bic.w	r3, r3, #7
 8007458:	3308      	adds	r3, #8
 800745a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f003 0307 	and.w	r3, r3, #7
 8007462:	2b00      	cmp	r3, #0
 8007464:	d009      	beq.n	800747a <pvPortMalloc+0x6a>
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	e7fe      	b.n	8007478 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d068      	beq.n	8007552 <pvPortMalloc+0x142>
 8007480:	4b41      	ldr	r3, [pc, #260]	; (8007588 <pvPortMalloc+0x178>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	429a      	cmp	r2, r3
 8007488:	d863      	bhi.n	8007552 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800748a:	4b40      	ldr	r3, [pc, #256]	; (800758c <pvPortMalloc+0x17c>)
 800748c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800748e:	4b3f      	ldr	r3, [pc, #252]	; (800758c <pvPortMalloc+0x17c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007494:	e004      	b.n	80074a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d903      	bls.n	80074b2 <pvPortMalloc+0xa2>
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1f1      	bne.n	8007496 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074b2:	4b33      	ldr	r3, [pc, #204]	; (8007580 <pvPortMalloc+0x170>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d04a      	beq.n	8007552 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2208      	movs	r2, #8
 80074c2:	4413      	add	r3, r2
 80074c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	1ad2      	subs	r2, r2, r3
 80074d6:	2308      	movs	r3, #8
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	429a      	cmp	r2, r3
 80074dc:	d91e      	bls.n	800751c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4413      	add	r3, r2
 80074e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d009      	beq.n	8007504 <pvPortMalloc+0xf4>
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	e7fe      	b.n	8007502 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	1ad2      	subs	r2, r2, r3
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007516:	69b8      	ldr	r0, [r7, #24]
 8007518:	f000 f8f6 	bl	8007708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800751c:	4b1a      	ldr	r3, [pc, #104]	; (8007588 <pvPortMalloc+0x178>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	4a18      	ldr	r2, [pc, #96]	; (8007588 <pvPortMalloc+0x178>)
 8007528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800752a:	4b17      	ldr	r3, [pc, #92]	; (8007588 <pvPortMalloc+0x178>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b18      	ldr	r3, [pc, #96]	; (8007590 <pvPortMalloc+0x180>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d203      	bcs.n	800753e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <pvPortMalloc+0x178>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a15      	ldr	r2, [pc, #84]	; (8007590 <pvPortMalloc+0x180>)
 800753c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	4b10      	ldr	r3, [pc, #64]	; (8007584 <pvPortMalloc+0x174>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	431a      	orrs	r2, r3
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007552:	f7fe fd65 	bl	8006020 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	2b00      	cmp	r3, #0
 800755e:	d009      	beq.n	8007574 <pvPortMalloc+0x164>
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	e7fe      	b.n	8007572 <pvPortMalloc+0x162>
	return pvReturn;
 8007574:	69fb      	ldr	r3, [r7, #28]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3728      	adds	r7, #40	; 0x28
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20001988 	.word	0x20001988
 8007584:	20001994 	.word	0x20001994
 8007588:	2000198c 	.word	0x2000198c
 800758c:	20001980 	.word	0x20001980
 8007590:	20001990 	.word	0x20001990

08007594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d046      	beq.n	8007634 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075a6:	2308      	movs	r3, #8
 80075a8:	425b      	negs	r3, r3
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4413      	add	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	4b20      	ldr	r3, [pc, #128]	; (800763c <vPortFree+0xa8>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4013      	ands	r3, r2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d109      	bne.n	80075d6 <vPortFree+0x42>
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	e7fe      	b.n	80075d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d009      	beq.n	80075f2 <vPortFree+0x5e>
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	60bb      	str	r3, [r7, #8]
 80075f0:	e7fe      	b.n	80075f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	4b11      	ldr	r3, [pc, #68]	; (800763c <vPortFree+0xa8>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4013      	ands	r3, r2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d019      	beq.n	8007634 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d115      	bne.n	8007634 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	4b0b      	ldr	r3, [pc, #44]	; (800763c <vPortFree+0xa8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	43db      	mvns	r3, r3
 8007612:	401a      	ands	r2, r3
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007618:	f7fe fcf4 	bl	8006004 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	4b07      	ldr	r3, [pc, #28]	; (8007640 <vPortFree+0xac>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4413      	add	r3, r2
 8007626:	4a06      	ldr	r2, [pc, #24]	; (8007640 <vPortFree+0xac>)
 8007628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800762a:	6938      	ldr	r0, [r7, #16]
 800762c:	f000 f86c 	bl	8007708 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007630:	f7fe fcf6 	bl	8006020 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007634:	bf00      	nop
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20001994 	.word	0x20001994
 8007640:	2000198c 	.word	0x2000198c

08007644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800764a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800764e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007650:	4b27      	ldr	r3, [pc, #156]	; (80076f0 <prvHeapInit+0xac>)
 8007652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00c      	beq.n	8007678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3307      	adds	r3, #7
 8007662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0307 	bic.w	r3, r3, #7
 800766a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	4a1f      	ldr	r2, [pc, #124]	; (80076f0 <prvHeapInit+0xac>)
 8007674:	4413      	add	r3, r2
 8007676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800767c:	4a1d      	ldr	r2, [pc, #116]	; (80076f4 <prvHeapInit+0xb0>)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007682:	4b1c      	ldr	r3, [pc, #112]	; (80076f4 <prvHeapInit+0xb0>)
 8007684:	2200      	movs	r2, #0
 8007686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	4413      	add	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007690:	2208      	movs	r2, #8
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	1a9b      	subs	r3, r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f023 0307 	bic.w	r3, r3, #7
 800769e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4a15      	ldr	r2, [pc, #84]	; (80076f8 <prvHeapInit+0xb4>)
 80076a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076a6:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <prvHeapInit+0xb4>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2200      	movs	r2, #0
 80076ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076ae:	4b12      	ldr	r3, [pc, #72]	; (80076f8 <prvHeapInit+0xb4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	1ad2      	subs	r2, r2, r3
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076c4:	4b0c      	ldr	r3, [pc, #48]	; (80076f8 <prvHeapInit+0xb4>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	4a0a      	ldr	r2, [pc, #40]	; (80076fc <prvHeapInit+0xb8>)
 80076d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	4a09      	ldr	r2, [pc, #36]	; (8007700 <prvHeapInit+0xbc>)
 80076da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076dc:	4b09      	ldr	r3, [pc, #36]	; (8007704 <prvHeapInit+0xc0>)
 80076de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076e2:	601a      	str	r2, [r3, #0]
}
 80076e4:	bf00      	nop
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	20000d80 	.word	0x20000d80
 80076f4:	20001980 	.word	0x20001980
 80076f8:	20001988 	.word	0x20001988
 80076fc:	20001990 	.word	0x20001990
 8007700:	2000198c 	.word	0x2000198c
 8007704:	20001994 	.word	0x20001994

08007708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007710:	4b28      	ldr	r3, [pc, #160]	; (80077b4 <prvInsertBlockIntoFreeList+0xac>)
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	e002      	b.n	800771c <prvInsertBlockIntoFreeList+0x14>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	429a      	cmp	r2, r3
 8007724:	d8f7      	bhi.n	8007716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	4413      	add	r3, r2
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	429a      	cmp	r2, r3
 8007736:	d108      	bne.n	800774a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	441a      	add	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	441a      	add	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	429a      	cmp	r2, r3
 800775c:	d118      	bne.n	8007790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	4b15      	ldr	r3, [pc, #84]	; (80077b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	429a      	cmp	r2, r3
 8007768:	d00d      	beq.n	8007786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	441a      	add	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	e008      	b.n	8007798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007786:	4b0c      	ldr	r3, [pc, #48]	; (80077b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	e003      	b.n	8007798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	429a      	cmp	r2, r3
 800779e:	d002      	beq.n	80077a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077a6:	bf00      	nop
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	20001980 	.word	0x20001980
 80077b8:	20001988 	.word	0x20001988

080077bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80077c2:	463b      	mov	r3, r7
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	605a      	str	r2, [r3, #4]
 80077ca:	609a      	str	r2, [r3, #8]
 80077cc:	60da      	str	r2, [r3, #12]
 80077ce:	611a      	str	r2, [r3, #16]
 80077d0:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80077d2:	4b27      	ldr	r3, [pc, #156]	; (8007870 <MX_ADC1_Init+0xb4>)
 80077d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80077d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80077da:	4b25      	ldr	r3, [pc, #148]	; (8007870 <MX_ADC1_Init+0xb4>)
 80077dc:	2200      	movs	r2, #0
 80077de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80077e0:	4b23      	ldr	r3, [pc, #140]	; (8007870 <MX_ADC1_Init+0xb4>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80077e6:	4b22      	ldr	r3, [pc, #136]	; (8007870 <MX_ADC1_Init+0xb4>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80077ec:	4b20      	ldr	r3, [pc, #128]	; (8007870 <MX_ADC1_Init+0xb4>)
 80077ee:	2201      	movs	r2, #1
 80077f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80077f2:	4b1f      	ldr	r3, [pc, #124]	; (8007870 <MX_ADC1_Init+0xb4>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80077fa:	4b1d      	ldr	r3, [pc, #116]	; (8007870 <MX_ADC1_Init+0xb4>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007800:	4b1b      	ldr	r3, [pc, #108]	; (8007870 <MX_ADC1_Init+0xb4>)
 8007802:	2201      	movs	r2, #1
 8007804:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007806:	4b1a      	ldr	r3, [pc, #104]	; (8007870 <MX_ADC1_Init+0xb4>)
 8007808:	2200      	movs	r2, #0
 800780a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800780c:	4b18      	ldr	r3, [pc, #96]	; (8007870 <MX_ADC1_Init+0xb4>)
 800780e:	2201      	movs	r2, #1
 8007810:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007812:	4b17      	ldr	r3, [pc, #92]	; (8007870 <MX_ADC1_Init+0xb4>)
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800781a:	4b15      	ldr	r3, [pc, #84]	; (8007870 <MX_ADC1_Init+0xb4>)
 800781c:	2204      	movs	r2, #4
 800781e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007820:	4b13      	ldr	r3, [pc, #76]	; (8007870 <MX_ADC1_Init+0xb4>)
 8007822:	2200      	movs	r2, #0
 8007824:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007826:	4b12      	ldr	r3, [pc, #72]	; (8007870 <MX_ADC1_Init+0xb4>)
 8007828:	2200      	movs	r2, #0
 800782a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800782c:	4810      	ldr	r0, [pc, #64]	; (8007870 <MX_ADC1_Init+0xb4>)
 800782e:	f7f8 fd7b 	bl	8000328 <HAL_ADC_Init>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8007838:	f000 fa1c 	bl	8007c74 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800783c:	2306      	movs	r3, #6
 800783e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007840:	2301      	movs	r3, #1
 8007842:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8007844:	2301      	movs	r3, #1
 8007846:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007848:	2300      	movs	r3, #0
 800784a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800784c:	2300      	movs	r3, #0
 800784e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007854:	463b      	mov	r3, r7
 8007856:	4619      	mov	r1, r3
 8007858:	4805      	ldr	r0, [pc, #20]	; (8007870 <MX_ADC1_Init+0xb4>)
 800785a:	f7f9 fac9 	bl	8000df0 <HAL_ADC_ConfigChannel>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8007864:	f000 fa06 	bl	8007c74 <Error_Handler>
  }

}
 8007868:	bf00      	nop
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	200019e8 	.word	0x200019e8

08007874 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08a      	sub	sp, #40	; 0x28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800787c:	f107 0314 	add.w	r3, r7, #20
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	605a      	str	r2, [r3, #4]
 8007886:	609a      	str	r2, [r3, #8]
 8007888:	60da      	str	r2, [r3, #12]
 800788a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007894:	d12b      	bne.n	80078ee <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007896:	4b18      	ldr	r3, [pc, #96]	; (80078f8 <HAL_ADC_MspInit+0x84>)
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	4a17      	ldr	r2, [pc, #92]	; (80078f8 <HAL_ADC_MspInit+0x84>)
 800789c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a0:	6153      	str	r3, [r2, #20]
 80078a2:	4b15      	ldr	r3, [pc, #84]	; (80078f8 <HAL_ADC_MspInit+0x84>)
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80078ae:	4b12      	ldr	r3, [pc, #72]	; (80078f8 <HAL_ADC_MspInit+0x84>)
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	4a11      	ldr	r2, [pc, #68]	; (80078f8 <HAL_ADC_MspInit+0x84>)
 80078b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078b8:	6153      	str	r3, [r2, #20]
 80078ba:	4b0f      	ldr	r3, [pc, #60]	; (80078f8 <HAL_ADC_MspInit+0x84>)
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80078c6:	2303      	movs	r3, #3
 80078c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078ca:	2303      	movs	r3, #3
 80078cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078d2:	f107 0314 	add.w	r3, r7, #20
 80078d6:	4619      	mov	r1, r3
 80078d8:	4808      	ldr	r0, [pc, #32]	; (80078fc <HAL_ADC_MspInit+0x88>)
 80078da:	f7fa f881 	bl	80019e0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80078de:	2200      	movs	r2, #0
 80078e0:	2105      	movs	r1, #5
 80078e2:	2012      	movs	r0, #18
 80078e4:	f7fa f838 	bl	8001958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80078e8:	2012      	movs	r0, #18
 80078ea:	f7fa f861 	bl	80019b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80078ee:	bf00      	nop
 80078f0:	3728      	adds	r7, #40	; 0x28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	40021000 	.word	0x40021000
 80078fc:	48000800 	.word	0x48000800

08007900 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of dataQueue */
  dataQueueHandle = osMessageQueueNew (128, sizeof(uint32_t), &dataQueue_attributes);
 8007904:	4a10      	ldr	r2, [pc, #64]	; (8007948 <MX_FREERTOS_Init+0x48>)
 8007906:	2104      	movs	r1, #4
 8007908:	2080      	movs	r0, #128	; 0x80
 800790a:	f7fd f9e1 	bl	8004cd0 <osMessageQueueNew>
 800790e:	4602      	mov	r2, r0
 8007910:	4b0e      	ldr	r3, [pc, #56]	; (800794c <MX_FREERTOS_Init+0x4c>)
 8007912:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of measureTask */
  measureTaskHandle = osThreadNew(StartMeasurement, NULL, &measureTask_attributes);
 8007914:	4a0e      	ldr	r2, [pc, #56]	; (8007950 <MX_FREERTOS_Init+0x50>)
 8007916:	2100      	movs	r1, #0
 8007918:	480e      	ldr	r0, [pc, #56]	; (8007954 <MX_FREERTOS_Init+0x54>)
 800791a:	f7fd f901 	bl	8004b20 <osThreadNew>
 800791e:	4602      	mov	r2, r0
 8007920:	4b0d      	ldr	r3, [pc, #52]	; (8007958 <MX_FREERTOS_Init+0x58>)
 8007922:	601a      	str	r2, [r3, #0]

  /* creation of UARTTransmit */
  UARTTransmitHandle = osThreadNew(TransmitTask, NULL, &UARTTransmit_attributes);
 8007924:	4a0d      	ldr	r2, [pc, #52]	; (800795c <MX_FREERTOS_Init+0x5c>)
 8007926:	2100      	movs	r1, #0
 8007928:	480d      	ldr	r0, [pc, #52]	; (8007960 <MX_FREERTOS_Init+0x60>)
 800792a:	f7fd f8f9 	bl	8004b20 <osThreadNew>
 800792e:	4602      	mov	r2, r0
 8007930:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <MX_FREERTOS_Init+0x64>)
 8007932:	601a      	str	r2, [r3, #0]

  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(HeartBeatTask, NULL, &HeartBeat_attributes);
 8007934:	4a0c      	ldr	r2, [pc, #48]	; (8007968 <MX_FREERTOS_Init+0x68>)
 8007936:	2100      	movs	r1, #0
 8007938:	480c      	ldr	r0, [pc, #48]	; (800796c <MX_FREERTOS_Init+0x6c>)
 800793a:	f7fd f8f1 	bl	8004b20 <osThreadNew>
 800793e:	4602      	mov	r2, r0
 8007940:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <MX_FREERTOS_Init+0x70>)
 8007942:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8007944:	bf00      	nop
 8007946:	bd80      	pop	{r7, pc}
 8007948:	08008af0 	.word	0x08008af0
 800794c:	20001a44 	.word	0x20001a44
 8007950:	08008a84 	.word	0x08008a84
 8007954:	08007975 	.word	0x08007975
 8007958:	20001a3c 	.word	0x20001a3c
 800795c:	08008aa8 	.word	0x08008aa8
 8007960:	080079ed 	.word	0x080079ed
 8007964:	20001a38 	.word	0x20001a38
 8007968:	08008acc 	.word	0x08008acc
 800796c:	080079fd 	.word	0x080079fd
 8007970:	20001a40 	.word	0x20001a40

08007974 <StartMeasurement>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasurement */
void StartMeasurement(void *argument)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b09e      	sub	sp, #120	; 0x78
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMeasurement */
	/* Infinite loop */
	uint32_t data = 0;
 800797c:	2300      	movs	r3, #0
 800797e:	673b      	str	r3, [r7, #112]	; 0x70
	osStatus_t s = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t msg[100];
	HAL_ADC_Start_IT(&hadc1);
 8007984:	4815      	ldr	r0, [pc, #84]	; (80079dc <StartMeasurement+0x68>)
 8007986:	f7f8 ff61 	bl	800084c <HAL_ADC_Start_IT>
	for (;;) {
		s = osMessageQueueGet(dataQueueHandle, &data, 1, 1);
 800798a:	4b15      	ldr	r3, [pc, #84]	; (80079e0 <StartMeasurement+0x6c>)
 800798c:	6818      	ldr	r0, [r3, #0]
 800798e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8007992:	2301      	movs	r3, #1
 8007994:	2201      	movs	r2, #1
 8007996:	f7fd fa21 	bl	8004ddc <osMessageQueueGet>
 800799a:	6778      	str	r0, [r7, #116]	; 0x74
		if (s == osErrorTimeout) {
 800799c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800799e:	f113 0f02 	cmn.w	r3, #2
 80079a2:	d016      	beq.n	80079d2 <StartMeasurement+0x5e>
			// Just catch it
		} else if (s == osOK) {
 80079a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d113      	bne.n	80079d2 <StartMeasurement+0x5e>
			sprintf(msg, "%d\n\r\0", data);
 80079aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80079ac:	f107 030c 	add.w	r3, r7, #12
 80079b0:	490c      	ldr	r1, [pc, #48]	; (80079e4 <StartMeasurement+0x70>)
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 fb46 	bl	8008044 <siprintf>
			HAL_UART_Transmit(&huart2, msg, strlen(msg), 10);
 80079b8:	f107 030c 	add.w	r3, r7, #12
 80079bc:	4618      	mov	r0, r3
 80079be:	f7f8 fc07 	bl	80001d0 <strlen>
 80079c2:	4603      	mov	r3, r0
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	f107 010c 	add.w	r1, r7, #12
 80079ca:	230a      	movs	r3, #10
 80079cc:	4806      	ldr	r0, [pc, #24]	; (80079e8 <StartMeasurement+0x74>)
 80079ce:	f7fc fb9b 	bl	8004108 <HAL_UART_Transmit>
		}
//		HAL_UART_Transmit(&huart1, &data, 4, 10);
		osDelay(1);
 80079d2:	2001      	movs	r0, #1
 80079d4:	f7fd f94e 	bl	8004c74 <osDelay>
		s = osMessageQueueGet(dataQueueHandle, &data, 1, 1);
 80079d8:	e7d7      	b.n	800798a <StartMeasurement+0x16>
 80079da:	bf00      	nop
 80079dc:	200019e8 	.word	0x200019e8
 80079e0:	20001a44 	.word	0x20001a44
 80079e4:	08008a5c 	.word	0x08008a5c
 80079e8:	20001a88 	.word	0x20001a88

080079ec <TransmitTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_TransmitTask */
void TransmitTask(void *argument)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TransmitTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80079f4:	2001      	movs	r0, #1
 80079f6:	f7fd f93d 	bl	8004c74 <osDelay>
 80079fa:	e7fb      	b.n	80079f4 <TransmitTask+0x8>

080079fc <HeartBeatTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HeartBeatTask */
void HeartBeatTask(void *argument)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HeartBeatTask */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8007a04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a08:	4803      	ldr	r0, [pc, #12]	; (8007a18 <HeartBeatTask+0x1c>)
 8007a0a:	f7fa fa4d 	bl	8001ea8 <HAL_GPIO_TogglePin>
		osDelay(100);
 8007a0e:	2064      	movs	r0, #100	; 0x64
 8007a10:	f7fd f930 	bl	8004c74 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8007a14:	e7f6      	b.n	8007a04 <HeartBeatTask+0x8>
 8007a16:	bf00      	nop
 8007a18:	48000400 	.word	0x48000400

08007a1c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08a      	sub	sp, #40	; 0x28
 8007a20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a22:	f107 0314 	add.w	r3, r7, #20
 8007a26:	2200      	movs	r2, #0
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	605a      	str	r2, [r3, #4]
 8007a2c:	609a      	str	r2, [r3, #8]
 8007a2e:	60da      	str	r2, [r3, #12]
 8007a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a32:	4b4b      	ldr	r3, [pc, #300]	; (8007b60 <MX_GPIO_Init+0x144>)
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	4a4a      	ldr	r2, [pc, #296]	; (8007b60 <MX_GPIO_Init+0x144>)
 8007a38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a3c:	6153      	str	r3, [r2, #20]
 8007a3e:	4b48      	ldr	r3, [pc, #288]	; (8007b60 <MX_GPIO_Init+0x144>)
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a46:	613b      	str	r3, [r7, #16]
 8007a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007a4a:	4b45      	ldr	r3, [pc, #276]	; (8007b60 <MX_GPIO_Init+0x144>)
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	4a44      	ldr	r2, [pc, #272]	; (8007b60 <MX_GPIO_Init+0x144>)
 8007a50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a54:	6153      	str	r3, [r2, #20]
 8007a56:	4b42      	ldr	r3, [pc, #264]	; (8007b60 <MX_GPIO_Init+0x144>)
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a62:	4b3f      	ldr	r3, [pc, #252]	; (8007b60 <MX_GPIO_Init+0x144>)
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	4a3e      	ldr	r2, [pc, #248]	; (8007b60 <MX_GPIO_Init+0x144>)
 8007a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a6c:	6153      	str	r3, [r2, #20]
 8007a6e:	4b3c      	ldr	r3, [pc, #240]	; (8007b60 <MX_GPIO_Init+0x144>)
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a76:	60bb      	str	r3, [r7, #8]
 8007a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a7a:	4b39      	ldr	r3, [pc, #228]	; (8007b60 <MX_GPIO_Init+0x144>)
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	4a38      	ldr	r2, [pc, #224]	; (8007b60 <MX_GPIO_Init+0x144>)
 8007a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a84:	6153      	str	r3, [r2, #20]
 8007a86:	4b36      	ldr	r3, [pc, #216]	; (8007b60 <MX_GPIO_Init+0x144>)
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a8e:	607b      	str	r3, [r7, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a92:	4b33      	ldr	r3, [pc, #204]	; (8007b60 <MX_GPIO_Init+0x144>)
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	4a32      	ldr	r2, [pc, #200]	; (8007b60 <MX_GPIO_Init+0x144>)
 8007a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a9c:	6153      	str	r3, [r2, #20]
 8007a9e:	4b30      	ldr	r3, [pc, #192]	; (8007b60 <MX_GPIO_Init+0x144>)
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aa6:	603b      	str	r3, [r7, #0]
 8007aa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007ab0:	482c      	ldr	r0, [pc, #176]	; (8007b64 <MX_GPIO_Init+0x148>)
 8007ab2:	f7fa f9c9 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007abc:	4b2a      	ldr	r3, [pc, #168]	; (8007b68 <MX_GPIO_Init+0x14c>)
 8007abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007ac4:	f107 0314 	add.w	r3, r7, #20
 8007ac8:	4619      	mov	r1, r3
 8007aca:	4828      	ldr	r0, [pc, #160]	; (8007b6c <MX_GPIO_Init+0x150>)
 8007acc:	f7f9 ff88 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5 
                           PC6 PC7 PC8 PC9 
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8007ad0:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8007ad4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ade:	f107 0314 	add.w	r3, r7, #20
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	4821      	ldr	r0, [pc, #132]	; (8007b6c <MX_GPIO_Init+0x150>)
 8007ae6:	f7f9 ff7b 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5 
                           PA6 PA7 PA8 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8007aea:	f649 73f3 	movw	r3, #40947	; 0x9ff3
 8007aee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007af0:	2303      	movs	r3, #3
 8007af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af4:	2300      	movs	r3, #0
 8007af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007af8:	f107 0314 	add.w	r3, r7, #20
 8007afc:	4619      	mov	r1, r3
 8007afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b02:	f7f9 ff6d 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB14 PB15 
                           PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8007b06:	f64d 73f7 	movw	r3, #57335	; 0xdff7
 8007b0a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b14:	f107 0314 	add.w	r3, r7, #20
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4812      	ldr	r0, [pc, #72]	; (8007b64 <MX_GPIO_Init+0x148>)
 8007b1c:	f7f9 ff60 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8007b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b26:	2301      	movs	r3, #1
 8007b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8007b32:	f107 0314 	add.w	r3, r7, #20
 8007b36:	4619      	mov	r1, r3
 8007b38:	480a      	ldr	r0, [pc, #40]	; (8007b64 <MX_GPIO_Init+0x148>)
 8007b3a:	f7f9 ff51 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007b3e:	2304      	movs	r3, #4
 8007b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007b42:	2303      	movs	r3, #3
 8007b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b46:	2300      	movs	r3, #0
 8007b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b4a:	f107 0314 	add.w	r3, r7, #20
 8007b4e:	4619      	mov	r1, r3
 8007b50:	4807      	ldr	r0, [pc, #28]	; (8007b70 <MX_GPIO_Init+0x154>)
 8007b52:	f7f9 ff45 	bl	80019e0 <HAL_GPIO_Init>

}
 8007b56:	bf00      	nop
 8007b58:	3728      	adds	r7, #40	; 0x28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	40021000 	.word	0x40021000
 8007b64:	48000400 	.word	0x48000400
 8007b68:	10210000 	.word	0x10210000
 8007b6c:	48000800 	.word	0x48000800
 8007b70:	48000c00 	.word	0x48000c00

08007b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b78:	f7f8 fb82 	bl	8000280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b7c:	f000 f80d 	bl	8007b9a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b80:	f7ff ff4c 	bl	8007a1c <MX_GPIO_Init>
  MX_ADC1_Init();
 8007b84:	f7ff fe1a 	bl	80077bc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8007b88:	f000 f982 	bl	8007e90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8007b8c:	f7fc ff60 	bl	8004a50 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8007b90:	f7ff feb6 	bl	8007900 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8007b94:	f7fc ff90 	bl	8004ab8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8007b98:	e7fe      	b.n	8007b98 <main+0x24>

08007b9a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b09c      	sub	sp, #112	; 0x70
 8007b9e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007ba0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007ba4:	2228      	movs	r2, #40	; 0x28
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fa42 	bl	8008032 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007bae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	605a      	str	r2, [r3, #4]
 8007bb8:	609a      	str	r2, [r3, #8]
 8007bba:	60da      	str	r2, [r3, #12]
 8007bbc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007bbe:	463b      	mov	r3, r7
 8007bc0:	2234      	movs	r2, #52	; 0x34
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 fa34 	bl	8008032 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007bce:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8007bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007bdc:	2302      	movs	r3, #2
 8007bde:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007be4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8007be6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007bea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007bec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fa f981 	bl	8001ef8 <HAL_RCC_OscConfig>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8007bfc:	f000 f83a 	bl	8007c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007c00:	230f      	movs	r3, #15
 8007c02:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007c04:	2302      	movs	r3, #2
 8007c06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007c12:	2300      	movs	r3, #0
 8007c14:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007c16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fb f977 	bl	8002f10 <HAL_RCC_ClockConfig>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8007c28:	f000 f824 	bl	8007c74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 8007c2c:	2380      	movs	r3, #128	; 0x80
 8007c2e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV256;
 8007c30:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8007c34:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007c36:	463b      	mov	r3, r7
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fb fc85 	bl	8003548 <HAL_RCCEx_PeriphCLKConfig>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8007c44:	f000 f816 	bl	8007c74 <Error_Handler>
  }
}
 8007c48:	bf00      	nop
 8007c4a:	3770      	adds	r7, #112	; 0x70
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a04      	ldr	r2, [pc, #16]	; (8007c70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d101      	bne.n	8007c66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007c62:	f7f8 fb23 	bl	80002ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	40012c00 	.word	0x40012c00

08007c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007c78:	bf00      	nop
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c9e:	4b11      	ldr	r3, [pc, #68]	; (8007ce4 <HAL_MspInit+0x4c>)
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	4a10      	ldr	r2, [pc, #64]	; (8007ce4 <HAL_MspInit+0x4c>)
 8007ca4:	f043 0301 	orr.w	r3, r3, #1
 8007ca8:	6193      	str	r3, [r2, #24]
 8007caa:	4b0e      	ldr	r3, [pc, #56]	; (8007ce4 <HAL_MspInit+0x4c>)
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	607b      	str	r3, [r7, #4]
 8007cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ce4 <HAL_MspInit+0x4c>)
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	4a0a      	ldr	r2, [pc, #40]	; (8007ce4 <HAL_MspInit+0x4c>)
 8007cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cc0:	61d3      	str	r3, [r2, #28]
 8007cc2:	4b08      	ldr	r3, [pc, #32]	; (8007ce4 <HAL_MspInit+0x4c>)
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cca:	603b      	str	r3, [r7, #0]
 8007ccc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007cce:	2200      	movs	r2, #0
 8007cd0:	210f      	movs	r1, #15
 8007cd2:	f06f 0001 	mvn.w	r0, #1
 8007cd6:	f7f9 fe3f 	bl	8001958 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007cda:	bf00      	nop
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	40021000 	.word	0x40021000

08007ce8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08c      	sub	sp, #48	; 0x30
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	2019      	movs	r0, #25
 8007cfe:	f7f9 fe2b 	bl	8001958 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8007d02:	2019      	movs	r0, #25
 8007d04:	f7f9 fe54 	bl	80019b0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007d08:	4b1e      	ldr	r3, [pc, #120]	; (8007d84 <HAL_InitTick+0x9c>)
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	4a1d      	ldr	r2, [pc, #116]	; (8007d84 <HAL_InitTick+0x9c>)
 8007d0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007d12:	6193      	str	r3, [r2, #24]
 8007d14:	4b1b      	ldr	r3, [pc, #108]	; (8007d84 <HAL_InitTick+0x9c>)
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007d20:	f107 0210 	add.w	r2, r7, #16
 8007d24:	f107 0314 	add.w	r3, r7, #20
 8007d28:	4611      	mov	r1, r2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fb fbca 	bl	80034c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007d30:	f7fb fba6 	bl	8003480 <HAL_RCC_GetPCLK2Freq>
 8007d34:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d38:	4a13      	ldr	r2, [pc, #76]	; (8007d88 <HAL_InitTick+0xa0>)
 8007d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3e:	0c9b      	lsrs	r3, r3, #18
 8007d40:	3b01      	subs	r3, #1
 8007d42:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007d44:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <HAL_InitTick+0xa4>)
 8007d46:	4a12      	ldr	r2, [pc, #72]	; (8007d90 <HAL_InitTick+0xa8>)
 8007d48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8007d4a:	4b10      	ldr	r3, [pc, #64]	; (8007d8c <HAL_InitTick+0xa4>)
 8007d4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007d50:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007d52:	4a0e      	ldr	r2, [pc, #56]	; (8007d8c <HAL_InitTick+0xa4>)
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007d58:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <HAL_InitTick+0xa4>)
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d5e:	4b0b      	ldr	r3, [pc, #44]	; (8007d8c <HAL_InitTick+0xa4>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8007d64:	4809      	ldr	r0, [pc, #36]	; (8007d8c <HAL_InitTick+0xa4>)
 8007d66:	f7fb fe81 	bl	8003a6c <HAL_TIM_Base_Init>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d104      	bne.n	8007d7a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8007d70:	4806      	ldr	r0, [pc, #24]	; (8007d8c <HAL_InitTick+0xa4>)
 8007d72:	f7fb ff19 	bl	8003ba8 <HAL_TIM_Base_Start_IT>
 8007d76:	4603      	mov	r3, r0
 8007d78:	e000      	b.n	8007d7c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3730      	adds	r7, #48	; 0x30
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	40021000 	.word	0x40021000
 8007d88:	431bde83 	.word	0x431bde83
 8007d8c:	20001a48 	.word	0x20001a48
 8007d90:	40012c00 	.word	0x40012c00

08007d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007d94:	b480      	push	{r7}
 8007d96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007d98:	bf00      	nop
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007da2:	b480      	push	{r7}
 8007da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007da6:	e7fe      	b.n	8007da6 <HardFault_Handler+0x4>

08007da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007da8:	b480      	push	{r7}
 8007daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007dac:	e7fe      	b.n	8007dac <MemManage_Handler+0x4>

08007dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007dae:	b480      	push	{r7}
 8007db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007db2:	e7fe      	b.n	8007db2 <BusFault_Handler+0x4>

08007db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007db4:	b480      	push	{r7}
 8007db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007db8:	e7fe      	b.n	8007db8 <UsageFault_Handler+0x4>

08007dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007dbe:	bf00      	nop
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007dce:	4808      	ldr	r0, [pc, #32]	; (8007df0 <ADC1_IRQHandler+0x28>)
 8007dd0:	f7f8 fdf8 	bl	80009c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */
	uint32_t data = HAL_ADC_GetValue(&hadc1);
 8007dd4:	4806      	ldr	r0, [pc, #24]	; (8007df0 <ADC1_IRQHandler+0x28>)
 8007dd6:	f7f8 fddd 	bl	8000994 <HAL_ADC_GetValue>
 8007dda:	6078      	str	r0, [r7, #4]
	//uint8_t msg[100] = {0};
	//sprintf(msg, "%d\n\r", data);
	HAL_UART_Transmit(&huart2, (uint8_t*)data, 4, 0);
 8007ddc:	6879      	ldr	r1, [r7, #4]
 8007dde:	2300      	movs	r3, #0
 8007de0:	2204      	movs	r2, #4
 8007de2:	4804      	ldr	r0, [pc, #16]	; (8007df4 <ADC1_IRQHandler+0x2c>)
 8007de4:	f7fc f990 	bl	8004108 <HAL_UART_Transmit>
	//osSignalSet(&measureTaskHandle, ADC_VALUE);
  /* USER CODE END ADC1_IRQn 1 */
}
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	200019e8 	.word	0x200019e8
 8007df4:	20001a88 	.word	0x20001a88

08007df8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007dfc:	4802      	ldr	r0, [pc, #8]	; (8007e08 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8007dfe:	f7fb ff2b 	bl	8003c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007e02:	bf00      	nop
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20001a48 	.word	0x20001a48

08007e0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007e14:	4b11      	ldr	r3, [pc, #68]	; (8007e5c <_sbrk+0x50>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d102      	bne.n	8007e22 <_sbrk+0x16>
		heap_end = &end;
 8007e1c:	4b0f      	ldr	r3, [pc, #60]	; (8007e5c <_sbrk+0x50>)
 8007e1e:	4a10      	ldr	r2, [pc, #64]	; (8007e60 <_sbrk+0x54>)
 8007e20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007e22:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <_sbrk+0x50>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007e28:	4b0c      	ldr	r3, [pc, #48]	; (8007e5c <_sbrk+0x50>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4413      	add	r3, r2
 8007e30:	466a      	mov	r2, sp
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d907      	bls.n	8007e46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007e36:	f000 f8c7 	bl	8007fc8 <__errno>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	230c      	movs	r3, #12
 8007e3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007e40:	f04f 33ff 	mov.w	r3, #4294967295
 8007e44:	e006      	b.n	8007e54 <_sbrk+0x48>
	}

	heap_end += incr;
 8007e46:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <_sbrk+0x50>)
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	4a03      	ldr	r2, [pc, #12]	; (8007e5c <_sbrk+0x50>)
 8007e50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007e52:	68fb      	ldr	r3, [r7, #12]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	20001998 	.word	0x20001998
 8007e60:	20001b10 	.word	0x20001b10

08007e64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007e68:	4b08      	ldr	r3, [pc, #32]	; (8007e8c <SystemInit+0x28>)
 8007e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e6e:	4a07      	ldr	r2, [pc, #28]	; (8007e8c <SystemInit+0x28>)
 8007e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007e78:	4b04      	ldr	r3, [pc, #16]	; (8007e8c <SystemInit+0x28>)
 8007e7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007e7e:	609a      	str	r2, [r3, #8]
#endif
}
 8007e80:	bf00      	nop
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	e000ed00 	.word	0xe000ed00

08007e90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8007e94:	4b14      	ldr	r3, [pc, #80]	; (8007ee8 <MX_USART2_UART_Init+0x58>)
 8007e96:	4a15      	ldr	r2, [pc, #84]	; (8007eec <MX_USART2_UART_Init+0x5c>)
 8007e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8007e9a:	4b13      	ldr	r3, [pc, #76]	; (8007ee8 <MX_USART2_UART_Init+0x58>)
 8007e9c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8007ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007ea2:	4b11      	ldr	r3, [pc, #68]	; (8007ee8 <MX_USART2_UART_Init+0x58>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007ea8:	4b0f      	ldr	r3, [pc, #60]	; (8007ee8 <MX_USART2_UART_Init+0x58>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007eae:	4b0e      	ldr	r3, [pc, #56]	; (8007ee8 <MX_USART2_UART_Init+0x58>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007eb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <MX_USART2_UART_Init+0x58>)
 8007eb6:	220c      	movs	r2, #12
 8007eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007eba:	4b0b      	ldr	r3, [pc, #44]	; (8007ee8 <MX_USART2_UART_Init+0x58>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007ec0:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <MX_USART2_UART_Init+0x58>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007ec6:	4b08      	ldr	r3, [pc, #32]	; (8007ee8 <MX_USART2_UART_Init+0x58>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007ecc:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <MX_USART2_UART_Init+0x58>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007ed2:	4805      	ldr	r0, [pc, #20]	; (8007ee8 <MX_USART2_UART_Init+0x58>)
 8007ed4:	f7fc f894 	bl	8004000 <HAL_UART_Init>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8007ede:	f7ff fec9 	bl	8007c74 <Error_Handler>
  }

}
 8007ee2:	bf00      	nop
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20001a88 	.word	0x20001a88
 8007eec:	40004400 	.word	0x40004400

08007ef0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08a      	sub	sp, #40	; 0x28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ef8:	f107 0314 	add.w	r3, r7, #20
 8007efc:	2200      	movs	r2, #0
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	605a      	str	r2, [r3, #4]
 8007f02:	609a      	str	r2, [r3, #8]
 8007f04:	60da      	str	r2, [r3, #12]
 8007f06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a17      	ldr	r2, [pc, #92]	; (8007f6c <HAL_UART_MspInit+0x7c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d128      	bne.n	8007f64 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007f12:	4b17      	ldr	r3, [pc, #92]	; (8007f70 <HAL_UART_MspInit+0x80>)
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	4a16      	ldr	r2, [pc, #88]	; (8007f70 <HAL_UART_MspInit+0x80>)
 8007f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f1c:	61d3      	str	r3, [r2, #28]
 8007f1e:	4b14      	ldr	r3, [pc, #80]	; (8007f70 <HAL_UART_MspInit+0x80>)
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f26:	613b      	str	r3, [r7, #16]
 8007f28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f2a:	4b11      	ldr	r3, [pc, #68]	; (8007f70 <HAL_UART_MspInit+0x80>)
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	4a10      	ldr	r2, [pc, #64]	; (8007f70 <HAL_UART_MspInit+0x80>)
 8007f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f34:	6153      	str	r3, [r2, #20]
 8007f36:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <HAL_UART_MspInit+0x80>)
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007f42:	230c      	movs	r3, #12
 8007f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f46:	2302      	movs	r3, #2
 8007f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007f52:	2307      	movs	r3, #7
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f56:	f107 0314 	add.w	r3, r7, #20
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f60:	f7f9 fd3e 	bl	80019e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007f64:	bf00      	nop
 8007f66:	3728      	adds	r7, #40	; 0x28
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	40004400 	.word	0x40004400
 8007f70:	40021000 	.word	0x40021000

08007f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007fac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007f78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007f7a:	e003      	b.n	8007f84 <LoopCopyDataInit>

08007f7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007f7c:	4b0c      	ldr	r3, [pc, #48]	; (8007fb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007f7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007f80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007f82:	3104      	adds	r1, #4

08007f84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007f84:	480b      	ldr	r0, [pc, #44]	; (8007fb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007f86:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007f88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007f8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007f8c:	d3f6      	bcc.n	8007f7c <CopyDataInit>
	ldr	r2, =_sbss
 8007f8e:	4a0b      	ldr	r2, [pc, #44]	; (8007fbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8007f90:	e002      	b.n	8007f98 <LoopFillZerobss>

08007f92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007f92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007f94:	f842 3b04 	str.w	r3, [r2], #4

08007f98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007f98:	4b09      	ldr	r3, [pc, #36]	; (8007fc0 <LoopForever+0x16>)
	cmp	r2, r3
 8007f9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007f9c:	d3f9      	bcc.n	8007f92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007f9e:	f7ff ff61 	bl	8007e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007fa2:	f000 f817 	bl	8007fd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007fa6:	f7ff fde5 	bl	8007b74 <main>

08007faa <LoopForever>:

LoopForever:
    b LoopForever
 8007faa:	e7fe      	b.n	8007faa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007fac:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8007fb0:	08008b5c 	.word	0x08008b5c
	ldr	r0, =_sdata
 8007fb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007fb8:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8007fbc:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8007fc0:	20001b0c 	.word	0x20001b0c

08007fc4 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007fc4:	e7fe      	b.n	8007fc4 <CAN_RX1_IRQHandler>
	...

08007fc8 <__errno>:
 8007fc8:	4b01      	ldr	r3, [pc, #4]	; (8007fd0 <__errno+0x8>)
 8007fca:	6818      	ldr	r0, [r3, #0]
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	20000010 	.word	0x20000010

08007fd4 <__libc_init_array>:
 8007fd4:	b570      	push	{r4, r5, r6, lr}
 8007fd6:	4e0d      	ldr	r6, [pc, #52]	; (800800c <__libc_init_array+0x38>)
 8007fd8:	4c0d      	ldr	r4, [pc, #52]	; (8008010 <__libc_init_array+0x3c>)
 8007fda:	1ba4      	subs	r4, r4, r6
 8007fdc:	10a4      	asrs	r4, r4, #2
 8007fde:	2500      	movs	r5, #0
 8007fe0:	42a5      	cmp	r5, r4
 8007fe2:	d109      	bne.n	8007ff8 <__libc_init_array+0x24>
 8007fe4:	4e0b      	ldr	r6, [pc, #44]	; (8008014 <__libc_init_array+0x40>)
 8007fe6:	4c0c      	ldr	r4, [pc, #48]	; (8008018 <__libc_init_array+0x44>)
 8007fe8:	f000 fc28 	bl	800883c <_init>
 8007fec:	1ba4      	subs	r4, r4, r6
 8007fee:	10a4      	asrs	r4, r4, #2
 8007ff0:	2500      	movs	r5, #0
 8007ff2:	42a5      	cmp	r5, r4
 8007ff4:	d105      	bne.n	8008002 <__libc_init_array+0x2e>
 8007ff6:	bd70      	pop	{r4, r5, r6, pc}
 8007ff8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ffc:	4798      	blx	r3
 8007ffe:	3501      	adds	r5, #1
 8008000:	e7ee      	b.n	8007fe0 <__libc_init_array+0xc>
 8008002:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008006:	4798      	blx	r3
 8008008:	3501      	adds	r5, #1
 800800a:	e7f2      	b.n	8007ff2 <__libc_init_array+0x1e>
 800800c:	08008b54 	.word	0x08008b54
 8008010:	08008b54 	.word	0x08008b54
 8008014:	08008b54 	.word	0x08008b54
 8008018:	08008b58 	.word	0x08008b58

0800801c <memcpy>:
 800801c:	b510      	push	{r4, lr}
 800801e:	1e43      	subs	r3, r0, #1
 8008020:	440a      	add	r2, r1
 8008022:	4291      	cmp	r1, r2
 8008024:	d100      	bne.n	8008028 <memcpy+0xc>
 8008026:	bd10      	pop	{r4, pc}
 8008028:	f811 4b01 	ldrb.w	r4, [r1], #1
 800802c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008030:	e7f7      	b.n	8008022 <memcpy+0x6>

08008032 <memset>:
 8008032:	4402      	add	r2, r0
 8008034:	4603      	mov	r3, r0
 8008036:	4293      	cmp	r3, r2
 8008038:	d100      	bne.n	800803c <memset+0xa>
 800803a:	4770      	bx	lr
 800803c:	f803 1b01 	strb.w	r1, [r3], #1
 8008040:	e7f9      	b.n	8008036 <memset+0x4>
	...

08008044 <siprintf>:
 8008044:	b40e      	push	{r1, r2, r3}
 8008046:	b500      	push	{lr}
 8008048:	b09c      	sub	sp, #112	; 0x70
 800804a:	ab1d      	add	r3, sp, #116	; 0x74
 800804c:	9002      	str	r0, [sp, #8]
 800804e:	9006      	str	r0, [sp, #24]
 8008050:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008054:	4809      	ldr	r0, [pc, #36]	; (800807c <siprintf+0x38>)
 8008056:	9107      	str	r1, [sp, #28]
 8008058:	9104      	str	r1, [sp, #16]
 800805a:	4909      	ldr	r1, [pc, #36]	; (8008080 <siprintf+0x3c>)
 800805c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008060:	9105      	str	r1, [sp, #20]
 8008062:	6800      	ldr	r0, [r0, #0]
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	a902      	add	r1, sp, #8
 8008068:	f000 f866 	bl	8008138 <_svfiprintf_r>
 800806c:	9b02      	ldr	r3, [sp, #8]
 800806e:	2200      	movs	r2, #0
 8008070:	701a      	strb	r2, [r3, #0]
 8008072:	b01c      	add	sp, #112	; 0x70
 8008074:	f85d eb04 	ldr.w	lr, [sp], #4
 8008078:	b003      	add	sp, #12
 800807a:	4770      	bx	lr
 800807c:	20000010 	.word	0x20000010
 8008080:	ffff0208 	.word	0xffff0208

08008084 <__ssputs_r>:
 8008084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008088:	688e      	ldr	r6, [r1, #8]
 800808a:	429e      	cmp	r6, r3
 800808c:	4682      	mov	sl, r0
 800808e:	460c      	mov	r4, r1
 8008090:	4690      	mov	r8, r2
 8008092:	4699      	mov	r9, r3
 8008094:	d837      	bhi.n	8008106 <__ssputs_r+0x82>
 8008096:	898a      	ldrh	r2, [r1, #12]
 8008098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800809c:	d031      	beq.n	8008102 <__ssputs_r+0x7e>
 800809e:	6825      	ldr	r5, [r4, #0]
 80080a0:	6909      	ldr	r1, [r1, #16]
 80080a2:	1a6f      	subs	r7, r5, r1
 80080a4:	6965      	ldr	r5, [r4, #20]
 80080a6:	2302      	movs	r3, #2
 80080a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80080b0:	f109 0301 	add.w	r3, r9, #1
 80080b4:	443b      	add	r3, r7
 80080b6:	429d      	cmp	r5, r3
 80080b8:	bf38      	it	cc
 80080ba:	461d      	movcc	r5, r3
 80080bc:	0553      	lsls	r3, r2, #21
 80080be:	d530      	bpl.n	8008122 <__ssputs_r+0x9e>
 80080c0:	4629      	mov	r1, r5
 80080c2:	f000 fb21 	bl	8008708 <_malloc_r>
 80080c6:	4606      	mov	r6, r0
 80080c8:	b950      	cbnz	r0, 80080e0 <__ssputs_r+0x5c>
 80080ca:	230c      	movs	r3, #12
 80080cc:	f8ca 3000 	str.w	r3, [sl]
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080d6:	81a3      	strh	r3, [r4, #12]
 80080d8:	f04f 30ff 	mov.w	r0, #4294967295
 80080dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e0:	463a      	mov	r2, r7
 80080e2:	6921      	ldr	r1, [r4, #16]
 80080e4:	f7ff ff9a 	bl	800801c <memcpy>
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	6126      	str	r6, [r4, #16]
 80080f6:	6165      	str	r5, [r4, #20]
 80080f8:	443e      	add	r6, r7
 80080fa:	1bed      	subs	r5, r5, r7
 80080fc:	6026      	str	r6, [r4, #0]
 80080fe:	60a5      	str	r5, [r4, #8]
 8008100:	464e      	mov	r6, r9
 8008102:	454e      	cmp	r6, r9
 8008104:	d900      	bls.n	8008108 <__ssputs_r+0x84>
 8008106:	464e      	mov	r6, r9
 8008108:	4632      	mov	r2, r6
 800810a:	4641      	mov	r1, r8
 800810c:	6820      	ldr	r0, [r4, #0]
 800810e:	f000 fa93 	bl	8008638 <memmove>
 8008112:	68a3      	ldr	r3, [r4, #8]
 8008114:	1b9b      	subs	r3, r3, r6
 8008116:	60a3      	str	r3, [r4, #8]
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	441e      	add	r6, r3
 800811c:	6026      	str	r6, [r4, #0]
 800811e:	2000      	movs	r0, #0
 8008120:	e7dc      	b.n	80080dc <__ssputs_r+0x58>
 8008122:	462a      	mov	r2, r5
 8008124:	f000 fb4a 	bl	80087bc <_realloc_r>
 8008128:	4606      	mov	r6, r0
 800812a:	2800      	cmp	r0, #0
 800812c:	d1e2      	bne.n	80080f4 <__ssputs_r+0x70>
 800812e:	6921      	ldr	r1, [r4, #16]
 8008130:	4650      	mov	r0, sl
 8008132:	f000 fa9b 	bl	800866c <_free_r>
 8008136:	e7c8      	b.n	80080ca <__ssputs_r+0x46>

08008138 <_svfiprintf_r>:
 8008138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813c:	461d      	mov	r5, r3
 800813e:	898b      	ldrh	r3, [r1, #12]
 8008140:	061f      	lsls	r7, r3, #24
 8008142:	b09d      	sub	sp, #116	; 0x74
 8008144:	4680      	mov	r8, r0
 8008146:	460c      	mov	r4, r1
 8008148:	4616      	mov	r6, r2
 800814a:	d50f      	bpl.n	800816c <_svfiprintf_r+0x34>
 800814c:	690b      	ldr	r3, [r1, #16]
 800814e:	b96b      	cbnz	r3, 800816c <_svfiprintf_r+0x34>
 8008150:	2140      	movs	r1, #64	; 0x40
 8008152:	f000 fad9 	bl	8008708 <_malloc_r>
 8008156:	6020      	str	r0, [r4, #0]
 8008158:	6120      	str	r0, [r4, #16]
 800815a:	b928      	cbnz	r0, 8008168 <_svfiprintf_r+0x30>
 800815c:	230c      	movs	r3, #12
 800815e:	f8c8 3000 	str.w	r3, [r8]
 8008162:	f04f 30ff 	mov.w	r0, #4294967295
 8008166:	e0c8      	b.n	80082fa <_svfiprintf_r+0x1c2>
 8008168:	2340      	movs	r3, #64	; 0x40
 800816a:	6163      	str	r3, [r4, #20]
 800816c:	2300      	movs	r3, #0
 800816e:	9309      	str	r3, [sp, #36]	; 0x24
 8008170:	2320      	movs	r3, #32
 8008172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008176:	2330      	movs	r3, #48	; 0x30
 8008178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800817c:	9503      	str	r5, [sp, #12]
 800817e:	f04f 0b01 	mov.w	fp, #1
 8008182:	4637      	mov	r7, r6
 8008184:	463d      	mov	r5, r7
 8008186:	f815 3b01 	ldrb.w	r3, [r5], #1
 800818a:	b10b      	cbz	r3, 8008190 <_svfiprintf_r+0x58>
 800818c:	2b25      	cmp	r3, #37	; 0x25
 800818e:	d13e      	bne.n	800820e <_svfiprintf_r+0xd6>
 8008190:	ebb7 0a06 	subs.w	sl, r7, r6
 8008194:	d00b      	beq.n	80081ae <_svfiprintf_r+0x76>
 8008196:	4653      	mov	r3, sl
 8008198:	4632      	mov	r2, r6
 800819a:	4621      	mov	r1, r4
 800819c:	4640      	mov	r0, r8
 800819e:	f7ff ff71 	bl	8008084 <__ssputs_r>
 80081a2:	3001      	adds	r0, #1
 80081a4:	f000 80a4 	beq.w	80082f0 <_svfiprintf_r+0x1b8>
 80081a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081aa:	4453      	add	r3, sl
 80081ac:	9309      	str	r3, [sp, #36]	; 0x24
 80081ae:	783b      	ldrb	r3, [r7, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 809d 	beq.w	80082f0 <_svfiprintf_r+0x1b8>
 80081b6:	2300      	movs	r3, #0
 80081b8:	f04f 32ff 	mov.w	r2, #4294967295
 80081bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081c0:	9304      	str	r3, [sp, #16]
 80081c2:	9307      	str	r3, [sp, #28]
 80081c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081c8:	931a      	str	r3, [sp, #104]	; 0x68
 80081ca:	462f      	mov	r7, r5
 80081cc:	2205      	movs	r2, #5
 80081ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80081d2:	4850      	ldr	r0, [pc, #320]	; (8008314 <_svfiprintf_r+0x1dc>)
 80081d4:	f7f8 f804 	bl	80001e0 <memchr>
 80081d8:	9b04      	ldr	r3, [sp, #16]
 80081da:	b9d0      	cbnz	r0, 8008212 <_svfiprintf_r+0xda>
 80081dc:	06d9      	lsls	r1, r3, #27
 80081de:	bf44      	itt	mi
 80081e0:	2220      	movmi	r2, #32
 80081e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80081e6:	071a      	lsls	r2, r3, #28
 80081e8:	bf44      	itt	mi
 80081ea:	222b      	movmi	r2, #43	; 0x2b
 80081ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80081f0:	782a      	ldrb	r2, [r5, #0]
 80081f2:	2a2a      	cmp	r2, #42	; 0x2a
 80081f4:	d015      	beq.n	8008222 <_svfiprintf_r+0xea>
 80081f6:	9a07      	ldr	r2, [sp, #28]
 80081f8:	462f      	mov	r7, r5
 80081fa:	2000      	movs	r0, #0
 80081fc:	250a      	movs	r5, #10
 80081fe:	4639      	mov	r1, r7
 8008200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008204:	3b30      	subs	r3, #48	; 0x30
 8008206:	2b09      	cmp	r3, #9
 8008208:	d94d      	bls.n	80082a6 <_svfiprintf_r+0x16e>
 800820a:	b1b8      	cbz	r0, 800823c <_svfiprintf_r+0x104>
 800820c:	e00f      	b.n	800822e <_svfiprintf_r+0xf6>
 800820e:	462f      	mov	r7, r5
 8008210:	e7b8      	b.n	8008184 <_svfiprintf_r+0x4c>
 8008212:	4a40      	ldr	r2, [pc, #256]	; (8008314 <_svfiprintf_r+0x1dc>)
 8008214:	1a80      	subs	r0, r0, r2
 8008216:	fa0b f000 	lsl.w	r0, fp, r0
 800821a:	4318      	orrs	r0, r3
 800821c:	9004      	str	r0, [sp, #16]
 800821e:	463d      	mov	r5, r7
 8008220:	e7d3      	b.n	80081ca <_svfiprintf_r+0x92>
 8008222:	9a03      	ldr	r2, [sp, #12]
 8008224:	1d11      	adds	r1, r2, #4
 8008226:	6812      	ldr	r2, [r2, #0]
 8008228:	9103      	str	r1, [sp, #12]
 800822a:	2a00      	cmp	r2, #0
 800822c:	db01      	blt.n	8008232 <_svfiprintf_r+0xfa>
 800822e:	9207      	str	r2, [sp, #28]
 8008230:	e004      	b.n	800823c <_svfiprintf_r+0x104>
 8008232:	4252      	negs	r2, r2
 8008234:	f043 0302 	orr.w	r3, r3, #2
 8008238:	9207      	str	r2, [sp, #28]
 800823a:	9304      	str	r3, [sp, #16]
 800823c:	783b      	ldrb	r3, [r7, #0]
 800823e:	2b2e      	cmp	r3, #46	; 0x2e
 8008240:	d10c      	bne.n	800825c <_svfiprintf_r+0x124>
 8008242:	787b      	ldrb	r3, [r7, #1]
 8008244:	2b2a      	cmp	r3, #42	; 0x2a
 8008246:	d133      	bne.n	80082b0 <_svfiprintf_r+0x178>
 8008248:	9b03      	ldr	r3, [sp, #12]
 800824a:	1d1a      	adds	r2, r3, #4
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	9203      	str	r2, [sp, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	bfb8      	it	lt
 8008254:	f04f 33ff 	movlt.w	r3, #4294967295
 8008258:	3702      	adds	r7, #2
 800825a:	9305      	str	r3, [sp, #20]
 800825c:	4d2e      	ldr	r5, [pc, #184]	; (8008318 <_svfiprintf_r+0x1e0>)
 800825e:	7839      	ldrb	r1, [r7, #0]
 8008260:	2203      	movs	r2, #3
 8008262:	4628      	mov	r0, r5
 8008264:	f7f7 ffbc 	bl	80001e0 <memchr>
 8008268:	b138      	cbz	r0, 800827a <_svfiprintf_r+0x142>
 800826a:	2340      	movs	r3, #64	; 0x40
 800826c:	1b40      	subs	r0, r0, r5
 800826e:	fa03 f000 	lsl.w	r0, r3, r0
 8008272:	9b04      	ldr	r3, [sp, #16]
 8008274:	4303      	orrs	r3, r0
 8008276:	3701      	adds	r7, #1
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	7839      	ldrb	r1, [r7, #0]
 800827c:	4827      	ldr	r0, [pc, #156]	; (800831c <_svfiprintf_r+0x1e4>)
 800827e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008282:	2206      	movs	r2, #6
 8008284:	1c7e      	adds	r6, r7, #1
 8008286:	f7f7 ffab 	bl	80001e0 <memchr>
 800828a:	2800      	cmp	r0, #0
 800828c:	d038      	beq.n	8008300 <_svfiprintf_r+0x1c8>
 800828e:	4b24      	ldr	r3, [pc, #144]	; (8008320 <_svfiprintf_r+0x1e8>)
 8008290:	bb13      	cbnz	r3, 80082d8 <_svfiprintf_r+0x1a0>
 8008292:	9b03      	ldr	r3, [sp, #12]
 8008294:	3307      	adds	r3, #7
 8008296:	f023 0307 	bic.w	r3, r3, #7
 800829a:	3308      	adds	r3, #8
 800829c:	9303      	str	r3, [sp, #12]
 800829e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a0:	444b      	add	r3, r9
 80082a2:	9309      	str	r3, [sp, #36]	; 0x24
 80082a4:	e76d      	b.n	8008182 <_svfiprintf_r+0x4a>
 80082a6:	fb05 3202 	mla	r2, r5, r2, r3
 80082aa:	2001      	movs	r0, #1
 80082ac:	460f      	mov	r7, r1
 80082ae:	e7a6      	b.n	80081fe <_svfiprintf_r+0xc6>
 80082b0:	2300      	movs	r3, #0
 80082b2:	3701      	adds	r7, #1
 80082b4:	9305      	str	r3, [sp, #20]
 80082b6:	4619      	mov	r1, r3
 80082b8:	250a      	movs	r5, #10
 80082ba:	4638      	mov	r0, r7
 80082bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082c0:	3a30      	subs	r2, #48	; 0x30
 80082c2:	2a09      	cmp	r2, #9
 80082c4:	d903      	bls.n	80082ce <_svfiprintf_r+0x196>
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d0c8      	beq.n	800825c <_svfiprintf_r+0x124>
 80082ca:	9105      	str	r1, [sp, #20]
 80082cc:	e7c6      	b.n	800825c <_svfiprintf_r+0x124>
 80082ce:	fb05 2101 	mla	r1, r5, r1, r2
 80082d2:	2301      	movs	r3, #1
 80082d4:	4607      	mov	r7, r0
 80082d6:	e7f0      	b.n	80082ba <_svfiprintf_r+0x182>
 80082d8:	ab03      	add	r3, sp, #12
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	4622      	mov	r2, r4
 80082de:	4b11      	ldr	r3, [pc, #68]	; (8008324 <_svfiprintf_r+0x1ec>)
 80082e0:	a904      	add	r1, sp, #16
 80082e2:	4640      	mov	r0, r8
 80082e4:	f3af 8000 	nop.w
 80082e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80082ec:	4681      	mov	r9, r0
 80082ee:	d1d6      	bne.n	800829e <_svfiprintf_r+0x166>
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	065b      	lsls	r3, r3, #25
 80082f4:	f53f af35 	bmi.w	8008162 <_svfiprintf_r+0x2a>
 80082f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082fa:	b01d      	add	sp, #116	; 0x74
 80082fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008300:	ab03      	add	r3, sp, #12
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	4622      	mov	r2, r4
 8008306:	4b07      	ldr	r3, [pc, #28]	; (8008324 <_svfiprintf_r+0x1ec>)
 8008308:	a904      	add	r1, sp, #16
 800830a:	4640      	mov	r0, r8
 800830c:	f000 f882 	bl	8008414 <_printf_i>
 8008310:	e7ea      	b.n	80082e8 <_svfiprintf_r+0x1b0>
 8008312:	bf00      	nop
 8008314:	08008b20 	.word	0x08008b20
 8008318:	08008b26 	.word	0x08008b26
 800831c:	08008b2a 	.word	0x08008b2a
 8008320:	00000000 	.word	0x00000000
 8008324:	08008085 	.word	0x08008085

08008328 <_printf_common>:
 8008328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800832c:	4691      	mov	r9, r2
 800832e:	461f      	mov	r7, r3
 8008330:	688a      	ldr	r2, [r1, #8]
 8008332:	690b      	ldr	r3, [r1, #16]
 8008334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008338:	4293      	cmp	r3, r2
 800833a:	bfb8      	it	lt
 800833c:	4613      	movlt	r3, r2
 800833e:	f8c9 3000 	str.w	r3, [r9]
 8008342:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008346:	4606      	mov	r6, r0
 8008348:	460c      	mov	r4, r1
 800834a:	b112      	cbz	r2, 8008352 <_printf_common+0x2a>
 800834c:	3301      	adds	r3, #1
 800834e:	f8c9 3000 	str.w	r3, [r9]
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	0699      	lsls	r1, r3, #26
 8008356:	bf42      	ittt	mi
 8008358:	f8d9 3000 	ldrmi.w	r3, [r9]
 800835c:	3302      	addmi	r3, #2
 800835e:	f8c9 3000 	strmi.w	r3, [r9]
 8008362:	6825      	ldr	r5, [r4, #0]
 8008364:	f015 0506 	ands.w	r5, r5, #6
 8008368:	d107      	bne.n	800837a <_printf_common+0x52>
 800836a:	f104 0a19 	add.w	sl, r4, #25
 800836e:	68e3      	ldr	r3, [r4, #12]
 8008370:	f8d9 2000 	ldr.w	r2, [r9]
 8008374:	1a9b      	subs	r3, r3, r2
 8008376:	42ab      	cmp	r3, r5
 8008378:	dc28      	bgt.n	80083cc <_printf_common+0xa4>
 800837a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800837e:	6822      	ldr	r2, [r4, #0]
 8008380:	3300      	adds	r3, #0
 8008382:	bf18      	it	ne
 8008384:	2301      	movne	r3, #1
 8008386:	0692      	lsls	r2, r2, #26
 8008388:	d42d      	bmi.n	80083e6 <_printf_common+0xbe>
 800838a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800838e:	4639      	mov	r1, r7
 8008390:	4630      	mov	r0, r6
 8008392:	47c0      	blx	r8
 8008394:	3001      	adds	r0, #1
 8008396:	d020      	beq.n	80083da <_printf_common+0xb2>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	68e5      	ldr	r5, [r4, #12]
 800839c:	f8d9 2000 	ldr.w	r2, [r9]
 80083a0:	f003 0306 	and.w	r3, r3, #6
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	bf08      	it	eq
 80083a8:	1aad      	subeq	r5, r5, r2
 80083aa:	68a3      	ldr	r3, [r4, #8]
 80083ac:	6922      	ldr	r2, [r4, #16]
 80083ae:	bf0c      	ite	eq
 80083b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083b4:	2500      	movne	r5, #0
 80083b6:	4293      	cmp	r3, r2
 80083b8:	bfc4      	itt	gt
 80083ba:	1a9b      	subgt	r3, r3, r2
 80083bc:	18ed      	addgt	r5, r5, r3
 80083be:	f04f 0900 	mov.w	r9, #0
 80083c2:	341a      	adds	r4, #26
 80083c4:	454d      	cmp	r5, r9
 80083c6:	d11a      	bne.n	80083fe <_printf_common+0xd6>
 80083c8:	2000      	movs	r0, #0
 80083ca:	e008      	b.n	80083de <_printf_common+0xb6>
 80083cc:	2301      	movs	r3, #1
 80083ce:	4652      	mov	r2, sl
 80083d0:	4639      	mov	r1, r7
 80083d2:	4630      	mov	r0, r6
 80083d4:	47c0      	blx	r8
 80083d6:	3001      	adds	r0, #1
 80083d8:	d103      	bne.n	80083e2 <_printf_common+0xba>
 80083da:	f04f 30ff 	mov.w	r0, #4294967295
 80083de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e2:	3501      	adds	r5, #1
 80083e4:	e7c3      	b.n	800836e <_printf_common+0x46>
 80083e6:	18e1      	adds	r1, r4, r3
 80083e8:	1c5a      	adds	r2, r3, #1
 80083ea:	2030      	movs	r0, #48	; 0x30
 80083ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083f0:	4422      	add	r2, r4
 80083f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083fa:	3302      	adds	r3, #2
 80083fc:	e7c5      	b.n	800838a <_printf_common+0x62>
 80083fe:	2301      	movs	r3, #1
 8008400:	4622      	mov	r2, r4
 8008402:	4639      	mov	r1, r7
 8008404:	4630      	mov	r0, r6
 8008406:	47c0      	blx	r8
 8008408:	3001      	adds	r0, #1
 800840a:	d0e6      	beq.n	80083da <_printf_common+0xb2>
 800840c:	f109 0901 	add.w	r9, r9, #1
 8008410:	e7d8      	b.n	80083c4 <_printf_common+0x9c>
	...

08008414 <_printf_i>:
 8008414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008418:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800841c:	460c      	mov	r4, r1
 800841e:	7e09      	ldrb	r1, [r1, #24]
 8008420:	b085      	sub	sp, #20
 8008422:	296e      	cmp	r1, #110	; 0x6e
 8008424:	4617      	mov	r7, r2
 8008426:	4606      	mov	r6, r0
 8008428:	4698      	mov	r8, r3
 800842a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800842c:	f000 80b3 	beq.w	8008596 <_printf_i+0x182>
 8008430:	d822      	bhi.n	8008478 <_printf_i+0x64>
 8008432:	2963      	cmp	r1, #99	; 0x63
 8008434:	d036      	beq.n	80084a4 <_printf_i+0x90>
 8008436:	d80a      	bhi.n	800844e <_printf_i+0x3a>
 8008438:	2900      	cmp	r1, #0
 800843a:	f000 80b9 	beq.w	80085b0 <_printf_i+0x19c>
 800843e:	2958      	cmp	r1, #88	; 0x58
 8008440:	f000 8083 	beq.w	800854a <_printf_i+0x136>
 8008444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008448:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800844c:	e032      	b.n	80084b4 <_printf_i+0xa0>
 800844e:	2964      	cmp	r1, #100	; 0x64
 8008450:	d001      	beq.n	8008456 <_printf_i+0x42>
 8008452:	2969      	cmp	r1, #105	; 0x69
 8008454:	d1f6      	bne.n	8008444 <_printf_i+0x30>
 8008456:	6820      	ldr	r0, [r4, #0]
 8008458:	6813      	ldr	r3, [r2, #0]
 800845a:	0605      	lsls	r5, r0, #24
 800845c:	f103 0104 	add.w	r1, r3, #4
 8008460:	d52a      	bpl.n	80084b8 <_printf_i+0xa4>
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6011      	str	r1, [r2, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	da03      	bge.n	8008472 <_printf_i+0x5e>
 800846a:	222d      	movs	r2, #45	; 0x2d
 800846c:	425b      	negs	r3, r3
 800846e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008472:	486f      	ldr	r0, [pc, #444]	; (8008630 <_printf_i+0x21c>)
 8008474:	220a      	movs	r2, #10
 8008476:	e039      	b.n	80084ec <_printf_i+0xd8>
 8008478:	2973      	cmp	r1, #115	; 0x73
 800847a:	f000 809d 	beq.w	80085b8 <_printf_i+0x1a4>
 800847e:	d808      	bhi.n	8008492 <_printf_i+0x7e>
 8008480:	296f      	cmp	r1, #111	; 0x6f
 8008482:	d020      	beq.n	80084c6 <_printf_i+0xb2>
 8008484:	2970      	cmp	r1, #112	; 0x70
 8008486:	d1dd      	bne.n	8008444 <_printf_i+0x30>
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	f043 0320 	orr.w	r3, r3, #32
 800848e:	6023      	str	r3, [r4, #0]
 8008490:	e003      	b.n	800849a <_printf_i+0x86>
 8008492:	2975      	cmp	r1, #117	; 0x75
 8008494:	d017      	beq.n	80084c6 <_printf_i+0xb2>
 8008496:	2978      	cmp	r1, #120	; 0x78
 8008498:	d1d4      	bne.n	8008444 <_printf_i+0x30>
 800849a:	2378      	movs	r3, #120	; 0x78
 800849c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084a0:	4864      	ldr	r0, [pc, #400]	; (8008634 <_printf_i+0x220>)
 80084a2:	e055      	b.n	8008550 <_printf_i+0x13c>
 80084a4:	6813      	ldr	r3, [r2, #0]
 80084a6:	1d19      	adds	r1, r3, #4
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6011      	str	r1, [r2, #0]
 80084ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084b4:	2301      	movs	r3, #1
 80084b6:	e08c      	b.n	80085d2 <_printf_i+0x1be>
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	6011      	str	r1, [r2, #0]
 80084bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084c0:	bf18      	it	ne
 80084c2:	b21b      	sxthne	r3, r3
 80084c4:	e7cf      	b.n	8008466 <_printf_i+0x52>
 80084c6:	6813      	ldr	r3, [r2, #0]
 80084c8:	6825      	ldr	r5, [r4, #0]
 80084ca:	1d18      	adds	r0, r3, #4
 80084cc:	6010      	str	r0, [r2, #0]
 80084ce:	0628      	lsls	r0, r5, #24
 80084d0:	d501      	bpl.n	80084d6 <_printf_i+0xc2>
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	e002      	b.n	80084dc <_printf_i+0xc8>
 80084d6:	0668      	lsls	r0, r5, #25
 80084d8:	d5fb      	bpl.n	80084d2 <_printf_i+0xbe>
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	4854      	ldr	r0, [pc, #336]	; (8008630 <_printf_i+0x21c>)
 80084de:	296f      	cmp	r1, #111	; 0x6f
 80084e0:	bf14      	ite	ne
 80084e2:	220a      	movne	r2, #10
 80084e4:	2208      	moveq	r2, #8
 80084e6:	2100      	movs	r1, #0
 80084e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084ec:	6865      	ldr	r5, [r4, #4]
 80084ee:	60a5      	str	r5, [r4, #8]
 80084f0:	2d00      	cmp	r5, #0
 80084f2:	f2c0 8095 	blt.w	8008620 <_printf_i+0x20c>
 80084f6:	6821      	ldr	r1, [r4, #0]
 80084f8:	f021 0104 	bic.w	r1, r1, #4
 80084fc:	6021      	str	r1, [r4, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d13d      	bne.n	800857e <_printf_i+0x16a>
 8008502:	2d00      	cmp	r5, #0
 8008504:	f040 808e 	bne.w	8008624 <_printf_i+0x210>
 8008508:	4665      	mov	r5, ip
 800850a:	2a08      	cmp	r2, #8
 800850c:	d10b      	bne.n	8008526 <_printf_i+0x112>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	07db      	lsls	r3, r3, #31
 8008512:	d508      	bpl.n	8008526 <_printf_i+0x112>
 8008514:	6923      	ldr	r3, [r4, #16]
 8008516:	6862      	ldr	r2, [r4, #4]
 8008518:	429a      	cmp	r2, r3
 800851a:	bfde      	ittt	le
 800851c:	2330      	movle	r3, #48	; 0x30
 800851e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008522:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008526:	ebac 0305 	sub.w	r3, ip, r5
 800852a:	6123      	str	r3, [r4, #16]
 800852c:	f8cd 8000 	str.w	r8, [sp]
 8008530:	463b      	mov	r3, r7
 8008532:	aa03      	add	r2, sp, #12
 8008534:	4621      	mov	r1, r4
 8008536:	4630      	mov	r0, r6
 8008538:	f7ff fef6 	bl	8008328 <_printf_common>
 800853c:	3001      	adds	r0, #1
 800853e:	d14d      	bne.n	80085dc <_printf_i+0x1c8>
 8008540:	f04f 30ff 	mov.w	r0, #4294967295
 8008544:	b005      	add	sp, #20
 8008546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800854a:	4839      	ldr	r0, [pc, #228]	; (8008630 <_printf_i+0x21c>)
 800854c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008550:	6813      	ldr	r3, [r2, #0]
 8008552:	6821      	ldr	r1, [r4, #0]
 8008554:	1d1d      	adds	r5, r3, #4
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6015      	str	r5, [r2, #0]
 800855a:	060a      	lsls	r2, r1, #24
 800855c:	d50b      	bpl.n	8008576 <_printf_i+0x162>
 800855e:	07ca      	lsls	r2, r1, #31
 8008560:	bf44      	itt	mi
 8008562:	f041 0120 	orrmi.w	r1, r1, #32
 8008566:	6021      	strmi	r1, [r4, #0]
 8008568:	b91b      	cbnz	r3, 8008572 <_printf_i+0x15e>
 800856a:	6822      	ldr	r2, [r4, #0]
 800856c:	f022 0220 	bic.w	r2, r2, #32
 8008570:	6022      	str	r2, [r4, #0]
 8008572:	2210      	movs	r2, #16
 8008574:	e7b7      	b.n	80084e6 <_printf_i+0xd2>
 8008576:	064d      	lsls	r5, r1, #25
 8008578:	bf48      	it	mi
 800857a:	b29b      	uxthmi	r3, r3
 800857c:	e7ef      	b.n	800855e <_printf_i+0x14a>
 800857e:	4665      	mov	r5, ip
 8008580:	fbb3 f1f2 	udiv	r1, r3, r2
 8008584:	fb02 3311 	mls	r3, r2, r1, r3
 8008588:	5cc3      	ldrb	r3, [r0, r3]
 800858a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800858e:	460b      	mov	r3, r1
 8008590:	2900      	cmp	r1, #0
 8008592:	d1f5      	bne.n	8008580 <_printf_i+0x16c>
 8008594:	e7b9      	b.n	800850a <_printf_i+0xf6>
 8008596:	6813      	ldr	r3, [r2, #0]
 8008598:	6825      	ldr	r5, [r4, #0]
 800859a:	6961      	ldr	r1, [r4, #20]
 800859c:	1d18      	adds	r0, r3, #4
 800859e:	6010      	str	r0, [r2, #0]
 80085a0:	0628      	lsls	r0, r5, #24
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	d501      	bpl.n	80085aa <_printf_i+0x196>
 80085a6:	6019      	str	r1, [r3, #0]
 80085a8:	e002      	b.n	80085b0 <_printf_i+0x19c>
 80085aa:	066a      	lsls	r2, r5, #25
 80085ac:	d5fb      	bpl.n	80085a6 <_printf_i+0x192>
 80085ae:	8019      	strh	r1, [r3, #0]
 80085b0:	2300      	movs	r3, #0
 80085b2:	6123      	str	r3, [r4, #16]
 80085b4:	4665      	mov	r5, ip
 80085b6:	e7b9      	b.n	800852c <_printf_i+0x118>
 80085b8:	6813      	ldr	r3, [r2, #0]
 80085ba:	1d19      	adds	r1, r3, #4
 80085bc:	6011      	str	r1, [r2, #0]
 80085be:	681d      	ldr	r5, [r3, #0]
 80085c0:	6862      	ldr	r2, [r4, #4]
 80085c2:	2100      	movs	r1, #0
 80085c4:	4628      	mov	r0, r5
 80085c6:	f7f7 fe0b 	bl	80001e0 <memchr>
 80085ca:	b108      	cbz	r0, 80085d0 <_printf_i+0x1bc>
 80085cc:	1b40      	subs	r0, r0, r5
 80085ce:	6060      	str	r0, [r4, #4]
 80085d0:	6863      	ldr	r3, [r4, #4]
 80085d2:	6123      	str	r3, [r4, #16]
 80085d4:	2300      	movs	r3, #0
 80085d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085da:	e7a7      	b.n	800852c <_printf_i+0x118>
 80085dc:	6923      	ldr	r3, [r4, #16]
 80085de:	462a      	mov	r2, r5
 80085e0:	4639      	mov	r1, r7
 80085e2:	4630      	mov	r0, r6
 80085e4:	47c0      	blx	r8
 80085e6:	3001      	adds	r0, #1
 80085e8:	d0aa      	beq.n	8008540 <_printf_i+0x12c>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	079b      	lsls	r3, r3, #30
 80085ee:	d413      	bmi.n	8008618 <_printf_i+0x204>
 80085f0:	68e0      	ldr	r0, [r4, #12]
 80085f2:	9b03      	ldr	r3, [sp, #12]
 80085f4:	4298      	cmp	r0, r3
 80085f6:	bfb8      	it	lt
 80085f8:	4618      	movlt	r0, r3
 80085fa:	e7a3      	b.n	8008544 <_printf_i+0x130>
 80085fc:	2301      	movs	r3, #1
 80085fe:	464a      	mov	r2, r9
 8008600:	4639      	mov	r1, r7
 8008602:	4630      	mov	r0, r6
 8008604:	47c0      	blx	r8
 8008606:	3001      	adds	r0, #1
 8008608:	d09a      	beq.n	8008540 <_printf_i+0x12c>
 800860a:	3501      	adds	r5, #1
 800860c:	68e3      	ldr	r3, [r4, #12]
 800860e:	9a03      	ldr	r2, [sp, #12]
 8008610:	1a9b      	subs	r3, r3, r2
 8008612:	42ab      	cmp	r3, r5
 8008614:	dcf2      	bgt.n	80085fc <_printf_i+0x1e8>
 8008616:	e7eb      	b.n	80085f0 <_printf_i+0x1dc>
 8008618:	2500      	movs	r5, #0
 800861a:	f104 0919 	add.w	r9, r4, #25
 800861e:	e7f5      	b.n	800860c <_printf_i+0x1f8>
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1ac      	bne.n	800857e <_printf_i+0x16a>
 8008624:	7803      	ldrb	r3, [r0, #0]
 8008626:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800862a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800862e:	e76c      	b.n	800850a <_printf_i+0xf6>
 8008630:	08008b31 	.word	0x08008b31
 8008634:	08008b42 	.word	0x08008b42

08008638 <memmove>:
 8008638:	4288      	cmp	r0, r1
 800863a:	b510      	push	{r4, lr}
 800863c:	eb01 0302 	add.w	r3, r1, r2
 8008640:	d807      	bhi.n	8008652 <memmove+0x1a>
 8008642:	1e42      	subs	r2, r0, #1
 8008644:	4299      	cmp	r1, r3
 8008646:	d00a      	beq.n	800865e <memmove+0x26>
 8008648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800864c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008650:	e7f8      	b.n	8008644 <memmove+0xc>
 8008652:	4283      	cmp	r3, r0
 8008654:	d9f5      	bls.n	8008642 <memmove+0xa>
 8008656:	1881      	adds	r1, r0, r2
 8008658:	1ad2      	subs	r2, r2, r3
 800865a:	42d3      	cmn	r3, r2
 800865c:	d100      	bne.n	8008660 <memmove+0x28>
 800865e:	bd10      	pop	{r4, pc}
 8008660:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008664:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008668:	e7f7      	b.n	800865a <memmove+0x22>
	...

0800866c <_free_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4605      	mov	r5, r0
 8008670:	2900      	cmp	r1, #0
 8008672:	d045      	beq.n	8008700 <_free_r+0x94>
 8008674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008678:	1f0c      	subs	r4, r1, #4
 800867a:	2b00      	cmp	r3, #0
 800867c:	bfb8      	it	lt
 800867e:	18e4      	addlt	r4, r4, r3
 8008680:	f000 f8d2 	bl	8008828 <__malloc_lock>
 8008684:	4a1f      	ldr	r2, [pc, #124]	; (8008704 <_free_r+0x98>)
 8008686:	6813      	ldr	r3, [r2, #0]
 8008688:	4610      	mov	r0, r2
 800868a:	b933      	cbnz	r3, 800869a <_free_r+0x2e>
 800868c:	6063      	str	r3, [r4, #4]
 800868e:	6014      	str	r4, [r2, #0]
 8008690:	4628      	mov	r0, r5
 8008692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008696:	f000 b8c8 	b.w	800882a <__malloc_unlock>
 800869a:	42a3      	cmp	r3, r4
 800869c:	d90c      	bls.n	80086b8 <_free_r+0x4c>
 800869e:	6821      	ldr	r1, [r4, #0]
 80086a0:	1862      	adds	r2, r4, r1
 80086a2:	4293      	cmp	r3, r2
 80086a4:	bf04      	itt	eq
 80086a6:	681a      	ldreq	r2, [r3, #0]
 80086a8:	685b      	ldreq	r3, [r3, #4]
 80086aa:	6063      	str	r3, [r4, #4]
 80086ac:	bf04      	itt	eq
 80086ae:	1852      	addeq	r2, r2, r1
 80086b0:	6022      	streq	r2, [r4, #0]
 80086b2:	6004      	str	r4, [r0, #0]
 80086b4:	e7ec      	b.n	8008690 <_free_r+0x24>
 80086b6:	4613      	mov	r3, r2
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	b10a      	cbz	r2, 80086c0 <_free_r+0x54>
 80086bc:	42a2      	cmp	r2, r4
 80086be:	d9fa      	bls.n	80086b6 <_free_r+0x4a>
 80086c0:	6819      	ldr	r1, [r3, #0]
 80086c2:	1858      	adds	r0, r3, r1
 80086c4:	42a0      	cmp	r0, r4
 80086c6:	d10b      	bne.n	80086e0 <_free_r+0x74>
 80086c8:	6820      	ldr	r0, [r4, #0]
 80086ca:	4401      	add	r1, r0
 80086cc:	1858      	adds	r0, r3, r1
 80086ce:	4282      	cmp	r2, r0
 80086d0:	6019      	str	r1, [r3, #0]
 80086d2:	d1dd      	bne.n	8008690 <_free_r+0x24>
 80086d4:	6810      	ldr	r0, [r2, #0]
 80086d6:	6852      	ldr	r2, [r2, #4]
 80086d8:	605a      	str	r2, [r3, #4]
 80086da:	4401      	add	r1, r0
 80086dc:	6019      	str	r1, [r3, #0]
 80086de:	e7d7      	b.n	8008690 <_free_r+0x24>
 80086e0:	d902      	bls.n	80086e8 <_free_r+0x7c>
 80086e2:	230c      	movs	r3, #12
 80086e4:	602b      	str	r3, [r5, #0]
 80086e6:	e7d3      	b.n	8008690 <_free_r+0x24>
 80086e8:	6820      	ldr	r0, [r4, #0]
 80086ea:	1821      	adds	r1, r4, r0
 80086ec:	428a      	cmp	r2, r1
 80086ee:	bf04      	itt	eq
 80086f0:	6811      	ldreq	r1, [r2, #0]
 80086f2:	6852      	ldreq	r2, [r2, #4]
 80086f4:	6062      	str	r2, [r4, #4]
 80086f6:	bf04      	itt	eq
 80086f8:	1809      	addeq	r1, r1, r0
 80086fa:	6021      	streq	r1, [r4, #0]
 80086fc:	605c      	str	r4, [r3, #4]
 80086fe:	e7c7      	b.n	8008690 <_free_r+0x24>
 8008700:	bd38      	pop	{r3, r4, r5, pc}
 8008702:	bf00      	nop
 8008704:	2000199c 	.word	0x2000199c

08008708 <_malloc_r>:
 8008708:	b570      	push	{r4, r5, r6, lr}
 800870a:	1ccd      	adds	r5, r1, #3
 800870c:	f025 0503 	bic.w	r5, r5, #3
 8008710:	3508      	adds	r5, #8
 8008712:	2d0c      	cmp	r5, #12
 8008714:	bf38      	it	cc
 8008716:	250c      	movcc	r5, #12
 8008718:	2d00      	cmp	r5, #0
 800871a:	4606      	mov	r6, r0
 800871c:	db01      	blt.n	8008722 <_malloc_r+0x1a>
 800871e:	42a9      	cmp	r1, r5
 8008720:	d903      	bls.n	800872a <_malloc_r+0x22>
 8008722:	230c      	movs	r3, #12
 8008724:	6033      	str	r3, [r6, #0]
 8008726:	2000      	movs	r0, #0
 8008728:	bd70      	pop	{r4, r5, r6, pc}
 800872a:	f000 f87d 	bl	8008828 <__malloc_lock>
 800872e:	4a21      	ldr	r2, [pc, #132]	; (80087b4 <_malloc_r+0xac>)
 8008730:	6814      	ldr	r4, [r2, #0]
 8008732:	4621      	mov	r1, r4
 8008734:	b991      	cbnz	r1, 800875c <_malloc_r+0x54>
 8008736:	4c20      	ldr	r4, [pc, #128]	; (80087b8 <_malloc_r+0xb0>)
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	b91b      	cbnz	r3, 8008744 <_malloc_r+0x3c>
 800873c:	4630      	mov	r0, r6
 800873e:	f000 f863 	bl	8008808 <_sbrk_r>
 8008742:	6020      	str	r0, [r4, #0]
 8008744:	4629      	mov	r1, r5
 8008746:	4630      	mov	r0, r6
 8008748:	f000 f85e 	bl	8008808 <_sbrk_r>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d124      	bne.n	800879a <_malloc_r+0x92>
 8008750:	230c      	movs	r3, #12
 8008752:	6033      	str	r3, [r6, #0]
 8008754:	4630      	mov	r0, r6
 8008756:	f000 f868 	bl	800882a <__malloc_unlock>
 800875a:	e7e4      	b.n	8008726 <_malloc_r+0x1e>
 800875c:	680b      	ldr	r3, [r1, #0]
 800875e:	1b5b      	subs	r3, r3, r5
 8008760:	d418      	bmi.n	8008794 <_malloc_r+0x8c>
 8008762:	2b0b      	cmp	r3, #11
 8008764:	d90f      	bls.n	8008786 <_malloc_r+0x7e>
 8008766:	600b      	str	r3, [r1, #0]
 8008768:	50cd      	str	r5, [r1, r3]
 800876a:	18cc      	adds	r4, r1, r3
 800876c:	4630      	mov	r0, r6
 800876e:	f000 f85c 	bl	800882a <__malloc_unlock>
 8008772:	f104 000b 	add.w	r0, r4, #11
 8008776:	1d23      	adds	r3, r4, #4
 8008778:	f020 0007 	bic.w	r0, r0, #7
 800877c:	1ac3      	subs	r3, r0, r3
 800877e:	d0d3      	beq.n	8008728 <_malloc_r+0x20>
 8008780:	425a      	negs	r2, r3
 8008782:	50e2      	str	r2, [r4, r3]
 8008784:	e7d0      	b.n	8008728 <_malloc_r+0x20>
 8008786:	428c      	cmp	r4, r1
 8008788:	684b      	ldr	r3, [r1, #4]
 800878a:	bf16      	itet	ne
 800878c:	6063      	strne	r3, [r4, #4]
 800878e:	6013      	streq	r3, [r2, #0]
 8008790:	460c      	movne	r4, r1
 8008792:	e7eb      	b.n	800876c <_malloc_r+0x64>
 8008794:	460c      	mov	r4, r1
 8008796:	6849      	ldr	r1, [r1, #4]
 8008798:	e7cc      	b.n	8008734 <_malloc_r+0x2c>
 800879a:	1cc4      	adds	r4, r0, #3
 800879c:	f024 0403 	bic.w	r4, r4, #3
 80087a0:	42a0      	cmp	r0, r4
 80087a2:	d005      	beq.n	80087b0 <_malloc_r+0xa8>
 80087a4:	1a21      	subs	r1, r4, r0
 80087a6:	4630      	mov	r0, r6
 80087a8:	f000 f82e 	bl	8008808 <_sbrk_r>
 80087ac:	3001      	adds	r0, #1
 80087ae:	d0cf      	beq.n	8008750 <_malloc_r+0x48>
 80087b0:	6025      	str	r5, [r4, #0]
 80087b2:	e7db      	b.n	800876c <_malloc_r+0x64>
 80087b4:	2000199c 	.word	0x2000199c
 80087b8:	200019a0 	.word	0x200019a0

080087bc <_realloc_r>:
 80087bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087be:	4607      	mov	r7, r0
 80087c0:	4614      	mov	r4, r2
 80087c2:	460e      	mov	r6, r1
 80087c4:	b921      	cbnz	r1, 80087d0 <_realloc_r+0x14>
 80087c6:	4611      	mov	r1, r2
 80087c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087cc:	f7ff bf9c 	b.w	8008708 <_malloc_r>
 80087d0:	b922      	cbnz	r2, 80087dc <_realloc_r+0x20>
 80087d2:	f7ff ff4b 	bl	800866c <_free_r>
 80087d6:	4625      	mov	r5, r4
 80087d8:	4628      	mov	r0, r5
 80087da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087dc:	f000 f826 	bl	800882c <_malloc_usable_size_r>
 80087e0:	42a0      	cmp	r0, r4
 80087e2:	d20f      	bcs.n	8008804 <_realloc_r+0x48>
 80087e4:	4621      	mov	r1, r4
 80087e6:	4638      	mov	r0, r7
 80087e8:	f7ff ff8e 	bl	8008708 <_malloc_r>
 80087ec:	4605      	mov	r5, r0
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d0f2      	beq.n	80087d8 <_realloc_r+0x1c>
 80087f2:	4631      	mov	r1, r6
 80087f4:	4622      	mov	r2, r4
 80087f6:	f7ff fc11 	bl	800801c <memcpy>
 80087fa:	4631      	mov	r1, r6
 80087fc:	4638      	mov	r0, r7
 80087fe:	f7ff ff35 	bl	800866c <_free_r>
 8008802:	e7e9      	b.n	80087d8 <_realloc_r+0x1c>
 8008804:	4635      	mov	r5, r6
 8008806:	e7e7      	b.n	80087d8 <_realloc_r+0x1c>

08008808 <_sbrk_r>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	4c06      	ldr	r4, [pc, #24]	; (8008824 <_sbrk_r+0x1c>)
 800880c:	2300      	movs	r3, #0
 800880e:	4605      	mov	r5, r0
 8008810:	4608      	mov	r0, r1
 8008812:	6023      	str	r3, [r4, #0]
 8008814:	f7ff fafa 	bl	8007e0c <_sbrk>
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d102      	bne.n	8008822 <_sbrk_r+0x1a>
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	b103      	cbz	r3, 8008822 <_sbrk_r+0x1a>
 8008820:	602b      	str	r3, [r5, #0]
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	20001b08 	.word	0x20001b08

08008828 <__malloc_lock>:
 8008828:	4770      	bx	lr

0800882a <__malloc_unlock>:
 800882a:	4770      	bx	lr

0800882c <_malloc_usable_size_r>:
 800882c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008830:	1f18      	subs	r0, r3, #4
 8008832:	2b00      	cmp	r3, #0
 8008834:	bfbc      	itt	lt
 8008836:	580b      	ldrlt	r3, [r1, r0]
 8008838:	18c0      	addlt	r0, r0, r3
 800883a:	4770      	bx	lr

0800883c <_init>:
 800883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883e:	bf00      	nop
 8008840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008842:	bc08      	pop	{r3}
 8008844:	469e      	mov	lr, r3
 8008846:	4770      	bx	lr

08008848 <_fini>:
 8008848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884a:	bf00      	nop
 800884c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884e:	bc08      	pop	{r3}
 8008850:	469e      	mov	lr, r3
 8008852:	4770      	bx	lr
