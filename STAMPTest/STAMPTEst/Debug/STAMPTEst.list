
STAMPTEst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08008e28  08008e28  00018e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009160  08009160  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009160  08009160  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009160  08009160  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009164  08009164  00019164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ab0  20000010  08009178  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ac0  08009178  00022ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea20  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ee6  00000000  00000000  0003ea60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001740  00000000  00000000  00042948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001548  00000000  00000000  00044088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c731  00000000  00000000  000455d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018244  00000000  00000000  00061d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d8df  00000000  00000000  00079f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117824  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f3c  00000000  00000000  001178a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e10 	.word	0x08008e10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008e10 	.word	0x08008e10

080001d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_Init+0x28>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a07      	ldr	r2, [pc, #28]	; (80001f8 <HAL_Init+0x28>)
 80001da:	f043 0310 	orr.w	r3, r3, #16
 80001de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e0:	2003      	movs	r0, #3
 80001e2:	f001 fb63 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001e6:	2000      	movs	r0, #0
 80001e8:	f008 fc48 	bl	8008a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001ec:	f008 fc1e 	bl	8008a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f0:	2300      	movs	r3, #0
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40022000 	.word	0x40022000

080001fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <HAL_IncTick+0x20>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	461a      	mov	r2, r3
 8000206:	4b06      	ldr	r3, [pc, #24]	; (8000220 <HAL_IncTick+0x24>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4413      	add	r3, r2
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <HAL_IncTick+0x24>)
 800020e:	6013      	str	r3, [r2, #0]
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	20000004 	.word	0x20000004
 8000220:	20002938 	.word	0x20002938

08000224 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
  return uwTick;  
 8000228:	4b03      	ldr	r3, [pc, #12]	; (8000238 <HAL_GetTick+0x14>)
 800022a:	681b      	ldr	r3, [r3, #0]
}
 800022c:	4618      	mov	r0, r3
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	20002938 	.word	0x20002938

0800023c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr

08000250 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr

08000264 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b09a      	sub	sp, #104	; 0x68
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000280:	2300      	movs	r3, #0
 8000282:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000286:	2300      	movs	r3, #0
 8000288:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800028a:	2300      	movs	r3, #0
 800028c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d101      	bne.n	8000298 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000294:	2301      	movs	r3, #1
 8000296:	e274      	b.n	8000782 <HAL_ADC_Init+0x50a>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80002a0:	d003      	beq.n	80002aa <HAL_ADC_Init+0x32>
 80002a2:	21f9      	movs	r1, #249	; 0xf9
 80002a4:	4882      	ldr	r0, [pc, #520]	; (80004b0 <HAL_ADC_Init+0x238>)
 80002a6:	f008 fbb6 	bl	8008a16 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d012      	beq.n	80002d8 <HAL_ADC_Init+0x60>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80002ba:	d00d      	beq.n	80002d8 <HAL_ADC_Init+0x60>
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80002c4:	d008      	beq.n	80002d8 <HAL_ADC_Init+0x60>
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80002ce:	d003      	beq.n	80002d8 <HAL_ADC_Init+0x60>
 80002d0:	21fa      	movs	r1, #250	; 0xfa
 80002d2:	4877      	ldr	r0, [pc, #476]	; (80004b0 <HAL_ADC_Init+0x238>)
 80002d4:	f008 fb9f 	bl	8008a16 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d00f      	beq.n	8000300 <HAL_ADC_Init+0x88>
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	2b08      	cmp	r3, #8
 80002e6:	d00b      	beq.n	8000300 <HAL_ADC_Init+0x88>
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	2b10      	cmp	r3, #16
 80002ee:	d007      	beq.n	8000300 <HAL_ADC_Init+0x88>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	2b18      	cmp	r3, #24
 80002f6:	d003      	beq.n	8000300 <HAL_ADC_Init+0x88>
 80002f8:	21fb      	movs	r1, #251	; 0xfb
 80002fa:	486d      	ldr	r0, [pc, #436]	; (80004b0 <HAL_ADC_Init+0x238>)
 80002fc:	f008 fb8b 	bl	8008a16 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d007      	beq.n	8000318 <HAL_ADC_Init+0xa0>
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	2b20      	cmp	r3, #32
 800030e:	d003      	beq.n	8000318 <HAL_ADC_Init+0xa0>
 8000310:	21fc      	movs	r1, #252	; 0xfc
 8000312:	4867      	ldr	r0, [pc, #412]	; (80004b0 <HAL_ADC_Init+0x238>)
 8000314:	f008 fb7f 	bl	8008a16 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	691b      	ldr	r3, [r3, #16]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d007      	beq.n	8000330 <HAL_ADC_Init+0xb8>
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	691b      	ldr	r3, [r3, #16]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d003      	beq.n	8000330 <HAL_ADC_Init+0xb8>
 8000328:	21fd      	movs	r1, #253	; 0xfd
 800032a:	4861      	ldr	r0, [pc, #388]	; (80004b0 <HAL_ADC_Init+0x238>)
 800032c:	f008 fb73 	bl	8008a16 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	7e5b      	ldrb	r3, [r3, #25]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d007      	beq.n	8000348 <HAL_ADC_Init+0xd0>
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	7e5b      	ldrb	r3, [r3, #25]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d003      	beq.n	8000348 <HAL_ADC_Init+0xd0>
 8000340:	21fe      	movs	r1, #254	; 0xfe
 8000342:	485b      	ldr	r0, [pc, #364]	; (80004b0 <HAL_ADC_Init+0x238>)
 8000344:	f008 fb67 	bl	8008a16 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800034c:	2b00      	cmp	r3, #0
 800034e:	d012      	beq.n	8000376 <HAL_ADC_Init+0xfe>
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000358:	d00d      	beq.n	8000376 <HAL_ADC_Init+0xfe>
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800035e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000362:	d008      	beq.n	8000376 <HAL_ADC_Init+0xfe>
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000368:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800036c:	d003      	beq.n	8000376 <HAL_ADC_Init+0xfe>
 800036e:	21ff      	movs	r1, #255	; 0xff
 8000370:	484f      	ldr	r0, [pc, #316]	; (80004b0 <HAL_ADC_Init+0x238>)
 8000372:	f008 fb50 	bl	8008a16 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800037a:	2b00      	cmp	r3, #0
 800037c:	d02e      	beq.n	80003dc <HAL_ADC_Init+0x164>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000382:	2b40      	cmp	r3, #64	; 0x40
 8000384:	d02a      	beq.n	80003dc <HAL_ADC_Init+0x164>
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800038a:	2b80      	cmp	r3, #128	; 0x80
 800038c:	d026      	beq.n	80003dc <HAL_ADC_Init+0x164>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000392:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000396:	d021      	beq.n	80003dc <HAL_ADC_Init+0x164>
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800039c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80003a0:	d01c      	beq.n	80003dc <HAL_ADC_Init+0x164>
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80003aa:	d017      	beq.n	80003dc <HAL_ADC_Init+0x164>
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b0:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80003b4:	d012      	beq.n	80003dc <HAL_ADC_Init+0x164>
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ba:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 80003be:	d00d      	beq.n	80003dc <HAL_ADC_Init+0x164>
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80003c8:	d008      	beq.n	80003dc <HAL_ADC_Init+0x164>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d004      	beq.n	80003dc <HAL_ADC_Init+0x164>
 80003d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d6:	4836      	ldr	r0, [pc, #216]	; (80004b0 <HAL_ADC_Init+0x238>)
 80003d8:	f008 fb1d 	bl	8008a16 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d009      	beq.n	80003fa <HAL_ADC_Init+0x182>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d004      	beq.n	80003fa <HAL_ADC_Init+0x182>
 80003f0:	f240 1101 	movw	r1, #257	; 0x101
 80003f4:	482e      	ldr	r0, [pc, #184]	; (80004b0 <HAL_ADC_Init+0x238>)
 80003f6:	f008 fb0e 	bl	8008a16 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	2b04      	cmp	r3, #4
 8000400:	d008      	beq.n	8000414 <HAL_ADC_Init+0x19c>
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	2b08      	cmp	r3, #8
 8000408:	d004      	beq.n	8000414 <HAL_ADC_Init+0x19c>
 800040a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800040e:	4828      	ldr	r0, [pc, #160]	; (80004b0 <HAL_ADC_Init+0x238>)
 8000410:	f008 fb01 	bl	8008a16 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000418:	2b01      	cmp	r3, #1
 800041a:	d008      	beq.n	800042e <HAL_ADC_Init+0x1b6>
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000420:	2b00      	cmp	r3, #0
 8000422:	d004      	beq.n	800042e <HAL_ADC_Init+0x1b6>
 8000424:	f240 1103 	movw	r1, #259	; 0x103
 8000428:	4821      	ldr	r0, [pc, #132]	; (80004b0 <HAL_ADC_Init+0x238>)
 800042a:	f008 faf4 	bl	8008a16 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	7e1b      	ldrb	r3, [r3, #24]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d008      	beq.n	8000448 <HAL_ADC_Init+0x1d0>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	7e1b      	ldrb	r3, [r3, #24]
 800043a:	2b01      	cmp	r3, #1
 800043c:	d004      	beq.n	8000448 <HAL_ADC_Init+0x1d0>
 800043e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000442:	481b      	ldr	r0, [pc, #108]	; (80004b0 <HAL_ADC_Init+0x238>)
 8000444:	f008 fae7 	bl	8008a16 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	691b      	ldr	r3, [r3, #16]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d031      	beq.n	80004b4 <HAL_ADC_Init+0x23c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d003      	beq.n	8000460 <HAL_ADC_Init+0x1e8>
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	69db      	ldr	r3, [r3, #28]
 800045c:	2b10      	cmp	r3, #16
 800045e:	d904      	bls.n	800046a <HAL_ADC_Init+0x1f2>
 8000460:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000464:	4812      	ldr	r0, [pc, #72]	; (80004b0 <HAL_ADC_Init+0x238>)
 8000466:	f008 fad6 	bl	8008a16 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d009      	beq.n	8000488 <HAL_ADC_Init+0x210>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800047a:	2b01      	cmp	r3, #1
 800047c:	d004      	beq.n	8000488 <HAL_ADC_Init+0x210>
 800047e:	f240 1109 	movw	r1, #265	; 0x109
 8000482:	480b      	ldr	r0, [pc, #44]	; (80004b0 <HAL_ADC_Init+0x238>)
 8000484:	f008 fac7 	bl	8008a16 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d010      	beq.n	80004b4 <HAL_ADC_Init+0x23c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000496:	2b00      	cmp	r3, #0
 8000498:	d003      	beq.n	80004a2 <HAL_ADC_Init+0x22a>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800049e:	2b08      	cmp	r3, #8
 80004a0:	d908      	bls.n	80004b4 <HAL_ADC_Init+0x23c>
 80004a2:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80004a6:	4802      	ldr	r0, [pc, #8]	; (80004b0 <HAL_ADC_Init+0x238>)
 80004a8:	f008 fab5 	bl	8008a16 <assert_failed>
 80004ac:	e002      	b.n	80004b4 <HAL_ADC_Init+0x23c>
 80004ae:	bf00      	nop
 80004b0:	08008e28 	.word	0x08008e28
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004b8:	f003 0310 	and.w	r3, r3, #16
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d176      	bne.n	80005ae <HAL_ADC_Init+0x336>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d152      	bne.n	800056e <HAL_ADC_Init+0x2f6>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2200      	movs	r2, #0
 80004cc:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2200      	movs	r2, #0
 80004d2:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2200      	movs	r2, #0
 80004d8:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2200      	movs	r2, #0
 80004de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f008 f836 	bl	8008554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d13b      	bne.n	800056e <HAL_ADC_Init+0x2f6>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f001 f8a8 	bl	800164c <ADC_Disable>
 80004fc:	4603      	mov	r3, r0
 80004fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000506:	f003 0310 	and.w	r3, r3, #16
 800050a:	2b00      	cmp	r3, #0
 800050c:	d12f      	bne.n	800056e <HAL_ADC_Init+0x2f6>
 800050e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000512:	2b00      	cmp	r3, #0
 8000514:	d12b      	bne.n	800056e <HAL_ADC_Init+0x2f6>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800051e:	f023 0302 	bic.w	r3, r3, #2
 8000522:	f043 0202 	orr.w	r2, r3, #2
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000538:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000548:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800054a:	4b90      	ldr	r3, [pc, #576]	; (800078c <HAL_ADC_Init+0x514>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a90      	ldr	r2, [pc, #576]	; (8000790 <HAL_ADC_Init+0x518>)
 8000550:	fba2 2303 	umull	r2, r3, r2, r3
 8000554:	0c9a      	lsrs	r2, r3, #18
 8000556:	4613      	mov	r3, r2
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	4413      	add	r3, r2
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000560:	e002      	b.n	8000568 <HAL_ADC_Init+0x2f0>
          {
            wait_loop_index--;
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	3b01      	subs	r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d1f9      	bne.n	8000562 <HAL_ADC_Init+0x2ea>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	2b00      	cmp	r3, #0
 800057a:	d007      	beq.n	800058c <HAL_ADC_Init+0x314>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800058a:	d110      	bne.n	80005ae <HAL_ADC_Init+0x336>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f023 0312 	bic.w	r3, r3, #18
 8000594:	f043 0210 	orr.w	r2, r3, #16
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a0:	f043 0201 	orr.w	r2, r3, #1
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80005a8:	2301      	movs	r3, #1
 80005aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b2:	f003 0310 	and.w	r3, r3, #16
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	f040 80d6 	bne.w	8000768 <HAL_ADC_Init+0x4f0>
 80005bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	f040 80d1 	bne.w	8000768 <HAL_ADC_Init+0x4f0>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	f040 80c9 	bne.w	8000768 <HAL_ADC_Init+0x4f0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80005de:	f043 0202 	orr.w	r2, r3, #2
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80005e6:	4b6b      	ldr	r3, [pc, #428]	; (8000794 <HAL_ADC_Init+0x51c>)
 80005e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	f003 0303 	and.w	r3, r3, #3
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d108      	bne.n	800060e <HAL_ADC_Init+0x396>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	2b01      	cmp	r3, #1
 8000608:	d101      	bne.n	800060e <HAL_ADC_Init+0x396>
 800060a:	2301      	movs	r3, #1
 800060c:	e000      	b.n	8000610 <HAL_ADC_Init+0x398>
 800060e:	2300      	movs	r3, #0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d11c      	bne.n	800064e <HAL_ADC_Init+0x3d6>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000614:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000616:	2b00      	cmp	r3, #0
 8000618:	d010      	beq.n	800063c <HAL_ADC_Init+0x3c4>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	f003 0303 	and.w	r3, r3, #3
 8000622:	2b01      	cmp	r3, #1
 8000624:	d107      	bne.n	8000636 <HAL_ADC_Init+0x3be>
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	2b01      	cmp	r3, #1
 8000630:	d101      	bne.n	8000636 <HAL_ADC_Init+0x3be>
 8000632:	2301      	movs	r3, #1
 8000634:	e000      	b.n	8000638 <HAL_ADC_Init+0x3c0>
 8000636:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000638:	2b00      	cmp	r3, #0
 800063a:	d108      	bne.n	800064e <HAL_ADC_Init+0x3d6>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800063c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	431a      	orrs	r2, r3
 800064a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800064c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7e5b      	ldrb	r3, [r3, #25]
 8000652:	035b      	lsls	r3, r3, #13
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000658:	2a01      	cmp	r2, #1
 800065a:	d002      	beq.n	8000662 <HAL_ADC_Init+0x3ea>
 800065c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000660:	e000      	b.n	8000664 <HAL_ADC_Init+0x3ec>
 8000662:	2200      	movs	r2, #0
 8000664:	431a      	orrs	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	431a      	orrs	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	4313      	orrs	r3, r2
 8000672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000674:	4313      	orrs	r3, r2
 8000676:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d11b      	bne.n	80006ba <HAL_ADC_Init+0x442>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	7e5b      	ldrb	r3, [r3, #25]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d109      	bne.n	800069e <HAL_ADC_Init+0x426>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068e:	3b01      	subs	r3, #1
 8000690:	045a      	lsls	r2, r3, #17
 8000692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000694:	4313      	orrs	r3, r2
 8000696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069a:	663b      	str	r3, [r7, #96]	; 0x60
 800069c:	e00d      	b.n	80006ba <HAL_ADC_Init+0x442>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80006a6:	f043 0220 	orr.w	r2, r3, #32
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	f043 0201 	orr.w	r2, r3, #1
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d007      	beq.n	80006d2 <HAL_ADC_Init+0x45a>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ca:	4313      	orrs	r3, r2
 80006cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80006ce:	4313      	orrs	r3, r2
 80006d0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	f003 030c 	and.w	r3, r3, #12
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d114      	bne.n	800070a <HAL_ADC_Init+0x492>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	6812      	ldr	r2, [r2, #0]
 80006ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006ee:	f023 0302 	bic.w	r3, r3, #2
 80006f2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	7e1b      	ldrb	r3, [r3, #24]
 80006f8:	039a      	lsls	r2, r3, #14
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4313      	orrs	r3, r2
 8000704:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000706:	4313      	orrs	r3, r2
 8000708:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	68da      	ldr	r2, [r3, #12]
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <HAL_ADC_Init+0x520>)
 8000712:	4013      	ands	r3, r2
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	6812      	ldr	r2, [r2, #0]
 8000718:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800071a:	430b      	orrs	r3, r1
 800071c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d10c      	bne.n	8000740 <HAL_ADC_Init+0x4c8>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072c:	f023 010f 	bic.w	r1, r3, #15
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	430a      	orrs	r2, r1
 800073c:	631a      	str	r2, [r3, #48]	; 0x30
 800073e:	e007      	b.n	8000750 <HAL_ADC_Init+0x4d8>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f022 020f 	bic.w	r2, r2, #15
 800074e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2200      	movs	r2, #0
 8000754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	f023 0303 	bic.w	r3, r3, #3
 800075e:	f043 0201 	orr.w	r2, r3, #1
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	641a      	str	r2, [r3, #64]	; 0x40
 8000766:	e00a      	b.n	800077e <HAL_ADC_Init+0x506>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f023 0312 	bic.w	r3, r3, #18
 8000770:	f043 0210 	orr.w	r2, r3, #16
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000778:	2301      	movs	r3, #1
 800077a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800077e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000782:	4618      	mov	r0, r3
 8000784:	3768      	adds	r7, #104	; 0x68
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000000c 	.word	0x2000000c
 8000790:	431bde83 	.word	0x431bde83
 8000794:	50000300 	.word	0x50000300
 8000798:	fff0c007 	.word	0xfff0c007

0800079c <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007b0:	d004      	beq.n	80007bc <HAL_ADC_Start_IT+0x20>
 80007b2:	f240 71f7 	movw	r1, #2039	; 0x7f7
 80007b6:	484a      	ldr	r0, [pc, #296]	; (80008e0 <HAL_ADC_Start_IT+0x144>)
 80007b8:	f008 f92d 	bl	8008a16 <assert_failed>
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f040 8083 	bne.w	80008d2 <HAL_ADC_Start_IT+0x136>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d101      	bne.n	80007da <HAL_ADC_Start_IT+0x3e>
 80007d6:	2302      	movs	r3, #2
 80007d8:	e07e      	b.n	80008d8 <HAL_ADC_Start_IT+0x13c>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2201      	movs	r2, #1
 80007de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 fed4 	bl	8001590 <ADC_Enable>
 80007e8:	4603      	mov	r3, r0
 80007ea:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d16a      	bne.n	80008c8 <HAL_ADC_Start_IT+0x12c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80007fa:	f023 0301 	bic.w	r3, r3, #1
 80007fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800081c:	2b00      	cmp	r3, #0
 800081e:	d007      	beq.n	8000830 <HAL_ADC_Start_IT+0x94>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000828:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800083c:	d106      	bne.n	800084c <HAL_ADC_Start_IT+0xb0>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f023 0206 	bic.w	r2, r3, #6
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	645a      	str	r2, [r3, #68]	; 0x44
 800084a:	e002      	b.n	8000852 <HAL_ADC_Start_IT+0xb6>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2200      	movs	r2, #0
 8000850:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	221c      	movs	r2, #28
 8000860:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	2b08      	cmp	r3, #8
 8000868:	d110      	bne.n	800088c <HAL_ADC_Start_IT+0xf0>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	685a      	ldr	r2, [r3, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f022 0204 	bic.w	r2, r2, #4
 8000878:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f042 0208 	orr.w	r2, r2, #8
 8000888:	605a      	str	r2, [r3, #4]
          break;
 800088a:	e008      	b.n	800089e <HAL_ADC_Start_IT+0x102>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f042 020c 	orr.w	r2, r2, #12
 800089a:	605a      	str	r2, [r3, #4]
          break;
 800089c:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d107      	bne.n	80008b6 <HAL_ADC_Start_IT+0x11a>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f022 0210 	bic.w	r2, r2, #16
 80008b4:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f042 0204 	orr.w	r2, r2, #4
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	e006      	b.n	80008d6 <HAL_ADC_Start_IT+0x13a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80008d0:	e001      	b.n	80008d6 <HAL_ADC_Start_IT+0x13a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80008d2:	2302      	movs	r3, #2
 80008d4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	08008e28 	.word	0x08008e28

080008e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008f4:	d004      	beq.n	8000900 <HAL_ADC_GetValue+0x1c>
 80008f6:	f640 21f1 	movw	r1, #2801	; 0xaf1
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <HAL_ADC_GetValue+0x2c>)
 80008fc:	f008 f88b 	bl	8008a16 <assert_failed>

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	08008e28 	.word	0x08008e28

08000914 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000930:	d004      	beq.n	800093c <HAL_ADC_IRQHandler+0x28>
 8000932:	f44f 6133 	mov.w	r1, #2864	; 0xb30
 8000936:	4880      	ldr	r0, [pc, #512]	; (8000b38 <HAL_ADC_IRQHandler+0x224>)
 8000938:	f008 f86d 	bl	8008a16 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	7e5b      	ldrb	r3, [r3, #25]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d008      	beq.n	8000956 <HAL_ADC_IRQHandler+0x42>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7e5b      	ldrb	r3, [r3, #25]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d004      	beq.n	8000956 <HAL_ADC_IRQHandler+0x42>
 800094c:	f640 3131 	movw	r1, #2865	; 0xb31
 8000950:	4879      	ldr	r0, [pc, #484]	; (8000b38 <HAL_ADC_IRQHandler+0x224>)
 8000952:	f008 f860 	bl	8008a16 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	2b04      	cmp	r3, #4
 800095c:	d008      	beq.n	8000970 <HAL_ADC_IRQHandler+0x5c>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	2b08      	cmp	r3, #8
 8000964:	d004      	beq.n	8000970 <HAL_ADC_IRQHandler+0x5c>
 8000966:	f640 3132 	movw	r1, #2866	; 0xb32
 800096a:	4873      	ldr	r0, [pc, #460]	; (8000b38 <HAL_ADC_IRQHandler+0x224>)
 800096c:	f008 f853 	bl	8008a16 <assert_failed>
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	2b04      	cmp	r3, #4
 800097c:	d106      	bne.n	800098c <HAL_ADC_IRQHandler+0x78>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	2b04      	cmp	r3, #4
 800098a:	d00d      	beq.n	80009a8 <HAL_ADC_IRQHandler+0x94>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000996:	2b08      	cmp	r3, #8
 8000998:	d15e      	bne.n	8000a58 <HAL_ADC_IRQHandler+0x144>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 0308 	and.w	r3, r3, #8
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d157      	bne.n	8000a58 <HAL_ADC_IRQHandler+0x144>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	f003 0310 	and.w	r3, r3, #16
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d105      	bne.n	80009c0 <HAL_ADC_IRQHandler+0xac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d139      	bne.n	8000a4a <HAL_ADC_IRQHandler+0x136>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d134      	bne.n	8000a4a <HAL_ADC_IRQHandler+0x136>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	2b08      	cmp	r3, #8
 80009ec:	d12d      	bne.n	8000a4a <HAL_ADC_IRQHandler+0x136>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d11a      	bne.n	8000a32 <HAL_ADC_IRQHandler+0x11e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f022 020c 	bic.w	r2, r2, #12
 8000a0a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d112      	bne.n	8000a4a <HAL_ADC_IRQHandler+0x136>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f043 0201 	orr.w	r2, r3, #1
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000a30:	e00b      	b.n	8000a4a <HAL_ADC_IRQHandler+0x136>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f043 0210 	orr.w	r2, r3, #16
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f043 0201 	orr.w	r2, r3, #1
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fbf6 	bl	800023c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	220c      	movs	r2, #12
 8000a56:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f003 0320 	and.w	r3, r3, #32
 8000a62:	2b20      	cmp	r3, #32
 8000a64:	d106      	bne.n	8000a74 <HAL_ADC_IRQHandler+0x160>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 0320 	and.w	r3, r3, #32
 8000a70:	2b20      	cmp	r3, #32
 8000a72:	d00d      	beq.n	8000a90 <HAL_ADC_IRQHandler+0x17c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000a7e:	2b40      	cmp	r3, #64	; 0x40
 8000a80:	d16f      	bne.n	8000b62 <HAL_ADC_IRQHandler+0x24e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8c:	2b40      	cmp	r3, #64	; 0x40
 8000a8e:	d168      	bne.n	8000b62 <HAL_ADC_IRQHandler+0x24e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d010      	beq.n	8000ad4 <HAL_ADC_IRQHandler+0x1c0>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14b      	bne.n	8000b54 <HAL_ADC_IRQHandler+0x240>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d144      	bne.n	8000b54 <HAL_ADC_IRQHandler+0x240>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d13f      	bne.n	8000b54 <HAL_ADC_IRQHandler+0x240>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ade:	2b40      	cmp	r3, #64	; 0x40
 8000ae0:	d138      	bne.n	8000b54 <HAL_ADC_IRQHandler+0x240>
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d12f      	bne.n	8000b54 <HAL_ADC_IRQHandler+0x240>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d11c      	bne.n	8000b3c <HAL_ADC_IRQHandler+0x228>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000b10:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d114      	bne.n	8000b54 <HAL_ADC_IRQHandler+0x240>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f043 0201 	orr.w	r2, r3, #1
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	641a      	str	r2, [r3, #64]	; 0x40
 8000b36:	e00d      	b.n	8000b54 <HAL_ADC_IRQHandler+0x240>
 8000b38:	08008e28 	.word	0x08008e28
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	f043 0210 	orr.w	r2, r3, #16
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4c:	f043 0201 	orr.w	r2, r3, #1
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 f8cb 	bl	8000cf0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2260      	movs	r2, #96	; 0x60
 8000b60:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6c:	2b80      	cmp	r3, #128	; 0x80
 8000b6e:	d113      	bne.n	8000b98 <HAL_ADC_IRQHandler+0x284>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	2b80      	cmp	r3, #128	; 0x80
 8000b7c:	d10c      	bne.n	8000b98 <HAL_ADC_IRQHandler+0x284>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fb60 	bl	8000250 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ba6:	d115      	bne.n	8000bd4 <HAL_ADC_IRQHandler+0x2c0>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bb6:	d10d      	bne.n	8000bd4 <HAL_ADC_IRQHandler+0x2c0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 f8a7 	bl	8000d18 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd2:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000be2:	d115      	bne.n	8000c10 <HAL_ADC_IRQHandler+0x2fc>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bf2:	d10d      	bne.n	8000c10 <HAL_ADC_IRQHandler+0x2fc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 f893 	bl	8000d2c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c0e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0310 	and.w	r3, r3, #16
 8000c1a:	2b10      	cmp	r3, #16
 8000c1c:	d13d      	bne.n	8000c9a <HAL_ADC_IRQHandler+0x386>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 0310 	and.w	r3, r3, #16
 8000c28:	2b10      	cmp	r3, #16
 8000c2a:	d136      	bne.n	8000c9a <HAL_ADC_IRQHandler+0x386>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d102      	bne.n	8000c3a <HAL_ADC_IRQHandler+0x326>
    {
      overrun_error = 1U;
 8000c34:	2301      	movs	r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	e019      	b.n	8000c6e <HAL_ADC_IRQHandler+0x35a>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c3a:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <HAL_ADC_IRQHandler+0x3d8>)
 8000c3c:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 031f 	and.w	r3, r3, #31
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d109      	bne.n	8000c5e <HAL_ADC_IRQHandler+0x34a>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d10a      	bne.n	8000c6e <HAL_ADC_IRQHandler+0x35a>
        {
          overrun_error = 1U;  
 8000c58:	2301      	movs	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	e007      	b.n	8000c6e <HAL_ADC_IRQHandler+0x35a>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_ADC_IRQHandler+0x35a>
        {
          overrun_error = 1U;  
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d10e      	bne.n	8000c92 <HAL_ADC_IRQHandler+0x37e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c84:	f043 0202 	orr.w	r2, r3, #2
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fae9 	bl	8000264 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2210      	movs	r2, #16
 8000c98:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ca8:	d11b      	bne.n	8000ce2 <HAL_ADC_IRQHandler+0x3ce>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cb8:	d113      	bne.n	8000ce2 <HAL_ADC_IRQHandler+0x3ce>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f043 0208 	orr.w	r2, r3, #8
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cda:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f000 f811 	bl	8000d04 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	50000300 	.word	0x50000300

08000cf0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b09a      	sub	sp, #104	; 0x68
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d5c:	d004      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x28>
 8000d5e:	f241 517c 	movw	r1, #5500	; 0x157c
 8000d62:	4897      	ldr	r0, [pc, #604]	; (8000fc0 <HAL_ADC_ConfigChannel+0x280>)
 8000d64:	f007 fe57 	bl	8008a16 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d040      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d03c      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d038      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d034      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b05      	cmp	r3, #5
 8000d8e:	d030      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b06      	cmp	r3, #6
 8000d96:	d02c      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b07      	cmp	r3, #7
 8000d9e:	d028      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	d024      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b09      	cmp	r3, #9
 8000dae:	d020      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b0a      	cmp	r3, #10
 8000db6:	d01c      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b0b      	cmp	r3, #11
 8000dbe:	d018      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b0c      	cmp	r3, #12
 8000dc6:	d014      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b0d      	cmp	r3, #13
 8000dce:	d010      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b0e      	cmp	r3, #14
 8000dd6:	d00c      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d008      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b10      	cmp	r3, #16
 8000de6:	d004      	beq.n	8000df2 <HAL_ADC_ConfigChannel+0xb2>
 8000de8:	f241 517d 	movw	r1, #5501	; 0x157d
 8000dec:	4874      	ldr	r0, [pc, #464]	; (8000fc0 <HAL_ADC_ConfigChannel+0x280>)
 8000dee:	f007 fe12 	bl	8008a16 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d020      	beq.n	8000e3c <HAL_ADC_ConfigChannel+0xfc>
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d01c      	beq.n	8000e3c <HAL_ADC_ConfigChannel+0xfc>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d018      	beq.n	8000e3c <HAL_ADC_ConfigChannel+0xfc>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d014      	beq.n	8000e3c <HAL_ADC_ConfigChannel+0xfc>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d010      	beq.n	8000e3c <HAL_ADC_ConfigChannel+0xfc>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2b05      	cmp	r3, #5
 8000e20:	d00c      	beq.n	8000e3c <HAL_ADC_ConfigChannel+0xfc>
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d008      	beq.n	8000e3c <HAL_ADC_ConfigChannel+0xfc>
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2b07      	cmp	r3, #7
 8000e30:	d004      	beq.n	8000e3c <HAL_ADC_ConfigChannel+0xfc>
 8000e32:	f241 517e 	movw	r1, #5502	; 0x157e
 8000e36:	4862      	ldr	r0, [pc, #392]	; (8000fc0 <HAL_ADC_ConfigChannel+0x280>)
 8000e38:	f007 fded 	bl	8008a16 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d008      	beq.n	8000e56 <HAL_ADC_ConfigChannel+0x116>
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d004      	beq.n	8000e56 <HAL_ADC_ConfigChannel+0x116>
 8000e4c:	f241 517f 	movw	r1, #5503	; 0x157f
 8000e50:	485b      	ldr	r0, [pc, #364]	; (8000fc0 <HAL_ADC_ConfigChannel+0x280>)
 8000e52:	f007 fde0 	bl	8008a16 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d014      	beq.n	8000e88 <HAL_ADC_ConfigChannel+0x148>
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d010      	beq.n	8000e88 <HAL_ADC_ConfigChannel+0x148>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d00c      	beq.n	8000e88 <HAL_ADC_ConfigChannel+0x148>
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d008      	beq.n	8000e88 <HAL_ADC_ConfigChannel+0x148>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d004      	beq.n	8000e88 <HAL_ADC_ConfigChannel+0x148>
 8000e7e:	f44f 51ac 	mov.w	r1, #5504	; 0x1580
 8000e82:	484f      	ldr	r0, [pc, #316]	; (8000fc0 <HAL_ADC_ConfigChannel+0x280>)
 8000e84:	f007 fdc7 	bl	8008a16 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	f003 0318 	and.w	r3, r3, #24
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d104      	bne.n	8000ea0 <HAL_ADC_ConfigChannel+0x160>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e9e:	d326      	bcc.n	8000eee <HAL_ADC_ConfigChannel+0x1ae>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	f003 0318 	and.w	r3, r3, #24
 8000eaa:	2b08      	cmp	r3, #8
 8000eac:	d104      	bne.n	8000eb8 <HAL_ADC_ConfigChannel+0x178>
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eb6:	d31a      	bcc.n	8000eee <HAL_ADC_ConfigChannel+0x1ae>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	f003 0318 	and.w	r3, r3, #24
 8000ec2:	2b10      	cmp	r3, #16
 8000ec4:	d103      	bne.n	8000ece <HAL_ADC_ConfigChannel+0x18e>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	2bff      	cmp	r3, #255	; 0xff
 8000ecc:	d90f      	bls.n	8000eee <HAL_ADC_ConfigChannel+0x1ae>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	f003 0318 	and.w	r3, r3, #24
 8000ed8:	2b18      	cmp	r3, #24
 8000eda:	d103      	bne.n	8000ee4 <HAL_ADC_ConfigChannel+0x1a4>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ee2:	d904      	bls.n	8000eee <HAL_ADC_ConfigChannel+0x1ae>
 8000ee4:	f241 5181 	movw	r1, #5505	; 0x1581
 8000ee8:	4835      	ldr	r0, [pc, #212]	; (8000fc0 <HAL_ADC_ConfigChannel+0x280>)
 8000eea:	f007 fd94 	bl	8008a16 <assert_failed>
  
  
  /* Verification of channel number: Channels 1 to 14 are available in        */  
  /* differential mode. Channels 15U, 16U, 17U, 18 can be used only in           */
  /* single-ended mode.                                                       */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d066      	beq.n	8000fc4 <HAL_ADC_ConfigChannel+0x284>
  {
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	f000 809f 	beq.w	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	f000 809a 	beq.w	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	f000 8095 	beq.w	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	f000 8090 	beq.w	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b05      	cmp	r3, #5
 8000f24:	f000 808b 	beq.w	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b06      	cmp	r3, #6
 8000f2e:	f000 8086 	beq.w	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b07      	cmp	r3, #7
 8000f38:	f000 8081 	beq.w	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d07c      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b09      	cmp	r3, #9
 8000f4a:	d078      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b0a      	cmp	r3, #10
 8000f52:	d074      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b0b      	cmp	r3, #11
 8000f5a:	d070      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b0c      	cmp	r3, #12
 8000f62:	d06c      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b0d      	cmp	r3, #13
 8000f6a:	d068      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b0e      	cmp	r3, #14
 8000f72:	d064      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d060      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b10      	cmp	r3, #16
 8000f82:	d05c      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b11      	cmp	r3, #17
 8000f8a:	d058      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b12      	cmp	r3, #18
 8000f92:	d054      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d050      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b11      	cmp	r3, #17
 8000fa2:	d04c      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b11      	cmp	r3, #17
 8000faa:	d048      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b11      	cmp	r3, #17
 8000fb2:	d044      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000fb4:	f241 5189 	movw	r1, #5513	; 0x1589
 8000fb8:	4801      	ldr	r0, [pc, #4]	; (8000fc0 <HAL_ADC_ConfigChannel+0x280>)
 8000fba:	f007 fd2c 	bl	8008a16 <assert_failed>
 8000fbe:	e03e      	b.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000fc0:	08008e28 	.word	0x08008e28
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d038      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d034      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d030      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d02c      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b05      	cmp	r3, #5
 8000fea:	d028      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b06      	cmp	r3, #6
 8000ff2:	d024      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b07      	cmp	r3, #7
 8000ffa:	d020      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b08      	cmp	r3, #8
 8001002:	d01c      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b09      	cmp	r3, #9
 800100a:	d018      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b0a      	cmp	r3, #10
 8001012:	d014      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b0b      	cmp	r3, #11
 800101a:	d010      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b0c      	cmp	r3, #12
 8001022:	d00c      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b0d      	cmp	r3, #13
 800102a:	d008      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b0e      	cmp	r3, #14
 8001032:	d004      	beq.n	800103e <HAL_ADC_ConfigChannel+0x2fe>
 8001034:	f241 518d 	movw	r1, #5517	; 0x158d
 8001038:	489e      	ldr	r0, [pc, #632]	; (80012b4 <HAL_ADC_ConfigChannel+0x574>)
 800103a:	f007 fcec 	bl	8008a16 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001044:	2b01      	cmp	r3, #1
 8001046:	d101      	bne.n	800104c <HAL_ADC_ConfigChannel+0x30c>
 8001048:	2302      	movs	r3, #2
 800104a:	e297      	b.n	800157c <HAL_ADC_ConfigChannel+0x83c>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	2b00      	cmp	r3, #0
 8001060:	f040 827b 	bne.w	800155a <HAL_ADC_ConfigChannel+0x81a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b04      	cmp	r3, #4
 800106a:	d81c      	bhi.n	80010a6 <HAL_ADC_ConfigChannel+0x366>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	461a      	mov	r2, r3
 8001080:	231f      	movs	r3, #31
 8001082:	4093      	lsls	r3, r2
 8001084:	43db      	mvns	r3, r3
 8001086:	4019      	ands	r1, r3
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa00 f203 	lsl.w	r2, r0, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	631a      	str	r2, [r3, #48]	; 0x30
 80010a4:	e063      	b.n	800116e <HAL_ADC_ConfigChannel+0x42e>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b09      	cmp	r3, #9
 80010ac:	d81e      	bhi.n	80010ec <HAL_ADC_ConfigChannel+0x3ac>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	3b1e      	subs	r3, #30
 80010c2:	221f      	movs	r2, #31
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	4019      	ands	r1, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	3b1e      	subs	r3, #30
 80010de:	fa00 f203 	lsl.w	r2, r0, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34
 80010ea:	e040      	b.n	800116e <HAL_ADC_ConfigChannel+0x42e>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b0e      	cmp	r3, #14
 80010f2:	d81e      	bhi.n	8001132 <HAL_ADC_ConfigChannel+0x3f2>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	3b3c      	subs	r3, #60	; 0x3c
 8001108:	221f      	movs	r2, #31
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	4019      	ands	r1, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	3b3c      	subs	r3, #60	; 0x3c
 8001124:	fa00 f203 	lsl.w	r2, r0, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	430a      	orrs	r2, r1
 800112e:	639a      	str	r2, [r3, #56]	; 0x38
 8001130:	e01d      	b.n	800116e <HAL_ADC_ConfigChannel+0x42e>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	3b5a      	subs	r3, #90	; 0x5a
 8001146:	221f      	movs	r2, #31
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	4019      	ands	r1, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	3b5a      	subs	r3, #90	; 0x5a
 8001162:	fa00 f203 	lsl.w	r2, r0, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 030c 	and.w	r3, r3, #12
 8001178:	2b00      	cmp	r3, #0
 800117a:	f040 80e8 	bne.w	800134e <HAL_ADC_ConfigChannel+0x60e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b09      	cmp	r3, #9
 8001184:	d91c      	bls.n	80011c0 <HAL_ADC_ConfigChannel+0x480>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6999      	ldr	r1, [r3, #24]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	3b1e      	subs	r3, #30
 8001198:	2207      	movs	r2, #7
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	4019      	ands	r1, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	6898      	ldr	r0, [r3, #8]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	3b1e      	subs	r3, #30
 80011b2:	fa00 f203 	lsl.w	r2, r0, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	619a      	str	r2, [r3, #24]
 80011be:	e019      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x4b4>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6959      	ldr	r1, [r3, #20]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4613      	mov	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	2207      	movs	r2, #7
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	4019      	ands	r1, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	6898      	ldr	r0, [r3, #8]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	695a      	ldr	r2, [r3, #20]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	08db      	lsrs	r3, r3, #3
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	3b01      	subs	r3, #1
 8001212:	2b03      	cmp	r3, #3
 8001214:	d852      	bhi.n	80012bc <HAL_ADC_ConfigChannel+0x57c>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <HAL_ADC_ConfigChannel+0x4dc>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	0800122d 	.word	0x0800122d
 8001220:	0800124f 	.word	0x0800124f
 8001224:	08001271 	.word	0x08001271
 8001228:	08001293 	.word	0x08001293
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <HAL_ADC_ConfigChannel+0x578>)
 8001234:	4013      	ands	r3, r2
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	0691      	lsls	r1, r2, #26
 800123c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800123e:	430a      	orrs	r2, r1
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800124a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800124c:	e082      	b.n	8001354 <HAL_ADC_ConfigChannel+0x614>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_ADC_ConfigChannel+0x578>)
 8001256:	4013      	ands	r3, r2
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	0691      	lsls	r1, r2, #26
 800125e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001260:	430a      	orrs	r2, r1
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800126c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800126e:	e071      	b.n	8001354 <HAL_ADC_ConfigChannel+0x614>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_ADC_ConfigChannel+0x578>)
 8001278:	4013      	ands	r3, r2
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	0691      	lsls	r1, r2, #26
 8001280:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001282:	430a      	orrs	r2, r1
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800128e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001290:	e060      	b.n	8001354 <HAL_ADC_ConfigChannel+0x614>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <HAL_ADC_ConfigChannel+0x578>)
 800129a:	4013      	ands	r3, r2
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	0691      	lsls	r1, r2, #26
 80012a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012a4:	430a      	orrs	r2, r1
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012b0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012b2:	e04f      	b.n	8001354 <HAL_ADC_ConfigChannel+0x614>
 80012b4:	08008e28 	.word	0x08008e28
 80012b8:	83fff000 	.word	0x83fff000
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	069b      	lsls	r3, r3, #26
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d107      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012de:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80012e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	069b      	lsls	r3, r3, #26
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d107      	bne.n	8001304 <HAL_ADC_ConfigChannel+0x5c4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001302:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800130a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	069b      	lsls	r3, r3, #26
 8001314:	429a      	cmp	r2, r3
 8001316:	d107      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x5e8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001326:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800132e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	069b      	lsls	r3, r3, #26
 8001338:	429a      	cmp	r2, r3
 800133a:	d10a      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x612>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800134a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800134c:	e001      	b.n	8001352 <HAL_ADC_ConfigChannel+0x612>
    }

  }
 800134e:	bf00      	nop
 8001350:	e000      	b.n	8001354 <HAL_ADC_ConfigChannel+0x614>
      break;
 8001352:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	2b01      	cmp	r3, #1
 8001360:	d108      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x634>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x634>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <HAL_ADC_ConfigChannel+0x636>
 8001374:	2300      	movs	r3, #0
 8001376:	2b00      	cmp	r3, #0
 8001378:	f040 80fa 	bne.w	8001570 <HAL_ADC_ConfigChannel+0x830>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d00f      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x664>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2201      	movs	r2, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	400a      	ands	r2, r1
 800139e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80013a2:	e049      	b.n	8001438 <HAL_ADC_ConfigChannel+0x6f8>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2201      	movs	r2, #1
 80013b2:	409a      	lsls	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b09      	cmp	r3, #9
 80013c4:	d91c      	bls.n	8001400 <HAL_ADC_ConfigChannel+0x6c0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6999      	ldr	r1, [r3, #24]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	3b1b      	subs	r3, #27
 80013d8:	2207      	movs	r2, #7
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	4019      	ands	r1, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	6898      	ldr	r0, [r3, #8]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	3b1b      	subs	r3, #27
 80013f2:	fa00 f203 	lsl.w	r2, r0, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	619a      	str	r2, [r3, #24]
 80013fe:	e01b      	b.n	8001438 <HAL_ADC_ConfigChannel+0x6f8>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6959      	ldr	r1, [r3, #20]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	2207      	movs	r2, #7
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	4019      	ands	r1, r3
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	6898      	ldr	r0, [r3, #8]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	fa00 f203 	lsl.w	r2, r0, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001438:	4b52      	ldr	r3, [pc, #328]	; (8001584 <HAL_ADC_ConfigChannel+0x844>)
 800143a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b10      	cmp	r3, #16
 8001442:	d105      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x710>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800144c:	2b00      	cmp	r3, #0
 800144e:	d014      	beq.n	800147a <HAL_ADC_ConfigChannel+0x73a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001454:	2b11      	cmp	r3, #17
 8001456:	d105      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x724>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00a      	beq.n	800147a <HAL_ADC_ConfigChannel+0x73a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001468:	2b12      	cmp	r3, #18
 800146a:	f040 8081 	bne.w	8001570 <HAL_ADC_ConfigChannel+0x830>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800146e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001476:	2b00      	cmp	r3, #0
 8001478:	d17a      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x830>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d108      	bne.n	800149e <HAL_ADC_ConfigChannel+0x75e>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b01      	cmp	r3, #1
 8001498:	d101      	bne.n	800149e <HAL_ADC_ConfigChannel+0x75e>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x760>
 800149e:	2300      	movs	r3, #0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d150      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x806>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014a4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d010      	beq.n	80014cc <HAL_ADC_ConfigChannel+0x78c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d107      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x786>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x786>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x788>
 80014c6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d13c      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x806>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b10      	cmp	r3, #16
 80014d2:	d11d      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x7d0>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014dc:	d118      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x7d0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80014de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <HAL_ADC_ConfigChannel+0x848>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a27      	ldr	r2, [pc, #156]	; (800158c <HAL_ADC_ConfigChannel+0x84c>)
 80014f0:	fba2 2303 	umull	r2, r3, r2, r3
 80014f4:	0c9a      	lsrs	r2, r3, #18
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001500:	e002      	b.n	8001508 <HAL_ADC_ConfigChannel+0x7c8>
          {
            wait_loop_index--;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3b01      	subs	r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f9      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x7c2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800150e:	e02e      	b.n	800156e <HAL_ADC_ConfigChannel+0x82e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b11      	cmp	r3, #17
 8001516:	d10b      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x7f0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001520:	d106      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x7f0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800152a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800152c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800152e:	e01e      	b.n	800156e <HAL_ADC_ConfigChannel+0x82e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b12      	cmp	r3, #18
 8001536:	d11a      	bne.n	800156e <HAL_ADC_ConfigChannel+0x82e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001542:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001544:	e013      	b.n	800156e <HAL_ADC_ConfigChannel+0x82e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f043 0220 	orr.w	r2, r3, #32
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001558:	e00a      	b.n	8001570 <HAL_ADC_ConfigChannel+0x830>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f043 0220 	orr.w	r2, r3, #32
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800156c:	e000      	b.n	8001570 <HAL_ADC_ConfigChannel+0x830>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800156e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001578:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800157c:	4618      	mov	r0, r3
 800157e:	3768      	adds	r7, #104	; 0x68
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	50000300 	.word	0x50000300
 8001588:	2000000c 	.word	0x2000000c
 800158c:	431bde83 	.word	0x431bde83

08001590 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d108      	bne.n	80015bc <ADC_Enable+0x2c>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <ADC_Enable+0x2c>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <ADC_Enable+0x2e>
 80015bc:	2300      	movs	r3, #0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d13c      	bne.n	800163c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <ADC_Enable+0xb8>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00d      	beq.n	80015ec <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	f043 0210 	orr.w	r2, r3, #16
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	f043 0201 	orr.w	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e028      	b.n	800163e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0201 	orr.w	r2, r2, #1
 80015fa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80015fc:	f7fe fe12 	bl	8000224 <HAL_GetTick>
 8001600:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001602:	e014      	b.n	800162e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001604:	f7fe fe0e 	bl	8000224 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d90d      	bls.n	800162e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f043 0210 	orr.w	r2, r3, #16
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f043 0201 	orr.w	r2, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e007      	b.n	800163e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b01      	cmp	r3, #1
 800163a:	d1e3      	bne.n	8001604 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	8000003f 	.word	0x8000003f

0800164c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d108      	bne.n	8001678 <ADC_Disable+0x2c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <ADC_Disable+0x2c>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <ADC_Disable+0x2e>
 8001678:	2300      	movs	r3, #0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d040      	beq.n	8001700 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 030d 	and.w	r3, r3, #13
 8001688:	2b01      	cmp	r3, #1
 800168a:	d10f      	bne.n	80016ac <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0202 	orr.w	r2, r2, #2
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2203      	movs	r2, #3
 80016a2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80016a4:	f7fe fdbe 	bl	8000224 <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80016aa:	e022      	b.n	80016f2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f043 0210 	orr.w	r2, r3, #16
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016bc:	f043 0201 	orr.w	r2, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e01c      	b.n	8001702 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016c8:	f7fe fdac 	bl	8000224 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d90d      	bls.n	80016f2 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f043 0210 	orr.w	r2, r3, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f043 0201 	orr.w	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e007      	b.n	8001702 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d0e3      	beq.n	80016c8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001728:	4013      	ands	r3, r2
 800172a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	60d3      	str	r3, [r2, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <__NVIC_GetPriorityGrouping+0x18>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	f003 0307 	and.w	r3, r3, #7
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	db0b      	blt.n	800179a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	4907      	ldr	r1, [pc, #28]	; (80017a8 <__NVIC_EnableIRQ+0x38>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	2001      	movs	r0, #1
 8001792:	fa00 f202 	lsl.w	r2, r0, r2
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000e100 	.word	0xe000e100

080017ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db10      	blt.n	80017e0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4909      	ldr	r1, [pc, #36]	; (80017ec <__NVIC_DisableIRQ+0x40>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	3320      	adds	r3, #32
 80017d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017dc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	; (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b07      	cmp	r3, #7
 80018b8:	d00f      	beq.n	80018da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b06      	cmp	r3, #6
 80018be:	d00c      	beq.n	80018da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d009      	beq.n	80018da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d006      	beq.n	80018da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d003      	beq.n	80018da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80018d2:	21ac      	movs	r1, #172	; 0xac
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80018d6:	f007 f89e 	bl	8008a16 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ff16 	bl	800170c <__NVIC_SetPriorityGrouping>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	08008e64 	.word	0x08008e64

080018ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b0f      	cmp	r3, #15
 8001902:	d903      	bls.n	800190c <HAL_NVIC_SetPriority+0x20>
 8001904:	21c4      	movs	r1, #196	; 0xc4
 8001906:	480e      	ldr	r0, [pc, #56]	; (8001940 <HAL_NVIC_SetPriority+0x54>)
 8001908:	f007 f885 	bl	8008a16 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2b0f      	cmp	r3, #15
 8001910:	d903      	bls.n	800191a <HAL_NVIC_SetPriority+0x2e>
 8001912:	21c5      	movs	r1, #197	; 0xc5
 8001914:	480a      	ldr	r0, [pc, #40]	; (8001940 <HAL_NVIC_SetPriority+0x54>)
 8001916:	f007 f87e 	bl	8008a16 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800191a:	f7ff ff1b 	bl	8001754 <__NVIC_GetPriorityGrouping>
 800191e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	6978      	ldr	r0, [r7, #20]
 8001926:	f7ff ff8d 	bl	8001844 <NVIC_EncodePriority>
 800192a:	4602      	mov	r2, r0
 800192c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ff5c 	bl	80017f0 <__NVIC_SetPriority>
}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	08008e64 	.word	0x08008e64

08001944 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	da03      	bge.n	800195e <HAL_NVIC_EnableIRQ+0x1a>
 8001956:	21d8      	movs	r1, #216	; 0xd8
 8001958:	4805      	ldr	r0, [pc, #20]	; (8001970 <HAL_NVIC_EnableIRQ+0x2c>)
 800195a:	f007 f85c 	bl	8008a16 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff04 	bl	8001770 <__NVIC_EnableIRQ>
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	08008e64 	.word	0x08008e64

08001974 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	da03      	bge.n	800198e <HAL_NVIC_DisableIRQ+0x1a>
 8001986:	21e8      	movs	r1, #232	; 0xe8
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <HAL_NVIC_DisableIRQ+0x2c>)
 800198a:	f007 f844 	bl	8008a16 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ff0a 	bl	80017ac <__NVIC_DisableIRQ>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	08008e64 	.word	0x08008e64

080019a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0a5      	b.n	8001b02 <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a54      	ldr	r2, [pc, #336]	; (8001b0c <HAL_CRC_Init+0x168>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d003      	beq.n	80019c8 <HAL_CRC_Init+0x24>
 80019c0:	2170      	movs	r1, #112	; 0x70
 80019c2:	4853      	ldr	r0, [pc, #332]	; (8001b10 <HAL_CRC_Init+0x16c>)
 80019c4:	f007 f827 	bl	8008a16 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7f5b      	ldrb	r3, [r3, #29]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d105      	bne.n	80019de <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f006 fe23 	bl	8008624 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2202      	movs	r2, #2
 80019e2:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	791b      	ldrb	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d007      	beq.n	80019fc <HAL_CRC_Init+0x58>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	791b      	ldrb	r3, [r3, #4]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d003      	beq.n	80019fc <HAL_CRC_Init+0x58>
 80019f4:	217e      	movs	r1, #126	; 0x7e
 80019f6:	4846      	ldr	r0, [pc, #280]	; (8001b10 <HAL_CRC_Init+0x16c>)
 80019f8:	f007 f80d 	bl	8008a16 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	791b      	ldrb	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10c      	bne.n	8001a1e <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a42      	ldr	r2, [pc, #264]	; (8001b14 <HAL_CRC_Init+0x170>)
 8001a0a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0218 	bic.w	r2, r2, #24
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	e00c      	b.n	8001a38 <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6899      	ldr	r1, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	461a      	mov	r2, r3
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f875 	bl	8001b18 <HAL_CRCEx_Polynomial_Set>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e064      	b.n	8001b02 <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	795b      	ldrb	r3, [r3, #5]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <HAL_CRC_Init+0xac>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	795b      	ldrb	r3, [r3, #5]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d003      	beq.n	8001a50 <HAL_CRC_Init+0xac>
 8001a48:	2190      	movs	r1, #144	; 0x90
 8001a4a:	4831      	ldr	r0, [pc, #196]	; (8001b10 <HAL_CRC_Init+0x16c>)
 8001a4c:	f006 ffe3 	bl	8008a16 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	795b      	ldrb	r3, [r3, #5]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	611a      	str	r2, [r3, #16]
 8001a62:	e004      	b.n	8001a6e <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6912      	ldr	r2, [r2, #16]
 8001a6c:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00f      	beq.n	8001a96 <HAL_CRC_Init+0xf2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d00b      	beq.n	8001a96 <HAL_CRC_Init+0xf2>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	2b40      	cmp	r3, #64	; 0x40
 8001a84:	d007      	beq.n	8001a96 <HAL_CRC_Init+0xf2>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	2b60      	cmp	r3, #96	; 0x60
 8001a8c:	d003      	beq.n	8001a96 <HAL_CRC_Init+0xf2>
 8001a8e:	219c      	movs	r1, #156	; 0x9c
 8001a90:	481f      	ldr	r0, [pc, #124]	; (8001b10 <HAL_CRC_Init+0x16c>)
 8001a92:	f006 ffc0 	bl	8008a16 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <HAL_CRC_Init+0x120>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b80      	cmp	r3, #128	; 0x80
 8001aba:	d003      	beq.n	8001ac4 <HAL_CRC_Init+0x120>
 8001abc:	21a0      	movs	r1, #160	; 0xa0
 8001abe:	4814      	ldr	r0, [pc, #80]	; (8001b10 <HAL_CRC_Init+0x16c>)
 8001ac0:	f006 ffa9 	bl	8008a16 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d00b      	beq.n	8001afa <HAL_CRC_Init+0x156>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d007      	beq.n	8001afa <HAL_CRC_Init+0x156>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d003      	beq.n	8001afa <HAL_CRC_Init+0x156>
 8001af2:	21a5      	movs	r1, #165	; 0xa5
 8001af4:	4806      	ldr	r0, [pc, #24]	; (8001b10 <HAL_CRC_Init+0x16c>)
 8001af6:	f006 ff8e 	bl	8008a16 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023000 	.word	0x40023000
 8001b10:	08008ea0 	.word	0x08008ea0
 8001b14:	04c11db7 	.word	0x04c11db7

08001b18 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001b28:	231f      	movs	r3, #31
 8001b2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00c      	beq.n	8001b4c <HAL_CRCEx_Polynomial_Set+0x34>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d009      	beq.n	8001b4c <HAL_CRCEx_Polynomial_Set+0x34>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b10      	cmp	r3, #16
 8001b3c:	d006      	beq.n	8001b4c <HAL_CRCEx_Polynomial_Set+0x34>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b18      	cmp	r3, #24
 8001b42:	d003      	beq.n	8001b4c <HAL_CRCEx_Polynomial_Set+0x34>
 8001b44:	215f      	movs	r1, #95	; 0x5f
 8001b46:	483e      	ldr	r0, [pc, #248]	; (8001c40 <HAL_CRCEx_Polynomial_Set+0x128>)
 8001b48:	f006 ff65 	bl	8008a16 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001b4c:	bf00      	nop
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	613a      	str	r2, [r7, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <HAL_CRCEx_Polynomial_Set+0x54>
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	f003 031f 	and.w	r3, r3, #31
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b18      	cmp	r3, #24
 8001b70:	d846      	bhi.n	8001c00 <HAL_CRCEx_Polynomial_Set+0xe8>
 8001b72:	a201      	add	r2, pc, #4	; (adr r2, 8001b78 <HAL_CRCEx_Polynomial_Set+0x60>)
 8001b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b78:	08001c07 	.word	0x08001c07
 8001b7c:	08001c01 	.word	0x08001c01
 8001b80:	08001c01 	.word	0x08001c01
 8001b84:	08001c01 	.word	0x08001c01
 8001b88:	08001c01 	.word	0x08001c01
 8001b8c:	08001c01 	.word	0x08001c01
 8001b90:	08001c01 	.word	0x08001c01
 8001b94:	08001c01 	.word	0x08001c01
 8001b98:	08001bf5 	.word	0x08001bf5
 8001b9c:	08001c01 	.word	0x08001c01
 8001ba0:	08001c01 	.word	0x08001c01
 8001ba4:	08001c01 	.word	0x08001c01
 8001ba8:	08001c01 	.word	0x08001c01
 8001bac:	08001c01 	.word	0x08001c01
 8001bb0:	08001c01 	.word	0x08001c01
 8001bb4:	08001c01 	.word	0x08001c01
 8001bb8:	08001be9 	.word	0x08001be9
 8001bbc:	08001c01 	.word	0x08001c01
 8001bc0:	08001c01 	.word	0x08001c01
 8001bc4:	08001c01 	.word	0x08001c01
 8001bc8:	08001c01 	.word	0x08001c01
 8001bcc:	08001c01 	.word	0x08001c01
 8001bd0:	08001c01 	.word	0x08001c01
 8001bd4:	08001c01 	.word	0x08001c01
 8001bd8:	08001bdd 	.word	0x08001bdd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d913      	bls.n	8001c0a <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001be6:	e010      	b.n	8001c0a <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b07      	cmp	r3, #7
 8001bec:	d90f      	bls.n	8001c0e <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001bf2:	e00c      	b.n	8001c0e <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	2b0f      	cmp	r3, #15
 8001bf8:	d90b      	bls.n	8001c12 <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001bfe:	e008      	b.n	8001c12 <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	75fb      	strb	r3, [r7, #23]
      break;
 8001c04:	e006      	b.n	8001c14 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8001c06:	bf00      	nop
 8001c08:	e004      	b.n	8001c14 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8001c0a:	bf00      	nop
 8001c0c:	e002      	b.n	8001c14 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8001c0e:	bf00      	nop
 8001c10:	e000      	b.n	8001c14 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8001c12:	bf00      	nop
  }
  if (status == HAL_OK)
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10d      	bne.n	8001c36 <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 0118 	bic.w	r1, r3, #24
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	08008ed8 	.word	0x08008ed8

08001c44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d005      	beq.n	8001c66 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	e027      	b.n	8001cb6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 020e 	bic.w	r2, r2, #14
 8001c74:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0201 	bic.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8e:	2101      	movs	r1, #1
 8001c90:	fa01 f202 	lsl.w	r2, r1, r2
 8001c94:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	4798      	blx	r3
    } 
  }
  return status;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cd4:	d013      	beq.n	8001cfe <HAL_GPIO_Init+0x3e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a37      	ldr	r2, [pc, #220]	; (8001db8 <HAL_GPIO_Init+0xf8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00f      	beq.n	8001cfe <HAL_GPIO_Init+0x3e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a36      	ldr	r2, [pc, #216]	; (8001dbc <HAL_GPIO_Init+0xfc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00b      	beq.n	8001cfe <HAL_GPIO_Init+0x3e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a35      	ldr	r2, [pc, #212]	; (8001dc0 <HAL_GPIO_Init+0x100>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d007      	beq.n	8001cfe <HAL_GPIO_Init+0x3e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a34      	ldr	r2, [pc, #208]	; (8001dc4 <HAL_GPIO_Init+0x104>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x3e>
 8001cf6:	21ba      	movs	r1, #186	; 0xba
 8001cf8:	4833      	ldr	r0, [pc, #204]	; (8001dc8 <HAL_GPIO_Init+0x108>)
 8001cfa:	f006 fe8c 	bl	8008a16 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_GPIO_Init+0x54>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	0c1b      	lsrs	r3, r3, #16
 8001d0e:	041b      	lsls	r3, r3, #16
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x5c>
 8001d14:	21bb      	movs	r1, #187	; 0xbb
 8001d16:	482c      	ldr	r0, [pc, #176]	; (8001dc8 <HAL_GPIO_Init+0x108>)
 8001d18:	f006 fe7d 	bl	8008a16 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d035      	beq.n	8001d90 <HAL_GPIO_Init+0xd0>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d031      	beq.n	8001d90 <HAL_GPIO_Init+0xd0>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b11      	cmp	r3, #17
 8001d32:	d02d      	beq.n	8001d90 <HAL_GPIO_Init+0xd0>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d029      	beq.n	8001d90 <HAL_GPIO_Init+0xd0>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b12      	cmp	r3, #18
 8001d42:	d025      	beq.n	8001d90 <HAL_GPIO_Init+0xd0>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4a20      	ldr	r2, [pc, #128]	; (8001dcc <HAL_GPIO_Init+0x10c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d020      	beq.n	8001d90 <HAL_GPIO_Init+0xd0>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4a1f      	ldr	r2, [pc, #124]	; (8001dd0 <HAL_GPIO_Init+0x110>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d01b      	beq.n	8001d90 <HAL_GPIO_Init+0xd0>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4a1d      	ldr	r2, [pc, #116]	; (8001dd4 <HAL_GPIO_Init+0x114>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d016      	beq.n	8001d90 <HAL_GPIO_Init+0xd0>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4a1c      	ldr	r2, [pc, #112]	; (8001dd8 <HAL_GPIO_Init+0x118>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d011      	beq.n	8001d90 <HAL_GPIO_Init+0xd0>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a1a      	ldr	r2, [pc, #104]	; (8001ddc <HAL_GPIO_Init+0x11c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00c      	beq.n	8001d90 <HAL_GPIO_Init+0xd0>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_GPIO_Init+0x120>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d007      	beq.n	8001d90 <HAL_GPIO_Init+0xd0>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0xd0>
 8001d88:	21bc      	movs	r1, #188	; 0xbc
 8001d8a:	480f      	ldr	r0, [pc, #60]	; (8001dc8 <HAL_GPIO_Init+0x108>)
 8001d8c:	f006 fe43 	bl	8008a16 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 81b6 	beq.w	8002106 <HAL_GPIO_Init+0x446>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	f000 81b1 	beq.w	8002106 <HAL_GPIO_Init+0x446>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	f000 81ac 	beq.w	8002106 <HAL_GPIO_Init+0x446>
 8001dae:	21bd      	movs	r1, #189	; 0xbd
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <HAL_GPIO_Init+0x108>)
 8001db2:	f006 fe30 	bl	8008a16 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db6:	e1a6      	b.n	8002106 <HAL_GPIO_Init+0x446>
 8001db8:	48000400 	.word	0x48000400
 8001dbc:	48000800 	.word	0x48000800
 8001dc0:	48000c00 	.word	0x48000c00
 8001dc4:	48001400 	.word	0x48001400
 8001dc8:	08008f14 	.word	0x08008f14
 8001dcc:	10110000 	.word	0x10110000
 8001dd0:	10210000 	.word	0x10210000
 8001dd4:	10310000 	.word	0x10310000
 8001dd8:	10120000 	.word	0x10120000
 8001ddc:	10220000 	.word	0x10220000
 8001de0:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	2101      	movs	r1, #1
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8182 	beq.w	8002100 <HAL_GPIO_Init+0x440>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x14c>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b12      	cmp	r3, #18
 8001e0a:	d147      	bne.n	8001e9c <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e12:	d013      	beq.n	8001e3c <HAL_GPIO_Init+0x17c>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a81      	ldr	r2, [pc, #516]	; (800201c <HAL_GPIO_Init+0x35c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d00f      	beq.n	8001e3c <HAL_GPIO_Init+0x17c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a80      	ldr	r2, [pc, #512]	; (8002020 <HAL_GPIO_Init+0x360>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00b      	beq.n	8001e3c <HAL_GPIO_Init+0x17c>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a7f      	ldr	r2, [pc, #508]	; (8002024 <HAL_GPIO_Init+0x364>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d007      	beq.n	8001e3c <HAL_GPIO_Init+0x17c>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a7e      	ldr	r2, [pc, #504]	; (8002028 <HAL_GPIO_Init+0x368>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x17c>
 8001e34:	21cc      	movs	r1, #204	; 0xcc
 8001e36:	487d      	ldr	r0, [pc, #500]	; (800202c <HAL_GPIO_Init+0x36c>)
 8001e38:	f006 fded 	bl	8008a16 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	d907      	bls.n	8001e54 <HAL_GPIO_Init+0x194>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b0f      	cmp	r3, #15
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x194>
 8001e4c:	21cd      	movs	r1, #205	; 0xcd
 8001e4e:	4877      	ldr	r0, [pc, #476]	; (800202c <HAL_GPIO_Init+0x36c>)
 8001e50:	f006 fde1 	bl	8008a16 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	08da      	lsrs	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3208      	adds	r2, #8
 8001e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	08da      	lsrs	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3208      	adds	r2, #8
 8001e96:	6939      	ldr	r1, [r7, #16]
 8001e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0203 	and.w	r2, r3, #3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d00b      	beq.n	8001ef0 <HAL_GPIO_Init+0x230>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d007      	beq.n	8001ef0 <HAL_GPIO_Init+0x230>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ee4:	2b11      	cmp	r3, #17
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x230>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b12      	cmp	r3, #18
 8001eee:	d140      	bne.n	8001f72 <HAL_GPIO_Init+0x2b2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00b      	beq.n	8001f10 <HAL_GPIO_Init+0x250>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d007      	beq.n	8001f10 <HAL_GPIO_Init+0x250>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x250>
 8001f08:	21e1      	movs	r1, #225	; 0xe1
 8001f0a:	4848      	ldr	r0, [pc, #288]	; (800202c <HAL_GPIO_Init+0x36c>)
 8001f0c:	f006 fd83 	bl	8008a16 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f46:	2201      	movs	r2, #1
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	f003 0201 	and.w	r2, r3, #1
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80a8 	beq.w	8002100 <HAL_GPIO_Init+0x440>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <HAL_GPIO_Init+0x370>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	4a1e      	ldr	r2, [pc, #120]	; (8002030 <HAL_GPIO_Init+0x370>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6193      	str	r3, [r2, #24]
 8001fbc:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <HAL_GPIO_Init+0x370>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fc8:	4a1a      	ldr	r2, [pc, #104]	; (8002034 <HAL_GPIO_Init+0x374>)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ff2:	d021      	beq.n	8002038 <HAL_GPIO_Init+0x378>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <HAL_GPIO_Init+0x35c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00d      	beq.n	8002018 <HAL_GPIO_Init+0x358>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a08      	ldr	r2, [pc, #32]	; (8002020 <HAL_GPIO_Init+0x360>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d007      	beq.n	8002014 <HAL_GPIO_Init+0x354>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a07      	ldr	r2, [pc, #28]	; (8002024 <HAL_GPIO_Init+0x364>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_GPIO_Init+0x350>
 800200c:	2303      	movs	r3, #3
 800200e:	e014      	b.n	800203a <HAL_GPIO_Init+0x37a>
 8002010:	2305      	movs	r3, #5
 8002012:	e012      	b.n	800203a <HAL_GPIO_Init+0x37a>
 8002014:	2302      	movs	r3, #2
 8002016:	e010      	b.n	800203a <HAL_GPIO_Init+0x37a>
 8002018:	2301      	movs	r3, #1
 800201a:	e00e      	b.n	800203a <HAL_GPIO_Init+0x37a>
 800201c:	48000400 	.word	0x48000400
 8002020:	48000800 	.word	0x48000800
 8002024:	48000c00 	.word	0x48000c00
 8002028:	48001400 	.word	0x48001400
 800202c:	08008f14 	.word	0x08008f14
 8002030:	40021000 	.word	0x40021000
 8002034:	40010000 	.word	0x40010000
 8002038:	2300      	movs	r3, #0
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	f002 0203 	and.w	r2, r2, #3
 8002040:	0092      	lsls	r2, r2, #2
 8002042:	4093      	lsls	r3, r2
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800204a:	4935      	ldr	r1, [pc, #212]	; (8002120 <HAL_GPIO_Init+0x460>)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3302      	adds	r3, #2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002058:	4b32      	ldr	r3, [pc, #200]	; (8002124 <HAL_GPIO_Init+0x464>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	43db      	mvns	r3, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x3bc>
        {
          temp |= iocurrent;
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800207c:	4a29      	ldr	r2, [pc, #164]	; (8002124 <HAL_GPIO_Init+0x464>)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_GPIO_Init+0x464>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x3e6>
        {
          temp |= iocurrent;
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020a6:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <HAL_GPIO_Init+0x464>)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_GPIO_Init+0x464>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x410>
        {
          temp |= iocurrent;
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020d0:	4a14      	ldr	r2, [pc, #80]	; (8002124 <HAL_GPIO_Init+0x464>)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_GPIO_Init+0x464>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x43a>
        {
          temp |= iocurrent;
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_GPIO_Init+0x464>)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3301      	adds	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	f47f ae67 	bne.w	8001de4 <HAL_GPIO_Init+0x124>
  }
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40010000 	.word	0x40010000
 8002124:	40010400 	.word	0x40010400

08002128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
 8002134:	4613      	mov	r3, r2
 8002136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_GPIO_WritePin+0x20>
 800213e:	887b      	ldrh	r3, [r7, #2]
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	041b      	lsls	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	d004      	beq.n	8002152 <HAL_GPIO_WritePin+0x2a>
 8002148:	f240 11a7 	movw	r1, #423	; 0x1a7
 800214c:	480d      	ldr	r0, [pc, #52]	; (8002184 <HAL_GPIO_WritePin+0x5c>)
 800214e:	f006 fc62 	bl	8008a16 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002152:	787b      	ldrb	r3, [r7, #1]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_GPIO_WritePin+0x40>
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d004      	beq.n	8002168 <HAL_GPIO_WritePin+0x40>
 800215e:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8002162:	4808      	ldr	r0, [pc, #32]	; (8002184 <HAL_GPIO_WritePin+0x5c>)
 8002164:	f006 fc57 	bl	8008a16 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002168:	787b      	ldrb	r3, [r7, #1]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002174:	e002      	b.n	800217c <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	08008f14 	.word	0x08008f14

08002188 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d004      	beq.n	80021a4 <HAL_GPIO_TogglePin+0x1c>
 800219a:	887b      	ldrh	r3, [r7, #2]
 800219c:	0c1b      	lsrs	r3, r3, #16
 800219e:	041b      	lsls	r3, r3, #16
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d004      	beq.n	80021ae <HAL_GPIO_TogglePin+0x26>
 80021a4:	f240 11bd 	movw	r1, #445	; 0x1bd
 80021a8:	480a      	ldr	r0, [pc, #40]	; (80021d4 <HAL_GPIO_TogglePin+0x4c>)
 80021aa:	f006 fc34 	bl	8008a16 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d004      	beq.n	80021c4 <HAL_GPIO_TogglePin+0x3c>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	041a      	lsls	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80021c2:	e002      	b.n	80021ca <HAL_GPIO_TogglePin+0x42>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021c4:	887a      	ldrh	r2, [r7, #2]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	619a      	str	r2, [r3, #24]
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	08008f14 	.word	0x08008f14

080021d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80021de:	af00      	add	r7, sp, #0
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	f000 bff7 	b.w	80031e0 <HAL_RCC_OscConfig+0x1008>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_OscConfig+0x66>
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d119      	bne.n	800223e <HAL_RCC_OscConfig+0x66>
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d112      	bne.n	800223e <HAL_RCC_OscConfig+0x66>
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10b      	bne.n	800223e <HAL_RCC_OscConfig+0x66>
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d104      	bne.n	800223e <HAL_RCC_OscConfig+0x66>
 8002234:	f240 114b 	movw	r1, #331	; 0x14b
 8002238:	48c3      	ldr	r0, [pc, #780]	; (8002548 <HAL_RCC_OscConfig+0x370>)
 800223a:	f006 fbec 	bl	8008a16 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 8182 	beq.w	8002552 <HAL_RCC_OscConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d010      	beq.n	800227a <HAL_RCC_OscConfig+0xa2>
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002262:	d00a      	beq.n	800227a <HAL_RCC_OscConfig+0xa2>
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800226e:	d004      	beq.n	800227a <HAL_RCC_OscConfig+0xa2>
 8002270:	f240 1151 	movw	r1, #337	; 0x151
 8002274:	48b4      	ldr	r0, [pc, #720]	; (8002548 <HAL_RCC_OscConfig+0x370>)
 8002276:	f006 fbce 	bl	8008a16 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800227a:	4bb4      	ldr	r3, [pc, #720]	; (800254c <HAL_RCC_OscConfig+0x374>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b04      	cmp	r3, #4
 8002284:	d00c      	beq.n	80022a0 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002286:	4bb1      	ldr	r3, [pc, #708]	; (800254c <HAL_RCC_OscConfig+0x374>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b08      	cmp	r3, #8
 8002290:	d159      	bne.n	8002346 <HAL_RCC_OscConfig+0x16e>
 8002292:	4bae      	ldr	r3, [pc, #696]	; (800254c <HAL_RCC_OscConfig+0x374>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229e:	d152      	bne.n	8002346 <HAL_RCC_OscConfig+0x16e>
 80022a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d102      	bne.n	80022d2 <HAL_RCC_OscConfig+0xfa>
 80022cc:	4b9f      	ldr	r3, [pc, #636]	; (800254c <HAL_RCC_OscConfig+0x374>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	e015      	b.n	80022fe <HAL_RCC_OscConfig+0x126>
 80022d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80022e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80022ee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80022fa:	4b94      	ldr	r3, [pc, #592]	; (800254c <HAL_RCC_OscConfig+0x374>)
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002302:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002306:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800230a:	fa92 f2a2 	rbit	r2, r2
 800230e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002312:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002316:	fab2 f282 	clz	r2, r2
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f042 0220 	orr.w	r2, r2, #32
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	f002 021f 	and.w	r2, r2, #31
 8002326:	2101      	movs	r1, #1
 8002328:	fa01 f202 	lsl.w	r2, r1, r2
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 810e 	beq.w	8002550 <HAL_RCC_OscConfig+0x378>
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 8108 	bne.w	8002550 <HAL_RCC_OscConfig+0x378>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	f000 bf4d 	b.w	80031e0 <HAL_RCC_OscConfig+0x1008>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002350:	d106      	bne.n	8002360 <HAL_RCC_OscConfig+0x188>
 8002352:	4b7e      	ldr	r3, [pc, #504]	; (800254c <HAL_RCC_OscConfig+0x374>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a7d      	ldr	r2, [pc, #500]	; (800254c <HAL_RCC_OscConfig+0x374>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e030      	b.n	80023c2 <HAL_RCC_OscConfig+0x1ea>
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x1ac>
 800236a:	4b78      	ldr	r3, [pc, #480]	; (800254c <HAL_RCC_OscConfig+0x374>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a77      	ldr	r2, [pc, #476]	; (800254c <HAL_RCC_OscConfig+0x374>)
 8002370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b75      	ldr	r3, [pc, #468]	; (800254c <HAL_RCC_OscConfig+0x374>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a74      	ldr	r2, [pc, #464]	; (800254c <HAL_RCC_OscConfig+0x374>)
 800237c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e01e      	b.n	80023c2 <HAL_RCC_OscConfig+0x1ea>
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800238e:	d10c      	bne.n	80023aa <HAL_RCC_OscConfig+0x1d2>
 8002390:	4b6e      	ldr	r3, [pc, #440]	; (800254c <HAL_RCC_OscConfig+0x374>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a6d      	ldr	r2, [pc, #436]	; (800254c <HAL_RCC_OscConfig+0x374>)
 8002396:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b6b      	ldr	r3, [pc, #428]	; (800254c <HAL_RCC_OscConfig+0x374>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a6a      	ldr	r2, [pc, #424]	; (800254c <HAL_RCC_OscConfig+0x374>)
 80023a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	e00b      	b.n	80023c2 <HAL_RCC_OscConfig+0x1ea>
 80023aa:	4b68      	ldr	r3, [pc, #416]	; (800254c <HAL_RCC_OscConfig+0x374>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a67      	ldr	r2, [pc, #412]	; (800254c <HAL_RCC_OscConfig+0x374>)
 80023b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b65      	ldr	r3, [pc, #404]	; (800254c <HAL_RCC_OscConfig+0x374>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a64      	ldr	r2, [pc, #400]	; (800254c <HAL_RCC_OscConfig+0x374>)
 80023bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023c2:	4b62      	ldr	r3, [pc, #392]	; (800254c <HAL_RCC_OscConfig+0x374>)
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	f023 020f 	bic.w	r2, r3, #15
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	495e      	ldr	r1, [pc, #376]	; (800254c <HAL_RCC_OscConfig+0x374>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d059      	beq.n	8002494 <HAL_RCC_OscConfig+0x2bc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fd ff20 	bl	8000224 <HAL_GetTick>
 80023e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x228>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ea:	f7fd ff1b 	bl	8000224 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	; 0x64
 80023f8:	d902      	bls.n	8002400 <HAL_RCC_OscConfig+0x228>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	f000 bef0 	b.w	80031e0 <HAL_RCC_OscConfig+0x1008>
 8002400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002404:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002414:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002418:	fab3 f383 	clz	r3, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d102      	bne.n	8002432 <HAL_RCC_OscConfig+0x25a>
 800242c:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCC_OscConfig+0x374>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	e015      	b.n	800245e <HAL_RCC_OscConfig+0x286>
 8002432:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002436:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002446:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800244e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800245a:	4b3c      	ldr	r3, [pc, #240]	; (800254c <HAL_RCC_OscConfig+0x374>)
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002462:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002466:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800246a:	fa92 f2a2 	rbit	r2, r2
 800246e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002472:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002476:	fab2 f282 	clz	r2, r2
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	f042 0220 	orr.w	r2, r2, #32
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	f002 021f 	and.w	r2, r2, #31
 8002486:	2101      	movs	r1, #1
 8002488:	fa01 f202 	lsl.w	r2, r1, r2
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0ab      	beq.n	80023ea <HAL_RCC_OscConfig+0x212>
 8002492:	e05e      	b.n	8002552 <HAL_RCC_OscConfig+0x37a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7fd fec6 	bl	8000224 <HAL_GetTick>
 8002498:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x2dc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800249e:	f7fd fec1 	bl	8000224 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d902      	bls.n	80024b4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	f000 be96 	b.w	80031e0 <HAL_RCC_OscConfig+0x1008>
 80024b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80024c8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d102      	bne.n	80024e6 <HAL_RCC_OscConfig+0x30e>
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_RCC_OscConfig+0x374>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	e015      	b.n	8002512 <HAL_RCC_OscConfig+0x33a>
 80024e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002502:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800250e:	4b0f      	ldr	r3, [pc, #60]	; (800254c <HAL_RCC_OscConfig+0x374>)
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002516:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800251a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800251e:	fa92 f2a2 	rbit	r2, r2
 8002522:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002526:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800252a:	fab2 f282 	clz	r2, r2
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	f042 0220 	orr.w	r2, r2, #32
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	f002 021f 	and.w	r2, r2, #31
 800253a:	2101      	movs	r1, #1
 800253c:	fa01 f202 	lsl.w	r2, r1, r2
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1ab      	bne.n	800249e <HAL_RCC_OscConfig+0x2c6>
 8002546:	e004      	b.n	8002552 <HAL_RCC_OscConfig+0x37a>
 8002548:	08008f50 	.word	0x08008f50
 800254c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 818c 	beq.w	800287a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d009      	beq.n	8002580 <HAL_RCC_OscConfig+0x3a8>
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d004      	beq.n	8002580 <HAL_RCC_OscConfig+0x3a8>
 8002576:	f240 1189 	movw	r1, #393	; 0x189
 800257a:	48a7      	ldr	r0, [pc, #668]	; (8002818 <HAL_RCC_OscConfig+0x640>)
 800257c:	f006 fa4b 	bl	8008a16 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	2b1f      	cmp	r3, #31
 8002588:	d904      	bls.n	8002594 <HAL_RCC_OscConfig+0x3bc>
 800258a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800258e:	48a2      	ldr	r0, [pc, #648]	; (8002818 <HAL_RCC_OscConfig+0x640>)
 8002590:	f006 fa41 	bl	8008a16 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002594:	4ba1      	ldr	r3, [pc, #644]	; (800281c <HAL_RCC_OscConfig+0x644>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <HAL_RCC_OscConfig+0x3e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025a0:	4b9e      	ldr	r3, [pc, #632]	; (800281c <HAL_RCC_OscConfig+0x644>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d16c      	bne.n	8002686 <HAL_RCC_OscConfig+0x4ae>
 80025ac:	4b9b      	ldr	r3, [pc, #620]	; (800281c <HAL_RCC_OscConfig+0x644>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d166      	bne.n	8002686 <HAL_RCC_OscConfig+0x4ae>
 80025b8:	2302      	movs	r3, #2
 80025ba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80025ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_OscConfig+0x410>
 80025e2:	4b8e      	ldr	r3, [pc, #568]	; (800281c <HAL_RCC_OscConfig+0x644>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	e013      	b.n	8002610 <HAL_RCC_OscConfig+0x438>
 80025e8:	2302      	movs	r3, #2
 80025ea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025fa:	2302      	movs	r3, #2
 80025fc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002600:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800260c:	4b83      	ldr	r3, [pc, #524]	; (800281c <HAL_RCC_OscConfig+0x644>)
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	2202      	movs	r2, #2
 8002612:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002616:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800261a:	fa92 f2a2 	rbit	r2, r2
 800261e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002622:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002626:	fab2 f282 	clz	r2, r2
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	f042 0220 	orr.w	r2, r2, #32
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f002 021f 	and.w	r2, r2, #31
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f202 	lsl.w	r2, r1, r2
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <HAL_RCC_OscConfig+0x47a>
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d002      	beq.n	8002652 <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	f000 bdc7 	b.w	80031e0 <HAL_RCC_OscConfig+0x1008>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b72      	ldr	r3, [pc, #456]	; (800281c <HAL_RCC_OscConfig+0x644>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	21f8      	movs	r1, #248	; 0xf8
 8002662:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800266a:	fa91 f1a1 	rbit	r1, r1
 800266e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002672:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002676:	fab1 f181 	clz	r1, r1
 800267a:	b2c9      	uxtb	r1, r1
 800267c:	408b      	lsls	r3, r1
 800267e:	4967      	ldr	r1, [pc, #412]	; (800281c <HAL_RCC_OscConfig+0x644>)
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002684:	e0f9      	b.n	800287a <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8085 	beq.w	800279c <HAL_RCC_OscConfig+0x5c4>
 8002692:	2301      	movs	r3, #1
 8002694:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80026a4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	461a      	mov	r2, r3
 80026ba:	2301      	movs	r3, #1
 80026bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7fd fdb1 	bl	8000224 <HAL_GetTick>
 80026c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	e00a      	b.n	80026de <HAL_RCC_OscConfig+0x506>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c8:	f7fd fdac 	bl	8000224 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d902      	bls.n	80026de <HAL_RCC_OscConfig+0x506>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	f000 bd81 	b.w	80031e0 <HAL_RCC_OscConfig+0x1008>
 80026de:	2302      	movs	r3, #2
 80026e0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80026f0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	fab3 f383 	clz	r3, r3
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d102      	bne.n	800270e <HAL_RCC_OscConfig+0x536>
 8002708:	4b44      	ldr	r3, [pc, #272]	; (800281c <HAL_RCC_OscConfig+0x644>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	e013      	b.n	8002736 <HAL_RCC_OscConfig+0x55e>
 800270e:	2302      	movs	r3, #2
 8002710:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002718:	fa93 f3a3 	rbit	r3, r3
 800271c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002720:	2302      	movs	r3, #2
 8002722:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002726:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002732:	4b3a      	ldr	r3, [pc, #232]	; (800281c <HAL_RCC_OscConfig+0x644>)
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	2202      	movs	r2, #2
 8002738:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800273c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002740:	fa92 f2a2 	rbit	r2, r2
 8002744:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002748:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800274c:	fab2 f282 	clz	r2, r2
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	f042 0220 	orr.w	r2, r2, #32
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	f002 021f 	and.w	r2, r2, #31
 800275c:	2101      	movs	r1, #1
 800275e:	fa01 f202 	lsl.w	r2, r1, r2
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0af      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4f0>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b2c      	ldr	r3, [pc, #176]	; (800281c <HAL_RCC_OscConfig+0x644>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	21f8      	movs	r1, #248	; 0xf8
 8002778:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002780:	fa91 f1a1 	rbit	r1, r1
 8002784:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002788:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800278c:	fab1 f181 	clz	r1, r1
 8002790:	b2c9      	uxtb	r1, r1
 8002792:	408b      	lsls	r3, r1
 8002794:	4921      	ldr	r1, [pc, #132]	; (800281c <HAL_RCC_OscConfig+0x644>)
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]
 800279a:	e06e      	b.n	800287a <HAL_RCC_OscConfig+0x6a2>
 800279c:	2301      	movs	r3, #1
 800279e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80027ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	461a      	mov	r2, r3
 80027c4:	2300      	movs	r3, #0
 80027c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fd fd2c 	bl	8000224 <HAL_GetTick>
 80027cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCC_OscConfig+0x610>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d2:	f7fd fd27 	bl	8000224 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d902      	bls.n	80027e8 <HAL_RCC_OscConfig+0x610>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	f000 bcfc 	b.w	80031e0 <HAL_RCC_OscConfig+0x1008>
 80027e8:	2302      	movs	r3, #2
 80027ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80027fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b01      	cmp	r3, #1
 8002810:	d106      	bne.n	8002820 <HAL_RCC_OscConfig+0x648>
 8002812:	4b02      	ldr	r3, [pc, #8]	; (800281c <HAL_RCC_OscConfig+0x644>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	e017      	b.n	8002848 <HAL_RCC_OscConfig+0x670>
 8002818:	08008f50 	.word	0x08008f50
 800281c:	40021000 	.word	0x40021000
 8002820:	2302      	movs	r3, #2
 8002822:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002832:	2302      	movs	r3, #2
 8002834:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002838:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002844:	4bbf      	ldr	r3, [pc, #764]	; (8002b44 <HAL_RCC_OscConfig+0x96c>)
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	2202      	movs	r2, #2
 800284a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800284e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002852:	fa92 f2a2 	rbit	r2, r2
 8002856:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800285a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800285e:	fab2 f282 	clz	r2, r2
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	f042 0220 	orr.w	r2, r2, #32
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f002 021f 	and.w	r2, r2, #31
 800286e:	2101      	movs	r1, #1
 8002870:	fa01 f202 	lsl.w	r2, r1, r2
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1ab      	bne.n	80027d2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 80e6 	beq.w	8002a56 <HAL_RCC_OscConfig+0x87e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d009      	beq.n	80028a8 <HAL_RCC_OscConfig+0x6d0>
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d004      	beq.n	80028a8 <HAL_RCC_OscConfig+0x6d0>
 800289e:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 80028a2:	48a9      	ldr	r0, [pc, #676]	; (8002b48 <HAL_RCC_OscConfig+0x970>)
 80028a4:	f006 f8b7 	bl	8008a16 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d065      	beq.n	800297e <HAL_RCC_OscConfig+0x7a6>
 80028b2:	2301      	movs	r3, #1
 80028b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80028c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b9e      	ldr	r3, [pc, #632]	; (8002b4c <HAL_RCC_OscConfig+0x974>)
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	461a      	mov	r2, r3
 80028d8:	2301      	movs	r3, #1
 80028da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028dc:	f7fd fca2 	bl	8000224 <HAL_GetTick>
 80028e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e4:	e00a      	b.n	80028fc <HAL_RCC_OscConfig+0x724>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e6:	f7fd fc9d 	bl	8000224 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d902      	bls.n	80028fc <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	f000 bc72 	b.w	80031e0 <HAL_RCC_OscConfig+0x1008>
 80028fc:	2302      	movs	r3, #2
 80028fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800290e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002912:	2202      	movs	r2, #2
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	fa93 f2a3 	rbit	r2, r3
 8002920:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800292a:	2202      	movs	r2, #2
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	fa93 f2a3 	rbit	r2, r3
 8002938:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800293c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	4b81      	ldr	r3, [pc, #516]	; (8002b44 <HAL_RCC_OscConfig+0x96c>)
 8002940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002942:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002946:	2102      	movs	r1, #2
 8002948:	6019      	str	r1, [r3, #0]
 800294a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	fa93 f1a3 	rbit	r1, r3
 8002954:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002958:	6019      	str	r1, [r3, #0]
  return result;
 800295a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	2101      	movs	r1, #1
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0b4      	beq.n	80028e6 <HAL_RCC_OscConfig+0x70e>
 800297c:	e06b      	b.n	8002a56 <HAL_RCC_OscConfig+0x87e>
 800297e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002982:	2201      	movs	r2, #1
 8002984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	fa93 f2a3 	rbit	r2, r3
 8002990:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002994:	601a      	str	r2, [r3, #0]
  return result;
 8002996:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800299a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b69      	ldr	r3, [pc, #420]	; (8002b4c <HAL_RCC_OscConfig+0x974>)
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	461a      	mov	r2, r3
 80029ac:	2300      	movs	r3, #0
 80029ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b0:	f7fd fc38 	bl	8000224 <HAL_GetTick>
 80029b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_OscConfig+0x7f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ba:	f7fd fc33 	bl	8000224 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d902      	bls.n	80029d0 <HAL_RCC_OscConfig+0x7f8>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	f000 bc08 	b.w	80031e0 <HAL_RCC_OscConfig+0x1008>
 80029d0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029d4:	2202      	movs	r2, #2
 80029d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	fa93 f2a3 	rbit	r2, r3
 80029e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029ec:	2202      	movs	r2, #2
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	fa93 f2a3 	rbit	r2, r3
 80029fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a04:	2202      	movs	r2, #2
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	fa93 f2a3 	rbit	r2, r3
 8002a12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	4b4a      	ldr	r3, [pc, #296]	; (8002b44 <HAL_RCC_OscConfig+0x96c>)
 8002a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a1c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a20:	2102      	movs	r1, #2
 8002a22:	6019      	str	r1, [r3, #0]
 8002a24:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	fa93 f1a3 	rbit	r1, r3
 8002a2e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a32:	6019      	str	r1, [r3, #0]
  return result;
 8002a34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1b1      	bne.n	80029ba <HAL_RCC_OscConfig+0x7e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8170 	beq.w	8002d46 <HAL_RCC_OscConfig+0xb6e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00e      	beq.n	8002a94 <HAL_RCC_OscConfig+0x8bc>
 8002a76:	1d3b      	adds	r3, r7, #4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d009      	beq.n	8002a94 <HAL_RCC_OscConfig+0x8bc>
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b05      	cmp	r3, #5
 8002a88:	d004      	beq.n	8002a94 <HAL_RCC_OscConfig+0x8bc>
 8002a8a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8002a8e:	482e      	ldr	r0, [pc, #184]	; (8002b48 <HAL_RCC_OscConfig+0x970>)
 8002a90:	f005 ffc1 	bl	8008a16 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a94:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <HAL_RCC_OscConfig+0x96c>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d112      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x8ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <HAL_RCC_OscConfig+0x96c>)
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	4a27      	ldr	r2, [pc, #156]	; (8002b44 <HAL_RCC_OscConfig+0x96c>)
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	61d3      	str	r3, [r2, #28]
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <HAL_RCC_OscConfig+0x96c>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ab4:	f107 0308 	add.w	r3, r7, #8
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	f107 0308 	add.w	r3, r7, #8
 8002abe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <HAL_RCC_OscConfig+0x978>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d11a      	bne.n	8002b08 <HAL_RCC_OscConfig+0x930>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad2:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <HAL_RCC_OscConfig+0x978>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <HAL_RCC_OscConfig+0x978>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ade:	f7fd fba1 	bl	8000224 <HAL_GetTick>
 8002ae2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae6:	e009      	b.n	8002afc <HAL_RCC_OscConfig+0x924>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae8:	f7fd fb9c 	bl	8000224 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b64      	cmp	r3, #100	; 0x64
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x924>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e371      	b.n	80031e0 <HAL_RCC_OscConfig+0x1008>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <HAL_RCC_OscConfig+0x978>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ef      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x910>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d106      	bne.n	8002b20 <HAL_RCC_OscConfig+0x948>
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <HAL_RCC_OscConfig+0x96c>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a0b      	ldr	r2, [pc, #44]	; (8002b44 <HAL_RCC_OscConfig+0x96c>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6213      	str	r3, [r2, #32]
 8002b1e:	e037      	b.n	8002b90 <HAL_RCC_OscConfig+0x9b8>
 8002b20:	1d3b      	adds	r3, r7, #4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d114      	bne.n	8002b54 <HAL_RCC_OscConfig+0x97c>
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_RCC_OscConfig+0x96c>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <HAL_RCC_OscConfig+0x96c>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	6213      	str	r3, [r2, #32]
 8002b36:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_RCC_OscConfig+0x96c>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4a02      	ldr	r2, [pc, #8]	; (8002b44 <HAL_RCC_OscConfig+0x96c>)
 8002b3c:	f023 0304 	bic.w	r3, r3, #4
 8002b40:	6213      	str	r3, [r2, #32]
 8002b42:	e025      	b.n	8002b90 <HAL_RCC_OscConfig+0x9b8>
 8002b44:	40021000 	.word	0x40021000
 8002b48:	08008f50 	.word	0x08008f50
 8002b4c:	10908120 	.word	0x10908120
 8002b50:	40007000 	.word	0x40007000
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b05      	cmp	r3, #5
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x9a0>
 8002b5e:	4b5e      	ldr	r3, [pc, #376]	; (8002cd8 <HAL_RCC_OscConfig+0xb00>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a5d      	ldr	r2, [pc, #372]	; (8002cd8 <HAL_RCC_OscConfig+0xb00>)
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	6213      	str	r3, [r2, #32]
 8002b6a:	4b5b      	ldr	r3, [pc, #364]	; (8002cd8 <HAL_RCC_OscConfig+0xb00>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	4a5a      	ldr	r2, [pc, #360]	; (8002cd8 <HAL_RCC_OscConfig+0xb00>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6213      	str	r3, [r2, #32]
 8002b76:	e00b      	b.n	8002b90 <HAL_RCC_OscConfig+0x9b8>
 8002b78:	4b57      	ldr	r3, [pc, #348]	; (8002cd8 <HAL_RCC_OscConfig+0xb00>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	4a56      	ldr	r2, [pc, #344]	; (8002cd8 <HAL_RCC_OscConfig+0xb00>)
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	6213      	str	r3, [r2, #32]
 8002b84:	4b54      	ldr	r3, [pc, #336]	; (8002cd8 <HAL_RCC_OscConfig+0xb00>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4a53      	ldr	r2, [pc, #332]	; (8002cd8 <HAL_RCC_OscConfig+0xb00>)
 8002b8a:	f023 0304 	bic.w	r3, r3, #4
 8002b8e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d064      	beq.n	8002c64 <HAL_RCC_OscConfig+0xa8c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7fd fb43 	bl	8000224 <HAL_GetTick>
 8002b9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0x9e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f7fd fb3e 	bl	8000224 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x9e4>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e311      	b.n	80031e0 <HAL_RCC_OscConfig+0x1008>
 8002bbc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	fa93 f2a3 	rbit	r2, r3
 8002bce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002bd8:	2202      	movs	r2, #2
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	fa93 f2a3 	rbit	r2, r3
 8002be6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002bea:	601a      	str	r2, [r3, #0]
  return result;
 8002bec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002bf0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d102      	bne.n	8002c0c <HAL_RCC_OscConfig+0xa34>
 8002c06:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <HAL_RCC_OscConfig+0xb00>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	e00d      	b.n	8002c28 <HAL_RCC_OscConfig+0xa50>
 8002c0c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c10:	2202      	movs	r2, #2
 8002c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	fa93 f2a3 	rbit	r2, r3
 8002c1e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <HAL_RCC_OscConfig+0xb00>)
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c2c:	2102      	movs	r1, #2
 8002c2e:	6011      	str	r1, [r2, #0]
 8002c30:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	fa92 f1a2 	rbit	r1, r2
 8002c3a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002c3e:	6011      	str	r1, [r2, #0]
  return result;
 8002c40:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	fab2 f282 	clz	r2, r2
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	f002 021f 	and.w	r2, r2, #31
 8002c56:	2101      	movs	r1, #1
 8002c58:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0a0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x9cc>
 8002c62:	e066      	b.n	8002d32 <HAL_RCC_OscConfig+0xb5a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c64:	f7fd fade 	bl	8000224 <HAL_GetTick>
 8002c68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6c:	e00b      	b.n	8002c86 <HAL_RCC_OscConfig+0xaae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fd fad9 	bl	8000224 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0xaae>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e2ac      	b.n	80031e0 <HAL_RCC_OscConfig+0x1008>
 8002c86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	fa93 f2a3 	rbit	r2, r3
 8002c98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	fa93 f2a3 	rbit	r2, r3
 8002cb0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002cb4:	601a      	str	r2, [r3, #0]
  return result;
 8002cb6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002cba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	f043 0302 	orr.w	r3, r3, #2
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d105      	bne.n	8002cdc <HAL_RCC_OscConfig+0xb04>
 8002cd0:	4b01      	ldr	r3, [pc, #4]	; (8002cd8 <HAL_RCC_OscConfig+0xb00>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	e010      	b.n	8002cf8 <HAL_RCC_OscConfig+0xb20>
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	fa93 f2a3 	rbit	r2, r3
 8002cee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	4bb6      	ldr	r3, [pc, #728]	; (8002fd0 <HAL_RCC_OscConfig+0xdf8>)
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	6011      	str	r1, [r2, #0]
 8002d00:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	fa92 f1a2 	rbit	r1, r2
 8002d0a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002d0e:	6011      	str	r1, [r2, #0]
  return result;
 8002d10:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	fab2 f282 	clz	r2, r2
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	f002 021f 	and.w	r2, r2, #31
 8002d26:	2101      	movs	r1, #1
 8002d28:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d19d      	bne.n	8002c6e <HAL_RCC_OscConfig+0xa96>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d32:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d105      	bne.n	8002d46 <HAL_RCC_OscConfig+0xb6e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3a:	4ba5      	ldr	r3, [pc, #660]	; (8002fd0 <HAL_RCC_OscConfig+0xdf8>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4aa4      	ldr	r2, [pc, #656]	; (8002fd0 <HAL_RCC_OscConfig+0xdf8>)
 8002d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d44:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002d46:	1d3b      	adds	r3, r7, #4
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00e      	beq.n	8002d6e <HAL_RCC_OscConfig+0xb96>
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d009      	beq.n	8002d6e <HAL_RCC_OscConfig+0xb96>
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d004      	beq.n	8002d6e <HAL_RCC_OscConfig+0xb96>
 8002d64:	f240 213a 	movw	r1, #570	; 0x23a
 8002d68:	489a      	ldr	r0, [pc, #616]	; (8002fd4 <HAL_RCC_OscConfig+0xdfc>)
 8002d6a:	f005 fe54 	bl	8008a16 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8232 	beq.w	80031de <HAL_RCC_OscConfig+0x1006>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d7a:	4b95      	ldr	r3, [pc, #596]	; (8002fd0 <HAL_RCC_OscConfig+0xdf8>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	f000 820c 	beq.w	80031a0 <HAL_RCC_OscConfig+0xfc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d88:	1d3b      	adds	r3, r7, #4
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	f040 8184 	bne.w	800309c <HAL_RCC_OscConfig+0xec4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCC_OscConfig+0xbdc>
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da8:	d004      	beq.n	8002db4 <HAL_RCC_OscConfig+0xbdc>
 8002daa:	f240 2143 	movw	r1, #579	; 0x243
 8002dae:	4889      	ldr	r0, [pc, #548]	; (8002fd4 <HAL_RCC_OscConfig+0xdfc>)
 8002db0:	f005 fe31 	bl	8008a16 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d058      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc98>
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dc8:	d052      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc98>
 8002dca:	1d3b      	adds	r3, r7, #4
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dd4:	d04c      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc98>
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002de0:	d046      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc98>
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dec:	d040      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc98>
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002df8:	d03a      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc98>
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e04:	d034      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc98>
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e10:	d02e      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc98>
 8002e12:	1d3b      	adds	r3, r7, #4
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e1c:	d028      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc98>
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e28:	d022      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc98>
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e34:	d01c      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc98>
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e40:	d016      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc98>
 8002e42:	1d3b      	adds	r3, r7, #4
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e4c:	d010      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc98>
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc98>
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002e64:	d004      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc98>
 8002e66:	f44f 7111 	mov.w	r1, #580	; 0x244
 8002e6a:	485a      	ldr	r0, [pc, #360]	; (8002fd4 <HAL_RCC_OscConfig+0xdfc>)
 8002e6c:	f005 fdd3 	bl	8008a16 <assert_failed>
 8002e70:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	fa93 f2a3 	rbit	r2, r3
 8002e84:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e88:	601a      	str	r2, [r3, #0]
  return result;
 8002e8a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e8e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e90:	fab3 f383 	clz	r3, r3
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fd f9bd 	bl	8000224 <HAL_GetTick>
 8002eaa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eae:	e009      	b.n	8002ec4 <HAL_RCC_OscConfig+0xcec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7fd f9b8 	bl	8000224 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0xcec>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e18d      	b.n	80031e0 <HAL_RCC_OscConfig+0x1008>
 8002ec4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ecc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	fa93 f2a3 	rbit	r2, r3
 8002ed8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002edc:	601a      	str	r2, [r3, #0]
  return result;
 8002ede:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ee2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d102      	bne.n	8002efe <HAL_RCC_OscConfig+0xd26>
 8002ef8:	4b35      	ldr	r3, [pc, #212]	; (8002fd0 <HAL_RCC_OscConfig+0xdf8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	e01b      	b.n	8002f36 <HAL_RCC_OscConfig+0xd5e>
 8002efe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	fa93 f2a3 	rbit	r2, r3
 8002f12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	fa93 f2a3 	rbit	r2, r3
 8002f2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <HAL_RCC_OscConfig+0xdf8>)
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f3a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f3e:	6011      	str	r1, [r2, #0]
 8002f40:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	fa92 f1a2 	rbit	r1, r2
 8002f4a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f4e:	6011      	str	r1, [r2, #0]
  return result;
 8002f50:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	fab2 f282 	clz	r2, r2
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	f042 0220 	orr.w	r2, r2, #32
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	f002 021f 	and.w	r2, r2, #31
 8002f66:	2101      	movs	r1, #1
 8002f68:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d19e      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xcd8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f72:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <HAL_RCC_OscConfig+0xdf8>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	430b      	orrs	r3, r1
 8002f88:	4911      	ldr	r1, [pc, #68]	; (8002fd0 <HAL_RCC_OscConfig+0xdf8>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	604b      	str	r3, [r1, #4]
 8002f8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	fa93 f2a3 	rbit	r2, r3
 8002fa2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fa6:	601a      	str	r2, [r3, #0]
  return result;
 8002fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fd f92e 	bl	8000224 <HAL_GetTick>
 8002fc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fcc:	e00e      	b.n	8002fec <HAL_RCC_OscConfig+0xe14>
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	08008f50 	.word	0x08008f50
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fd f924 	bl	8000224 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0xe14>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0f9      	b.n	80031e0 <HAL_RCC_OscConfig+0x1008>
 8002fec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fa93 f2a3 	rbit	r2, r3
 8003000:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003004:	601a      	str	r2, [r3, #0]
  return result;
 8003006:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800300a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d102      	bne.n	8003026 <HAL_RCC_OscConfig+0xe4e>
 8003020:	4b72      	ldr	r3, [pc, #456]	; (80031ec <HAL_RCC_OscConfig+0x1014>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	e01b      	b.n	800305e <HAL_RCC_OscConfig+0xe86>
 8003026:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800302a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800302e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	fa93 f2a3 	rbit	r2, r3
 800303a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003044:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	fa93 f2a3 	rbit	r2, r3
 8003054:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	4b64      	ldr	r3, [pc, #400]	; (80031ec <HAL_RCC_OscConfig+0x1014>)
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003062:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003066:	6011      	str	r1, [r2, #0]
 8003068:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	fa92 f1a2 	rbit	r1, r2
 8003072:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003076:	6011      	str	r1, [r2, #0]
  return result;
 8003078:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	fab2 f282 	clz	r2, r2
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	f042 0220 	orr.w	r2, r2, #32
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	f002 021f 	and.w	r2, r2, #31
 800308e:	2101      	movs	r1, #1
 8003090:	fa01 f202 	lsl.w	r2, r1, r2
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d09e      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xe00>
 800309a:	e0a0      	b.n	80031de <HAL_RCC_OscConfig+0x1006>
 800309c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	fa93 f2a3 	rbit	r2, r3
 80030b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030b4:	601a      	str	r2, [r3, #0]
  return result;
 80030b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030ba:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030bc:	fab3 f383 	clz	r3, r3
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	461a      	mov	r2, r3
 80030ce:	2300      	movs	r3, #0
 80030d0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d2:	f7fd f8a7 	bl	8000224 <HAL_GetTick>
 80030d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030da:	e009      	b.n	80030f0 <HAL_RCC_OscConfig+0xf18>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fd f8a2 	bl	8000224 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0xf18>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e077      	b.n	80031e0 <HAL_RCC_OscConfig+0x1008>
 80030f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	fa93 f2a3 	rbit	r2, r3
 8003104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003108:	601a      	str	r2, [r3, #0]
  return result;
 800310a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800310e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003110:	fab3 f383 	clz	r3, r3
 8003114:	b2db      	uxtb	r3, r3
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	b2db      	uxtb	r3, r3
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d102      	bne.n	800312a <HAL_RCC_OscConfig+0xf52>
 8003124:	4b31      	ldr	r3, [pc, #196]	; (80031ec <HAL_RCC_OscConfig+0x1014>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	e01b      	b.n	8003162 <HAL_RCC_OscConfig+0xf8a>
 800312a:	f107 0320 	add.w	r3, r7, #32
 800312e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f107 0320 	add.w	r3, r7, #32
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	fa93 f2a3 	rbit	r2, r3
 800313e:	f107 031c 	add.w	r3, r7, #28
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	f107 0318 	add.w	r3, r7, #24
 8003148:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	f107 0318 	add.w	r3, r7, #24
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	fa93 f2a3 	rbit	r2, r3
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	4b23      	ldr	r3, [pc, #140]	; (80031ec <HAL_RCC_OscConfig+0x1014>)
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	f107 0210 	add.w	r2, r7, #16
 8003166:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800316a:	6011      	str	r1, [r2, #0]
 800316c:	f107 0210 	add.w	r2, r7, #16
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	fa92 f1a2 	rbit	r1, r2
 8003176:	f107 020c 	add.w	r2, r7, #12
 800317a:	6011      	str	r1, [r2, #0]
  return result;
 800317c:	f107 020c 	add.w	r2, r7, #12
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	fab2 f282 	clz	r2, r2
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	f042 0220 	orr.w	r2, r2, #32
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	f002 021f 	and.w	r2, r2, #31
 8003192:	2101      	movs	r1, #1
 8003194:	fa01 f202 	lsl.w	r2, r1, r2
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d19e      	bne.n	80030dc <HAL_RCC_OscConfig+0xf04>
 800319e:	e01e      	b.n	80031de <HAL_RCC_OscConfig+0x1006>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_OscConfig+0xfd6>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e018      	b.n	80031e0 <HAL_RCC_OscConfig+0x1008>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031ae:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <HAL_RCC_OscConfig+0x1014>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031ba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031be:	1d3b      	adds	r3, r7, #4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d108      	bne.n	80031da <HAL_RCC_OscConfig+0x1002>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031cc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d001      	beq.n	80031de <HAL_RCC_OscConfig+0x1006>
#endif
        {
          return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_RCC_OscConfig+0x1008>
        }
      }
    }
  }

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000

080031f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b09e      	sub	sp, #120	; 0x78
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e203      	b.n	8003610 <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d116      	bne.n	8003242 <HAL_RCC_ClockConfig+0x52>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d110      	bne.n	8003242 <HAL_RCC_ClockConfig+0x52>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <HAL_RCC_ClockConfig+0x52>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d104      	bne.n	8003242 <HAL_RCC_ClockConfig+0x52>
 8003238:	f240 21c3 	movw	r1, #707	; 0x2c3
 800323c:	48a5      	ldr	r0, [pc, #660]	; (80034d4 <HAL_RCC_ClockConfig+0x2e4>)
 800323e:	f005 fbea 	bl	8008a16 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCC_ClockConfig+0x6e>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d007      	beq.n	800325e <HAL_RCC_ClockConfig+0x6e>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d004      	beq.n	800325e <HAL_RCC_ClockConfig+0x6e>
 8003254:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8003258:	489e      	ldr	r0, [pc, #632]	; (80034d4 <HAL_RCC_ClockConfig+0x2e4>)
 800325a:	f005 fbdc 	bl	8008a16 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800325e:	4b9e      	ldr	r3, [pc, #632]	; (80034d8 <HAL_RCC_ClockConfig+0x2e8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d910      	bls.n	800328e <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326c:	4b9a      	ldr	r3, [pc, #616]	; (80034d8 <HAL_RCC_ClockConfig+0x2e8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f023 0207 	bic.w	r2, r3, #7
 8003274:	4998      	ldr	r1, [pc, #608]	; (80034d8 <HAL_RCC_ClockConfig+0x2e8>)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	4313      	orrs	r3, r2
 800327a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327c:	4b96      	ldr	r3, [pc, #600]	; (80034d8 <HAL_RCC_ClockConfig+0x2e8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d001      	beq.n	800328e <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e1c0      	b.n	8003610 <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d031      	beq.n	80032fe <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d024      	beq.n	80032ec <HAL_RCC_ClockConfig+0xfc>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b80      	cmp	r3, #128	; 0x80
 80032a8:	d020      	beq.n	80032ec <HAL_RCC_ClockConfig+0xfc>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b90      	cmp	r3, #144	; 0x90
 80032b0:	d01c      	beq.n	80032ec <HAL_RCC_ClockConfig+0xfc>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2ba0      	cmp	r3, #160	; 0xa0
 80032b8:	d018      	beq.n	80032ec <HAL_RCC_ClockConfig+0xfc>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2bb0      	cmp	r3, #176	; 0xb0
 80032c0:	d014      	beq.n	80032ec <HAL_RCC_ClockConfig+0xfc>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2bc0      	cmp	r3, #192	; 0xc0
 80032c8:	d010      	beq.n	80032ec <HAL_RCC_ClockConfig+0xfc>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2bd0      	cmp	r3, #208	; 0xd0
 80032d0:	d00c      	beq.n	80032ec <HAL_RCC_ClockConfig+0xfc>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2be0      	cmp	r3, #224	; 0xe0
 80032d8:	d008      	beq.n	80032ec <HAL_RCC_ClockConfig+0xfc>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2bf0      	cmp	r3, #240	; 0xf0
 80032e0:	d004      	beq.n	80032ec <HAL_RCC_ClockConfig+0xfc>
 80032e2:	f240 21db 	movw	r1, #731	; 0x2db
 80032e6:	487b      	ldr	r0, [pc, #492]	; (80034d4 <HAL_RCC_ClockConfig+0x2e4>)
 80032e8:	f005 fb95 	bl	8008a16 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ec:	4b7b      	ldr	r3, [pc, #492]	; (80034dc <HAL_RCC_ClockConfig+0x2ec>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4978      	ldr	r1, [pc, #480]	; (80034dc <HAL_RCC_ClockConfig+0x2ec>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80f3 	beq.w	80034f2 <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00c      	beq.n	800332e <HAL_RCC_ClockConfig+0x13e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d008      	beq.n	800332e <HAL_RCC_ClockConfig+0x13e>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d004      	beq.n	800332e <HAL_RCC_ClockConfig+0x13e>
 8003324:	f240 21e2 	movw	r1, #738	; 0x2e2
 8003328:	486a      	ldr	r0, [pc, #424]	; (80034d4 <HAL_RCC_ClockConfig+0x2e4>)
 800332a:	f005 fb74 	bl	8008a16 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d13c      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x1c0>
 8003336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800333a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d102      	bne.n	8003360 <HAL_RCC_ClockConfig+0x170>
 800335a:	4b60      	ldr	r3, [pc, #384]	; (80034dc <HAL_RCC_ClockConfig+0x2ec>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	e00f      	b.n	8003380 <HAL_RCC_ClockConfig+0x190>
 8003360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003364:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	667b      	str	r3, [r7, #100]	; 0x64
 800336e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003372:	663b      	str	r3, [r7, #96]	; 0x60
 8003374:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800337c:	4b57      	ldr	r3, [pc, #348]	; (80034dc <HAL_RCC_ClockConfig+0x2ec>)
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003384:	65ba      	str	r2, [r7, #88]	; 0x58
 8003386:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003388:	fa92 f2a2 	rbit	r2, r2
 800338c:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800338e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003390:	fab2 f282 	clz	r2, r2
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	f042 0220 	orr.w	r2, r2, #32
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	f002 021f 	and.w	r2, r2, #31
 80033a0:	2101      	movs	r1, #1
 80033a2:	fa01 f202 	lsl.w	r2, r1, r2
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d17b      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e12f      	b.n	8003610 <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d13c      	bne.n	8003432 <HAL_RCC_ClockConfig+0x242>
 80033b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d102      	bne.n	80033e2 <HAL_RCC_ClockConfig+0x1f2>
 80033dc:	4b3f      	ldr	r3, [pc, #252]	; (80034dc <HAL_RCC_ClockConfig+0x2ec>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	e00f      	b.n	8003402 <HAL_RCC_ClockConfig+0x212>
 80033e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033e6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	647b      	str	r3, [r7, #68]	; 0x44
 80033f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033f4:	643b      	str	r3, [r7, #64]	; 0x40
 80033f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033fe:	4b37      	ldr	r3, [pc, #220]	; (80034dc <HAL_RCC_ClockConfig+0x2ec>)
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003406:	63ba      	str	r2, [r7, #56]	; 0x38
 8003408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800340a:	fa92 f2a2 	rbit	r2, r2
 800340e:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003412:	fab2 f282 	clz	r2, r2
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	f042 0220 	orr.w	r2, r2, #32
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	f002 021f 	and.w	r2, r2, #31
 8003422:	2101      	movs	r1, #1
 8003424:	fa01 f202 	lsl.w	r2, r1, r2
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d13a      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e0ee      	b.n	8003610 <HAL_RCC_ClockConfig+0x420>
 8003432:	2302      	movs	r3, #2
 8003434:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	fa93 f3a3 	rbit	r3, r3
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	fab3 f383 	clz	r3, r3
 8003444:	b2db      	uxtb	r3, r3
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d102      	bne.n	800345a <HAL_RCC_ClockConfig+0x26a>
 8003454:	4b21      	ldr	r3, [pc, #132]	; (80034dc <HAL_RCC_ClockConfig+0x2ec>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	e00d      	b.n	8003476 <HAL_RCC_ClockConfig+0x286>
 800345a:	2302      	movs	r3, #2
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
 8003466:	2302      	movs	r3, #2
 8003468:	623b      	str	r3, [r7, #32]
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	fa93 f3a3 	rbit	r3, r3
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <HAL_RCC_ClockConfig+0x2ec>)
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2202      	movs	r2, #2
 8003478:	61ba      	str	r2, [r7, #24]
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	fa92 f2a2 	rbit	r2, r2
 8003480:	617a      	str	r2, [r7, #20]
  return result;
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	fab2 f282 	clz	r2, r2
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	f042 0220 	orr.w	r2, r2, #32
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	f002 021f 	and.w	r2, r2, #31
 8003494:	2101      	movs	r1, #1
 8003496:	fa01 f202 	lsl.w	r2, r1, r2
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0b5      	b.n	8003610 <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a4:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_RCC_ClockConfig+0x2ec>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 0203 	bic.w	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	490a      	ldr	r1, [pc, #40]	; (80034dc <HAL_RCC_ClockConfig+0x2ec>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b6:	f7fc feb5 	bl	8000224 <HAL_GetTick>
 80034ba:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034bc:	e010      	b.n	80034e0 <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034be:	f7fc feb1 	bl	8000224 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d907      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e09d      	b.n	8003610 <HAL_RCC_ClockConfig+0x420>
 80034d4:	08008f50 	.word	0x08008f50
 80034d8:	40022000 	.word	0x40022000
 80034dc:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e0:	4b4d      	ldr	r3, [pc, #308]	; (8003618 <HAL_RCC_ClockConfig+0x428>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 020c 	and.w	r2, r3, #12
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d1e5      	bne.n	80034be <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034f2:	4b4a      	ldr	r3, [pc, #296]	; (800361c <HAL_RCC_ClockConfig+0x42c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d210      	bcs.n	8003522 <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003500:	4b46      	ldr	r3, [pc, #280]	; (800361c <HAL_RCC_ClockConfig+0x42c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 0207 	bic.w	r2, r3, #7
 8003508:	4944      	ldr	r1, [pc, #272]	; (800361c <HAL_RCC_ClockConfig+0x42c>)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003510:	4b42      	ldr	r3, [pc, #264]	; (800361c <HAL_RCC_ClockConfig+0x42c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d001      	beq.n	8003522 <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e076      	b.n	8003610 <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d025      	beq.n	800357a <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d018      	beq.n	8003568 <HAL_RCC_ClockConfig+0x378>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353e:	d013      	beq.n	8003568 <HAL_RCC_ClockConfig+0x378>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003548:	d00e      	beq.n	8003568 <HAL_RCC_ClockConfig+0x378>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003552:	d009      	beq.n	8003568 <HAL_RCC_ClockConfig+0x378>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800355c:	d004      	beq.n	8003568 <HAL_RCC_ClockConfig+0x378>
 800355e:	f240 311e 	movw	r1, #798	; 0x31e
 8003562:	482f      	ldr	r0, [pc, #188]	; (8003620 <HAL_RCC_ClockConfig+0x430>)
 8003564:	f005 fa57 	bl	8008a16 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003568:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <HAL_RCC_ClockConfig+0x428>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4928      	ldr	r1, [pc, #160]	; (8003618 <HAL_RCC_ClockConfig+0x428>)
 8003576:	4313      	orrs	r3, r2
 8003578:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d026      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d018      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x3d0>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003596:	d013      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x3d0>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80035a0:	d00e      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x3d0>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035aa:	d009      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x3d0>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035b4:	d004      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x3d0>
 80035b6:	f240 3125 	movw	r1, #805	; 0x325
 80035ba:	4819      	ldr	r0, [pc, #100]	; (8003620 <HAL_RCC_ClockConfig+0x430>)
 80035bc:	f005 fa2b 	bl	8008a16 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035c0:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_RCC_ClockConfig+0x428>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4912      	ldr	r1, [pc, #72]	; (8003618 <HAL_RCC_ClockConfig+0x428>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035d4:	f000 f82c 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035d8:	4601      	mov	r1, r0
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <HAL_RCC_ClockConfig+0x428>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e2:	22f0      	movs	r2, #240	; 0xf0
 80035e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	fa92 f2a2 	rbit	r2, r2
 80035ec:	60fa      	str	r2, [r7, #12]
  return result;
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	fab2 f282 	clz	r2, r2
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	40d3      	lsrs	r3, r2
 80035f8:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <HAL_RCC_ClockConfig+0x434>)
 80035fa:	5cd3      	ldrb	r3, [r2, r3]
 80035fc:	fa21 f303 	lsr.w	r3, r1, r3
 8003600:	4a09      	ldr	r2, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x438>)
 8003602:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_ClockConfig+0x43c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f005 fa37 	bl	8008a7c <HAL_InitTick>
  
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3778      	adds	r7, #120	; 0x78
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40021000 	.word	0x40021000
 800361c:	40022000 	.word	0x40022000
 8003620:	08008f50 	.word	0x08008f50
 8003624:	08009148 	.word	0x08009148
 8003628:	2000000c 	.word	0x2000000c
 800362c:	20000000 	.word	0x20000000

08003630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	b08b      	sub	sp, #44	; 0x2c
 8003634:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	2300      	movs	r3, #0
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800364a:	4b29      	ldr	r3, [pc, #164]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b04      	cmp	r3, #4
 8003658:	d002      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x30>
 800365a:	2b08      	cmp	r3, #8
 800365c:	d003      	beq.n	8003666 <HAL_RCC_GetSysClockFreq+0x36>
 800365e:	e03c      	b.n	80036da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003660:	4b24      	ldr	r3, [pc, #144]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003662:	623b      	str	r3, [r7, #32]
      break;
 8003664:	e03c      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800366c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003670:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	fa92 f2a2 	rbit	r2, r2
 8003678:	607a      	str	r2, [r7, #4]
  return result;
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	fab2 f282 	clz	r2, r2
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	40d3      	lsrs	r3, r2
 8003684:	4a1c      	ldr	r2, [pc, #112]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003686:	5cd3      	ldrb	r3, [r2, r3]
 8003688:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800368a:	4b19      	ldr	r3, [pc, #100]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	220f      	movs	r2, #15
 8003694:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	fa92 f2a2 	rbit	r2, r2
 800369c:	60fa      	str	r2, [r7, #12]
  return result;
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	fab2 f282 	clz	r2, r2
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	40d3      	lsrs	r3, r2
 80036a8:	4a14      	ldr	r2, [pc, #80]	; (80036fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80036aa:	5cd3      	ldrb	r3, [r2, r3]
 80036ac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036b8:	4a0e      	ldr	r2, [pc, #56]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
 80036c8:	e004      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	4a0c      	ldr	r2, [pc, #48]	; (8003700 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	623b      	str	r3, [r7, #32]
      break;
 80036d8:	e002      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036dc:	623b      	str	r3, [r7, #32]
      break;
 80036de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e0:	6a3b      	ldr	r3, [r7, #32]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	372c      	adds	r7, #44	; 0x2c
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000
 80036f4:	007a1200 	.word	0x007a1200
 80036f8:	080090a4 	.word	0x080090a4
 80036fc:	080090b4 	.word	0x080090b4
 8003700:	003d0900 	.word	0x003d0900

08003704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003708:	4b03      	ldr	r3, [pc, #12]	; (8003718 <HAL_RCC_GetHCLKFreq+0x14>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	2000000c 	.word	0x2000000c

0800371c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003722:	f7ff ffef 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8003726:	4601      	mov	r1, r0
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003730:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003734:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	fa92 f2a2 	rbit	r2, r2
 800373c:	603a      	str	r2, [r7, #0]
  return result;
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	fab2 f282 	clz	r2, r2
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	40d3      	lsrs	r3, r2
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <HAL_RCC_GetPCLK1Freq+0x40>)
 800374a:	5cd3      	ldrb	r3, [r2, r3]
 800374c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40021000 	.word	0x40021000
 800375c:	08009158 	.word	0x08009158

08003760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003766:	f7ff ffcd 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 800376a:	4601      	mov	r1, r0
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003774:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003778:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	fa92 f2a2 	rbit	r2, r2
 8003780:	603a      	str	r2, [r7, #0]
  return result;
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	fab2 f282 	clz	r2, r2
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	40d3      	lsrs	r3, r2
 800378c:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800378e:	5cd3      	ldrb	r3, [r2, r3]
 8003790:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000
 80037a0:	08009158 	.word	0x08009158

080037a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d104      	bne.n	80037be <HAL_RCC_GetClockConfig+0x1a>
 80037b4:	f240 4184 	movw	r1, #1156	; 0x484
 80037b8:	4818      	ldr	r0, [pc, #96]	; (800381c <HAL_RCC_GetClockConfig+0x78>)
 80037ba:	f005 f92c 	bl	8008a16 <assert_failed>
  assert_param(pFLatency != NULL);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d104      	bne.n	80037ce <HAL_RCC_GetClockConfig+0x2a>
 80037c4:	f240 4185 	movw	r1, #1157	; 0x485
 80037c8:	4814      	ldr	r0, [pc, #80]	; (800381c <HAL_RCC_GetClockConfig+0x78>)
 80037ca:	f005 f924 	bl	8008a16 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	220f      	movs	r2, #15
 80037d2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037d4:	4b12      	ldr	r3, [pc, #72]	; (8003820 <HAL_RCC_GetClockConfig+0x7c>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0203 	and.w	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <HAL_RCC_GetClockConfig+0x7c>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <HAL_RCC_GetClockConfig+0x7c>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_GetClockConfig+0x7c>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	08db      	lsrs	r3, r3, #3
 80037fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003806:	4b07      	ldr	r3, [pc, #28]	; (8003824 <HAL_RCC_GetClockConfig+0x80>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0207 	and.w	r2, r3, #7
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	601a      	str	r2, [r3, #0]
}
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	08008f50 	.word	0x08008f50
 8003820:	40021000 	.word	0x40021000
 8003824:	40022000 	.word	0x40022000

08003828 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b092      	sub	sp, #72	; 0x48
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a63      	ldr	r2, [pc, #396]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d903      	bls.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x22>
 8003842:	2171      	movs	r1, #113	; 0x71
 8003844:	4862      	ldr	r0, [pc, #392]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003846:	f005 f8e6 	bl	8008a16 <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80f4 	beq.w	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d012      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003868:	d00d      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003872:	d008      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800387c:	d003      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800387e:	2177      	movs	r1, #119	; 0x77
 8003880:	4853      	ldr	r0, [pc, #332]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003882:	f005 f8c8 	bl	8008a16 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388c:	4b51      	ldr	r3, [pc, #324]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10e      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003898:	4b4e      	ldr	r3, [pc, #312]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	4a4d      	ldr	r2, [pc, #308]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800389e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a2:	61d3      	str	r3, [r2, #28]
 80038a4:	4b4b      	ldr	r3, [pc, #300]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b6:	4b48      	ldr	r3, [pc, #288]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d118      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038c2:	4b45      	ldr	r3, [pc, #276]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a44      	ldr	r2, [pc, #272]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ce:	f7fc fca9 	bl	8000224 <HAL_GetTick>
 80038d2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d4:	e008      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d6:	f7fc fca5 	bl	8000224 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b64      	cmp	r3, #100	; 0x64
 80038e2:	d901      	bls.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e228      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x512>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038f4:	4b37      	ldr	r3, [pc, #220]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 808a 	beq.w	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003910:	429a      	cmp	r2, r3
 8003912:	f000 8082 	beq.w	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003916:	4b2f      	ldr	r3, [pc, #188]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003924:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800392e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003930:	fab3 f383 	clz	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	4b28      	ldr	r3, [pc, #160]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	461a      	mov	r2, r3
 8003940:	2301      	movs	r3, #1
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003954:	fab3 f383 	clz	r3, r3
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	4b1f      	ldr	r3, [pc, #124]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	461a      	mov	r2, r3
 8003964:	2300      	movs	r3, #0
 8003966:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003968:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800396a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800396e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d050      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003978:	f7fc fc54 	bl	8000224 <HAL_GetTick>
 800397c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397e:	e00a      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7fc fc50 	bl	8000224 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x16e>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e1d1      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x512>
 8003996:	2302      	movs	r3, #2
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	fa93 f3a3 	rbit	r3, r3
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
 80039a2:	2302      	movs	r3, #2
 80039a4:	623b      	str	r3, [r7, #32]
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	fa93 f3a3 	rbit	r3, r3
 80039ac:	61fb      	str	r3, [r7, #28]
  return result;
 80039ae:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b0:	fab3 f383 	clz	r3, r3
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	f043 0302 	orr.w	r3, r3, #2
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d10d      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	e012      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80039ca:	bf00      	nop
 80039cc:	001f92e1 	.word	0x001f92e1
 80039d0:	08008f88 	.word	0x08008f88
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40007000 	.word	0x40007000
 80039dc:	10908100 	.word	0x10908100
 80039e0:	2302      	movs	r3, #2
 80039e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	4ba2      	ldr	r3, [pc, #648]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	2202      	movs	r2, #2
 80039f2:	613a      	str	r2, [r7, #16]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	fa92 f2a2 	rbit	r2, r2
 80039fa:	60fa      	str	r2, [r7, #12]
  return result;
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	fab2 f282 	clz	r2, r2
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	f002 021f 	and.w	r2, r2, #31
 8003a0e:	2101      	movs	r1, #1
 8003a10:	fa01 f202 	lsl.w	r2, r1, r2
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0b2      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x158>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a1a:	4b97      	ldr	r3, [pc, #604]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4994      	ldr	r1, [pc, #592]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d105      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a34:	4b90      	ldr	r3, [pc, #576]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	4a8f      	ldr	r2, [pc, #572]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01c      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00f      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d00b      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d007      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d003      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003a6c:	21be      	movs	r1, #190	; 0xbe
 8003a6e:	4883      	ldr	r0, [pc, #524]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003a70:	f004 ffd1 	bl	8008a16 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a74:	4b80      	ldr	r3, [pc, #512]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	f023 0203 	bic.w	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	497d      	ldr	r1, [pc, #500]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d014      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d007      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x282>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b10      	cmp	r3, #16
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x282>
 8003aa2:	21e0      	movs	r1, #224	; 0xe0
 8003aa4:	4875      	ldr	r0, [pc, #468]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003aa6:	f004 ffb6 	bl	8008a16 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aaa:	4b73      	ldr	r3, [pc, #460]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f023 0210 	bic.w	r2, r3, #16
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	4970      	ldr	r1, [pc, #448]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d015      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad0:	d007      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003ada:	21ee      	movs	r1, #238	; 0xee
 8003adc:	4867      	ldr	r0, [pc, #412]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003ade:	f004 ff9a 	bl	8008a16 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ae2:	4b65      	ldr	r3, [pc, #404]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	4962      	ldr	r1, [pc, #392]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d015      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d004      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 8003b10:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003b14:	4859      	ldr	r0, [pc, #356]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003b16:	f004 ff7e 	bl	8008a16 <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b1a:	4b57      	ldr	r3, [pc, #348]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	f023 0220 	bic.w	r2, r3, #32
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	4954      	ldr	r1, [pc, #336]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	2b40      	cmp	r3, #64	; 0x40
 8003b46:	d004      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003b48:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003b4c:	484b      	ldr	r0, [pc, #300]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003b4e:	f004 ff62 	bl	8008a16 <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b52:	4b49      	ldr	r3, [pc, #292]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	4946      	ldr	r1, [pc, #280]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d016      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d009      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b80:	d004      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003b82:	f240 113d 	movw	r1, #317	; 0x13d
 8003b86:	483d      	ldr	r0, [pc, #244]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003b88:	f004 ff45 	bl	8008a16 <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b8c:	4b3a      	ldr	r3, [pc, #232]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	4937      	ldr	r1, [pc, #220]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d04d      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d040      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bba:	d03b      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8003bc4:	d036      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8003bce:	d031      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8003bd8:	d02c      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003be2:	d027      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8003bec:	d022      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8003bf6:	d01d      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8003c00:	d018      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003c0a:	d013      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003c14:	d00e      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8003c1e:	d009      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003c28:	d004      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003c2a:	f240 114d 	movw	r1, #333	; 0x14d
 8003c2e:	4813      	ldr	r0, [pc, #76]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003c30:	f004 fef1 	bl	8008a16 <assert_failed>
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003c34:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	490d      	ldr	r1, [pc, #52]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01b      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c62:	d004      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003c64:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8003c68:	4804      	ldr	r0, [pc, #16]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003c6a:	f004 fed4 	bl	8008a16 <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c6e:	4b02      	ldr	r3, [pc, #8]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c76:	e003      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	08008f88 	.word	0x08008f88
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	492f      	ldr	r1, [pc, #188]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca6:	d004      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003ca8:	f240 11af 	movw	r1, #431	; 0x1af
 8003cac:	4826      	ldr	r0, [pc, #152]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8003cae:	f004 feb2 	bl	8008a16 <assert_failed>
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003cb2:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	4921      	ldr	r1, [pc, #132]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d016      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d009      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce0:	d004      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8003ce2:	f240 11b9 	movw	r1, #441	; 0x1b9
 8003ce6:	4818      	ldr	r0, [pc, #96]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8003ce8:	f004 fe95 	bl	8008a16 <assert_failed>
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003cec:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	4912      	ldr	r1, [pc, #72]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d016      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x510>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1a:	d004      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003d1c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003d20:	4809      	ldr	r0, [pc, #36]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8003d22:	f004 fe78 	bl	8008a16 <assert_failed>
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003d26:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	4904      	ldr	r1, [pc, #16]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3748      	adds	r7, #72	; 0x48
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	08008f88 	.word	0x08008f88

08003d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e079      	b.n	8003e52 <HAL_TIM_Base_Init+0x106>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a3e      	ldr	r2, [pc, #248]	; (8003e5c <HAL_TIM_Base_Init+0x110>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d01d      	beq.n	8003da4 <HAL_TIM_Base_Init+0x58>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d70:	d018      	beq.n	8003da4 <HAL_TIM_Base_Init+0x58>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a3a      	ldr	r2, [pc, #232]	; (8003e60 <HAL_TIM_Base_Init+0x114>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <HAL_TIM_Base_Init+0x58>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a38      	ldr	r2, [pc, #224]	; (8003e64 <HAL_TIM_Base_Init+0x118>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00e      	beq.n	8003da4 <HAL_TIM_Base_Init+0x58>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a37      	ldr	r2, [pc, #220]	; (8003e68 <HAL_TIM_Base_Init+0x11c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <HAL_TIM_Base_Init+0x58>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a35      	ldr	r2, [pc, #212]	; (8003e6c <HAL_TIM_Base_Init+0x120>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <HAL_TIM_Base_Init+0x58>
 8003d9a:	f240 1119 	movw	r1, #281	; 0x119
 8003d9e:	4834      	ldr	r0, [pc, #208]	; (8003e70 <HAL_TIM_Base_Init+0x124>)
 8003da0:	f004 fe39 	bl	8008a16 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d014      	beq.n	8003dd6 <HAL_TIM_Base_Init+0x8a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d010      	beq.n	8003dd6 <HAL_TIM_Base_Init+0x8a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d00c      	beq.n	8003dd6 <HAL_TIM_Base_Init+0x8a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d008      	beq.n	8003dd6 <HAL_TIM_Base_Init+0x8a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b60      	cmp	r3, #96	; 0x60
 8003dca:	d004      	beq.n	8003dd6 <HAL_TIM_Base_Init+0x8a>
 8003dcc:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8003dd0:	4827      	ldr	r0, [pc, #156]	; (8003e70 <HAL_TIM_Base_Init+0x124>)
 8003dd2:	f004 fe20 	bl	8008a16 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00e      	beq.n	8003dfc <HAL_TIM_Base_Init+0xb0>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de6:	d009      	beq.n	8003dfc <HAL_TIM_Base_Init+0xb0>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df0:	d004      	beq.n	8003dfc <HAL_TIM_Base_Init+0xb0>
 8003df2:	f240 111b 	movw	r1, #283	; 0x11b
 8003df6:	481e      	ldr	r0, [pc, #120]	; (8003e70 <HAL_TIM_Base_Init+0x124>)
 8003df8:	f004 fe0d 	bl	8008a16 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_TIM_Base_Init+0xca>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b80      	cmp	r3, #128	; 0x80
 8003e0a:	d004      	beq.n	8003e16 <HAL_TIM_Base_Init+0xca>
 8003e0c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8003e10:	4817      	ldr	r0, [pc, #92]	; (8003e70 <HAL_TIM_Base_Init+0x124>)
 8003e12:	f004 fe00 	bl	8008a16 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_TIM_Base_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f822 	bl	8003e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4619      	mov	r1, r3
 8003e42:	4610      	mov	r0, r2
 8003e44:	f000 f9c0 	bl	80041c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40012c00 	.word	0x40012c00
 8003e60:	40001000 	.word	0x40001000
 8003e64:	40014000 	.word	0x40014000
 8003e68:	40014400 	.word	0x40014400
 8003e6c:	40014800 	.word	0x40014800
 8003e70:	08008fe4 	.word	0x08008fe4

08003e74 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a21      	ldr	r2, [pc, #132]	; (8003f1c <HAL_TIM_Base_Start_IT+0x94>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01d      	beq.n	8003ed6 <HAL_TIM_Base_Start_IT+0x4e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea2:	d018      	beq.n	8003ed6 <HAL_TIM_Base_Start_IT+0x4e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1d      	ldr	r2, [pc, #116]	; (8003f20 <HAL_TIM_Base_Start_IT+0x98>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <HAL_TIM_Base_Start_IT+0x4e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <HAL_TIM_Base_Start_IT+0x9c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_TIM_Base_Start_IT+0x4e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1a      	ldr	r2, [pc, #104]	; (8003f28 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d009      	beq.n	8003ed6 <HAL_TIM_Base_Start_IT+0x4e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <HAL_TIM_Base_Start_IT+0xa4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d004      	beq.n	8003ed6 <HAL_TIM_Base_Start_IT+0x4e>
 8003ecc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003ed0:	4817      	ldr	r0, [pc, #92]	; (8003f30 <HAL_TIM_Base_Start_IT+0xa8>)
 8003ed2:	f004 fda0 	bl	8008a16 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <HAL_TIM_Base_Start_IT+0xac>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b06      	cmp	r3, #6
 8003ef6:	d00b      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x88>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efe:	d007      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x88>
  {
    __HAL_TIM_ENABLE(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	40001000 	.word	0x40001000
 8003f24:	40014000 	.word	0x40014000
 8003f28:	40014400 	.word	0x40014400
 8003f2c:	40014800 	.word	0x40014800
 8003f30:	08008fe4 	.word	0x08008fe4
 8003f34:	00010007 	.word	0x00010007

08003f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d122      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d11b      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0202 	mvn.w	r2, #2
 8003f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f905 	bl	800418a <HAL_TIM_IC_CaptureCallback>
 8003f80:	e005      	b.n	8003f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8f7 	bl	8004176 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f908 	bl	800419e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d122      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d11b      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0204 	mvn.w	r2, #4
 8003fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8db 	bl	800418a <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e005      	b.n	8003fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f8cd 	bl	8004176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f8de 	bl	800419e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d122      	bne.n	800403c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b08      	cmp	r3, #8
 8004002:	d11b      	bne.n	800403c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0208 	mvn.w	r2, #8
 800400c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2204      	movs	r2, #4
 8004012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f8b1 	bl	800418a <HAL_TIM_IC_CaptureCallback>
 8004028:	e005      	b.n	8004036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f8a3 	bl	8004176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f8b4 	bl	800419e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	2b10      	cmp	r3, #16
 8004048:	d122      	bne.n	8004090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b10      	cmp	r3, #16
 8004056:	d11b      	bne.n	8004090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0210 	mvn.w	r2, #16
 8004060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2208      	movs	r2, #8
 8004066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f887 	bl	800418a <HAL_TIM_IC_CaptureCallback>
 800407c:	e005      	b.n	800408a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f879 	bl	8004176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f88a 	bl	800419e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b01      	cmp	r3, #1
 800409c:	d10e      	bne.n	80040bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d107      	bne.n	80040bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0201 	mvn.w	r2, #1
 80040b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f004 fc94 	bl	80089e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c6:	2b80      	cmp	r3, #128	; 0x80
 80040c8:	d10e      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	2b80      	cmp	r3, #128	; 0x80
 80040d6:	d107      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8e8 	bl	80042b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f6:	d10e      	bne.n	8004116 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004102:	2b80      	cmp	r3, #128	; 0x80
 8004104:	d107      	bne.n	8004116 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800410e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f8db 	bl	80042cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004120:	2b40      	cmp	r3, #64	; 0x40
 8004122:	d10e      	bne.n	8004142 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d107      	bne.n	8004142 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800413a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f838 	bl	80041b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b20      	cmp	r3, #32
 800414e:	d10e      	bne.n	800416e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b20      	cmp	r3, #32
 800415c:	d107      	bne.n	800416e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f06f 0220 	mvn.w	r2, #32
 8004166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f89b 	bl	80042a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a2e      	ldr	r2, [pc, #184]	; (8004294 <TIM_Base_SetConfig+0xcc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d003      	beq.n	80041e8 <TIM_Base_SetConfig+0x20>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e6:	d108      	bne.n	80041fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a25      	ldr	r2, [pc, #148]	; (8004294 <TIM_Base_SetConfig+0xcc>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00f      	beq.n	8004222 <TIM_Base_SetConfig+0x5a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004208:	d00b      	beq.n	8004222 <TIM_Base_SetConfig+0x5a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a22      	ldr	r2, [pc, #136]	; (8004298 <TIM_Base_SetConfig+0xd0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <TIM_Base_SetConfig+0x5a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a21      	ldr	r2, [pc, #132]	; (800429c <TIM_Base_SetConfig+0xd4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_Base_SetConfig+0x5a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a20      	ldr	r2, [pc, #128]	; (80042a0 <TIM_Base_SetConfig+0xd8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d108      	bne.n	8004234 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a0e      	ldr	r2, [pc, #56]	; (8004294 <TIM_Base_SetConfig+0xcc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00b      	beq.n	8004278 <TIM_Base_SetConfig+0xb0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <TIM_Base_SetConfig+0xd0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d007      	beq.n	8004278 <TIM_Base_SetConfig+0xb0>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a0c      	ldr	r2, [pc, #48]	; (800429c <TIM_Base_SetConfig+0xd4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d003      	beq.n	8004278 <TIM_Base_SetConfig+0xb0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a0b      	ldr	r2, [pc, #44]	; (80042a0 <TIM_Base_SetConfig+0xd8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d103      	bne.n	8004280 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	615a      	str	r2, [r3, #20]
}
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40012c00 	.word	0x40012c00
 8004298:	40014000 	.word	0x40014000
 800429c:	40014400 	.word	0x40014400
 80042a0:	40014800 	.word	0x40014800

080042a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e06d      	b.n	80043ce <HAL_UART_Init+0xee>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d014      	beq.n	8004324 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a36      	ldr	r2, [pc, #216]	; (80043d8 <HAL_UART_Init+0xf8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d023      	beq.n	800434c <HAL_UART_Init+0x6c>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a34      	ldr	r2, [pc, #208]	; (80043dc <HAL_UART_Init+0xfc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d01e      	beq.n	800434c <HAL_UART_Init+0x6c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a33      	ldr	r2, [pc, #204]	; (80043e0 <HAL_UART_Init+0x100>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d019      	beq.n	800434c <HAL_UART_Init+0x6c>
 8004318:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800431c:	4831      	ldr	r0, [pc, #196]	; (80043e4 <HAL_UART_Init+0x104>)
 800431e:	f004 fb7a 	bl	8008a16 <assert_failed>
 8004322:	e013      	b.n	800434c <HAL_UART_Init+0x6c>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2b      	ldr	r2, [pc, #172]	; (80043d8 <HAL_UART_Init+0xf8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00e      	beq.n	800434c <HAL_UART_Init+0x6c>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2a      	ldr	r2, [pc, #168]	; (80043dc <HAL_UART_Init+0xfc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d009      	beq.n	800434c <HAL_UART_Init+0x6c>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a28      	ldr	r2, [pc, #160]	; (80043e0 <HAL_UART_Init+0x100>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_UART_Init+0x6c>
 8004342:	f240 112f 	movw	r1, #303	; 0x12f
 8004346:	4827      	ldr	r0, [pc, #156]	; (80043e4 <HAL_UART_Init+0x104>)
 8004348:	f004 fb65 	bl	8008a16 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004350:	2b00      	cmp	r3, #0
 8004352:	d106      	bne.n	8004362 <HAL_UART_Init+0x82>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f004 fcab 	bl	8008cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2224      	movs	r2, #36	; 0x24
 8004366:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fa83 	bl	8004884 <UART_SetConfig>
 800437e:	4603      	mov	r3, r0
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_UART_Init+0xa8>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e022      	b.n	80043ce <HAL_UART_Init+0xee>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_UART_Init+0xb6>
  {
    UART_AdvFeatureConfig(huart);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fc87 	bl	8004ca4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fdac 	bl	8004f24 <UART_CheckIdleState>
 80043cc:	4603      	mov	r3, r0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40013800 	.word	0x40013800
 80043dc:	40004400 	.word	0x40004400
 80043e0:	40004800 	.word	0x40004800
 80043e4:	0800901c 	.word	0x0800901c

080043e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	4613      	mov	r3, r2
 80043f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	d144      	bne.n	8004488 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <HAL_UART_Transmit_IT+0x22>
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e03d      	b.n	800448a <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_UART_Transmit_IT+0x34>
 8004418:	2302      	movs	r3, #2
 800441a:	e036      	b.n	800448a <HAL_UART_Transmit_IT+0xa2>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	88fa      	ldrh	r2, [r7, #6]
 800442e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	88fa      	ldrh	r2, [r7, #6]
 8004436:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2221      	movs	r2, #33	; 0x21
 800444a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004454:	d107      	bne.n	8004466 <HAL_UART_Transmit_IT+0x7e>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d103      	bne.n	8004466 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a0d      	ldr	r2, [pc, #52]	; (8004498 <HAL_UART_Transmit_IT+0xb0>)
 8004462:	665a      	str	r2, [r3, #100]	; 0x64
 8004464:	e002      	b.n	800446c <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4a0c      	ldr	r2, [pc, #48]	; (800449c <HAL_UART_Transmit_IT+0xb4>)
 800446a:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004482:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	e000      	b.n	800448a <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8004488:	2302      	movs	r3, #2
  }
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	08005185 	.word	0x08005185
 800449c:	08005111 	.word	0x08005111

080044a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	4613      	mov	r3, r2
 80044ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	f040 808a 	bne.w	80045cc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_UART_Receive_IT+0x24>
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e082      	b.n	80045ce <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_UART_Receive_IT+0x36>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e07b      	b.n	80045ce <HAL_UART_Receive_IT+0x12e>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	88fa      	ldrh	r2, [r7, #6]
 80044e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	88fa      	ldrh	r2, [r7, #6]
 80044f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004502:	d10e      	bne.n	8004522 <HAL_UART_Receive_IT+0x82>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d105      	bne.n	8004518 <HAL_UART_Receive_IT+0x78>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004512:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004516:	e02d      	b.n	8004574 <HAL_UART_Receive_IT+0xd4>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	22ff      	movs	r2, #255	; 0xff
 800451c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004520:	e028      	b.n	8004574 <HAL_UART_Receive_IT+0xd4>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10d      	bne.n	8004546 <HAL_UART_Receive_IT+0xa6>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d104      	bne.n	800453c <HAL_UART_Receive_IT+0x9c>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	22ff      	movs	r2, #255	; 0xff
 8004536:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800453a:	e01b      	b.n	8004574 <HAL_UART_Receive_IT+0xd4>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	227f      	movs	r2, #127	; 0x7f
 8004540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004544:	e016      	b.n	8004574 <HAL_UART_Receive_IT+0xd4>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800454e:	d10d      	bne.n	800456c <HAL_UART_Receive_IT+0xcc>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <HAL_UART_Receive_IT+0xc2>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	227f      	movs	r2, #127	; 0x7f
 800455c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004560:	e008      	b.n	8004574 <HAL_UART_Receive_IT+0xd4>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	223f      	movs	r2, #63	; 0x3f
 8004566:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800456a:	e003      	b.n	8004574 <HAL_UART_Receive_IT+0xd4>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2222      	movs	r2, #34	; 0x22
 800457e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004598:	d107      	bne.n	80045aa <HAL_UART_Receive_IT+0x10a>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d103      	bne.n	80045aa <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4a0d      	ldr	r2, [pc, #52]	; (80045dc <HAL_UART_Receive_IT+0x13c>)
 80045a6:	661a      	str	r2, [r3, #96]	; 0x60
 80045a8:	e002      	b.n	80045b0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4a0c      	ldr	r2, [pc, #48]	; (80045e0 <HAL_UART_Receive_IT+0x140>)
 80045ae:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80045c6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	e000      	b.n	80045ce <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
  }
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	080052d9 	.word	0x080052d9
 80045e0:	08005233 	.word	0x08005233

080045e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	f640 030f 	movw	r3, #2063	; 0x80f
 800460a:	4013      	ands	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d113      	bne.n	800463c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00e      	beq.n	800463c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b00      	cmp	r3, #0
 8004626:	d009      	beq.n	800463c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8114 	beq.w	800485a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	4798      	blx	r3
      }
      return;
 800463a:	e10e      	b.n	800485a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 80d6 	beq.w	80047f0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d105      	bne.n	800465a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80cb 	beq.w	80047f0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00e      	beq.n	8004682 <HAL_UART_IRQHandler+0x9e>
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2201      	movs	r2, #1
 8004674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800467a:	f043 0201 	orr.w	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00e      	beq.n	80046aa <HAL_UART_IRQHandler+0xc6>
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2202      	movs	r2, #2
 800469c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a2:	f043 0204 	orr.w	r2, r3, #4
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00e      	beq.n	80046d2 <HAL_UART_IRQHandler+0xee>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2204      	movs	r2, #4
 80046c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ca:	f043 0202 	orr.w	r2, r3, #2
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d013      	beq.n	8004704 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d104      	bne.n	80046f0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d009      	beq.n	8004704 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2208      	movs	r2, #8
 80046f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046fc:	f043 0208 	orr.w	r2, r3, #8
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00f      	beq.n	800472e <HAL_UART_IRQHandler+0x14a>
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004720:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004726:	f043 0220 	orr.w	r2, r3, #32
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8093 	beq.w	800485e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00c      	beq.n	800475c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f003 0320 	and.w	r3, r3, #32
 8004748:	2b00      	cmp	r3, #0
 800474a:	d007      	beq.n	800475c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004760:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	d004      	beq.n	800477a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004776:	2b00      	cmp	r3, #0
 8004778:	d031      	beq.n	80047de <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fc92 	bl	80050a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	d123      	bne.n	80047d6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800479c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d013      	beq.n	80047ce <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047aa:	4a30      	ldr	r2, [pc, #192]	; (800486c <HAL_UART_IRQHandler+0x288>)
 80047ac:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fd fa46 	bl	8001c44 <HAL_DMA_Abort_IT>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d016      	beq.n	80047ec <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80047c8:	4610      	mov	r0, r2
 80047ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047cc:	e00e      	b.n	80047ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f84e 	bl	8004870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d4:	e00a      	b.n	80047ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f84a 	bl	8004870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047dc:	e006      	b.n	80047ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f846 	bl	8004870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80047ea:	e038      	b.n	800485e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ec:	bf00      	nop
    return;
 80047ee:	e036      	b.n	800485e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00d      	beq.n	8004816 <HAL_UART_IRQHandler+0x232>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800480c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fdb5 	bl	800537e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004814:	e026      	b.n	8004864 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00d      	beq.n	800483c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800482e:	2b00      	cmp	r3, #0
 8004830:	d017      	beq.n	8004862 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4798      	blx	r3
    }
    return;
 800483a:	e012      	b.n	8004862 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00e      	beq.n	8004864 <HAL_UART_IRQHandler+0x280>
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d009      	beq.n	8004864 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fcd5 	bl	8005200 <UART_EndTransmit_IT>
    return;
 8004856:	bf00      	nop
 8004858:	e004      	b.n	8004864 <HAL_UART_IRQHandler+0x280>
      return;
 800485a:	bf00      	nop
 800485c:	e002      	b.n	8004864 <HAL_UART_IRQHandler+0x280>
    return;
 800485e:	bf00      	nop
 8004860:	e000      	b.n	8004864 <HAL_UART_IRQHandler+0x280>
    return;
 8004862:	bf00      	nop
  }

}
 8004864:	3720      	adds	r7, #32
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	080050e5 	.word	0x080050e5

08004870 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800488c:	2300      	movs	r3, #0
 800488e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4a9f      	ldr	r2, [pc, #636]	; (8004b18 <UART_SetConfig+0x294>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d904      	bls.n	80048a8 <UART_SetConfig+0x24>
 800489e:	f640 21a2 	movw	r1, #2722	; 0xaa2
 80048a2:	489e      	ldr	r0, [pc, #632]	; (8004b1c <UART_SetConfig+0x298>)
 80048a4:	f004 f8b7 	bl	8008a16 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048b0:	d00d      	beq.n	80048ce <UART_SetConfig+0x4a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <UART_SetConfig+0x4a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c2:	d004      	beq.n	80048ce <UART_SetConfig+0x4a>
 80048c4:	f640 21a3 	movw	r1, #2723	; 0xaa3
 80048c8:	4894      	ldr	r0, [pc, #592]	; (8004b1c <UART_SetConfig+0x298>)
 80048ca:	f004 f8a4 	bl	8008a16 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d6:	d012      	beq.n	80048fe <UART_SetConfig+0x7a>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00e      	beq.n	80048fe <UART_SetConfig+0x7a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048e8:	d009      	beq.n	80048fe <UART_SetConfig+0x7a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f2:	d004      	beq.n	80048fe <UART_SetConfig+0x7a>
 80048f4:	f640 21a4 	movw	r1, #2724	; 0xaa4
 80048f8:	4888      	ldr	r0, [pc, #544]	; (8004b1c <UART_SetConfig+0x298>)
 80048fa:	f004 f88c 	bl	8008a16 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <UART_SetConfig+0x96>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800490e:	d004      	beq.n	800491a <UART_SetConfig+0x96>
 8004910:	f640 21a5 	movw	r1, #2725	; 0xaa5
 8004914:	4881      	ldr	r0, [pc, #516]	; (8004b1c <UART_SetConfig+0x298>)
 8004916:	f004 f87e 	bl	8008a16 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00e      	beq.n	8004940 <UART_SetConfig+0xbc>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800492a:	d009      	beq.n	8004940 <UART_SetConfig+0xbc>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004934:	d004      	beq.n	8004940 <UART_SetConfig+0xbc>
 8004936:	f640 21a7 	movw	r1, #2727	; 0xaa7
 800493a:	4878      	ldr	r0, [pc, #480]	; (8004b1c <UART_SetConfig+0x298>)
 800493c:	f004 f86b 	bl	8008a16 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	f023 030c 	bic.w	r3, r3, #12
 8004948:	2b00      	cmp	r3, #0
 800494a:	d103      	bne.n	8004954 <UART_SetConfig+0xd0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d104      	bne.n	800495e <UART_SetConfig+0xda>
 8004954:	f640 21a8 	movw	r1, #2728	; 0xaa8
 8004958:	4870      	ldr	r0, [pc, #448]	; (8004b1c <UART_SetConfig+0x298>)
 800495a:	f004 f85c 	bl	8008a16 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d013      	beq.n	800498e <UART_SetConfig+0x10a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496e:	d00e      	beq.n	800498e <UART_SetConfig+0x10a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004978:	d009      	beq.n	800498e <UART_SetConfig+0x10a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004982:	d004      	beq.n	800498e <UART_SetConfig+0x10a>
 8004984:	f640 21a9 	movw	r1, #2729	; 0xaa9
 8004988:	4864      	ldr	r0, [pc, #400]	; (8004b1c <UART_SetConfig+0x298>)
 800498a:	f004 f844 	bl	8008a16 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <UART_SetConfig+0x126>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499e:	d004      	beq.n	80049aa <UART_SetConfig+0x126>
 80049a0:	f640 21aa 	movw	r1, #2730	; 0xaaa
 80049a4:	485d      	ldr	r0, [pc, #372]	; (8004b1c <UART_SetConfig+0x298>)
 80049a6:	f004 f836 	bl	8008a16 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4b55      	ldr	r3, [pc, #340]	; (8004b20 <UART_SetConfig+0x29c>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	6939      	ldr	r1, [r7, #16]
 80049d2:	430b      	orrs	r3, r1
 80049d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a43      	ldr	r2, [pc, #268]	; (8004b24 <UART_SetConfig+0x2a0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d120      	bne.n	8004a5c <UART_SetConfig+0x1d8>
 8004a1a:	4b43      	ldr	r3, [pc, #268]	; (8004b28 <UART_SetConfig+0x2a4>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d816      	bhi.n	8004a54 <UART_SetConfig+0x1d0>
 8004a26:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <UART_SetConfig+0x1a8>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004a3d 	.word	0x08004a3d
 8004a30:	08004a49 	.word	0x08004a49
 8004a34:	08004a4f 	.word	0x08004a4f
 8004a38:	08004a43 	.word	0x08004a43
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	e01e      	b.n	8004a80 <UART_SetConfig+0x1fc>
 8004a42:	2302      	movs	r3, #2
 8004a44:	77fb      	strb	r3, [r7, #31]
 8004a46:	e01b      	b.n	8004a80 <UART_SetConfig+0x1fc>
 8004a48:	2304      	movs	r3, #4
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e018      	b.n	8004a80 <UART_SetConfig+0x1fc>
 8004a4e:	2308      	movs	r3, #8
 8004a50:	77fb      	strb	r3, [r7, #31]
 8004a52:	e015      	b.n	8004a80 <UART_SetConfig+0x1fc>
 8004a54:	2310      	movs	r3, #16
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	bf00      	nop
 8004a5a:	e011      	b.n	8004a80 <UART_SetConfig+0x1fc>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a32      	ldr	r2, [pc, #200]	; (8004b2c <UART_SetConfig+0x2a8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d102      	bne.n	8004a6c <UART_SetConfig+0x1e8>
 8004a66:	2300      	movs	r3, #0
 8004a68:	77fb      	strb	r3, [r7, #31]
 8004a6a:	e009      	b.n	8004a80 <UART_SetConfig+0x1fc>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a2f      	ldr	r2, [pc, #188]	; (8004b30 <UART_SetConfig+0x2ac>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d102      	bne.n	8004a7c <UART_SetConfig+0x1f8>
 8004a76:	2300      	movs	r3, #0
 8004a78:	77fb      	strb	r3, [r7, #31]
 8004a7a:	e001      	b.n	8004a80 <UART_SetConfig+0x1fc>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a88:	f040 8090 	bne.w	8004bac <UART_SetConfig+0x328>
  {
    switch (clocksource)
 8004a8c:	7ffb      	ldrb	r3, [r7, #31]
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d86c      	bhi.n	8004b6c <UART_SetConfig+0x2e8>
 8004a92:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <UART_SetConfig+0x214>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004abd 	.word	0x08004abd
 8004a9c:	08004add 	.word	0x08004add
 8004aa0:	08004afd 	.word	0x08004afd
 8004aa4:	08004b6d 	.word	0x08004b6d
 8004aa8:	08004b35 	.word	0x08004b35
 8004aac:	08004b6d 	.word	0x08004b6d
 8004ab0:	08004b6d 	.word	0x08004b6d
 8004ab4:	08004b6d 	.word	0x08004b6d
 8004ab8:	08004b55 	.word	0x08004b55
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004abc:	f7fe fe2e 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 8004ac0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	005a      	lsls	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	085b      	lsrs	r3, r3, #1
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	61bb      	str	r3, [r7, #24]
        break;
 8004ada:	e04a      	b.n	8004b72 <UART_SetConfig+0x2ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004adc:	f7fe fe40 	bl	8003760 <HAL_RCC_GetPCLK2Freq>
 8004ae0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	005a      	lsls	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	441a      	add	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	61bb      	str	r3, [r7, #24]
        break;
 8004afa:	e03a      	b.n	8004b72 <UART_SetConfig+0x2ee>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004b06:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6852      	ldr	r2, [r2, #4]
 8004b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	61bb      	str	r3, [r7, #24]
        break;
 8004b16:	e02c      	b.n	8004b72 <UART_SetConfig+0x2ee>
 8004b18:	00895440 	.word	0x00895440
 8004b1c:	0800901c 	.word	0x0800901c
 8004b20:	efff69f3 	.word	0xefff69f3
 8004b24:	40013800 	.word	0x40013800
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40004400 	.word	0x40004400
 8004b30:	40004800 	.word	0x40004800
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b34:	f7fe fd7c 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8004b38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	005a      	lsls	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	441a      	add	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	61bb      	str	r3, [r7, #24]
        break;
 8004b52:	e00e      	b.n	8004b72 <UART_SetConfig+0x2ee>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	085b      	lsrs	r3, r3, #1
 8004b5a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	61bb      	str	r3, [r7, #24]
        break;
 8004b6a:	e002      	b.n	8004b72 <UART_SetConfig+0x2ee>
      default:
        ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	75fb      	strb	r3, [r7, #23]
        break;
 8004b70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2b0f      	cmp	r3, #15
 8004b76:	d916      	bls.n	8004ba6 <UART_SetConfig+0x322>
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7e:	d212      	bcs.n	8004ba6 <UART_SetConfig+0x322>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f023 030f 	bic.w	r3, r3, #15
 8004b88:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	085b      	lsrs	r3, r3, #1
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	897b      	ldrh	r3, [r7, #10]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	897a      	ldrh	r2, [r7, #10]
 8004ba2:	60da      	str	r2, [r3, #12]
 8004ba4:	e072      	b.n	8004c8c <UART_SetConfig+0x408>
    }
    else
    {
      ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	75fb      	strb	r3, [r7, #23]
 8004baa:	e06f      	b.n	8004c8c <UART_SetConfig+0x408>
    }
  }
  else
  {
    switch (clocksource)
 8004bac:	7ffb      	ldrb	r3, [r7, #31]
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d85b      	bhi.n	8004c6a <UART_SetConfig+0x3e6>
 8004bb2:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <UART_SetConfig+0x334>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004bdd 	.word	0x08004bdd
 8004bbc:	08004bfb 	.word	0x08004bfb
 8004bc0:	08004c19 	.word	0x08004c19
 8004bc4:	08004c6b 	.word	0x08004c6b
 8004bc8:	08004c35 	.word	0x08004c35
 8004bcc:	08004c6b 	.word	0x08004c6b
 8004bd0:	08004c6b 	.word	0x08004c6b
 8004bd4:	08004c6b 	.word	0x08004c6b
 8004bd8:	08004c53 	.word	0x08004c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bdc:	f7fe fd9e 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 8004be0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	085a      	lsrs	r2, r3, #1
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	441a      	add	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	61bb      	str	r3, [r7, #24]
        break;
 8004bf8:	e03a      	b.n	8004c70 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bfa:	f7fe fdb1 	bl	8003760 <HAL_RCC_GetPCLK2Freq>
 8004bfe:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	085a      	lsrs	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	441a      	add	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	61bb      	str	r3, [r7, #24]
        break;
 8004c16:	e02b      	b.n	8004c70 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004c22:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6852      	ldr	r2, [r2, #4]
 8004c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	61bb      	str	r3, [r7, #24]
        break;
 8004c32:	e01d      	b.n	8004c70 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c34:	f7fe fcfc 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8004c38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	085a      	lsrs	r2, r3, #1
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	441a      	add	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	61bb      	str	r3, [r7, #24]
        break;
 8004c50:	e00e      	b.n	8004c70 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	61bb      	str	r3, [r7, #24]
        break;
 8004c68:	e002      	b.n	8004c70 <UART_SetConfig+0x3ec>
      default:
        ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	75fb      	strb	r3, [r7, #23]
        break;
 8004c6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b0f      	cmp	r3, #15
 8004c74:	d908      	bls.n	8004c88 <UART_SetConfig+0x404>
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7c:	d204      	bcs.n	8004c88 <UART_SetConfig+0x404>
    {
      huart->Instance->BRR = usartdiv;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	60da      	str	r2, [r3, #12]
 8004c86:	e001      	b.n	8004c8c <UART_SetConfig+0x408>
    }
    else
    {
      ret = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop

08004ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	2bff      	cmp	r3, #255	; 0xff
 8004cb2:	d904      	bls.n	8004cbe <UART_AdvFeatureConfig+0x1a>
 8004cb4:	f640 3127 	movw	r1, #2855	; 0xb27
 8004cb8:	4898      	ldr	r0, [pc, #608]	; (8004f1c <UART_AdvFeatureConfig+0x278>)
 8004cba:	f003 feac 	bl	8008a16 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d018      	beq.n	8004cfc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <UART_AdvFeatureConfig+0x42>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cda:	d004      	beq.n	8004ce6 <UART_AdvFeatureConfig+0x42>
 8004cdc:	f640 312c 	movw	r1, #2860	; 0xb2c
 8004ce0:	488e      	ldr	r0, [pc, #568]	; (8004f1c <UART_AdvFeatureConfig+0x278>)
 8004ce2:	f003 fe98 	bl	8008a16 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d018      	beq.n	8004d3a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d009      	beq.n	8004d24 <UART_AdvFeatureConfig+0x80>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d18:	d004      	beq.n	8004d24 <UART_AdvFeatureConfig+0x80>
 8004d1a:	f640 3133 	movw	r1, #2867	; 0xb33
 8004d1e:	487f      	ldr	r0, [pc, #508]	; (8004f1c <UART_AdvFeatureConfig+0x278>)
 8004d20:	f003 fe79 	bl	8008a16 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d018      	beq.n	8004d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <UART_AdvFeatureConfig+0xbe>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d56:	d004      	beq.n	8004d62 <UART_AdvFeatureConfig+0xbe>
 8004d58:	f640 313a 	movw	r1, #2874	; 0xb3a
 8004d5c:	486f      	ldr	r0, [pc, #444]	; (8004f1c <UART_AdvFeatureConfig+0x278>)
 8004d5e:	f003 fe5a 	bl	8008a16 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d018      	beq.n	8004db6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d009      	beq.n	8004da0 <UART_AdvFeatureConfig+0xfc>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d94:	d004      	beq.n	8004da0 <UART_AdvFeatureConfig+0xfc>
 8004d96:	f640 3141 	movw	r1, #2881	; 0xb41
 8004d9a:	4860      	ldr	r0, [pc, #384]	; (8004f1c <UART_AdvFeatureConfig+0x278>)
 8004d9c:	f003 fe3b 	bl	8008a16 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d018      	beq.n	8004df4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <UART_AdvFeatureConfig+0x13a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd2:	d004      	beq.n	8004dde <UART_AdvFeatureConfig+0x13a>
 8004dd4:	f640 3148 	movw	r1, #2888	; 0xb48
 8004dd8:	4850      	ldr	r0, [pc, #320]	; (8004f1c <UART_AdvFeatureConfig+0x278>)
 8004dda:	f003 fe1c 	bl	8008a16 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d018      	beq.n	8004e32 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d009      	beq.n	8004e1c <UART_AdvFeatureConfig+0x178>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e10:	d004      	beq.n	8004e1c <UART_AdvFeatureConfig+0x178>
 8004e12:	f640 314f 	movw	r1, #2895	; 0xb4f
 8004e16:	4841      	ldr	r0, [pc, #260]	; (8004f1c <UART_AdvFeatureConfig+0x278>)
 8004e18:	f003 fdfd 	bl	8008a16 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d04a      	beq.n	8004ed4 <UART_AdvFeatureConfig+0x230>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a37      	ldr	r2, [pc, #220]	; (8004f20 <UART_AdvFeatureConfig+0x27c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d004      	beq.n	8004e52 <UART_AdvFeatureConfig+0x1ae>
 8004e48:	f640 3156 	movw	r1, #2902	; 0xb56
 8004e4c:	4833      	ldr	r0, [pc, #204]	; (8004f1c <UART_AdvFeatureConfig+0x278>)
 8004e4e:	f003 fde2 	bl	8008a16 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <UART_AdvFeatureConfig+0x1ca>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e62:	d004      	beq.n	8004e6e <UART_AdvFeatureConfig+0x1ca>
 8004e64:	f640 3157 	movw	r1, #2903	; 0xb57
 8004e68:	482c      	ldr	r0, [pc, #176]	; (8004f1c <UART_AdvFeatureConfig+0x278>)
 8004e6a:	f003 fdd4 	bl	8008a16 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8c:	d122      	bne.n	8004ed4 <UART_AdvFeatureConfig+0x230>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d013      	beq.n	8004ebe <UART_AdvFeatureConfig+0x21a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e9e:	d00e      	beq.n	8004ebe <UART_AdvFeatureConfig+0x21a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea8:	d009      	beq.n	8004ebe <UART_AdvFeatureConfig+0x21a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004eb2:	d004      	beq.n	8004ebe <UART_AdvFeatureConfig+0x21a>
 8004eb4:	f640 315c 	movw	r1, #2908	; 0xb5c
 8004eb8:	4818      	ldr	r0, [pc, #96]	; (8004f1c <UART_AdvFeatureConfig+0x278>)
 8004eba:	f003 fdac 	bl	8008a16 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d018      	beq.n	8004f12 <UART_AdvFeatureConfig+0x26e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d009      	beq.n	8004efc <UART_AdvFeatureConfig+0x258>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ef0:	d004      	beq.n	8004efc <UART_AdvFeatureConfig+0x258>
 8004ef2:	f640 3164 	movw	r1, #2916	; 0xb64
 8004ef6:	4809      	ldr	r0, [pc, #36]	; (8004f1c <UART_AdvFeatureConfig+0x278>)
 8004ef8:	f003 fd8d 	bl	8008a16 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	0800901c 	.word	0x0800901c
 8004f20:	40013800 	.word	0x40013800

08004f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004f32:	f7fb f977 	bl	8000224 <HAL_GetTick>
 8004f36:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d10e      	bne.n	8004f64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f82a 	bl	8004fae <UART_WaitOnFlagUntilTimeout>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e020      	b.n	8004fa6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d10e      	bne.n	8004f90 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f814 	bl	8004fae <UART_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e00a      	b.n	8004fa6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	603b      	str	r3, [r7, #0]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fbe:	e05d      	b.n	800507c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d059      	beq.n	800507c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc8:	f7fb f92c 	bl	8000224 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d302      	bcc.n	8004fde <UART_WaitOnFlagUntilTimeout+0x30>
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d11b      	bne.n	8005016 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0201 	bic.w	r2, r2, #1
 8004ffc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2220      	movs	r2, #32
 8005002:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e042      	b.n	800509c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d02b      	beq.n	800507c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800502e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005032:	d123      	bne.n	800507c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800503c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800504c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0201 	bic.w	r2, r2, #1
 800505c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2220      	movs	r2, #32
 8005062:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e00f      	b.n	800509c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69da      	ldr	r2, [r3, #28]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	4013      	ands	r3, r2
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	429a      	cmp	r2, r3
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	461a      	mov	r2, r3
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	429a      	cmp	r2, r3
 8005098:	d092      	beq.n	8004fc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050ba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0201 	bic.w	r2, r2, #1
 80050ca:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2220      	movs	r2, #32
 80050d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f7ff fbb4 	bl	8004870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005108:	bf00      	nop
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511c:	2b21      	cmp	r3, #33	; 0x21
 800511e:	d12b      	bne.n	8005178 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d110      	bne.n	800514e <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800513a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800514a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800514c:	e014      	b.n	8005178 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005152:	781a      	ldrb	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	b292      	uxth	r2, r2
 800515a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005190:	2b21      	cmp	r3, #33	; 0x21
 8005192:	d12f      	bne.n	80051f4 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d110      	bne.n	80051c2 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051ae:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051be:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80051c0:	e018      	b.n	80051f4 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	881a      	ldrh	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051d4:	b292      	uxth	r2, r2
 80051d6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051dc:	1c9a      	adds	r2, r3, #2
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80051f4:	bf00      	nop
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005216:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f003 fd09 	bl	8008c3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005240:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005246:	2b22      	cmp	r3, #34	; 0x22
 8005248:	d13a      	bne.n	80052c0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005250:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005252:	89bb      	ldrh	r3, [r7, #12]
 8005254:	b2d9      	uxtb	r1, r3
 8005256:	89fb      	ldrh	r3, [r7, #14]
 8005258:	b2da      	uxtb	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	400a      	ands	r2, r1
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d121      	bne.n	80052d0 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800529a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0201 	bic.w	r2, r2, #1
 80052aa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f003 fcab 	bl	8008c14 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052be:	e007      	b.n	80052d0 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0208 	orr.w	r2, r2, #8
 80052ce:	619a      	str	r2, [r3, #24]
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052e6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ec:	2b22      	cmp	r3, #34	; 0x22
 80052ee:	d13a      	bne.n	8005366 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052f6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80052fe:	89ba      	ldrh	r2, [r7, #12]
 8005300:	89fb      	ldrh	r3, [r7, #14]
 8005302:	4013      	ands	r3, r2
 8005304:	b29a      	uxth	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530e:	1c9a      	adds	r2, r3, #2
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d121      	bne.n	8005376 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005340:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0201 	bic.w	r2, r2, #1
 8005350:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f003 fc58 	bl	8008c14 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005364:	e007      	b.n	8005376 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	699a      	ldr	r2, [r3, #24]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0208 	orr.w	r2, r2, #8
 8005374:	619a      	str	r2, [r3, #24]
}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800539a:	f3ef 8305 	mrs	r3, IPSR
 800539e:	60bb      	str	r3, [r7, #8]
  return(result);
 80053a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10f      	bne.n	80053c6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053a6:	f3ef 8310 	mrs	r3, PRIMASK
 80053aa:	607b      	str	r3, [r7, #4]
  return(result);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d109      	bne.n	80053c6 <osKernelInitialize+0x32>
 80053b2:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <osKernelInitialize+0x64>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d109      	bne.n	80053ce <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053ba:	f3ef 8311 	mrs	r3, BASEPRI
 80053be:	603b      	str	r3, [r7, #0]
  return(result);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80053c6:	f06f 0305 	mvn.w	r3, #5
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e00c      	b.n	80053e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053ce:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <osKernelInitialize+0x64>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d105      	bne.n	80053e2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80053d6:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <osKernelInitialize+0x64>)
 80053d8:	2201      	movs	r2, #1
 80053da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053dc:	2300      	movs	r3, #0
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	e002      	b.n	80053e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80053e8:	68fb      	ldr	r3, [r7, #12]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	2000002c 	.word	0x2000002c

080053fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005402:	f3ef 8305 	mrs	r3, IPSR
 8005406:	60bb      	str	r3, [r7, #8]
  return(result);
 8005408:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10f      	bne.n	800542e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800540e:	f3ef 8310 	mrs	r3, PRIMASK
 8005412:	607b      	str	r3, [r7, #4]
  return(result);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <osKernelStart+0x32>
 800541a:	4b11      	ldr	r3, [pc, #68]	; (8005460 <osKernelStart+0x64>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d109      	bne.n	8005436 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005422:	f3ef 8311 	mrs	r3, BASEPRI
 8005426:	603b      	str	r3, [r7, #0]
  return(result);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <osKernelStart+0x3a>
    stat = osErrorISR;
 800542e:	f06f 0305 	mvn.w	r3, #5
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	e00e      	b.n	8005454 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005436:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <osKernelStart+0x64>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d107      	bne.n	800544e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800543e:	4b08      	ldr	r3, [pc, #32]	; (8005460 <osKernelStart+0x64>)
 8005440:	2202      	movs	r2, #2
 8005442:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005444:	f001 fa22 	bl	800688c <vTaskStartScheduler>
      stat = osOK;
 8005448:	2300      	movs	r3, #0
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	e002      	b.n	8005454 <osKernelStart+0x58>
    } else {
      stat = osError;
 800544e:	f04f 33ff 	mov.w	r3, #4294967295
 8005452:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005454:	68fb      	ldr	r3, [r7, #12]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	2000002c 	.word	0x2000002c

08005464 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b092      	sub	sp, #72	; 0x48
 8005468:	af04      	add	r7, sp, #16
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005474:	f3ef 8305 	mrs	r3, IPSR
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800547c:	2b00      	cmp	r3, #0
 800547e:	f040 8094 	bne.w	80055aa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005482:	f3ef 8310 	mrs	r3, PRIMASK
 8005486:	623b      	str	r3, [r7, #32]
  return(result);
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f040 808d 	bne.w	80055aa <osThreadNew+0x146>
 8005490:	4b48      	ldr	r3, [pc, #288]	; (80055b4 <osThreadNew+0x150>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d106      	bne.n	80054a6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005498:	f3ef 8311 	mrs	r3, BASEPRI
 800549c:	61fb      	str	r3, [r7, #28]
  return(result);
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f040 8082 	bne.w	80055aa <osThreadNew+0x146>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d07e      	beq.n	80055aa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80054ac:	2380      	movs	r3, #128	; 0x80
 80054ae:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80054b0:	2318      	movs	r3, #24
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80054b4:	2300      	movs	r3, #0
 80054b6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80054b8:	f107 031b 	add.w	r3, r7, #27
 80054bc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80054be:	f04f 33ff 	mov.w	r3, #4294967295
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d045      	beq.n	8005556 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <osThreadNew+0x74>
        name = attr->name;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <osThreadNew+0x9a>
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	2b38      	cmp	r3, #56	; 0x38
 80054f0:	d805      	bhi.n	80054fe <osThreadNew+0x9a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <osThreadNew+0x9e>
        return (NULL);
 80054fe:	2300      	movs	r3, #0
 8005500:	e054      	b.n	80055ac <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	089b      	lsrs	r3, r3, #2
 8005510:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00e      	beq.n	8005538 <osThreadNew+0xd4>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	2b5b      	cmp	r3, #91	; 0x5b
 8005520:	d90a      	bls.n	8005538 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005526:	2b00      	cmp	r3, #0
 8005528:	d006      	beq.n	8005538 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <osThreadNew+0xd4>
        mem = 1;
 8005532:	2301      	movs	r3, #1
 8005534:	62bb      	str	r3, [r7, #40]	; 0x28
 8005536:	e010      	b.n	800555a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10c      	bne.n	800555a <osThreadNew+0xf6>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d108      	bne.n	800555a <osThreadNew+0xf6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d104      	bne.n	800555a <osThreadNew+0xf6>
          mem = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28
 8005554:	e001      	b.n	800555a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	2b01      	cmp	r3, #1
 800555e:	d110      	bne.n	8005582 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005568:	9202      	str	r2, [sp, #8]
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005574:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 ffc0 	bl	80064fc <xTaskCreateStatic>
 800557c:	4603      	mov	r3, r0
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	e013      	b.n	80055aa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	2b00      	cmp	r3, #0
 8005586:	d110      	bne.n	80055aa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	b29a      	uxth	r2, r3
 800558c:	f107 0314 	add.w	r3, r7, #20
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f001 f807 	bl	80065ae <xTaskCreate>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d001      	beq.n	80055aa <osThreadNew+0x146>
          hTask = NULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055aa:	697b      	ldr	r3, [r7, #20]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3738      	adds	r7, #56	; 0x38
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	2000002c 	.word	0x2000002c

080055b8 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	; 0x28
 80055bc:	af02      	add	r7, sp, #8
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <osThreadFlagsSet+0x1a>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	da03      	bge.n	80055da <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80055d2:	f06f 0303 	mvn.w	r3, #3
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e046      	b.n	8005668 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 80055da:	f04f 33ff 	mov.w	r3, #4294967295
 80055de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055e0:	f3ef 8305 	mrs	r3, IPSR
 80055e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80055e6:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10f      	bne.n	800560c <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ec:	f3ef 8310 	mrs	r3, PRIMASK
 80055f0:	617b      	str	r3, [r7, #20]
  return(result);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <osThreadFlagsSet+0x54>
 80055f8:	4b1e      	ldr	r3, [pc, #120]	; (8005674 <osThreadFlagsSet+0xbc>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d126      	bne.n	800564e <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005600:	f3ef 8311 	mrs	r3, BASEPRI
 8005604:	613b      	str	r3, [r7, #16]
  return(result);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d020      	beq.n	800564e <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800560c:	2300      	movs	r3, #0
 800560e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	2300      	movs	r3, #0
 8005618:	2201      	movs	r2, #1
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	69f8      	ldr	r0, [r7, #28]
 800561e:	f001 fefd 	bl	800741c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8005622:	f107 020c 	add.w	r2, r7, #12
 8005626:	2300      	movs	r3, #0
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	4613      	mov	r3, r2
 800562c:	2200      	movs	r2, #0
 800562e:	2100      	movs	r1, #0
 8005630:	69f8      	ldr	r0, [r7, #28]
 8005632:	f001 fef3 	bl	800741c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d015      	beq.n	8005668 <osThreadFlagsSet+0xb0>
 800563c:	4b0e      	ldr	r3, [pc, #56]	; (8005678 <osThreadFlagsSet+0xc0>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	e00c      	b.n	8005668 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800564e:	2300      	movs	r3, #0
 8005650:	2201      	movs	r2, #1
 8005652:	6839      	ldr	r1, [r7, #0]
 8005654:	69f8      	ldr	r0, [r7, #28]
 8005656:	f001 fe3f 	bl	80072d8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800565a:	f107 030c 	add.w	r3, r7, #12
 800565e:	2200      	movs	r2, #0
 8005660:	2100      	movs	r1, #0
 8005662:	69f8      	ldr	r0, [r7, #28]
 8005664:	f001 fe38 	bl	80072d8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8005668:	68fb      	ldr	r3, [r7, #12]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3720      	adds	r7, #32
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	2000002c 	.word	0x2000002c
 8005678:	e000ed04 	.word	0xe000ed04

0800567c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b08e      	sub	sp, #56	; 0x38
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005688:	f3ef 8305 	mrs	r3, IPSR
 800568c:	61fb      	str	r3, [r7, #28]
  return(result);
 800568e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10f      	bne.n	80056b4 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005694:	f3ef 8310 	mrs	r3, PRIMASK
 8005698:	61bb      	str	r3, [r7, #24]
  return(result);
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <osThreadFlagsWait+0x38>
 80056a0:	4b3f      	ldr	r3, [pc, #252]	; (80057a0 <osThreadFlagsWait+0x124>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d109      	bne.n	80056bc <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056a8:	f3ef 8311 	mrs	r3, BASEPRI
 80056ac:	617b      	str	r3, [r7, #20]
  return(result);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 80056b4:	f06f 0305 	mvn.w	r3, #5
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ba:	e06b      	b.n	8005794 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	da03      	bge.n	80056ca <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 80056c2:	f06f 0303 	mvn.w	r3, #3
 80056c6:	637b      	str	r3, [r7, #52]	; 0x34
 80056c8:	e064      	b.n	8005794 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <osThreadFlagsWait+0x5e>
      clear = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	633b      	str	r3, [r7, #48]	; 0x30
 80056d8:	e001      	b.n	80056de <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 80056e6:	f001 f9df 	bl	8006aa8 <xTaskGetTickCount>
 80056ea:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80056ec:	f107 0210 	add.w	r2, r7, #16
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056f4:	2000      	movs	r0, #0
 80056f6:	f001 fd95 	bl	8007224 <xTaskNotifyWait>
 80056fa:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d137      	bne.n	8005772 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8005702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4013      	ands	r3, r2
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800570e:	4313      	orrs	r3, r2
 8005710:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00c      	beq.n	8005736 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005720:	4013      	ands	r3, r2
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	429a      	cmp	r2, r3
 8005726:	d032      	beq.n	800578e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10f      	bne.n	800574e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800572e:	f06f 0302 	mvn.w	r3, #2
 8005732:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8005734:	e02e      	b.n	8005794 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573a:	4013      	ands	r3, r2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d128      	bne.n	8005792 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d103      	bne.n	800574e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8005746:	f06f 0302 	mvn.w	r3, #2
 800574a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800574c:	e022      	b.n	8005794 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800574e:	f001 f9ab 	bl	8006aa8 <xTaskGetTickCount>
 8005752:	4602      	mov	r2, r0
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800575a:	6a3a      	ldr	r2, [r7, #32]
 800575c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575e:	429a      	cmp	r2, r3
 8005760:	d902      	bls.n	8005768 <osThreadFlagsWait+0xec>
          tout  = 0;
 8005762:	2300      	movs	r3, #0
 8005764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005766:	e00e      	b.n	8005786 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8005768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005770:	e009      	b.n	8005786 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d103      	bne.n	8005780 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8005778:	f06f 0302 	mvn.w	r3, #2
 800577c:	637b      	str	r3, [r7, #52]	; 0x34
 800577e:	e002      	b.n	8005786 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8005780:	f06f 0301 	mvn.w	r3, #1
 8005784:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1af      	bne.n	80056ec <osThreadFlagsWait+0x70>
 800578c:	e002      	b.n	8005794 <osThreadFlagsWait+0x118>
            break;
 800578e:	bf00      	nop
 8005790:	e000      	b.n	8005794 <osThreadFlagsWait+0x118>
            break;
 8005792:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8005794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005796:	4618      	mov	r0, r3
 8005798:	3738      	adds	r7, #56	; 0x38
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	2000002c 	.word	0x2000002c

080057a4 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057ac:	f3ef 8305 	mrs	r3, IPSR
 80057b0:	613b      	str	r3, [r7, #16]
  return(result);
 80057b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10f      	bne.n	80057d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057b8:	f3ef 8310 	mrs	r3, PRIMASK
 80057bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d109      	bne.n	80057d8 <osDelay+0x34>
 80057c4:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <osDelay+0x58>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d109      	bne.n	80057e0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057cc:	f3ef 8311 	mrs	r3, BASEPRI
 80057d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <osDelay+0x3c>
    stat = osErrorISR;
 80057d8:	f06f 0305 	mvn.w	r3, #5
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	e007      	b.n	80057f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 f81a 	bl	8006824 <vTaskDelay>
    }
  }

  return (stat);
 80057f0:	697b      	ldr	r3, [r7, #20]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	2000002c 	.word	0x2000002c

08005800 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b08c      	sub	sp, #48	; 0x30
 8005804:	af02      	add	r7, sp, #8
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005810:	f3ef 8305 	mrs	r3, IPSR
 8005814:	61bb      	str	r3, [r7, #24]
  return(result);
 8005816:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005818:	2b00      	cmp	r3, #0
 800581a:	d170      	bne.n	80058fe <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800581c:	f3ef 8310 	mrs	r3, PRIMASK
 8005820:	617b      	str	r3, [r7, #20]
  return(result);
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d16a      	bne.n	80058fe <osMessageQueueNew+0xfe>
 8005828:	4b37      	ldr	r3, [pc, #220]	; (8005908 <osMessageQueueNew+0x108>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d105      	bne.n	800583c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005830:	f3ef 8311 	mrs	r3, BASEPRI
 8005834:	613b      	str	r3, [r7, #16]
  return(result);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d160      	bne.n	80058fe <osMessageQueueNew+0xfe>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d05d      	beq.n	80058fe <osMessageQueueNew+0xfe>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d05a      	beq.n	80058fe <osMessageQueueNew+0xfe>
    mem = -1;
 8005848:	f04f 33ff 	mov.w	r3, #4294967295
 800584c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d029      	beq.n	80058a8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d012      	beq.n	8005882 <osMessageQueueNew+0x82>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	2b4f      	cmp	r3, #79	; 0x4f
 8005862:	d90e      	bls.n	8005882 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	fb01 f303 	mul.w	r3, r1, r3
 8005878:	429a      	cmp	r2, r3
 800587a:	d302      	bcc.n	8005882 <osMessageQueueNew+0x82>
        mem = 1;
 800587c:	2301      	movs	r3, #1
 800587e:	623b      	str	r3, [r7, #32]
 8005880:	e014      	b.n	80058ac <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d110      	bne.n	80058ac <osMessageQueueNew+0xac>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10c      	bne.n	80058ac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005896:	2b00      	cmp	r3, #0
 8005898:	d108      	bne.n	80058ac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d104      	bne.n	80058ac <osMessageQueueNew+0xac>
          mem = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	623b      	str	r3, [r7, #32]
 80058a6:	e001      	b.n	80058ac <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d10c      	bne.n	80058cc <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691a      	ldr	r2, [r3, #16]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6899      	ldr	r1, [r3, #8]
 80058ba:	2300      	movs	r3, #0
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	460b      	mov	r3, r1
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 f972 	bl	8005bac <xQueueGenericCreateStatic>
 80058c8:	6278      	str	r0, [r7, #36]	; 0x24
 80058ca:	e008      	b.n	80058de <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d105      	bne.n	80058de <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80058d2:	2200      	movs	r2, #0
 80058d4:	68b9      	ldr	r1, [r7, #8]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 f9da 	bl	8005c90 <xQueueGenericCreate>
 80058dc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00c      	beq.n	80058fe <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <osMessageQueueNew+0xf2>
        name = attr->name;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	e001      	b.n	80058f6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80058f6:	69f9      	ldr	r1, [r7, #28]
 80058f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058fa:	f000 fda3 	bl	8006444 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005900:	4618      	mov	r0, r3
 8005902:	3728      	adds	r7, #40	; 0x28
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	2000002c 	.word	0x2000002c

0800590c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4a07      	ldr	r2, [pc, #28]	; (8005938 <vApplicationGetIdleTaskMemory+0x2c>)
 800591c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4a06      	ldr	r2, [pc, #24]	; (800593c <vApplicationGetIdleTaskMemory+0x30>)
 8005922:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2280      	movs	r2, #128	; 0x80
 8005928:	601a      	str	r2, [r3, #0]
}
 800592a:	bf00      	nop
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20000030 	.word	0x20000030
 800593c:	2000008c 	.word	0x2000008c

08005940 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4a07      	ldr	r2, [pc, #28]	; (800596c <vApplicationGetTimerTaskMemory+0x2c>)
 8005950:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	4a06      	ldr	r2, [pc, #24]	; (8005970 <vApplicationGetTimerTaskMemory+0x30>)
 8005956:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800595e:	601a      	str	r2, [r3, #0]
}
 8005960:	bf00      	nop
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	2000028c 	.word	0x2000028c
 8005970:	200002e8 	.word	0x200002e8

08005974 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f103 0208 	add.w	r2, r3, #8
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f04f 32ff 	mov.w	r2, #4294967295
 800598c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f103 0208 	add.w	r2, r3, #8
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f103 0208 	add.w	r2, r3, #8
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059ce:	b480      	push	{r7}
 80059d0:	b085      	sub	sp, #20
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	601a      	str	r2, [r3, #0]
}
 8005a0a:	bf00      	nop
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a16:	b480      	push	{r7}
 8005a18:	b085      	sub	sp, #20
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2c:	d103      	bne.n	8005a36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	e00c      	b.n	8005a50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3308      	adds	r3, #8
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	e002      	b.n	8005a44 <vListInsert+0x2e>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d2f6      	bcs.n	8005a3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	601a      	str	r2, [r3, #0]
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6892      	ldr	r2, [r2, #8]
 8005a9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6852      	ldr	r2, [r2, #4]
 8005aa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d103      	bne.n	8005abc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	1e5a      	subs	r2, r3, #1
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d109      	bne.n	8005b04 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	60bb      	str	r3, [r7, #8]
 8005b02:	e7fe      	b.n	8005b02 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005b04:	f002 f9da 	bl	8007ebc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b10:	68f9      	ldr	r1, [r7, #12]
 8005b12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	441a      	add	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b34:	3b01      	subs	r3, #1
 8005b36:	68f9      	ldr	r1, [r7, #12]
 8005b38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b3a:	fb01 f303 	mul.w	r3, r1, r3
 8005b3e:	441a      	add	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	22ff      	movs	r2, #255	; 0xff
 8005b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	22ff      	movs	r2, #255	; 0xff
 8005b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d114      	bne.n	8005b84 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01a      	beq.n	8005b98 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3310      	adds	r3, #16
 8005b66:	4618      	mov	r0, r3
 8005b68:	f001 f916 	bl	8006d98 <xTaskRemoveFromEventList>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d012      	beq.n	8005b98 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b72:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <xQueueGenericReset+0xcc>)
 8005b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	e009      	b.n	8005b98 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3310      	adds	r3, #16
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff fef3 	bl	8005974 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3324      	adds	r3, #36	; 0x24
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff feee 	bl	8005974 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b98:	f002 f9be 	bl	8007f18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b9c:	2301      	movs	r3, #1
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	e000ed04 	.word	0xe000ed04

08005bac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08e      	sub	sp, #56	; 0x38
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <xQueueGenericCreateStatic+0x28>
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bd2:	e7fe      	b.n	8005bd2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <xQueueGenericCreateStatic+0x42>
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
 8005bec:	e7fe      	b.n	8005bec <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <xQueueGenericCreateStatic+0x4e>
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <xQueueGenericCreateStatic+0x52>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e000      	b.n	8005c00 <xQueueGenericCreateStatic+0x54>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d109      	bne.n	8005c18 <xQueueGenericCreateStatic+0x6c>
 8005c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	623b      	str	r3, [r7, #32]
 8005c16:	e7fe      	b.n	8005c16 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d102      	bne.n	8005c24 <xQueueGenericCreateStatic+0x78>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <xQueueGenericCreateStatic+0x7c>
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <xQueueGenericCreateStatic+0x7e>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d109      	bne.n	8005c42 <xQueueGenericCreateStatic+0x96>
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	61fb      	str	r3, [r7, #28]
 8005c40:	e7fe      	b.n	8005c40 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c42:	2350      	movs	r3, #80	; 0x50
 8005c44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b50      	cmp	r3, #80	; 0x50
 8005c4a:	d009      	beq.n	8005c60 <xQueueGenericCreateStatic+0xb4>
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	e7fe      	b.n	8005c5e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00d      	beq.n	8005c86 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 f842 	bl	8005d0a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3730      	adds	r7, #48	; 0x30
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	; 0x28
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d109      	bne.n	8005cb8 <xQueueGenericCreate+0x28>
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	e7fe      	b.n	8005cb6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d102      	bne.n	8005cc4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61fb      	str	r3, [r7, #28]
 8005cc2:	e004      	b.n	8005cce <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	fb02 f303 	mul.w	r3, r2, r3
 8005ccc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	3350      	adds	r3, #80	; 0x50
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f002 fa0c 	bl	80080f0 <pvPortMalloc>
 8005cd8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00f      	beq.n	8005d00 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	3350      	adds	r3, #80	; 0x50
 8005ce4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cee:	79fa      	ldrb	r2, [r7, #7]
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f805 	bl	8005d0a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005d00:	69bb      	ldr	r3, [r7, #24]
	}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	607a      	str	r2, [r7, #4]
 8005d16:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d103      	bne.n	8005d26 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	e002      	b.n	8005d2c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d38:	2101      	movs	r1, #1
 8005d3a:	69b8      	ldr	r0, [r7, #24]
 8005d3c:	f7ff fece 	bl	8005adc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	78fa      	ldrb	r2, [r7, #3]
 8005d44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d48:	bf00      	nop
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08e      	sub	sp, #56	; 0x38
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <xQueueGenericSend+0x30>
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d7e:	e7fe      	b.n	8005d7e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d103      	bne.n	8005d8e <xQueueGenericSend+0x3e>
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <xQueueGenericSend+0x42>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <xQueueGenericSend+0x44>
 8005d92:	2300      	movs	r3, #0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <xQueueGenericSend+0x5c>
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
 8005daa:	e7fe      	b.n	8005daa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d103      	bne.n	8005dba <xQueueGenericSend+0x6a>
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d101      	bne.n	8005dbe <xQueueGenericSend+0x6e>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <xQueueGenericSend+0x70>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d109      	bne.n	8005dd8 <xQueueGenericSend+0x88>
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	623b      	str	r3, [r7, #32]
 8005dd6:	e7fe      	b.n	8005dd6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dd8:	f001 f99a 	bl	8007110 <xTaskGetSchedulerState>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d102      	bne.n	8005de8 <xQueueGenericSend+0x98>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <xQueueGenericSend+0x9c>
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <xQueueGenericSend+0x9e>
 8005dec:	2300      	movs	r3, #0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d109      	bne.n	8005e06 <xQueueGenericSend+0xb6>
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	61fb      	str	r3, [r7, #28]
 8005e04:	e7fe      	b.n	8005e04 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e06:	f002 f859 	bl	8007ebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d302      	bcc.n	8005e1c <xQueueGenericSend+0xcc>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d129      	bne.n	8005e70 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	68b9      	ldr	r1, [r7, #8]
 8005e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e22:	f000 f9ff 	bl	8006224 <prvCopyDataToQueue>
 8005e26:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d010      	beq.n	8005e52 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	3324      	adds	r3, #36	; 0x24
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 ffaf 	bl	8006d98 <xTaskRemoveFromEventList>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d013      	beq.n	8005e68 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e40:	4b3f      	ldr	r3, [pc, #252]	; (8005f40 <xQueueGenericSend+0x1f0>)
 8005e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	e00a      	b.n	8005e68 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e58:	4b39      	ldr	r3, [pc, #228]	; (8005f40 <xQueueGenericSend+0x1f0>)
 8005e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e68:	f002 f856 	bl	8007f18 <vPortExitCritical>
				return pdPASS;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e063      	b.n	8005f38 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d103      	bne.n	8005e7e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e76:	f002 f84f 	bl	8007f18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e05c      	b.n	8005f38 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e84:	f107 0314 	add.w	r3, r7, #20
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 ffe7 	bl	8006e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e92:	f002 f841 	bl	8007f18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e96:	f000 fd5d 	bl	8006954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e9a:	f002 f80f 	bl	8007ebc <vPortEnterCritical>
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ea4:	b25b      	sxtb	r3, r3
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	d103      	bne.n	8005eb4 <xQueueGenericSend+0x164>
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eba:	b25b      	sxtb	r3, r3
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec0:	d103      	bne.n	8005eca <xQueueGenericSend+0x17a>
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eca:	f002 f825 	bl	8007f18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ece:	1d3a      	adds	r2, r7, #4
 8005ed0:	f107 0314 	add.w	r3, r7, #20
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 ffd6 	bl	8006e88 <xTaskCheckForTimeOut>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d124      	bne.n	8005f2c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ee4:	f000 fa96 	bl	8006414 <prvIsQueueFull>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d018      	beq.n	8005f20 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	3310      	adds	r3, #16
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 ff00 	bl	8006cfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005efe:	f000 fa21 	bl	8006344 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f02:	f000 fd35 	bl	8006970 <xTaskResumeAll>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f47f af7c 	bne.w	8005e06 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005f0e:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <xQueueGenericSend+0x1f0>)
 8005f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	e772      	b.n	8005e06 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f22:	f000 fa0f 	bl	8006344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f26:	f000 fd23 	bl	8006970 <xTaskResumeAll>
 8005f2a:	e76c      	b.n	8005e06 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f2e:	f000 fa09 	bl	8006344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f32:	f000 fd1d 	bl	8006970 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f36:	2300      	movs	r3, #0
		}
	}
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3738      	adds	r7, #56	; 0x38
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08e      	sub	sp, #56	; 0x38
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d109      	bne.n	8005f70 <xQueueGenericSendFromISR+0x2c>
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6e:	e7fe      	b.n	8005f6e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d103      	bne.n	8005f7e <xQueueGenericSendFromISR+0x3a>
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <xQueueGenericSendFromISR+0x3e>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <xQueueGenericSendFromISR+0x40>
 8005f82:	2300      	movs	r3, #0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d109      	bne.n	8005f9c <xQueueGenericSendFromISR+0x58>
 8005f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	623b      	str	r3, [r7, #32]
 8005f9a:	e7fe      	b.n	8005f9a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d103      	bne.n	8005faa <xQueueGenericSendFromISR+0x66>
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <xQueueGenericSendFromISR+0x6a>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <xQueueGenericSendFromISR+0x6c>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d109      	bne.n	8005fc8 <xQueueGenericSendFromISR+0x84>
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	61fb      	str	r3, [r7, #28]
 8005fc6:	e7fe      	b.n	8005fc6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fc8:	f002 f854 	bl	8008074 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fcc:	f3ef 8211 	mrs	r2, BASEPRI
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	61ba      	str	r2, [r7, #24]
 8005fe2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005fe4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d302      	bcc.n	8005ffa <xQueueGenericSendFromISR+0xb6>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d12c      	bne.n	8006054 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	68b9      	ldr	r1, [r7, #8]
 8006008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800600a:	f000 f90b 	bl	8006224 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800600e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006016:	d112      	bne.n	800603e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	2b00      	cmp	r3, #0
 800601e:	d016      	beq.n	800604e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	3324      	adds	r3, #36	; 0x24
 8006024:	4618      	mov	r0, r3
 8006026:	f000 feb7 	bl	8006d98 <xTaskRemoveFromEventList>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00e      	beq.n	800604e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00b      	beq.n	800604e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	e007      	b.n	800604e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800603e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006042:	3301      	adds	r3, #1
 8006044:	b2db      	uxtb	r3, r3
 8006046:	b25a      	sxtb	r2, r3
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800604e:	2301      	movs	r3, #1
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006052:	e001      	b.n	8006058 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006054:	2300      	movs	r3, #0
 8006056:	637b      	str	r3, [r7, #52]	; 0x34
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006064:	4618      	mov	r0, r3
 8006066:	3738      	adds	r7, #56	; 0x38
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08c      	sub	sp, #48	; 0x30
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006078:	2300      	movs	r3, #0
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <xQueueReceive+0x2e>
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	623b      	str	r3, [r7, #32]
 8006098:	e7fe      	b.n	8006098 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d103      	bne.n	80060a8 <xQueueReceive+0x3c>
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <xQueueReceive+0x40>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <xQueueReceive+0x42>
 80060ac:	2300      	movs	r3, #0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <xQueueReceive+0x5a>
 80060b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	61fb      	str	r3, [r7, #28]
 80060c4:	e7fe      	b.n	80060c4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060c6:	f001 f823 	bl	8007110 <xTaskGetSchedulerState>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <xQueueReceive+0x6a>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <xQueueReceive+0x6e>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e000      	b.n	80060dc <xQueueReceive+0x70>
 80060da:	2300      	movs	r3, #0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d109      	bne.n	80060f4 <xQueueReceive+0x88>
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	e7fe      	b.n	80060f2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80060f4:	f001 fee2 	bl	8007ebc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01f      	beq.n	8006144 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006108:	f000 f8f6 	bl	80062f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	1e5a      	subs	r2, r3, #1
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00f      	beq.n	800613c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	3310      	adds	r3, #16
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fe39 	bl	8006d98 <xTaskRemoveFromEventList>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800612c:	4b3c      	ldr	r3, [pc, #240]	; (8006220 <xQueueReceive+0x1b4>)
 800612e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800613c:	f001 feec 	bl	8007f18 <vPortExitCritical>
				return pdPASS;
 8006140:	2301      	movs	r3, #1
 8006142:	e069      	b.n	8006218 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800614a:	f001 fee5 	bl	8007f18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800614e:	2300      	movs	r3, #0
 8006150:	e062      	b.n	8006218 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	2b00      	cmp	r3, #0
 8006156:	d106      	bne.n	8006166 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006158:	f107 0310 	add.w	r3, r7, #16
 800615c:	4618      	mov	r0, r3
 800615e:	f000 fe7d 	bl	8006e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006162:	2301      	movs	r3, #1
 8006164:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006166:	f001 fed7 	bl	8007f18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800616a:	f000 fbf3 	bl	8006954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800616e:	f001 fea5 	bl	8007ebc <vPortEnterCritical>
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006178:	b25b      	sxtb	r3, r3
 800617a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617e:	d103      	bne.n	8006188 <xQueueReceive+0x11c>
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800618e:	b25b      	sxtb	r3, r3
 8006190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006194:	d103      	bne.n	800619e <xQueueReceive+0x132>
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800619e:	f001 febb 	bl	8007f18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061a2:	1d3a      	adds	r2, r7, #4
 80061a4:	f107 0310 	add.w	r3, r7, #16
 80061a8:	4611      	mov	r1, r2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fe6c 	bl	8006e88 <xTaskCheckForTimeOut>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d123      	bne.n	80061fe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b8:	f000 f916 	bl	80063e8 <prvIsQueueEmpty>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d017      	beq.n	80061f2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	3324      	adds	r3, #36	; 0x24
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4611      	mov	r1, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fd96 	bl	8006cfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d2:	f000 f8b7 	bl	8006344 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061d6:	f000 fbcb 	bl	8006970 <xTaskResumeAll>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d189      	bne.n	80060f4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80061e0:	4b0f      	ldr	r3, [pc, #60]	; (8006220 <xQueueReceive+0x1b4>)
 80061e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	e780      	b.n	80060f4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f4:	f000 f8a6 	bl	8006344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061f8:	f000 fbba 	bl	8006970 <xTaskResumeAll>
 80061fc:	e77a      	b.n	80060f4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006200:	f000 f8a0 	bl	8006344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006204:	f000 fbb4 	bl	8006970 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800620a:	f000 f8ed 	bl	80063e8 <prvIsQueueEmpty>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	f43f af6f 	beq.w	80060f4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006216:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006218:	4618      	mov	r0, r3
 800621a:	3730      	adds	r7, #48	; 0x30
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10d      	bne.n	800625e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d14d      	bne.n	80062e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	4618      	mov	r0, r3
 8006250:	f000 ff7c 	bl	800714c <xTaskPriorityDisinherit>
 8006254:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	605a      	str	r2, [r3, #4]
 800625c:	e043      	b.n	80062e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d119      	bne.n	8006298 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6898      	ldr	r0, [r3, #8]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626c:	461a      	mov	r2, r3
 800626e:	68b9      	ldr	r1, [r7, #8]
 8006270:	f002 fdba 	bl	8008de8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	441a      	add	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	429a      	cmp	r2, r3
 800628c:	d32b      	bcc.n	80062e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	609a      	str	r2, [r3, #8]
 8006296:	e026      	b.n	80062e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	68d8      	ldr	r0, [r3, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a0:	461a      	mov	r2, r3
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	f002 fda0 	bl	8008de8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b0:	425b      	negs	r3, r3
 80062b2:	441a      	add	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d207      	bcs.n	80062d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062cc:	425b      	negs	r3, r3
 80062ce:	441a      	add	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d105      	bne.n	80062e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80062ee:	697b      	ldr	r3, [r7, #20]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	2b00      	cmp	r3, #0
 8006308:	d018      	beq.n	800633c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	441a      	add	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	429a      	cmp	r2, r3
 8006322:	d303      	bcc.n	800632c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68d9      	ldr	r1, [r3, #12]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	461a      	mov	r2, r3
 8006336:	6838      	ldr	r0, [r7, #0]
 8006338:	f002 fd56 	bl	8008de8 <memcpy>
	}
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800634c:	f001 fdb6 	bl	8007ebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006356:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006358:	e011      	b.n	800637e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	2b00      	cmp	r3, #0
 8006360:	d012      	beq.n	8006388 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3324      	adds	r3, #36	; 0x24
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fd16 	bl	8006d98 <xTaskRemoveFromEventList>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006372:	f000 fde9 	bl	8006f48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	3b01      	subs	r3, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800637e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006382:	2b00      	cmp	r3, #0
 8006384:	dce9      	bgt.n	800635a <prvUnlockQueue+0x16>
 8006386:	e000      	b.n	800638a <prvUnlockQueue+0x46>
					break;
 8006388:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	22ff      	movs	r2, #255	; 0xff
 800638e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006392:	f001 fdc1 	bl	8007f18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006396:	f001 fd91 	bl	8007ebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063a2:	e011      	b.n	80063c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d012      	beq.n	80063d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3310      	adds	r3, #16
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fcf1 	bl	8006d98 <xTaskRemoveFromEventList>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80063bc:	f000 fdc4 	bl	8006f48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dce9      	bgt.n	80063a4 <prvUnlockQueue+0x60>
 80063d0:	e000      	b.n	80063d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	22ff      	movs	r2, #255	; 0xff
 80063d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80063dc:	f001 fd9c 	bl	8007f18 <vPortExitCritical>
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063f0:	f001 fd64 	bl	8007ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d102      	bne.n	8006402 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80063fc:	2301      	movs	r3, #1
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	e001      	b.n	8006406 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006406:	f001 fd87 	bl	8007f18 <vPortExitCritical>

	return xReturn;
 800640a:	68fb      	ldr	r3, [r7, #12]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800641c:	f001 fd4e 	bl	8007ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006428:	429a      	cmp	r2, r3
 800642a:	d102      	bne.n	8006432 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800642c:	2301      	movs	r3, #1
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	e001      	b.n	8006436 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006436:	f001 fd6f 	bl	8007f18 <vPortExitCritical>

	return xReturn;
 800643a:	68fb      	ldr	r3, [r7, #12]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e014      	b.n	800647e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006454:	4a0e      	ldr	r2, [pc, #56]	; (8006490 <vQueueAddToRegistry+0x4c>)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10b      	bne.n	8006478 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006460:	490b      	ldr	r1, [pc, #44]	; (8006490 <vQueueAddToRegistry+0x4c>)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800646a:	4a09      	ldr	r2, [pc, #36]	; (8006490 <vQueueAddToRegistry+0x4c>)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	4413      	add	r3, r2
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006476:	e005      	b.n	8006484 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3301      	adds	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b07      	cmp	r3, #7
 8006482:	d9e7      	bls.n	8006454 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006484:	bf00      	nop
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	2000293c 	.word	0x2000293c

08006494 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80064a4:	f001 fd0a 	bl	8007ebc <vPortEnterCritical>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064ae:	b25b      	sxtb	r3, r3
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b4:	d103      	bne.n	80064be <vQueueWaitForMessageRestricted+0x2a>
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064c4:	b25b      	sxtb	r3, r3
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ca:	d103      	bne.n	80064d4 <vQueueWaitForMessageRestricted+0x40>
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064d4:	f001 fd20 	bl	8007f18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d106      	bne.n	80064ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	3324      	adds	r3, #36	; 0x24
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	68b9      	ldr	r1, [r7, #8]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 fc2b 	bl	8006d44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80064ee:	6978      	ldr	r0, [r7, #20]
 80064f0:	f7ff ff28 	bl	8006344 <prvUnlockQueue>
	}
 80064f4:	bf00      	nop
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08e      	sub	sp, #56	; 0x38
 8006500:	af04      	add	r7, sp, #16
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800650a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650c:	2b00      	cmp	r3, #0
 800650e:	d109      	bne.n	8006524 <xTaskCreateStatic+0x28>
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	623b      	str	r3, [r7, #32]
 8006522:	e7fe      	b.n	8006522 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <xTaskCreateStatic+0x42>
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	61fb      	str	r3, [r7, #28]
 800653c:	e7fe      	b.n	800653c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800653e:	235c      	movs	r3, #92	; 0x5c
 8006540:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b5c      	cmp	r3, #92	; 0x5c
 8006546:	d009      	beq.n	800655c <xTaskCreateStatic+0x60>
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	e7fe      	b.n	800655a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01e      	beq.n	80065a0 <xTaskCreateStatic+0xa4>
 8006562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01b      	beq.n	80065a0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006570:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	2202      	movs	r2, #2
 8006576:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800657a:	2300      	movs	r3, #0
 800657c:	9303      	str	r3, [sp, #12]
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	9302      	str	r3, [sp, #8]
 8006582:	f107 0314 	add.w	r3, r7, #20
 8006586:	9301      	str	r3, [sp, #4]
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	68b9      	ldr	r1, [r7, #8]
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f850 	bl	8006638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800659a:	f000 f8d3 	bl	8006744 <prvAddNewTaskToReadyList>
 800659e:	e001      	b.n	80065a4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065a4:	697b      	ldr	r3, [r7, #20]
	}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3728      	adds	r7, #40	; 0x28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b08c      	sub	sp, #48	; 0x30
 80065b2:	af04      	add	r7, sp, #16
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	603b      	str	r3, [r7, #0]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 fd94 	bl	80080f0 <pvPortMalloc>
 80065c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00e      	beq.n	80065ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80065d0:	205c      	movs	r0, #92	; 0x5c
 80065d2:	f001 fd8d 	bl	80080f0 <pvPortMalloc>
 80065d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	631a      	str	r2, [r3, #48]	; 0x30
 80065e4:	e005      	b.n	80065f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065e6:	6978      	ldr	r0, [r7, #20]
 80065e8:	f001 fe44 	bl	8008274 <vPortFree>
 80065ec:	e001      	b.n	80065f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d017      	beq.n	8006628 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006600:	88fa      	ldrh	r2, [r7, #6]
 8006602:	2300      	movs	r3, #0
 8006604:	9303      	str	r3, [sp, #12]
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	9302      	str	r3, [sp, #8]
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	9301      	str	r3, [sp, #4]
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 f80e 	bl	8006638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800661c:	69f8      	ldr	r0, [r7, #28]
 800661e:	f000 f891 	bl	8006744 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006622:	2301      	movs	r3, #1
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	e002      	b.n	800662e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006628:	f04f 33ff 	mov.w	r3, #4294967295
 800662c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800662e:	69bb      	ldr	r3, [r7, #24]
	}
 8006630:	4618      	mov	r0, r3
 8006632:	3720      	adds	r7, #32
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	461a      	mov	r2, r3
 8006650:	21a5      	movs	r1, #165	; 0xa5
 8006652:	f002 fbd4 	bl	8008dfe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006660:	3b01      	subs	r3, #1
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	f023 0307 	bic.w	r3, r3, #7
 800666e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	2b00      	cmp	r3, #0
 8006678:	d009      	beq.n	800668e <prvInitialiseNewTask+0x56>
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	e7fe      	b.n	800668c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
 8006692:	e012      	b.n	80066ba <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	4413      	add	r3, r2
 800669a:	7819      	ldrb	r1, [r3, #0]
 800669c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4413      	add	r3, r2
 80066a2:	3334      	adds	r3, #52	; 0x34
 80066a4:	460a      	mov	r2, r1
 80066a6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d006      	beq.n	80066c2 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	3301      	adds	r3, #1
 80066b8:	61fb      	str	r3, [r7, #28]
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	2b0f      	cmp	r3, #15
 80066be:	d9e9      	bls.n	8006694 <prvInitialiseNewTask+0x5c>
 80066c0:	e000      	b.n	80066c4 <prvInitialiseNewTask+0x8c>
		{
			break;
 80066c2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	2b37      	cmp	r3, #55	; 0x37
 80066d0:	d901      	bls.n	80066d6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066d2:	2337      	movs	r3, #55	; 0x37
 80066d4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	2200      	movs	r2, #0
 80066e6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	3304      	adds	r3, #4
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff f961 	bl	80059b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	3318      	adds	r3, #24
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff f95c 	bl	80059b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006700:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006710:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	2200      	movs	r2, #0
 8006716:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	68f9      	ldr	r1, [r7, #12]
 8006724:	69b8      	ldr	r0, [r7, #24]
 8006726:	f001 fa9f 	bl	8007c68 <pxPortInitialiseStack>
 800672a:	4602      	mov	r2, r0
 800672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800673c:	bf00      	nop
 800673e:	3720      	adds	r7, #32
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800674c:	f001 fbb6 	bl	8007ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006750:	4b2d      	ldr	r3, [pc, #180]	; (8006808 <prvAddNewTaskToReadyList+0xc4>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3301      	adds	r3, #1
 8006756:	4a2c      	ldr	r2, [pc, #176]	; (8006808 <prvAddNewTaskToReadyList+0xc4>)
 8006758:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800675a:	4b2c      	ldr	r3, [pc, #176]	; (800680c <prvAddNewTaskToReadyList+0xc8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d109      	bne.n	8006776 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006762:	4a2a      	ldr	r2, [pc, #168]	; (800680c <prvAddNewTaskToReadyList+0xc8>)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006768:	4b27      	ldr	r3, [pc, #156]	; (8006808 <prvAddNewTaskToReadyList+0xc4>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d110      	bne.n	8006792 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006770:	f000 fc0e 	bl	8006f90 <prvInitialiseTaskLists>
 8006774:	e00d      	b.n	8006792 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006776:	4b26      	ldr	r3, [pc, #152]	; (8006810 <prvAddNewTaskToReadyList+0xcc>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800677e:	4b23      	ldr	r3, [pc, #140]	; (800680c <prvAddNewTaskToReadyList+0xc8>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	429a      	cmp	r2, r3
 800678a:	d802      	bhi.n	8006792 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800678c:	4a1f      	ldr	r2, [pc, #124]	; (800680c <prvAddNewTaskToReadyList+0xc8>)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006792:	4b20      	ldr	r3, [pc, #128]	; (8006814 <prvAddNewTaskToReadyList+0xd0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3301      	adds	r3, #1
 8006798:	4a1e      	ldr	r2, [pc, #120]	; (8006814 <prvAddNewTaskToReadyList+0xd0>)
 800679a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800679c:	4b1d      	ldr	r3, [pc, #116]	; (8006814 <prvAddNewTaskToReadyList+0xd0>)
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <prvAddNewTaskToReadyList+0xd4>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d903      	bls.n	80067b8 <prvAddNewTaskToReadyList+0x74>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	4a18      	ldr	r2, [pc, #96]	; (8006818 <prvAddNewTaskToReadyList+0xd4>)
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067bc:	4613      	mov	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4a15      	ldr	r2, [pc, #84]	; (800681c <prvAddNewTaskToReadyList+0xd8>)
 80067c6:	441a      	add	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4619      	mov	r1, r3
 80067ce:	4610      	mov	r0, r2
 80067d0:	f7ff f8fd 	bl	80059ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067d4:	f001 fba0 	bl	8007f18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067d8:	4b0d      	ldr	r3, [pc, #52]	; (8006810 <prvAddNewTaskToReadyList+0xcc>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00e      	beq.n	80067fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067e0:	4b0a      	ldr	r3, [pc, #40]	; (800680c <prvAddNewTaskToReadyList+0xc8>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d207      	bcs.n	80067fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067ee:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <prvAddNewTaskToReadyList+0xdc>)
 80067f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000bbc 	.word	0x20000bbc
 800680c:	200006e8 	.word	0x200006e8
 8006810:	20000bc8 	.word	0x20000bc8
 8006814:	20000bd8 	.word	0x20000bd8
 8006818:	20000bc4 	.word	0x20000bc4
 800681c:	200006ec 	.word	0x200006ec
 8006820:	e000ed04 	.word	0xe000ed04

08006824 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d016      	beq.n	8006864 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006836:	4b13      	ldr	r3, [pc, #76]	; (8006884 <vTaskDelay+0x60>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <vTaskDelay+0x2e>
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	60bb      	str	r3, [r7, #8]
 8006850:	e7fe      	b.n	8006850 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006852:	f000 f87f 	bl	8006954 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006856:	2100      	movs	r1, #0
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fea7 	bl	80075ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800685e:	f000 f887 	bl	8006970 <xTaskResumeAll>
 8006862:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d107      	bne.n	800687a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800686a:	4b07      	ldr	r3, [pc, #28]	; (8006888 <vTaskDelay+0x64>)
 800686c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800687a:	bf00      	nop
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000be4 	.word	0x20000be4
 8006888:	e000ed04 	.word	0xe000ed04

0800688c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08a      	sub	sp, #40	; 0x28
 8006890:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006892:	2300      	movs	r3, #0
 8006894:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006896:	2300      	movs	r3, #0
 8006898:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800689a:	463a      	mov	r2, r7
 800689c:	1d39      	adds	r1, r7, #4
 800689e:	f107 0308 	add.w	r3, r7, #8
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff f832 	bl	800590c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	9202      	str	r2, [sp, #8]
 80068b0:	9301      	str	r3, [sp, #4]
 80068b2:	2300      	movs	r3, #0
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	2300      	movs	r3, #0
 80068b8:	460a      	mov	r2, r1
 80068ba:	4920      	ldr	r1, [pc, #128]	; (800693c <vTaskStartScheduler+0xb0>)
 80068bc:	4820      	ldr	r0, [pc, #128]	; (8006940 <vTaskStartScheduler+0xb4>)
 80068be:	f7ff fe1d 	bl	80064fc <xTaskCreateStatic>
 80068c2:	4602      	mov	r2, r0
 80068c4:	4b1f      	ldr	r3, [pc, #124]	; (8006944 <vTaskStartScheduler+0xb8>)
 80068c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068c8:	4b1e      	ldr	r3, [pc, #120]	; (8006944 <vTaskStartScheduler+0xb8>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068d0:	2301      	movs	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	e001      	b.n	80068da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d102      	bne.n	80068e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80068e0:	f000 feb8 	bl	8007654 <xTimerCreateTimerTask>
 80068e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d115      	bne.n	8006918 <vTaskStartScheduler+0x8c>
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068fe:	4b12      	ldr	r3, [pc, #72]	; (8006948 <vTaskStartScheduler+0xbc>)
 8006900:	f04f 32ff 	mov.w	r2, #4294967295
 8006904:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006906:	4b11      	ldr	r3, [pc, #68]	; (800694c <vTaskStartScheduler+0xc0>)
 8006908:	2201      	movs	r2, #1
 800690a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800690c:	4b10      	ldr	r3, [pc, #64]	; (8006950 <vTaskStartScheduler+0xc4>)
 800690e:	2200      	movs	r2, #0
 8006910:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006912:	f001 fa35 	bl	8007d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006916:	e00d      	b.n	8006934 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691e:	d109      	bne.n	8006934 <vTaskStartScheduler+0xa8>
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	e7fe      	b.n	8006932 <vTaskStartScheduler+0xa6>
}
 8006934:	bf00      	nop
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	08009058 	.word	0x08009058
 8006940:	08006f61 	.word	0x08006f61
 8006944:	20000be0 	.word	0x20000be0
 8006948:	20000bdc 	.word	0x20000bdc
 800694c:	20000bc8 	.word	0x20000bc8
 8006950:	20000bc0 	.word	0x20000bc0

08006954 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006958:	4b04      	ldr	r3, [pc, #16]	; (800696c <vTaskSuspendAll+0x18>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	4a03      	ldr	r2, [pc, #12]	; (800696c <vTaskSuspendAll+0x18>)
 8006960:	6013      	str	r3, [r2, #0]
}
 8006962:	bf00      	nop
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	20000be4 	.word	0x20000be4

08006970 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800697a:	2300      	movs	r3, #0
 800697c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800697e:	4b41      	ldr	r3, [pc, #260]	; (8006a84 <xTaskResumeAll+0x114>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <xTaskResumeAll+0x2a>
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	e7fe      	b.n	8006998 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800699a:	f001 fa8f 	bl	8007ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800699e:	4b39      	ldr	r3, [pc, #228]	; (8006a84 <xTaskResumeAll+0x114>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	4a37      	ldr	r2, [pc, #220]	; (8006a84 <xTaskResumeAll+0x114>)
 80069a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a8:	4b36      	ldr	r3, [pc, #216]	; (8006a84 <xTaskResumeAll+0x114>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d162      	bne.n	8006a76 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069b0:	4b35      	ldr	r3, [pc, #212]	; (8006a88 <xTaskResumeAll+0x118>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d05e      	beq.n	8006a76 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069b8:	e02f      	b.n	8006a1a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80069ba:	4b34      	ldr	r3, [pc, #208]	; (8006a8c <xTaskResumeAll+0x11c>)
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	3318      	adds	r3, #24
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7ff f85e 	bl	8005a88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3304      	adds	r3, #4
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff f859 	bl	8005a88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069da:	4b2d      	ldr	r3, [pc, #180]	; (8006a90 <xTaskResumeAll+0x120>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d903      	bls.n	80069ea <xTaskResumeAll+0x7a>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	4a2a      	ldr	r2, [pc, #168]	; (8006a90 <xTaskResumeAll+0x120>)
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4a27      	ldr	r2, [pc, #156]	; (8006a94 <xTaskResumeAll+0x124>)
 80069f8:	441a      	add	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3304      	adds	r3, #4
 80069fe:	4619      	mov	r1, r3
 8006a00:	4610      	mov	r0, r2
 8006a02:	f7fe ffe4 	bl	80059ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0a:	4b23      	ldr	r3, [pc, #140]	; (8006a98 <xTaskResumeAll+0x128>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d302      	bcc.n	8006a1a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006a14:	4b21      	ldr	r3, [pc, #132]	; (8006a9c <xTaskResumeAll+0x12c>)
 8006a16:	2201      	movs	r2, #1
 8006a18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a1a:	4b1c      	ldr	r3, [pc, #112]	; (8006a8c <xTaskResumeAll+0x11c>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1cb      	bne.n	80069ba <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a28:	f000 fb4c 	bl	80070c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a2c:	4b1c      	ldr	r3, [pc, #112]	; (8006aa0 <xTaskResumeAll+0x130>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d010      	beq.n	8006a5a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a38:	f000 f846 	bl	8006ac8 <xTaskIncrementTick>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006a42:	4b16      	ldr	r3, [pc, #88]	; (8006a9c <xTaskResumeAll+0x12c>)
 8006a44:	2201      	movs	r2, #1
 8006a46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1f1      	bne.n	8006a38 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006a54:	4b12      	ldr	r3, [pc, #72]	; (8006aa0 <xTaskResumeAll+0x130>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a5a:	4b10      	ldr	r3, [pc, #64]	; (8006a9c <xTaskResumeAll+0x12c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d009      	beq.n	8006a76 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a62:	2301      	movs	r3, #1
 8006a64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a66:	4b0f      	ldr	r3, [pc, #60]	; (8006aa4 <xTaskResumeAll+0x134>)
 8006a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a76:	f001 fa4f 	bl	8007f18 <vPortExitCritical>

	return xAlreadyYielded;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20000be4 	.word	0x20000be4
 8006a88:	20000bbc 	.word	0x20000bbc
 8006a8c:	20000b7c 	.word	0x20000b7c
 8006a90:	20000bc4 	.word	0x20000bc4
 8006a94:	200006ec 	.word	0x200006ec
 8006a98:	200006e8 	.word	0x200006e8
 8006a9c:	20000bd0 	.word	0x20000bd0
 8006aa0:	20000bcc 	.word	0x20000bcc
 8006aa4:	e000ed04 	.word	0xe000ed04

08006aa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006aae:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <xTaskGetTickCount+0x1c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ab4:	687b      	ldr	r3, [r7, #4]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	20000bc0 	.word	0x20000bc0

08006ac8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ad2:	4b51      	ldr	r3, [pc, #324]	; (8006c18 <xTaskIncrementTick+0x150>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f040 808d 	bne.w	8006bf6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006adc:	4b4f      	ldr	r3, [pc, #316]	; (8006c1c <xTaskIncrementTick+0x154>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ae4:	4a4d      	ldr	r2, [pc, #308]	; (8006c1c <xTaskIncrementTick+0x154>)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d11f      	bne.n	8006b30 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006af0:	4b4b      	ldr	r3, [pc, #300]	; (8006c20 <xTaskIncrementTick+0x158>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d009      	beq.n	8006b0e <xTaskIncrementTick+0x46>
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	e7fe      	b.n	8006b0c <xTaskIncrementTick+0x44>
 8006b0e:	4b44      	ldr	r3, [pc, #272]	; (8006c20 <xTaskIncrementTick+0x158>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	60fb      	str	r3, [r7, #12]
 8006b14:	4b43      	ldr	r3, [pc, #268]	; (8006c24 <xTaskIncrementTick+0x15c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a41      	ldr	r2, [pc, #260]	; (8006c20 <xTaskIncrementTick+0x158>)
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	4a41      	ldr	r2, [pc, #260]	; (8006c24 <xTaskIncrementTick+0x15c>)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	4b41      	ldr	r3, [pc, #260]	; (8006c28 <xTaskIncrementTick+0x160>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3301      	adds	r3, #1
 8006b28:	4a3f      	ldr	r2, [pc, #252]	; (8006c28 <xTaskIncrementTick+0x160>)
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	f000 faca 	bl	80070c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b30:	4b3e      	ldr	r3, [pc, #248]	; (8006c2c <xTaskIncrementTick+0x164>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d34e      	bcc.n	8006bd8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b3a:	4b39      	ldr	r3, [pc, #228]	; (8006c20 <xTaskIncrementTick+0x158>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <xTaskIncrementTick+0x80>
 8006b44:	2301      	movs	r3, #1
 8006b46:	e000      	b.n	8006b4a <xTaskIncrementTick+0x82>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b4e:	4b37      	ldr	r3, [pc, #220]	; (8006c2c <xTaskIncrementTick+0x164>)
 8006b50:	f04f 32ff 	mov.w	r2, #4294967295
 8006b54:	601a      	str	r2, [r3, #0]
					break;
 8006b56:	e03f      	b.n	8006bd8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b58:	4b31      	ldr	r3, [pc, #196]	; (8006c20 <xTaskIncrementTick+0x158>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d203      	bcs.n	8006b78 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b70:	4a2e      	ldr	r2, [pc, #184]	; (8006c2c <xTaskIncrementTick+0x164>)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6013      	str	r3, [r2, #0]
						break;
 8006b76:	e02f      	b.n	8006bd8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe ff83 	bl	8005a88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d004      	beq.n	8006b94 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	3318      	adds	r3, #24
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fe ff7a 	bl	8005a88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b98:	4b25      	ldr	r3, [pc, #148]	; (8006c30 <xTaskIncrementTick+0x168>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d903      	bls.n	8006ba8 <xTaskIncrementTick+0xe0>
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	4a22      	ldr	r2, [pc, #136]	; (8006c30 <xTaskIncrementTick+0x168>)
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4a1f      	ldr	r2, [pc, #124]	; (8006c34 <xTaskIncrementTick+0x16c>)
 8006bb6:	441a      	add	r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	f7fe ff05 	bl	80059ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc8:	4b1b      	ldr	r3, [pc, #108]	; (8006c38 <xTaskIncrementTick+0x170>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d3b3      	bcc.n	8006b3a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bd6:	e7b0      	b.n	8006b3a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bd8:	4b17      	ldr	r3, [pc, #92]	; (8006c38 <xTaskIncrementTick+0x170>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bde:	4915      	ldr	r1, [pc, #84]	; (8006c34 <xTaskIncrementTick+0x16c>)
 8006be0:	4613      	mov	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	440b      	add	r3, r1
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d907      	bls.n	8006c00 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	617b      	str	r3, [r7, #20]
 8006bf4:	e004      	b.n	8006c00 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006bf6:	4b11      	ldr	r3, [pc, #68]	; (8006c3c <xTaskIncrementTick+0x174>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	4a0f      	ldr	r2, [pc, #60]	; (8006c3c <xTaskIncrementTick+0x174>)
 8006bfe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006c00:	4b0f      	ldr	r3, [pc, #60]	; (8006c40 <xTaskIncrementTick+0x178>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006c0c:	697b      	ldr	r3, [r7, #20]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20000be4 	.word	0x20000be4
 8006c1c:	20000bc0 	.word	0x20000bc0
 8006c20:	20000b74 	.word	0x20000b74
 8006c24:	20000b78 	.word	0x20000b78
 8006c28:	20000bd4 	.word	0x20000bd4
 8006c2c:	20000bdc 	.word	0x20000bdc
 8006c30:	20000bc4 	.word	0x20000bc4
 8006c34:	200006ec 	.word	0x200006ec
 8006c38:	200006e8 	.word	0x200006e8
 8006c3c:	20000bcc 	.word	0x20000bcc
 8006c40:	20000bd0 	.word	0x20000bd0

08006c44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c4a:	4b27      	ldr	r3, [pc, #156]	; (8006ce8 <vTaskSwitchContext+0xa4>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c52:	4b26      	ldr	r3, [pc, #152]	; (8006cec <vTaskSwitchContext+0xa8>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c58:	e040      	b.n	8006cdc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006c5a:	4b24      	ldr	r3, [pc, #144]	; (8006cec <vTaskSwitchContext+0xa8>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c60:	4b23      	ldr	r3, [pc, #140]	; (8006cf0 <vTaskSwitchContext+0xac>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e00f      	b.n	8006c88 <vTaskSwitchContext+0x44>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d109      	bne.n	8006c82 <vTaskSwitchContext+0x3e>
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	607b      	str	r3, [r7, #4]
 8006c80:	e7fe      	b.n	8006c80 <vTaskSwitchContext+0x3c>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	491a      	ldr	r1, [pc, #104]	; (8006cf4 <vTaskSwitchContext+0xb0>)
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	440b      	add	r3, r1
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0e5      	beq.n	8006c68 <vTaskSwitchContext+0x24>
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4a13      	ldr	r2, [pc, #76]	; (8006cf4 <vTaskSwitchContext+0xb0>)
 8006ca8:	4413      	add	r3, r2
 8006caa:	60bb      	str	r3, [r7, #8]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	605a      	str	r2, [r3, #4]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d104      	bne.n	8006ccc <vTaskSwitchContext+0x88>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	605a      	str	r2, [r3, #4]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	4a09      	ldr	r2, [pc, #36]	; (8006cf8 <vTaskSwitchContext+0xb4>)
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	4a06      	ldr	r2, [pc, #24]	; (8006cf0 <vTaskSwitchContext+0xac>)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6013      	str	r3, [r2, #0]
}
 8006cdc:	bf00      	nop
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	20000be4 	.word	0x20000be4
 8006cec:	20000bd0 	.word	0x20000bd0
 8006cf0:	20000bc4 	.word	0x20000bc4
 8006cf4:	200006ec 	.word	0x200006ec
 8006cf8:	200006e8 	.word	0x200006e8

08006cfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d109      	bne.n	8006d20 <vTaskPlaceOnEventList+0x24>
 8006d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	e7fe      	b.n	8006d1e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <vTaskPlaceOnEventList+0x44>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3318      	adds	r3, #24
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7fe fe74 	bl	8005a16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d2e:	2101      	movs	r1, #1
 8006d30:	6838      	ldr	r0, [r7, #0]
 8006d32:	f000 fc3b 	bl	80075ac <prvAddCurrentTaskToDelayedList>
}
 8006d36:	bf00      	nop
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	200006e8 	.word	0x200006e8

08006d44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d109      	bne.n	8006d6a <vTaskPlaceOnEventListRestricted+0x26>
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	e7fe      	b.n	8006d68 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d6a:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <vTaskPlaceOnEventListRestricted+0x50>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3318      	adds	r3, #24
 8006d70:	4619      	mov	r1, r3
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7fe fe2b 	bl	80059ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d84:	6879      	ldr	r1, [r7, #4]
 8006d86:	68b8      	ldr	r0, [r7, #8]
 8006d88:	f000 fc10 	bl	80075ac <prvAddCurrentTaskToDelayedList>
	}
 8006d8c:	bf00      	nop
 8006d8e:	3718      	adds	r7, #24
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	200006e8 	.word	0x200006e8

08006d98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d109      	bne.n	8006dc2 <xTaskRemoveFromEventList+0x2a>
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	e7fe      	b.n	8006dc0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	3318      	adds	r3, #24
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe fe5e 	bl	8005a88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dcc:	4b1d      	ldr	r3, [pc, #116]	; (8006e44 <xTaskRemoveFromEventList+0xac>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d11d      	bne.n	8006e10 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fe fe55 	bl	8005a88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de2:	4b19      	ldr	r3, [pc, #100]	; (8006e48 <xTaskRemoveFromEventList+0xb0>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d903      	bls.n	8006df2 <xTaskRemoveFromEventList+0x5a>
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dee:	4a16      	ldr	r2, [pc, #88]	; (8006e48 <xTaskRemoveFromEventList+0xb0>)
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4a13      	ldr	r2, [pc, #76]	; (8006e4c <xTaskRemoveFromEventList+0xb4>)
 8006e00:	441a      	add	r2, r3
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	3304      	adds	r3, #4
 8006e06:	4619      	mov	r1, r3
 8006e08:	4610      	mov	r0, r2
 8006e0a:	f7fe fde0 	bl	80059ce <vListInsertEnd>
 8006e0e:	e005      	b.n	8006e1c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	3318      	adds	r3, #24
 8006e14:	4619      	mov	r1, r3
 8006e16:	480e      	ldr	r0, [pc, #56]	; (8006e50 <xTaskRemoveFromEventList+0xb8>)
 8006e18:	f7fe fdd9 	bl	80059ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e20:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <xTaskRemoveFromEventList+0xbc>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d905      	bls.n	8006e36 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e2e:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <xTaskRemoveFromEventList+0xc0>)
 8006e30:	2201      	movs	r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e001      	b.n	8006e3a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006e36:	2300      	movs	r3, #0
 8006e38:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006e3a:	697b      	ldr	r3, [r7, #20]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000be4 	.word	0x20000be4
 8006e48:	20000bc4 	.word	0x20000bc4
 8006e4c:	200006ec 	.word	0x200006ec
 8006e50:	20000b7c 	.word	0x20000b7c
 8006e54:	200006e8 	.word	0x200006e8
 8006e58:	20000bd0 	.word	0x20000bd0

08006e5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e64:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <vTaskInternalSetTimeOutState+0x24>)
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e6c:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <vTaskInternalSetTimeOutState+0x28>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	605a      	str	r2, [r3, #4]
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	20000bd4 	.word	0x20000bd4
 8006e84:	20000bc0 	.word	0x20000bc0

08006e88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d109      	bne.n	8006eac <xTaskCheckForTimeOut+0x24>
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	613b      	str	r3, [r7, #16]
 8006eaa:	e7fe      	b.n	8006eaa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d109      	bne.n	8006ec6 <xTaskCheckForTimeOut+0x3e>
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e7fe      	b.n	8006ec4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006ec6:	f000 fff9 	bl	8007ebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006eca:	4b1d      	ldr	r3, [pc, #116]	; (8006f40 <xTaskCheckForTimeOut+0xb8>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee2:	d102      	bne.n	8006eea <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	61fb      	str	r3, [r7, #28]
 8006ee8:	e023      	b.n	8006f32 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b15      	ldr	r3, [pc, #84]	; (8006f44 <xTaskCheckForTimeOut+0xbc>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d007      	beq.n	8006f06 <xTaskCheckForTimeOut+0x7e>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d302      	bcc.n	8006f06 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f00:	2301      	movs	r3, #1
 8006f02:	61fb      	str	r3, [r7, #28]
 8006f04:	e015      	b.n	8006f32 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d20b      	bcs.n	8006f28 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	1ad2      	subs	r2, r2, r3
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff ff9d 	bl	8006e5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f22:	2300      	movs	r3, #0
 8006f24:	61fb      	str	r3, [r7, #28]
 8006f26:	e004      	b.n	8006f32 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f32:	f000 fff1 	bl	8007f18 <vPortExitCritical>

	return xReturn;
 8006f36:	69fb      	ldr	r3, [r7, #28]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3720      	adds	r7, #32
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20000bc0 	.word	0x20000bc0
 8006f44:	20000bd4 	.word	0x20000bd4

08006f48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f4c:	4b03      	ldr	r3, [pc, #12]	; (8006f5c <vTaskMissedYield+0x14>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	601a      	str	r2, [r3, #0]
}
 8006f52:	bf00      	nop
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	20000bd0 	.word	0x20000bd0

08006f60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f68:	f000 f852 	bl	8007010 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f6c:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <prvIdleTask+0x28>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d9f9      	bls.n	8006f68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f74:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <prvIdleTask+0x2c>)
 8006f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f84:	e7f0      	b.n	8006f68 <prvIdleTask+0x8>
 8006f86:	bf00      	nop
 8006f88:	200006ec 	.word	0x200006ec
 8006f8c:	e000ed04 	.word	0xe000ed04

08006f90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f96:	2300      	movs	r3, #0
 8006f98:	607b      	str	r3, [r7, #4]
 8006f9a:	e00c      	b.n	8006fb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4a12      	ldr	r2, [pc, #72]	; (8006ff0 <prvInitialiseTaskLists+0x60>)
 8006fa8:	4413      	add	r3, r2
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe fce2 	bl	8005974 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	607b      	str	r3, [r7, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b37      	cmp	r3, #55	; 0x37
 8006fba:	d9ef      	bls.n	8006f9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fbc:	480d      	ldr	r0, [pc, #52]	; (8006ff4 <prvInitialiseTaskLists+0x64>)
 8006fbe:	f7fe fcd9 	bl	8005974 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fc2:	480d      	ldr	r0, [pc, #52]	; (8006ff8 <prvInitialiseTaskLists+0x68>)
 8006fc4:	f7fe fcd6 	bl	8005974 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fc8:	480c      	ldr	r0, [pc, #48]	; (8006ffc <prvInitialiseTaskLists+0x6c>)
 8006fca:	f7fe fcd3 	bl	8005974 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fce:	480c      	ldr	r0, [pc, #48]	; (8007000 <prvInitialiseTaskLists+0x70>)
 8006fd0:	f7fe fcd0 	bl	8005974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fd4:	480b      	ldr	r0, [pc, #44]	; (8007004 <prvInitialiseTaskLists+0x74>)
 8006fd6:	f7fe fccd 	bl	8005974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fda:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <prvInitialiseTaskLists+0x78>)
 8006fdc:	4a05      	ldr	r2, [pc, #20]	; (8006ff4 <prvInitialiseTaskLists+0x64>)
 8006fde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fe0:	4b0a      	ldr	r3, [pc, #40]	; (800700c <prvInitialiseTaskLists+0x7c>)
 8006fe2:	4a05      	ldr	r2, [pc, #20]	; (8006ff8 <prvInitialiseTaskLists+0x68>)
 8006fe4:	601a      	str	r2, [r3, #0]
}
 8006fe6:	bf00      	nop
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	200006ec 	.word	0x200006ec
 8006ff4:	20000b4c 	.word	0x20000b4c
 8006ff8:	20000b60 	.word	0x20000b60
 8006ffc:	20000b7c 	.word	0x20000b7c
 8007000:	20000b90 	.word	0x20000b90
 8007004:	20000ba8 	.word	0x20000ba8
 8007008:	20000b74 	.word	0x20000b74
 800700c:	20000b78 	.word	0x20000b78

08007010 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007016:	e019      	b.n	800704c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007018:	f000 ff50 	bl	8007ebc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800701c:	4b0f      	ldr	r3, [pc, #60]	; (800705c <prvCheckTasksWaitingTermination+0x4c>)
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3304      	adds	r3, #4
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe fd2d 	bl	8005a88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800702e:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <prvCheckTasksWaitingTermination+0x50>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3b01      	subs	r3, #1
 8007034:	4a0a      	ldr	r2, [pc, #40]	; (8007060 <prvCheckTasksWaitingTermination+0x50>)
 8007036:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007038:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <prvCheckTasksWaitingTermination+0x54>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3b01      	subs	r3, #1
 800703e:	4a09      	ldr	r2, [pc, #36]	; (8007064 <prvCheckTasksWaitingTermination+0x54>)
 8007040:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007042:	f000 ff69 	bl	8007f18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f80e 	bl	8007068 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800704c:	4b05      	ldr	r3, [pc, #20]	; (8007064 <prvCheckTasksWaitingTermination+0x54>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e1      	bne.n	8007018 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	20000b90 	.word	0x20000b90
 8007060:	20000bbc 	.word	0x20000bbc
 8007064:	20000ba4 	.word	0x20000ba4

08007068 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007076:	2b00      	cmp	r3, #0
 8007078:	d108      	bne.n	800708c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707e:	4618      	mov	r0, r3
 8007080:	f001 f8f8 	bl	8008274 <vPortFree>
				vPortFree( pxTCB );
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f001 f8f5 	bl	8008274 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800708a:	e017      	b.n	80070bc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007092:	2b01      	cmp	r3, #1
 8007094:	d103      	bne.n	800709e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 f8ec 	bl	8008274 <vPortFree>
	}
 800709c:	e00e      	b.n	80070bc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d009      	beq.n	80070bc <prvDeleteTCB+0x54>
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	60fb      	str	r3, [r7, #12]
 80070ba:	e7fe      	b.n	80070ba <prvDeleteTCB+0x52>
	}
 80070bc:	bf00      	nop
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070ca:	4b0f      	ldr	r3, [pc, #60]	; (8007108 <prvResetNextTaskUnblockTime+0x44>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <prvResetNextTaskUnblockTime+0x14>
 80070d4:	2301      	movs	r3, #1
 80070d6:	e000      	b.n	80070da <prvResetNextTaskUnblockTime+0x16>
 80070d8:	2300      	movs	r3, #0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070de:	4b0b      	ldr	r3, [pc, #44]	; (800710c <prvResetNextTaskUnblockTime+0x48>)
 80070e0:	f04f 32ff 	mov.w	r2, #4294967295
 80070e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070e6:	e008      	b.n	80070fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80070e8:	4b07      	ldr	r3, [pc, #28]	; (8007108 <prvResetNextTaskUnblockTime+0x44>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	4a05      	ldr	r2, [pc, #20]	; (800710c <prvResetNextTaskUnblockTime+0x48>)
 80070f8:	6013      	str	r3, [r2, #0]
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	20000b74 	.word	0x20000b74
 800710c:	20000bdc 	.word	0x20000bdc

08007110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007116:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <xTaskGetSchedulerState+0x34>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d102      	bne.n	8007124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800711e:	2301      	movs	r3, #1
 8007120:	607b      	str	r3, [r7, #4]
 8007122:	e008      	b.n	8007136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007124:	4b08      	ldr	r3, [pc, #32]	; (8007148 <xTaskGetSchedulerState+0x38>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d102      	bne.n	8007132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800712c:	2302      	movs	r3, #2
 800712e:	607b      	str	r3, [r7, #4]
 8007130:	e001      	b.n	8007136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007132:	2300      	movs	r3, #0
 8007134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007136:	687b      	ldr	r3, [r7, #4]
	}
 8007138:	4618      	mov	r0, r3
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	20000bc8 	.word	0x20000bc8
 8007148:	20000be4 	.word	0x20000be4

0800714c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d054      	beq.n	800720c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007162:	4b2d      	ldr	r3, [pc, #180]	; (8007218 <xTaskPriorityDisinherit+0xcc>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	429a      	cmp	r2, r3
 800716a:	d009      	beq.n	8007180 <xTaskPriorityDisinherit+0x34>
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	e7fe      	b.n	800717e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007184:	2b00      	cmp	r3, #0
 8007186:	d109      	bne.n	800719c <xTaskPriorityDisinherit+0x50>
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	60bb      	str	r3, [r7, #8]
 800719a:	e7fe      	b.n	800719a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a0:	1e5a      	subs	r2, r3, #1
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d02c      	beq.n	800720c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d128      	bne.n	800720c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	3304      	adds	r3, #4
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fe fc62 	bl	8005a88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071dc:	4b0f      	ldr	r3, [pc, #60]	; (800721c <xTaskPriorityDisinherit+0xd0>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d903      	bls.n	80071ec <xTaskPriorityDisinherit+0xa0>
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	4a0c      	ldr	r2, [pc, #48]	; (800721c <xTaskPriorityDisinherit+0xd0>)
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f0:	4613      	mov	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4a09      	ldr	r2, [pc, #36]	; (8007220 <xTaskPriorityDisinherit+0xd4>)
 80071fa:	441a      	add	r2, r3
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	3304      	adds	r3, #4
 8007200:	4619      	mov	r1, r3
 8007202:	4610      	mov	r0, r2
 8007204:	f7fe fbe3 	bl	80059ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007208:	2301      	movs	r3, #1
 800720a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800720c:	697b      	ldr	r3, [r7, #20]
	}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	200006e8 	.word	0x200006e8
 800721c:	20000bc4 	.word	0x20000bc4
 8007220:	200006ec 	.word	0x200006ec

08007224 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007232:	f000 fe43 	bl	8007ebc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007236:	4b26      	ldr	r3, [pc, #152]	; (80072d0 <xTaskNotifyWait+0xac>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b02      	cmp	r3, #2
 8007242:	d01a      	beq.n	800727a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007244:	4b22      	ldr	r3, [pc, #136]	; (80072d0 <xTaskNotifyWait+0xac>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	43d2      	mvns	r2, r2
 800724e:	400a      	ands	r2, r1
 8007250:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007252:	4b1f      	ldr	r3, [pc, #124]	; (80072d0 <xTaskNotifyWait+0xac>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00b      	beq.n	800727a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007262:	2101      	movs	r1, #1
 8007264:	6838      	ldr	r0, [r7, #0]
 8007266:	f000 f9a1 	bl	80075ac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800726a:	4b1a      	ldr	r3, [pc, #104]	; (80072d4 <xTaskNotifyWait+0xb0>)
 800726c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800727a:	f000 fe4d 	bl	8007f18 <vPortExitCritical>

		taskENTER_CRITICAL();
 800727e:	f000 fe1d 	bl	8007ebc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d004      	beq.n	8007292 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007288:	4b11      	ldr	r3, [pc, #68]	; (80072d0 <xTaskNotifyWait+0xac>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007292:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <xTaskNotifyWait+0xac>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b02      	cmp	r3, #2
 800729e:	d002      	beq.n	80072a6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80072a0:	2300      	movs	r3, #0
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	e008      	b.n	80072b8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80072a6:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <xTaskNotifyWait+0xac>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	43d2      	mvns	r2, r2
 80072b0:	400a      	ands	r2, r1
 80072b2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80072b4:	2301      	movs	r3, #1
 80072b6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <xTaskNotifyWait+0xac>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80072c2:	f000 fe29 	bl	8007f18 <vPortExitCritical>

		return xReturn;
 80072c6:	697b      	ldr	r3, [r7, #20]
	}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	200006e8 	.word	0x200006e8
 80072d4:	e000ed04 	.word	0xe000ed04

080072d8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08a      	sub	sp, #40	; 0x28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	603b      	str	r3, [r7, #0]
 80072e4:	4613      	mov	r3, r2
 80072e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80072e8:	2301      	movs	r3, #1
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d109      	bne.n	8007306 <xTaskGenericNotify+0x2e>
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	61bb      	str	r3, [r7, #24]
 8007304:	e7fe      	b.n	8007304 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800730a:	f000 fdd7 	bl	8007ebc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007322:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	2b04      	cmp	r3, #4
 8007330:	d827      	bhi.n	8007382 <xTaskGenericNotify+0xaa>
 8007332:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <xTaskGenericNotify+0x60>)
 8007334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007338:	08007383 	.word	0x08007383
 800733c:	0800734d 	.word	0x0800734d
 8007340:	0800735b 	.word	0x0800735b
 8007344:	08007367 	.word	0x08007367
 8007348:	0800736f 	.word	0x0800736f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	431a      	orrs	r2, r3
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007358:	e013      	b.n	8007382 <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007364:	e00d      	b.n	8007382 <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800736c:	e009      	b.n	8007382 <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800736e:	7ffb      	ldrb	r3, [r7, #31]
 8007370:	2b02      	cmp	r3, #2
 8007372:	d003      	beq.n	800737c <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800737a:	e001      	b.n	8007380 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 800737c:	2300      	movs	r3, #0
 800737e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007380:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007382:	7ffb      	ldrb	r3, [r7, #31]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d139      	bne.n	80073fc <xTaskGenericNotify+0x124>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	3304      	adds	r3, #4
 800738c:	4618      	mov	r0, r3
 800738e:	f7fe fb7b 	bl	8005a88 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007396:	4b1d      	ldr	r3, [pc, #116]	; (800740c <xTaskGenericNotify+0x134>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	429a      	cmp	r2, r3
 800739c:	d903      	bls.n	80073a6 <xTaskGenericNotify+0xce>
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a2:	4a1a      	ldr	r2, [pc, #104]	; (800740c <xTaskGenericNotify+0x134>)
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073aa:	4613      	mov	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4a17      	ldr	r2, [pc, #92]	; (8007410 <xTaskGenericNotify+0x138>)
 80073b4:	441a      	add	r2, r3
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	3304      	adds	r3, #4
 80073ba:	4619      	mov	r1, r3
 80073bc:	4610      	mov	r0, r2
 80073be:	f7fe fb06 	bl	80059ce <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <xTaskGenericNotify+0x106>
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	e7fe      	b.n	80073dc <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e2:	4b0c      	ldr	r3, [pc, #48]	; (8007414 <xTaskGenericNotify+0x13c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d907      	bls.n	80073fc <xTaskGenericNotify+0x124>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80073ec:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <xTaskGenericNotify+0x140>)
 80073ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80073fc:	f000 fd8c 	bl	8007f18 <vPortExitCritical>

		return xReturn;
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007402:	4618      	mov	r0, r3
 8007404:	3728      	adds	r7, #40	; 0x28
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20000bc4 	.word	0x20000bc4
 8007410:	200006ec 	.word	0x200006ec
 8007414:	200006e8 	.word	0x200006e8
 8007418:	e000ed04 	.word	0xe000ed04

0800741c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800741c:	b580      	push	{r7, lr}
 800741e:	b08e      	sub	sp, #56	; 0x38
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	4613      	mov	r3, r2
 800742a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800742c:	2301      	movs	r3, #1
 800742e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d109      	bne.n	800744a <xTaskGenericNotifyFromISR+0x2e>
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
 8007448:	e7fe      	b.n	8007448 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800744a:	f000 fe13 	bl	8008074 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007452:	f3ef 8211 	mrs	r2, BASEPRI
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	623a      	str	r2, [r7, #32]
 8007468:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800746a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800746c:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007476:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	2202      	movs	r2, #2
 800748a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	2b04      	cmp	r3, #4
 8007492:	d829      	bhi.n	80074e8 <xTaskGenericNotifyFromISR+0xcc>
 8007494:	a201      	add	r2, pc, #4	; (adr r2, 800749c <xTaskGenericNotifyFromISR+0x80>)
 8007496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749a:	bf00      	nop
 800749c:	080074e9 	.word	0x080074e9
 80074a0:	080074b1 	.word	0x080074b1
 80074a4:	080074bf 	.word	0x080074bf
 80074a8:	080074cb 	.word	0x080074cb
 80074ac:	080074d3 	.word	0x080074d3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80074bc:	e014      	b.n	80074e8 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80074c8:	e00e      	b.n	80074e8 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80074d0:	e00a      	b.n	80074e8 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80074d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d003      	beq.n	80074e2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80074e0:	e001      	b.n	80074e6 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80074e6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80074e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d146      	bne.n	800757e <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d009      	beq.n	800750c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	61bb      	str	r3, [r7, #24]
 800750a:	e7fe      	b.n	800750a <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800750c:	4b21      	ldr	r3, [pc, #132]	; (8007594 <xTaskGenericNotifyFromISR+0x178>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d11d      	bne.n	8007550 <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	3304      	adds	r3, #4
 8007518:	4618      	mov	r0, r3
 800751a:	f7fe fab5 	bl	8005a88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007522:	4b1d      	ldr	r3, [pc, #116]	; (8007598 <xTaskGenericNotifyFromISR+0x17c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d903      	bls.n	8007532 <xTaskGenericNotifyFromISR+0x116>
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	4a1a      	ldr	r2, [pc, #104]	; (8007598 <xTaskGenericNotifyFromISR+0x17c>)
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007536:	4613      	mov	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4a17      	ldr	r2, [pc, #92]	; (800759c <xTaskGenericNotifyFromISR+0x180>)
 8007540:	441a      	add	r2, r3
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	3304      	adds	r3, #4
 8007546:	4619      	mov	r1, r3
 8007548:	4610      	mov	r0, r2
 800754a:	f7fe fa40 	bl	80059ce <vListInsertEnd>
 800754e:	e005      	b.n	800755c <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	3318      	adds	r3, #24
 8007554:	4619      	mov	r1, r3
 8007556:	4812      	ldr	r0, [pc, #72]	; (80075a0 <xTaskGenericNotifyFromISR+0x184>)
 8007558:	f7fe fa39 	bl	80059ce <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007560:	4b10      	ldr	r3, [pc, #64]	; (80075a4 <xTaskGenericNotifyFromISR+0x188>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	429a      	cmp	r2, r3
 8007568:	d909      	bls.n	800757e <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800756a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007572:	2201      	movs	r2, #1
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	e002      	b.n	800757e <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8007578:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <xTaskGenericNotifyFromISR+0x18c>)
 800757a:	2201      	movs	r2, #1
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800758a:	4618      	mov	r0, r3
 800758c:	3738      	adds	r7, #56	; 0x38
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000be4 	.word	0x20000be4
 8007598:	20000bc4 	.word	0x20000bc4
 800759c:	200006ec 	.word	0x200006ec
 80075a0:	20000b7c 	.word	0x20000b7c
 80075a4:	200006e8 	.word	0x200006e8
 80075a8:	20000bd0 	.word	0x20000bd0

080075ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075b6:	4b21      	ldr	r3, [pc, #132]	; (800763c <prvAddCurrentTaskToDelayedList+0x90>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075bc:	4b20      	ldr	r3, [pc, #128]	; (8007640 <prvAddCurrentTaskToDelayedList+0x94>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3304      	adds	r3, #4
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fe fa60 	bl	8005a88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ce:	d10a      	bne.n	80075e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d007      	beq.n	80075e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075d6:	4b1a      	ldr	r3, [pc, #104]	; (8007640 <prvAddCurrentTaskToDelayedList+0x94>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3304      	adds	r3, #4
 80075dc:	4619      	mov	r1, r3
 80075de:	4819      	ldr	r0, [pc, #100]	; (8007644 <prvAddCurrentTaskToDelayedList+0x98>)
 80075e0:	f7fe f9f5 	bl	80059ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075e4:	e026      	b.n	8007634 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4413      	add	r3, r2
 80075ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075ee:	4b14      	ldr	r3, [pc, #80]	; (8007640 <prvAddCurrentTaskToDelayedList+0x94>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d209      	bcs.n	8007612 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075fe:	4b12      	ldr	r3, [pc, #72]	; (8007648 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	4b0f      	ldr	r3, [pc, #60]	; (8007640 <prvAddCurrentTaskToDelayedList+0x94>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3304      	adds	r3, #4
 8007608:	4619      	mov	r1, r3
 800760a:	4610      	mov	r0, r2
 800760c:	f7fe fa03 	bl	8005a16 <vListInsert>
}
 8007610:	e010      	b.n	8007634 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007612:	4b0e      	ldr	r3, [pc, #56]	; (800764c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	4b0a      	ldr	r3, [pc, #40]	; (8007640 <prvAddCurrentTaskToDelayedList+0x94>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3304      	adds	r3, #4
 800761c:	4619      	mov	r1, r3
 800761e:	4610      	mov	r0, r2
 8007620:	f7fe f9f9 	bl	8005a16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007624:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	429a      	cmp	r2, r3
 800762c:	d202      	bcs.n	8007634 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800762e:	4a08      	ldr	r2, [pc, #32]	; (8007650 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	6013      	str	r3, [r2, #0]
}
 8007634:	bf00      	nop
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20000bc0 	.word	0x20000bc0
 8007640:	200006e8 	.word	0x200006e8
 8007644:	20000ba8 	.word	0x20000ba8
 8007648:	20000b78 	.word	0x20000b78
 800764c:	20000b74 	.word	0x20000b74
 8007650:	20000bdc 	.word	0x20000bdc

08007654 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08a      	sub	sp, #40	; 0x28
 8007658:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800765e:	f000 fac3 	bl	8007be8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007662:	4b1c      	ldr	r3, [pc, #112]	; (80076d4 <xTimerCreateTimerTask+0x80>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d021      	beq.n	80076ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800766e:	2300      	movs	r3, #0
 8007670:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007672:	1d3a      	adds	r2, r7, #4
 8007674:	f107 0108 	add.w	r1, r7, #8
 8007678:	f107 030c 	add.w	r3, r7, #12
 800767c:	4618      	mov	r0, r3
 800767e:	f7fe f95f 	bl	8005940 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	9202      	str	r2, [sp, #8]
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	2302      	movs	r3, #2
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	2300      	movs	r3, #0
 8007692:	460a      	mov	r2, r1
 8007694:	4910      	ldr	r1, [pc, #64]	; (80076d8 <xTimerCreateTimerTask+0x84>)
 8007696:	4811      	ldr	r0, [pc, #68]	; (80076dc <xTimerCreateTimerTask+0x88>)
 8007698:	f7fe ff30 	bl	80064fc <xTaskCreateStatic>
 800769c:	4602      	mov	r2, r0
 800769e:	4b10      	ldr	r3, [pc, #64]	; (80076e0 <xTimerCreateTimerTask+0x8c>)
 80076a0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076a2:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <xTimerCreateTimerTask+0x8c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80076aa:	2301      	movs	r3, #1
 80076ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d109      	bne.n	80076c8 <xTimerCreateTimerTask+0x74>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	e7fe      	b.n	80076c6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80076c8:	697b      	ldr	r3, [r7, #20]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3718      	adds	r7, #24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20000c18 	.word	0x20000c18
 80076d8:	08009060 	.word	0x08009060
 80076dc:	080077fd 	.word	0x080077fd
 80076e0:	20000c1c 	.word	0x20000c1c

080076e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	; 0x28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d109      	bne.n	8007710 <xTimerGenericCommand+0x2c>
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	623b      	str	r3, [r7, #32]
 800770e:	e7fe      	b.n	800770e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007710:	4b19      	ldr	r3, [pc, #100]	; (8007778 <xTimerGenericCommand+0x94>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d02a      	beq.n	800776e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2b05      	cmp	r3, #5
 8007728:	dc18      	bgt.n	800775c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800772a:	f7ff fcf1 	bl	8007110 <xTaskGetSchedulerState>
 800772e:	4603      	mov	r3, r0
 8007730:	2b02      	cmp	r3, #2
 8007732:	d109      	bne.n	8007748 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007734:	4b10      	ldr	r3, [pc, #64]	; (8007778 <xTimerGenericCommand+0x94>)
 8007736:	6818      	ldr	r0, [r3, #0]
 8007738:	f107 0110 	add.w	r1, r7, #16
 800773c:	2300      	movs	r3, #0
 800773e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007740:	f7fe fb06 	bl	8005d50 <xQueueGenericSend>
 8007744:	6278      	str	r0, [r7, #36]	; 0x24
 8007746:	e012      	b.n	800776e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007748:	4b0b      	ldr	r3, [pc, #44]	; (8007778 <xTimerGenericCommand+0x94>)
 800774a:	6818      	ldr	r0, [r3, #0]
 800774c:	f107 0110 	add.w	r1, r7, #16
 8007750:	2300      	movs	r3, #0
 8007752:	2200      	movs	r2, #0
 8007754:	f7fe fafc 	bl	8005d50 <xQueueGenericSend>
 8007758:	6278      	str	r0, [r7, #36]	; 0x24
 800775a:	e008      	b.n	800776e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800775c:	4b06      	ldr	r3, [pc, #24]	; (8007778 <xTimerGenericCommand+0x94>)
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	f107 0110 	add.w	r1, r7, #16
 8007764:	2300      	movs	r3, #0
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	f7fe fbec 	bl	8005f44 <xQueueGenericSendFromISR>
 800776c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007770:	4618      	mov	r0, r3
 8007772:	3728      	adds	r7, #40	; 0x28
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	20000c18 	.word	0x20000c18

0800777c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af02      	add	r7, sp, #8
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007786:	4b1c      	ldr	r3, [pc, #112]	; (80077f8 <prvProcessExpiredTimer+0x7c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	3304      	adds	r3, #4
 8007794:	4618      	mov	r0, r3
 8007796:	f7fe f977 	bl	8005a88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d121      	bne.n	80077e6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	699a      	ldr	r2, [r3, #24]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	18d1      	adds	r1, r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	6978      	ldr	r0, [r7, #20]
 80077b0:	f000 f8c8 	bl	8007944 <prvInsertTimerInActiveList>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d015      	beq.n	80077e6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077ba:	2300      	movs	r3, #0
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	2300      	movs	r3, #0
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	2100      	movs	r1, #0
 80077c4:	6978      	ldr	r0, [r7, #20]
 80077c6:	f7ff ff8d 	bl	80076e4 <xTimerGenericCommand>
 80077ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d109      	bne.n	80077e6 <prvProcessExpiredTimer+0x6a>
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e7fe      	b.n	80077e4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	6978      	ldr	r0, [r7, #20]
 80077ec:	4798      	blx	r3
}
 80077ee:	bf00      	nop
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20000c10 	.word	0x20000c10

080077fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007804:	f107 0308 	add.w	r3, r7, #8
 8007808:	4618      	mov	r0, r3
 800780a:	f000 f857 	bl	80078bc <prvGetNextExpireTime>
 800780e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4619      	mov	r1, r3
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 f803 	bl	8007820 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800781a:	f000 f8d5 	bl	80079c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800781e:	e7f1      	b.n	8007804 <prvTimerTask+0x8>

08007820 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800782a:	f7ff f893 	bl	8006954 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800782e:	f107 0308 	add.w	r3, r7, #8
 8007832:	4618      	mov	r0, r3
 8007834:	f000 f866 	bl	8007904 <prvSampleTimeNow>
 8007838:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d130      	bne.n	80078a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <prvProcessTimerOrBlockTask+0x3c>
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	429a      	cmp	r2, r3
 800784c:	d806      	bhi.n	800785c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800784e:	f7ff f88f 	bl	8006970 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007852:	68f9      	ldr	r1, [r7, #12]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7ff ff91 	bl	800777c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800785a:	e024      	b.n	80078a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d008      	beq.n	8007874 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007862:	4b13      	ldr	r3, [pc, #76]	; (80078b0 <prvProcessTimerOrBlockTask+0x90>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	bf0c      	ite	eq
 800786c:	2301      	moveq	r3, #1
 800786e:	2300      	movne	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007874:	4b0f      	ldr	r3, [pc, #60]	; (80078b4 <prvProcessTimerOrBlockTask+0x94>)
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	4619      	mov	r1, r3
 8007882:	f7fe fe07 	bl	8006494 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007886:	f7ff f873 	bl	8006970 <xTaskResumeAll>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10a      	bne.n	80078a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007890:	4b09      	ldr	r3, [pc, #36]	; (80078b8 <prvProcessTimerOrBlockTask+0x98>)
 8007892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	f3bf 8f6f 	isb	sy
}
 80078a0:	e001      	b.n	80078a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80078a2:	f7ff f865 	bl	8006970 <xTaskResumeAll>
}
 80078a6:	bf00      	nop
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000c14 	.word	0x20000c14
 80078b4:	20000c18 	.word	0x20000c18
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078c4:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <prvGetNextExpireTime+0x44>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	bf0c      	ite	eq
 80078ce:	2301      	moveq	r3, #1
 80078d0:	2300      	movne	r3, #0
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	461a      	mov	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d105      	bne.n	80078ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078e2:	4b07      	ldr	r3, [pc, #28]	; (8007900 <prvGetNextExpireTime+0x44>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	e001      	b.n	80078f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80078f2:	68fb      	ldr	r3, [r7, #12]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	20000c10 	.word	0x20000c10

08007904 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800790c:	f7ff f8cc 	bl	8006aa8 <xTaskGetTickCount>
 8007910:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007912:	4b0b      	ldr	r3, [pc, #44]	; (8007940 <prvSampleTimeNow+0x3c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	429a      	cmp	r2, r3
 800791a:	d205      	bcs.n	8007928 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800791c:	f000 f904 	bl	8007b28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	e002      	b.n	800792e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800792e:	4a04      	ldr	r2, [pc, #16]	; (8007940 <prvSampleTimeNow+0x3c>)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007934:	68fb      	ldr	r3, [r7, #12]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000c20 	.word	0x20000c20

08007944 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007952:	2300      	movs	r3, #0
 8007954:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	429a      	cmp	r2, r3
 8007968:	d812      	bhi.n	8007990 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	1ad2      	subs	r2, r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	429a      	cmp	r2, r3
 8007976:	d302      	bcc.n	800797e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007978:	2301      	movs	r3, #1
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	e01b      	b.n	80079b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800797e:	4b10      	ldr	r3, [pc, #64]	; (80079c0 <prvInsertTimerInActiveList+0x7c>)
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3304      	adds	r3, #4
 8007986:	4619      	mov	r1, r3
 8007988:	4610      	mov	r0, r2
 800798a:	f7fe f844 	bl	8005a16 <vListInsert>
 800798e:	e012      	b.n	80079b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	429a      	cmp	r2, r3
 8007996:	d206      	bcs.n	80079a6 <prvInsertTimerInActiveList+0x62>
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	429a      	cmp	r2, r3
 800799e:	d302      	bcc.n	80079a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80079a0:	2301      	movs	r3, #1
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	e007      	b.n	80079b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079a6:	4b07      	ldr	r3, [pc, #28]	; (80079c4 <prvInsertTimerInActiveList+0x80>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4619      	mov	r1, r3
 80079b0:	4610      	mov	r0, r2
 80079b2:	f7fe f830 	bl	8005a16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80079b6:	697b      	ldr	r3, [r7, #20]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20000c14 	.word	0x20000c14
 80079c4:	20000c10 	.word	0x20000c10

080079c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08e      	sub	sp, #56	; 0x38
 80079cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079ce:	e099      	b.n	8007b04 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	da17      	bge.n	8007a06 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079d6:	1d3b      	adds	r3, r7, #4
 80079d8:	3304      	adds	r3, #4
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80079dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d109      	bne.n	80079f6 <prvProcessReceivedCommands+0x2e>
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	61fb      	str	r3, [r7, #28]
 80079f4:	e7fe      	b.n	80079f4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079fc:	6850      	ldr	r0, [r2, #4]
 80079fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a00:	6892      	ldr	r2, [r2, #8]
 8007a02:	4611      	mov	r1, r2
 8007a04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	db7a      	blt.n	8007b02 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d004      	beq.n	8007a22 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fe f833 	bl	8005a88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a22:	463b      	mov	r3, r7
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff ff6d 	bl	8007904 <prvSampleTimeNow>
 8007a2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b09      	cmp	r3, #9
 8007a30:	d868      	bhi.n	8007b04 <prvProcessReceivedCommands+0x13c>
 8007a32:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <prvProcessReceivedCommands+0x70>)
 8007a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a38:	08007a61 	.word	0x08007a61
 8007a3c:	08007a61 	.word	0x08007a61
 8007a40:	08007a61 	.word	0x08007a61
 8007a44:	08007b05 	.word	0x08007b05
 8007a48:	08007abb 	.word	0x08007abb
 8007a4c:	08007af1 	.word	0x08007af1
 8007a50:	08007a61 	.word	0x08007a61
 8007a54:	08007a61 	.word	0x08007a61
 8007a58:	08007b05 	.word	0x08007b05
 8007a5c:	08007abb 	.word	0x08007abb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	18d1      	adds	r1, r2, r3
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a6e:	f7ff ff69 	bl	8007944 <prvInsertTimerInActiveList>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d045      	beq.n	8007b04 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a7e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d13d      	bne.n	8007b04 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	441a      	add	r2, r3
 8007a90:	2300      	movs	r3, #0
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	2300      	movs	r3, #0
 8007a96:	2100      	movs	r1, #0
 8007a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a9a:	f7ff fe23 	bl	80076e4 <xTimerGenericCommand>
 8007a9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d12e      	bne.n	8007b04 <prvProcessReceivedCommands+0x13c>
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	61bb      	str	r3, [r7, #24]
 8007ab8:	e7fe      	b.n	8007ab8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d109      	bne.n	8007adc <prvProcessReceivedCommands+0x114>
 8007ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	617b      	str	r3, [r7, #20]
 8007ada:	e7fe      	b.n	8007ada <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	699a      	ldr	r2, [r3, #24]
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	18d1      	adds	r1, r2, r3
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aea:	f7ff ff2b 	bl	8007944 <prvInsertTimerInActiveList>
					break;
 8007aee:	e009      	b.n	8007b04 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d104      	bne.n	8007b04 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007afc:	f000 fbba 	bl	8008274 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b00:	e000      	b.n	8007b04 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007b02:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b04:	4b07      	ldr	r3, [pc, #28]	; (8007b24 <prvProcessReceivedCommands+0x15c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	1d39      	adds	r1, r7, #4
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fe faad 	bl	800606c <xQueueReceive>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f47f af5b 	bne.w	80079d0 <prvProcessReceivedCommands+0x8>
	}
}
 8007b1a:	bf00      	nop
 8007b1c:	3730      	adds	r7, #48	; 0x30
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20000c18 	.word	0x20000c18

08007b28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b2e:	e044      	b.n	8007bba <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b30:	4b2b      	ldr	r3, [pc, #172]	; (8007be0 <prvSwitchTimerLists+0xb8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b3a:	4b29      	ldr	r3, [pc, #164]	; (8007be0 <prvSwitchTimerLists+0xb8>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fd ff9d 	bl	8005a88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d12d      	bne.n	8007bba <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	4413      	add	r3, r2
 8007b66:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d90e      	bls.n	8007b8e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b7c:	4b18      	ldr	r3, [pc, #96]	; (8007be0 <prvSwitchTimerLists+0xb8>)
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3304      	adds	r3, #4
 8007b84:	4619      	mov	r1, r3
 8007b86:	4610      	mov	r0, r2
 8007b88:	f7fd ff45 	bl	8005a16 <vListInsert>
 8007b8c:	e015      	b.n	8007bba <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b8e:	2300      	movs	r3, #0
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	2300      	movs	r3, #0
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	2100      	movs	r1, #0
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f7ff fda3 	bl	80076e4 <xTimerGenericCommand>
 8007b9e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d109      	bne.n	8007bba <prvSwitchTimerLists+0x92>
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	e7fe      	b.n	8007bb8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bba:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <prvSwitchTimerLists+0xb8>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1b5      	bne.n	8007b30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007bc4:	4b06      	ldr	r3, [pc, #24]	; (8007be0 <prvSwitchTimerLists+0xb8>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007bca:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <prvSwitchTimerLists+0xbc>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a04      	ldr	r2, [pc, #16]	; (8007be0 <prvSwitchTimerLists+0xb8>)
 8007bd0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007bd2:	4a04      	ldr	r2, [pc, #16]	; (8007be4 <prvSwitchTimerLists+0xbc>)
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	6013      	str	r3, [r2, #0]
}
 8007bd8:	bf00      	nop
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	20000c10 	.word	0x20000c10
 8007be4:	20000c14 	.word	0x20000c14

08007be8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007bee:	f000 f965 	bl	8007ebc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007bf2:	4b15      	ldr	r3, [pc, #84]	; (8007c48 <prvCheckForValidListAndQueue+0x60>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d120      	bne.n	8007c3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007bfa:	4814      	ldr	r0, [pc, #80]	; (8007c4c <prvCheckForValidListAndQueue+0x64>)
 8007bfc:	f7fd feba 	bl	8005974 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c00:	4813      	ldr	r0, [pc, #76]	; (8007c50 <prvCheckForValidListAndQueue+0x68>)
 8007c02:	f7fd feb7 	bl	8005974 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c06:	4b13      	ldr	r3, [pc, #76]	; (8007c54 <prvCheckForValidListAndQueue+0x6c>)
 8007c08:	4a10      	ldr	r2, [pc, #64]	; (8007c4c <prvCheckForValidListAndQueue+0x64>)
 8007c0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c0c:	4b12      	ldr	r3, [pc, #72]	; (8007c58 <prvCheckForValidListAndQueue+0x70>)
 8007c0e:	4a10      	ldr	r2, [pc, #64]	; (8007c50 <prvCheckForValidListAndQueue+0x68>)
 8007c10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c12:	2300      	movs	r3, #0
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	4b11      	ldr	r3, [pc, #68]	; (8007c5c <prvCheckForValidListAndQueue+0x74>)
 8007c18:	4a11      	ldr	r2, [pc, #68]	; (8007c60 <prvCheckForValidListAndQueue+0x78>)
 8007c1a:	2110      	movs	r1, #16
 8007c1c:	200a      	movs	r0, #10
 8007c1e:	f7fd ffc5 	bl	8005bac <xQueueGenericCreateStatic>
 8007c22:	4602      	mov	r2, r0
 8007c24:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <prvCheckForValidListAndQueue+0x60>)
 8007c26:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c28:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <prvCheckForValidListAndQueue+0x60>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d005      	beq.n	8007c3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <prvCheckForValidListAndQueue+0x60>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	490b      	ldr	r1, [pc, #44]	; (8007c64 <prvCheckForValidListAndQueue+0x7c>)
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe fc04 	bl	8006444 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c3c:	f000 f96c 	bl	8007f18 <vPortExitCritical>
}
 8007c40:	bf00      	nop
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20000c18 	.word	0x20000c18
 8007c4c:	20000be8 	.word	0x20000be8
 8007c50:	20000bfc 	.word	0x20000bfc
 8007c54:	20000c10 	.word	0x20000c10
 8007c58:	20000c14 	.word	0x20000c14
 8007c5c:	20000cc4 	.word	0x20000cc4
 8007c60:	20000c24 	.word	0x20000c24
 8007c64:	08009068 	.word	0x08009068

08007c68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3b04      	subs	r3, #4
 8007c78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3b04      	subs	r3, #4
 8007c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	f023 0201 	bic.w	r2, r3, #1
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3b04      	subs	r3, #4
 8007c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c98:	4a0c      	ldr	r2, [pc, #48]	; (8007ccc <pxPortInitialiseStack+0x64>)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3b14      	subs	r3, #20
 8007ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3b04      	subs	r3, #4
 8007cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f06f 0202 	mvn.w	r2, #2
 8007cb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3b20      	subs	r3, #32
 8007cbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	08007cd1 	.word	0x08007cd1

08007cd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cda:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <prvTaskExitError+0x50>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce2:	d009      	beq.n	8007cf8 <prvTaskExitError+0x28>
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	e7fe      	b.n	8007cf6 <prvTaskExitError+0x26>
 8007cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d0a:	bf00      	nop
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0fc      	beq.n	8007d0c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d12:	bf00      	nop
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	20000008 	.word	0x20000008
	...

08007d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d30:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <pxCurrentTCBConst2>)
 8007d32:	6819      	ldr	r1, [r3, #0]
 8007d34:	6808      	ldr	r0, [r1, #0]
 8007d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3a:	f380 8809 	msr	PSP, r0
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f04f 0000 	mov.w	r0, #0
 8007d46:	f380 8811 	msr	BASEPRI, r0
 8007d4a:	4770      	bx	lr
 8007d4c:	f3af 8000 	nop.w

08007d50 <pxCurrentTCBConst2>:
 8007d50:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop

08007d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d58:	4808      	ldr	r0, [pc, #32]	; (8007d7c <prvPortStartFirstTask+0x24>)
 8007d5a:	6800      	ldr	r0, [r0, #0]
 8007d5c:	6800      	ldr	r0, [r0, #0]
 8007d5e:	f380 8808 	msr	MSP, r0
 8007d62:	f04f 0000 	mov.w	r0, #0
 8007d66:	f380 8814 	msr	CONTROL, r0
 8007d6a:	b662      	cpsie	i
 8007d6c:	b661      	cpsie	f
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	df00      	svc	0
 8007d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d7a:	bf00      	nop
 8007d7c:	e000ed08 	.word	0xe000ed08

08007d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007d86:	4b44      	ldr	r3, [pc, #272]	; (8007e98 <xPortStartScheduler+0x118>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a44      	ldr	r2, [pc, #272]	; (8007e9c <xPortStartScheduler+0x11c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d109      	bne.n	8007da4 <xPortStartScheduler+0x24>
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	613b      	str	r3, [r7, #16]
 8007da2:	e7fe      	b.n	8007da2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007da4:	4b3c      	ldr	r3, [pc, #240]	; (8007e98 <xPortStartScheduler+0x118>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a3d      	ldr	r2, [pc, #244]	; (8007ea0 <xPortStartScheduler+0x120>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d109      	bne.n	8007dc2 <xPortStartScheduler+0x42>
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	e7fe      	b.n	8007dc0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007dc2:	4b38      	ldr	r3, [pc, #224]	; (8007ea4 <xPortStartScheduler+0x124>)
 8007dc4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	22ff      	movs	r2, #255	; 0xff
 8007dd2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ddc:	78fb      	ldrb	r3, [r7, #3]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	4b30      	ldr	r3, [pc, #192]	; (8007ea8 <xPortStartScheduler+0x128>)
 8007de8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007dea:	4b30      	ldr	r3, [pc, #192]	; (8007eac <xPortStartScheduler+0x12c>)
 8007dec:	2207      	movs	r2, #7
 8007dee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007df0:	e009      	b.n	8007e06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007df2:	4b2e      	ldr	r3, [pc, #184]	; (8007eac <xPortStartScheduler+0x12c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	4a2c      	ldr	r2, [pc, #176]	; (8007eac <xPortStartScheduler+0x12c>)
 8007dfa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e06:	78fb      	ldrb	r3, [r7, #3]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e0e:	2b80      	cmp	r3, #128	; 0x80
 8007e10:	d0ef      	beq.n	8007df2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e12:	4b26      	ldr	r3, [pc, #152]	; (8007eac <xPortStartScheduler+0x12c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f1c3 0307 	rsb	r3, r3, #7
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d009      	beq.n	8007e32 <xPortStartScheduler+0xb2>
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	60bb      	str	r3, [r7, #8]
 8007e30:	e7fe      	b.n	8007e30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e32:	4b1e      	ldr	r3, [pc, #120]	; (8007eac <xPortStartScheduler+0x12c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	021b      	lsls	r3, r3, #8
 8007e38:	4a1c      	ldr	r2, [pc, #112]	; (8007eac <xPortStartScheduler+0x12c>)
 8007e3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e3c:	4b1b      	ldr	r3, [pc, #108]	; (8007eac <xPortStartScheduler+0x12c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e44:	4a19      	ldr	r2, [pc, #100]	; (8007eac <xPortStartScheduler+0x12c>)
 8007e46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e50:	4b17      	ldr	r3, [pc, #92]	; (8007eb0 <xPortStartScheduler+0x130>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a16      	ldr	r2, [pc, #88]	; (8007eb0 <xPortStartScheduler+0x130>)
 8007e56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e5c:	4b14      	ldr	r3, [pc, #80]	; (8007eb0 <xPortStartScheduler+0x130>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a13      	ldr	r2, [pc, #76]	; (8007eb0 <xPortStartScheduler+0x130>)
 8007e62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e68:	f000 f8d6 	bl	8008018 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e6c:	4b11      	ldr	r3, [pc, #68]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e72:	f000 f8f5 	bl	8008060 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e76:	4b10      	ldr	r3, [pc, #64]	; (8007eb8 <xPortStartScheduler+0x138>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a0f      	ldr	r2, [pc, #60]	; (8007eb8 <xPortStartScheduler+0x138>)
 8007e7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e82:	f7ff ff69 	bl	8007d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e86:	f7fe fedd 	bl	8006c44 <vTaskSwitchContext>
	prvTaskExitError();
 8007e8a:	f7ff ff21 	bl	8007cd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	e000ed00 	.word	0xe000ed00
 8007e9c:	410fc271 	.word	0x410fc271
 8007ea0:	410fc270 	.word	0x410fc270
 8007ea4:	e000e400 	.word	0xe000e400
 8007ea8:	20000d14 	.word	0x20000d14
 8007eac:	20000d18 	.word	0x20000d18
 8007eb0:	e000ed20 	.word	0xe000ed20
 8007eb4:	20000008 	.word	0x20000008
 8007eb8:	e000ef34 	.word	0xe000ef34

08007ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ed4:	4b0e      	ldr	r3, [pc, #56]	; (8007f10 <vPortEnterCritical+0x54>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	4a0d      	ldr	r2, [pc, #52]	; (8007f10 <vPortEnterCritical+0x54>)
 8007edc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ede:	4b0c      	ldr	r3, [pc, #48]	; (8007f10 <vPortEnterCritical+0x54>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d10e      	bne.n	8007f04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ee6:	4b0b      	ldr	r3, [pc, #44]	; (8007f14 <vPortEnterCritical+0x58>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d009      	beq.n	8007f04 <vPortEnterCritical+0x48>
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	603b      	str	r3, [r7, #0]
 8007f02:	e7fe      	b.n	8007f02 <vPortEnterCritical+0x46>
	}
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	20000008 	.word	0x20000008
 8007f14:	e000ed04 	.word	0xe000ed04

08007f18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f1e:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <vPortExitCritical+0x4c>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d109      	bne.n	8007f3a <vPortExitCritical+0x22>
 8007f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	607b      	str	r3, [r7, #4]
 8007f38:	e7fe      	b.n	8007f38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007f3a:	4b0a      	ldr	r3, [pc, #40]	; (8007f64 <vPortExitCritical+0x4c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	4a08      	ldr	r2, [pc, #32]	; (8007f64 <vPortExitCritical+0x4c>)
 8007f42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f44:	4b07      	ldr	r3, [pc, #28]	; (8007f64 <vPortExitCritical+0x4c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d104      	bne.n	8007f56 <vPortExitCritical+0x3e>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f56:	bf00      	nop
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20000008 	.word	0x20000008
	...

08007f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f70:	f3ef 8009 	mrs	r0, PSP
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	4b15      	ldr	r3, [pc, #84]	; (8007fd0 <pxCurrentTCBConst>)
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	f01e 0f10 	tst.w	lr, #16
 8007f80:	bf08      	it	eq
 8007f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8a:	6010      	str	r0, [r2, #0]
 8007f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f94:	f380 8811 	msr	BASEPRI, r0
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f7fe fe50 	bl	8006c44 <vTaskSwitchContext>
 8007fa4:	f04f 0000 	mov.w	r0, #0
 8007fa8:	f380 8811 	msr	BASEPRI, r0
 8007fac:	bc09      	pop	{r0, r3}
 8007fae:	6819      	ldr	r1, [r3, #0]
 8007fb0:	6808      	ldr	r0, [r1, #0]
 8007fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb6:	f01e 0f10 	tst.w	lr, #16
 8007fba:	bf08      	it	eq
 8007fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007fc0:	f380 8809 	msr	PSP, r0
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	f3af 8000 	nop.w

08007fd0 <pxCurrentTCBConst>:
 8007fd0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop

08007fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ff0:	f7fe fd6a 	bl	8006ac8 <xTaskIncrementTick>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ffa:	4b06      	ldr	r3, [pc, #24]	; (8008014 <SysTick_Handler+0x3c>)
 8007ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	2300      	movs	r3, #0
 8008004:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800800c:	bf00      	nop
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	e000ed04 	.word	0xe000ed04

08008018 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008018:	b480      	push	{r7}
 800801a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800801c:	4b0b      	ldr	r3, [pc, #44]	; (800804c <vPortSetupTimerInterrupt+0x34>)
 800801e:	2200      	movs	r2, #0
 8008020:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008022:	4b0b      	ldr	r3, [pc, #44]	; (8008050 <vPortSetupTimerInterrupt+0x38>)
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008028:	4b0a      	ldr	r3, [pc, #40]	; (8008054 <vPortSetupTimerInterrupt+0x3c>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a0a      	ldr	r2, [pc, #40]	; (8008058 <vPortSetupTimerInterrupt+0x40>)
 800802e:	fba2 2303 	umull	r2, r3, r2, r3
 8008032:	099b      	lsrs	r3, r3, #6
 8008034:	4a09      	ldr	r2, [pc, #36]	; (800805c <vPortSetupTimerInterrupt+0x44>)
 8008036:	3b01      	subs	r3, #1
 8008038:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800803a:	4b04      	ldr	r3, [pc, #16]	; (800804c <vPortSetupTimerInterrupt+0x34>)
 800803c:	2207      	movs	r2, #7
 800803e:	601a      	str	r2, [r3, #0]
}
 8008040:	bf00      	nop
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	e000e010 	.word	0xe000e010
 8008050:	e000e018 	.word	0xe000e018
 8008054:	2000000c 	.word	0x2000000c
 8008058:	10624dd3 	.word	0x10624dd3
 800805c:	e000e014 	.word	0xe000e014

08008060 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008060:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008070 <vPortEnableVFP+0x10>
 8008064:	6801      	ldr	r1, [r0, #0]
 8008066:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800806a:	6001      	str	r1, [r0, #0]
 800806c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800806e:	bf00      	nop
 8008070:	e000ed88 	.word	0xe000ed88

08008074 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800807a:	f3ef 8305 	mrs	r3, IPSR
 800807e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b0f      	cmp	r3, #15
 8008084:	d913      	bls.n	80080ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008086:	4a16      	ldr	r2, [pc, #88]	; (80080e0 <vPortValidateInterruptPriority+0x6c>)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4413      	add	r3, r2
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008090:	4b14      	ldr	r3, [pc, #80]	; (80080e4 <vPortValidateInterruptPriority+0x70>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	7afa      	ldrb	r2, [r7, #11]
 8008096:	429a      	cmp	r2, r3
 8008098:	d209      	bcs.n	80080ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	607b      	str	r3, [r7, #4]
 80080ac:	e7fe      	b.n	80080ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080ae:	4b0e      	ldr	r3, [pc, #56]	; (80080e8 <vPortValidateInterruptPriority+0x74>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080b6:	4b0d      	ldr	r3, [pc, #52]	; (80080ec <vPortValidateInterruptPriority+0x78>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d909      	bls.n	80080d2 <vPortValidateInterruptPriority+0x5e>
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	e7fe      	b.n	80080d0 <vPortValidateInterruptPriority+0x5c>
	}
 80080d2:	bf00      	nop
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	e000e3f0 	.word	0xe000e3f0
 80080e4:	20000d14 	.word	0x20000d14
 80080e8:	e000ed0c 	.word	0xe000ed0c
 80080ec:	20000d18 	.word	0x20000d18

080080f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08a      	sub	sp, #40	; 0x28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080f8:	2300      	movs	r3, #0
 80080fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080fc:	f7fe fc2a 	bl	8006954 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008100:	4b57      	ldr	r3, [pc, #348]	; (8008260 <pvPortMalloc+0x170>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008108:	f000 f90c 	bl	8008324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800810c:	4b55      	ldr	r3, [pc, #340]	; (8008264 <pvPortMalloc+0x174>)
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4013      	ands	r3, r2
 8008114:	2b00      	cmp	r3, #0
 8008116:	f040 808c 	bne.w	8008232 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d01c      	beq.n	800815a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008120:	2208      	movs	r2, #8
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4413      	add	r3, r2
 8008126:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f003 0307 	and.w	r3, r3, #7
 800812e:	2b00      	cmp	r3, #0
 8008130:	d013      	beq.n	800815a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f023 0307 	bic.w	r3, r3, #7
 8008138:	3308      	adds	r3, #8
 800813a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	2b00      	cmp	r3, #0
 8008144:	d009      	beq.n	800815a <pvPortMalloc+0x6a>
 8008146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e7fe      	b.n	8008158 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d068      	beq.n	8008232 <pvPortMalloc+0x142>
 8008160:	4b41      	ldr	r3, [pc, #260]	; (8008268 <pvPortMalloc+0x178>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	429a      	cmp	r2, r3
 8008168:	d863      	bhi.n	8008232 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800816a:	4b40      	ldr	r3, [pc, #256]	; (800826c <pvPortMalloc+0x17c>)
 800816c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800816e:	4b3f      	ldr	r3, [pc, #252]	; (800826c <pvPortMalloc+0x17c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008174:	e004      	b.n	8008180 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	429a      	cmp	r2, r3
 8008188:	d903      	bls.n	8008192 <pvPortMalloc+0xa2>
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1f1      	bne.n	8008176 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008192:	4b33      	ldr	r3, [pc, #204]	; (8008260 <pvPortMalloc+0x170>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008198:	429a      	cmp	r2, r3
 800819a:	d04a      	beq.n	8008232 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2208      	movs	r2, #8
 80081a2:	4413      	add	r3, r2
 80081a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	1ad2      	subs	r2, r2, r3
 80081b6:	2308      	movs	r3, #8
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d91e      	bls.n	80081fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4413      	add	r3, r2
 80081c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	f003 0307 	and.w	r3, r3, #7
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d009      	beq.n	80081e4 <pvPortMalloc+0xf4>
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	e7fe      	b.n	80081e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	1ad2      	subs	r2, r2, r3
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081f6:	69b8      	ldr	r0, [r7, #24]
 80081f8:	f000 f8f6 	bl	80083e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081fc:	4b1a      	ldr	r3, [pc, #104]	; (8008268 <pvPortMalloc+0x178>)
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	4a18      	ldr	r2, [pc, #96]	; (8008268 <pvPortMalloc+0x178>)
 8008208:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800820a:	4b17      	ldr	r3, [pc, #92]	; (8008268 <pvPortMalloc+0x178>)
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	4b18      	ldr	r3, [pc, #96]	; (8008270 <pvPortMalloc+0x180>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	429a      	cmp	r2, r3
 8008214:	d203      	bcs.n	800821e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008216:	4b14      	ldr	r3, [pc, #80]	; (8008268 <pvPortMalloc+0x178>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a15      	ldr	r2, [pc, #84]	; (8008270 <pvPortMalloc+0x180>)
 800821c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	4b10      	ldr	r3, [pc, #64]	; (8008264 <pvPortMalloc+0x174>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	431a      	orrs	r2, r3
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008232:	f7fe fb9d 	bl	8006970 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	2b00      	cmp	r3, #0
 800823e:	d009      	beq.n	8008254 <pvPortMalloc+0x164>
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	e7fe      	b.n	8008252 <pvPortMalloc+0x162>
	return pvReturn;
 8008254:	69fb      	ldr	r3, [r7, #28]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3728      	adds	r7, #40	; 0x28
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20001924 	.word	0x20001924
 8008264:	20001930 	.word	0x20001930
 8008268:	20001928 	.word	0x20001928
 800826c:	2000191c 	.word	0x2000191c
 8008270:	2000192c 	.word	0x2000192c

08008274 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d046      	beq.n	8008314 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008286:	2308      	movs	r3, #8
 8008288:	425b      	negs	r3, r3
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	4413      	add	r3, r2
 800828e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	4b20      	ldr	r3, [pc, #128]	; (800831c <vPortFree+0xa8>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4013      	ands	r3, r2
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <vPortFree+0x42>
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e7fe      	b.n	80082b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d009      	beq.n	80082d2 <vPortFree+0x5e>
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	60bb      	str	r3, [r7, #8]
 80082d0:	e7fe      	b.n	80082d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	4b11      	ldr	r3, [pc, #68]	; (800831c <vPortFree+0xa8>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4013      	ands	r3, r2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d019      	beq.n	8008314 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d115      	bne.n	8008314 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	4b0b      	ldr	r3, [pc, #44]	; (800831c <vPortFree+0xa8>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	43db      	mvns	r3, r3
 80082f2:	401a      	ands	r2, r3
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082f8:	f7fe fb2c 	bl	8006954 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	4b07      	ldr	r3, [pc, #28]	; (8008320 <vPortFree+0xac>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4413      	add	r3, r2
 8008306:	4a06      	ldr	r2, [pc, #24]	; (8008320 <vPortFree+0xac>)
 8008308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800830a:	6938      	ldr	r0, [r7, #16]
 800830c:	f000 f86c 	bl	80083e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008310:	f7fe fb2e 	bl	8006970 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008314:	bf00      	nop
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	20001930 	.word	0x20001930
 8008320:	20001928 	.word	0x20001928

08008324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800832a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800832e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008330:	4b27      	ldr	r3, [pc, #156]	; (80083d0 <prvHeapInit+0xac>)
 8008332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00c      	beq.n	8008358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3307      	adds	r3, #7
 8008342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f023 0307 	bic.w	r3, r3, #7
 800834a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	4a1f      	ldr	r2, [pc, #124]	; (80083d0 <prvHeapInit+0xac>)
 8008354:	4413      	add	r3, r2
 8008356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800835c:	4a1d      	ldr	r2, [pc, #116]	; (80083d4 <prvHeapInit+0xb0>)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008362:	4b1c      	ldr	r3, [pc, #112]	; (80083d4 <prvHeapInit+0xb0>)
 8008364:	2200      	movs	r2, #0
 8008366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	4413      	add	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008370:	2208      	movs	r2, #8
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1a9b      	subs	r3, r3, r2
 8008376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0307 	bic.w	r3, r3, #7
 800837e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4a15      	ldr	r2, [pc, #84]	; (80083d8 <prvHeapInit+0xb4>)
 8008384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008386:	4b14      	ldr	r3, [pc, #80]	; (80083d8 <prvHeapInit+0xb4>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2200      	movs	r2, #0
 800838c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800838e:	4b12      	ldr	r3, [pc, #72]	; (80083d8 <prvHeapInit+0xb4>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	1ad2      	subs	r2, r2, r3
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083a4:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <prvHeapInit+0xb4>)
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	4a0a      	ldr	r2, [pc, #40]	; (80083dc <prvHeapInit+0xb8>)
 80083b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	4a09      	ldr	r2, [pc, #36]	; (80083e0 <prvHeapInit+0xbc>)
 80083ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083bc:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <prvHeapInit+0xc0>)
 80083be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083c2:	601a      	str	r2, [r3, #0]
}
 80083c4:	bf00      	nop
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	20000d1c 	.word	0x20000d1c
 80083d4:	2000191c 	.word	0x2000191c
 80083d8:	20001924 	.word	0x20001924
 80083dc:	2000192c 	.word	0x2000192c
 80083e0:	20001928 	.word	0x20001928
 80083e4:	20001930 	.word	0x20001930

080083e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083f0:	4b28      	ldr	r3, [pc, #160]	; (8008494 <prvInsertBlockIntoFreeList+0xac>)
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	e002      	b.n	80083fc <prvInsertBlockIntoFreeList+0x14>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60fb      	str	r3, [r7, #12]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	429a      	cmp	r2, r3
 8008404:	d8f7      	bhi.n	80083f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	4413      	add	r3, r2
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	429a      	cmp	r2, r3
 8008416:	d108      	bne.n	800842a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	441a      	add	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	441a      	add	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	429a      	cmp	r2, r3
 800843c:	d118      	bne.n	8008470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	4b15      	ldr	r3, [pc, #84]	; (8008498 <prvInsertBlockIntoFreeList+0xb0>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d00d      	beq.n	8008466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	441a      	add	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	e008      	b.n	8008478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008466:	4b0c      	ldr	r3, [pc, #48]	; (8008498 <prvInsertBlockIntoFreeList+0xb0>)
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	e003      	b.n	8008478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	429a      	cmp	r2, r3
 800847e:	d002      	beq.n	8008486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008486:	bf00      	nop
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	2000191c 	.word	0x2000191c
 8008498:	20001924 	.word	0x20001924

0800849c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80084a2:	463b      	mov	r3, r7
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	605a      	str	r2, [r3, #4]
 80084aa:	609a      	str	r2, [r3, #8]
 80084ac:	60da      	str	r2, [r3, #12]
 80084ae:	611a      	str	r2, [r3, #16]
 80084b0:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80084b2:	4b27      	ldr	r3, [pc, #156]	; (8008550 <MX_ADC1_Init+0xb4>)
 80084b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80084ba:	4b25      	ldr	r3, [pc, #148]	; (8008550 <MX_ADC1_Init+0xb4>)
 80084bc:	2200      	movs	r2, #0
 80084be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80084c0:	4b23      	ldr	r3, [pc, #140]	; (8008550 <MX_ADC1_Init+0xb4>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80084c6:	4b22      	ldr	r3, [pc, #136]	; (8008550 <MX_ADC1_Init+0xb4>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80084cc:	4b20      	ldr	r3, [pc, #128]	; (8008550 <MX_ADC1_Init+0xb4>)
 80084ce:	2201      	movs	r2, #1
 80084d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80084d2:	4b1f      	ldr	r3, [pc, #124]	; (8008550 <MX_ADC1_Init+0xb4>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80084da:	4b1d      	ldr	r3, [pc, #116]	; (8008550 <MX_ADC1_Init+0xb4>)
 80084dc:	2200      	movs	r2, #0
 80084de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80084e0:	4b1b      	ldr	r3, [pc, #108]	; (8008550 <MX_ADC1_Init+0xb4>)
 80084e2:	2201      	movs	r2, #1
 80084e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80084e6:	4b1a      	ldr	r3, [pc, #104]	; (8008550 <MX_ADC1_Init+0xb4>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80084ec:	4b18      	ldr	r3, [pc, #96]	; (8008550 <MX_ADC1_Init+0xb4>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80084f2:	4b17      	ldr	r3, [pc, #92]	; (8008550 <MX_ADC1_Init+0xb4>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80084fa:	4b15      	ldr	r3, [pc, #84]	; (8008550 <MX_ADC1_Init+0xb4>)
 80084fc:	2204      	movs	r2, #4
 80084fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008500:	4b13      	ldr	r3, [pc, #76]	; (8008550 <MX_ADC1_Init+0xb4>)
 8008502:	2200      	movs	r2, #0
 8008504:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8008506:	4b12      	ldr	r3, [pc, #72]	; (8008550 <MX_ADC1_Init+0xb4>)
 8008508:	2200      	movs	r2, #0
 800850a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800850c:	4810      	ldr	r0, [pc, #64]	; (8008550 <MX_ADC1_Init+0xb4>)
 800850e:	f7f7 feb3 	bl	8000278 <HAL_ADC_Init>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8008518:	f000 fa76 	bl	8008a08 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800851c:	2306      	movs	r3, #6
 800851e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008520:	2301      	movs	r3, #1
 8008522:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8008524:	2301      	movs	r3, #1
 8008526:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8008528:	2300      	movs	r3, #0
 800852a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800852c:	2300      	movs	r3, #0
 800852e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8008530:	2300      	movs	r3, #0
 8008532:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008534:	463b      	mov	r3, r7
 8008536:	4619      	mov	r1, r3
 8008538:	4805      	ldr	r0, [pc, #20]	; (8008550 <MX_ADC1_Init+0xb4>)
 800853a:	f7f8 fc01 	bl	8000d40 <HAL_ADC_ConfigChannel>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8008544:	f000 fa60 	bl	8008a08 <Error_Handler>
  }

}
 8008548:	bf00      	nop
 800854a:	3718      	adds	r7, #24
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	2000297c 	.word	0x2000297c

08008554 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b08a      	sub	sp, #40	; 0x28
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800855c:	f107 0314 	add.w	r3, r7, #20
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	605a      	str	r2, [r3, #4]
 8008566:	609a      	str	r2, [r3, #8]
 8008568:	60da      	str	r2, [r3, #12]
 800856a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008574:	d12b      	bne.n	80085ce <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008576:	4b18      	ldr	r3, [pc, #96]	; (80085d8 <HAL_ADC_MspInit+0x84>)
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	4a17      	ldr	r2, [pc, #92]	; (80085d8 <HAL_ADC_MspInit+0x84>)
 800857c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008580:	6153      	str	r3, [r2, #20]
 8008582:	4b15      	ldr	r3, [pc, #84]	; (80085d8 <HAL_ADC_MspInit+0x84>)
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800858a:	613b      	str	r3, [r7, #16]
 800858c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800858e:	4b12      	ldr	r3, [pc, #72]	; (80085d8 <HAL_ADC_MspInit+0x84>)
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	4a11      	ldr	r2, [pc, #68]	; (80085d8 <HAL_ADC_MspInit+0x84>)
 8008594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008598:	6153      	str	r3, [r2, #20]
 800859a:	4b0f      	ldr	r3, [pc, #60]	; (80085d8 <HAL_ADC_MspInit+0x84>)
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80085a6:	2303      	movs	r3, #3
 80085a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80085aa:	2303      	movs	r3, #3
 80085ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085b2:	f107 0314 	add.w	r3, r7, #20
 80085b6:	4619      	mov	r1, r3
 80085b8:	4808      	ldr	r0, [pc, #32]	; (80085dc <HAL_ADC_MspInit+0x88>)
 80085ba:	f7f9 fb81 	bl	8001cc0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80085be:	2200      	movs	r2, #0
 80085c0:	2105      	movs	r1, #5
 80085c2:	2012      	movs	r0, #18
 80085c4:	f7f9 f992 	bl	80018ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80085c8:	2012      	movs	r0, #18
 80085ca:	f7f9 f9bb 	bl	8001944 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80085ce:	bf00      	nop
 80085d0:	3728      	adds	r7, #40	; 0x28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	40021000 	.word	0x40021000
 80085dc:	48000800 	.word	0x48000800

080085e0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80085e4:	4b0d      	ldr	r3, [pc, #52]	; (800861c <MX_CRC_Init+0x3c>)
 80085e6:	4a0e      	ldr	r2, [pc, #56]	; (8008620 <MX_CRC_Init+0x40>)
 80085e8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80085ea:	4b0c      	ldr	r3, [pc, #48]	; (800861c <MX_CRC_Init+0x3c>)
 80085ec:	2200      	movs	r2, #0
 80085ee:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80085f0:	4b0a      	ldr	r3, [pc, #40]	; (800861c <MX_CRC_Init+0x3c>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80085f6:	4b09      	ldr	r3, [pc, #36]	; (800861c <MX_CRC_Init+0x3c>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80085fc:	4b07      	ldr	r3, [pc, #28]	; (800861c <MX_CRC_Init+0x3c>)
 80085fe:	2200      	movs	r2, #0
 8008600:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008602:	4b06      	ldr	r3, [pc, #24]	; (800861c <MX_CRC_Init+0x3c>)
 8008604:	2201      	movs	r2, #1
 8008606:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008608:	4804      	ldr	r0, [pc, #16]	; (800861c <MX_CRC_Init+0x3c>)
 800860a:	f7f9 f9cb 	bl	80019a4 <HAL_CRC_Init>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8008614:	f000 f9f8 	bl	8008a08 <Error_Handler>
  }

}
 8008618:	bf00      	nop
 800861a:	bd80      	pop	{r7, pc}
 800861c:	200029cc 	.word	0x200029cc
 8008620:	40023000 	.word	0x40023000

08008624 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a0a      	ldr	r2, [pc, #40]	; (800865c <HAL_CRC_MspInit+0x38>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d10b      	bne.n	800864e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008636:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <HAL_CRC_MspInit+0x3c>)
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	4a09      	ldr	r2, [pc, #36]	; (8008660 <HAL_CRC_MspInit+0x3c>)
 800863c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008640:	6153      	str	r3, [r2, #20]
 8008642:	4b07      	ldr	r3, [pc, #28]	; (8008660 <HAL_CRC_MspInit+0x3c>)
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800864e:	bf00      	nop
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	40023000 	.word	0x40023000
 8008660:	40021000 	.word	0x40021000

08008664 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008664:	b580      	push	{r7, lr}
 8008666:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of dataQueue */
  dataQueueHandle = osMessageQueueNew (128, sizeof(uint32_t), &dataQueue_attributes);
 8008668:	4a10      	ldr	r2, [pc, #64]	; (80086ac <MX_FREERTOS_Init+0x48>)
 800866a:	2104      	movs	r1, #4
 800866c:	2080      	movs	r0, #128	; 0x80
 800866e:	f7fd f8c7 	bl	8005800 <osMessageQueueNew>
 8008672:	4602      	mov	r2, r0
 8008674:	4b0e      	ldr	r3, [pc, #56]	; (80086b0 <MX_FREERTOS_Init+0x4c>)
 8008676:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of measureTask */
  measureTaskHandle = osThreadNew(StartMeasurement, NULL, &measureTask_attributes);
 8008678:	4a0e      	ldr	r2, [pc, #56]	; (80086b4 <MX_FREERTOS_Init+0x50>)
 800867a:	2100      	movs	r1, #0
 800867c:	480e      	ldr	r0, [pc, #56]	; (80086b8 <MX_FREERTOS_Init+0x54>)
 800867e:	f7fc fef1 	bl	8005464 <osThreadNew>
 8008682:	4602      	mov	r2, r0
 8008684:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <MX_FREERTOS_Init+0x58>)
 8008686:	601a      	str	r2, [r3, #0]

  /* creation of UARTTransmit */
  UARTTransmitHandle = osThreadNew(TransmitTask, NULL, &UARTTransmit_attributes);
 8008688:	4a0d      	ldr	r2, [pc, #52]	; (80086c0 <MX_FREERTOS_Init+0x5c>)
 800868a:	2100      	movs	r1, #0
 800868c:	480d      	ldr	r0, [pc, #52]	; (80086c4 <MX_FREERTOS_Init+0x60>)
 800868e:	f7fc fee9 	bl	8005464 <osThreadNew>
 8008692:	4602      	mov	r2, r0
 8008694:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <MX_FREERTOS_Init+0x64>)
 8008696:	601a      	str	r2, [r3, #0]

  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(HeartBeatTask, NULL, &HeartBeat_attributes);
 8008698:	4a0c      	ldr	r2, [pc, #48]	; (80086cc <MX_FREERTOS_Init+0x68>)
 800869a:	2100      	movs	r1, #0
 800869c:	480c      	ldr	r0, [pc, #48]	; (80086d0 <MX_FREERTOS_Init+0x6c>)
 800869e:	f7fc fee1 	bl	8005464 <osThreadNew>
 80086a2:	4602      	mov	r2, r0
 80086a4:	4b0b      	ldr	r3, [pc, #44]	; (80086d4 <MX_FREERTOS_Init+0x70>)
 80086a6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80086a8:	bf00      	nop
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	08009130 	.word	0x08009130
 80086b0:	200029fc 	.word	0x200029fc
 80086b4:	080090c4 	.word	0x080090c4
 80086b8:	080086d9 	.word	0x080086d9
 80086bc:	200029f4 	.word	0x200029f4
 80086c0:	080090e8 	.word	0x080090e8
 80086c4:	0800874d 	.word	0x0800874d
 80086c8:	200029f0 	.word	0x200029f0
 80086cc:	0800910c 	.word	0x0800910c
 80086d0:	0800878d 	.word	0x0800878d
 80086d4:	200029f8 	.word	0x200029f8

080086d8 <StartMeasurement>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasurement */
void StartMeasurement(void *argument)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMeasurement */
	/* Infinite loop */
	uint8_t cmd;
	osStatus_t status = {0};
 80086e0:	2300      	movs	r3, #0
 80086e2:	60fb      	str	r3, [r7, #12]
	//HAL_UART_Transmit(&huart2, &d, 1,0);
	HAL_UART_Receive_IT(&huart2, &cmd, 1);
 80086e4:	f107 030b 	add.w	r3, r7, #11
 80086e8:	2201      	movs	r2, #1
 80086ea:	4619      	mov	r1, r3
 80086ec:	4814      	ldr	r0, [pc, #80]	; (8008740 <StartMeasurement+0x68>)
 80086ee:	f7fb fed7 	bl	80044a0 <HAL_UART_Receive_IT>

	for (;;) {
		status = osThreadFlagsWait(0x1, osFlagsWaitAll, osWaitForever);
 80086f2:	f04f 32ff 	mov.w	r2, #4294967295
 80086f6:	2101      	movs	r1, #1
 80086f8:	2001      	movs	r0, #1
 80086fa:	f7fc ffbf 	bl	800567c <osThreadFlagsWait>
 80086fe:	4603      	mov	r3, r0
 8008700:	60fb      	str	r3, [r7, #12]
		if (cmd & 0x1){
 8008702:	7afb      	ldrb	r3, [r7, #11]
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00a      	beq.n	8008722 <StartMeasurement+0x4a>
			HAL_UART_Receive_IT(&huart2, &cmd, 1);
 800870c:	f107 030b 	add.w	r3, r7, #11
 8008710:	2201      	movs	r2, #1
 8008712:	4619      	mov	r1, r3
 8008714:	480a      	ldr	r0, [pc, #40]	; (8008740 <StartMeasurement+0x68>)
 8008716:	f7fb fec3 	bl	80044a0 <HAL_UART_Receive_IT>
			HAL_ADC_Start_IT(&hadc1);
 800871a:	480a      	ldr	r0, [pc, #40]	; (8008744 <StartMeasurement+0x6c>)
 800871c:	f7f8 f83e 	bl	800079c <HAL_ADC_Start_IT>
 8008720:	e00a      	b.n	8008738 <StartMeasurement+0x60>
		} else if (cmd & 0x2) {
 8008722:	7afb      	ldrb	r3, [r7, #11]
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b00      	cmp	r3, #0
 800872a:	d005      	beq.n	8008738 <StartMeasurement+0x60>
			osThreadFlagsSet(UARTTransmitHandle, 0x2);
 800872c:	4b06      	ldr	r3, [pc, #24]	; (8008748 <StartMeasurement+0x70>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2102      	movs	r1, #2
 8008732:	4618      	mov	r0, r3
 8008734:	f7fc ff40 	bl	80055b8 <osThreadFlagsSet>
		}
		osDelay(1);
 8008738:	2001      	movs	r0, #1
 800873a:	f7fd f833 	bl	80057a4 <osDelay>
		status = osThreadFlagsWait(0x1, osFlagsWaitAll, osWaitForever);
 800873e:	e7d8      	b.n	80086f2 <StartMeasurement+0x1a>
 8008740:	20002a40 	.word	0x20002a40
 8008744:	2000297c 	.word	0x2000297c
 8008748:	200029f0 	.word	0x200029f0

0800874c <TransmitTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_TransmitTask */
void TransmitTask(void *argument)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TransmitTask */
	/* Infinite loop */
	osStatus_t status = {0};
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
	for (;;) {
		status = osThreadFlagsWait(0x2, osFlagsWaitAny, osWaitForever);
 8008758:	f04f 32ff 	mov.w	r2, #4294967295
 800875c:	2100      	movs	r1, #0
 800875e:	2002      	movs	r0, #2
 8008760:	f7fc ff8c 	bl	800567c <osThreadFlagsWait>
 8008764:	4603      	mov	r3, r0
 8008766:	60fb      	str	r3, [r7, #12]
		HAL_NVIC_DisableIRQ(ADC1_IRQn);
 8008768:	2012      	movs	r0, #18
 800876a:	f7f9 f903 	bl	8001974 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)globaldata, WATERMARK_MAX);
 800876e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008772:	4904      	ldr	r1, [pc, #16]	; (8008784 <TransmitTask+0x38>)
 8008774:	4804      	ldr	r0, [pc, #16]	; (8008788 <TransmitTask+0x3c>)
 8008776:	f7fb fe37 	bl	80043e8 <HAL_UART_Transmit_IT>
		osDelay(1);
 800877a:	2001      	movs	r0, #1
 800877c:	f7fd f812 	bl	80057a4 <osDelay>
		status = osThreadFlagsWait(0x2, osFlagsWaitAny, osWaitForever);
 8008780:	e7ea      	b.n	8008758 <TransmitTask+0xc>
 8008782:	bf00      	nop
 8008784:	20001934 	.word	0x20001934
 8008788:	20002a40 	.word	0x20002a40

0800878c <HeartBeatTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HeartBeatTask */
void HeartBeatTask(void *argument)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HeartBeatTask */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8008794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008798:	4803      	ldr	r0, [pc, #12]	; (80087a8 <HeartBeatTask+0x1c>)
 800879a:	f7f9 fcf5 	bl	8002188 <HAL_GPIO_TogglePin>
		osDelay(100);
 800879e:	2064      	movs	r0, #100	; 0x64
 80087a0:	f7fd f800 	bl	80057a4 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80087a4:	e7f6      	b.n	8008794 <HeartBeatTask+0x8>
 80087a6:	bf00      	nop
 80087a8:	48000400 	.word	0x48000400

080087ac <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b08a      	sub	sp, #40	; 0x28
 80087b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087b2:	f107 0314 	add.w	r3, r7, #20
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	605a      	str	r2, [r3, #4]
 80087bc:	609a      	str	r2, [r3, #8]
 80087be:	60da      	str	r2, [r3, #12]
 80087c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80087c2:	4b4b      	ldr	r3, [pc, #300]	; (80088f0 <MX_GPIO_Init+0x144>)
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	4a4a      	ldr	r2, [pc, #296]	; (80088f0 <MX_GPIO_Init+0x144>)
 80087c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087cc:	6153      	str	r3, [r2, #20]
 80087ce:	4b48      	ldr	r3, [pc, #288]	; (80088f0 <MX_GPIO_Init+0x144>)
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087d6:	613b      	str	r3, [r7, #16]
 80087d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80087da:	4b45      	ldr	r3, [pc, #276]	; (80088f0 <MX_GPIO_Init+0x144>)
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	4a44      	ldr	r2, [pc, #272]	; (80088f0 <MX_GPIO_Init+0x144>)
 80087e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80087e4:	6153      	str	r3, [r2, #20]
 80087e6:	4b42      	ldr	r3, [pc, #264]	; (80088f0 <MX_GPIO_Init+0x144>)
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80087f2:	4b3f      	ldr	r3, [pc, #252]	; (80088f0 <MX_GPIO_Init+0x144>)
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	4a3e      	ldr	r2, [pc, #248]	; (80088f0 <MX_GPIO_Init+0x144>)
 80087f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087fc:	6153      	str	r3, [r2, #20]
 80087fe:	4b3c      	ldr	r3, [pc, #240]	; (80088f0 <MX_GPIO_Init+0x144>)
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008806:	60bb      	str	r3, [r7, #8]
 8008808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800880a:	4b39      	ldr	r3, [pc, #228]	; (80088f0 <MX_GPIO_Init+0x144>)
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	4a38      	ldr	r2, [pc, #224]	; (80088f0 <MX_GPIO_Init+0x144>)
 8008810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008814:	6153      	str	r3, [r2, #20]
 8008816:	4b36      	ldr	r3, [pc, #216]	; (80088f0 <MX_GPIO_Init+0x144>)
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800881e:	607b      	str	r3, [r7, #4]
 8008820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008822:	4b33      	ldr	r3, [pc, #204]	; (80088f0 <MX_GPIO_Init+0x144>)
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	4a32      	ldr	r2, [pc, #200]	; (80088f0 <MX_GPIO_Init+0x144>)
 8008828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800882c:	6153      	str	r3, [r2, #20]
 800882e:	4b30      	ldr	r3, [pc, #192]	; (80088f0 <MX_GPIO_Init+0x144>)
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008836:	603b      	str	r3, [r7, #0]
 8008838:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800883a:	2200      	movs	r2, #0
 800883c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008840:	482c      	ldr	r0, [pc, #176]	; (80088f4 <MX_GPIO_Init+0x148>)
 8008842:	f7f9 fc71 	bl	8002128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800884a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800884c:	4b2a      	ldr	r3, [pc, #168]	; (80088f8 <MX_GPIO_Init+0x14c>)
 800884e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008850:	2300      	movs	r3, #0
 8008852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008854:	f107 0314 	add.w	r3, r7, #20
 8008858:	4619      	mov	r1, r3
 800885a:	4828      	ldr	r0, [pc, #160]	; (80088fc <MX_GPIO_Init+0x150>)
 800885c:	f7f9 fa30 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5 
                           PC6 PC7 PC8 PC9 
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8008860:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8008864:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008866:	2303      	movs	r3, #3
 8008868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800886a:	2300      	movs	r3, #0
 800886c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800886e:	f107 0314 	add.w	r3, r7, #20
 8008872:	4619      	mov	r1, r3
 8008874:	4821      	ldr	r0, [pc, #132]	; (80088fc <MX_GPIO_Init+0x150>)
 8008876:	f7f9 fa23 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5 
                           PA6 PA7 PA8 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 800887a:	f649 73f3 	movw	r3, #40947	; 0x9ff3
 800887e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008880:	2303      	movs	r3, #3
 8008882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008884:	2300      	movs	r3, #0
 8008886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008888:	f107 0314 	add.w	r3, r7, #20
 800888c:	4619      	mov	r1, r3
 800888e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008892:	f7f9 fa15 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB14 PB15 
                           PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8008896:	f64d 73f7 	movw	r3, #57335	; 0xdff7
 800889a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800889c:	2303      	movs	r3, #3
 800889e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a0:	2300      	movs	r3, #0
 80088a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088a4:	f107 0314 	add.w	r3, r7, #20
 80088a8:	4619      	mov	r1, r3
 80088aa:	4812      	ldr	r0, [pc, #72]	; (80088f4 <MX_GPIO_Init+0x148>)
 80088ac:	f7f9 fa08 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80088b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088b6:	2301      	movs	r3, #1
 80088b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088be:	2300      	movs	r3, #0
 80088c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80088c2:	f107 0314 	add.w	r3, r7, #20
 80088c6:	4619      	mov	r1, r3
 80088c8:	480a      	ldr	r0, [pc, #40]	; (80088f4 <MX_GPIO_Init+0x148>)
 80088ca:	f7f9 f9f9 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80088ce:	2304      	movs	r3, #4
 80088d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80088d2:	2303      	movs	r3, #3
 80088d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d6:	2300      	movs	r3, #0
 80088d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80088da:	f107 0314 	add.w	r3, r7, #20
 80088de:	4619      	mov	r1, r3
 80088e0:	4807      	ldr	r0, [pc, #28]	; (8008900 <MX_GPIO_Init+0x154>)
 80088e2:	f7f9 f9ed 	bl	8001cc0 <HAL_GPIO_Init>

}
 80088e6:	bf00      	nop
 80088e8:	3728      	adds	r7, #40	; 0x28
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	40021000 	.word	0x40021000
 80088f4:	48000400 	.word	0x48000400
 80088f8:	10210000 	.word	0x10210000
 80088fc:	48000800 	.word	0x48000800
 8008900:	48000c00 	.word	0x48000c00

08008904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008908:	f7f7 fc62 	bl	80001d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800890c:	f000 f80f 	bl	800892e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008910:	f7ff ff4c 	bl	80087ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8008914:	f7ff fdc2 	bl	800849c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8008918:	f000 f99c 	bl	8008c54 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800891c:	f7ff fe60 	bl	80085e0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8008920:	f7fc fd38 	bl	8005394 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8008924:	f7ff fe9e 	bl	8008664 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8008928:	f7fc fd68 	bl	80053fc <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800892c:	e7fe      	b.n	800892c <main+0x28>

0800892e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b09c      	sub	sp, #112	; 0x70
 8008932:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008934:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008938:	2228      	movs	r2, #40	; 0x28
 800893a:	2100      	movs	r1, #0
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fa5e 	bl	8008dfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008942:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008946:	2200      	movs	r2, #0
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	605a      	str	r2, [r3, #4]
 800894c:	609a      	str	r2, [r3, #8]
 800894e:	60da      	str	r2, [r3, #12]
 8008950:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008952:	463b      	mov	r3, r7
 8008954:	2234      	movs	r2, #52	; 0x34
 8008956:	2100      	movs	r1, #0
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fa50 	bl	8008dfe <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800895e:	2301      	movs	r3, #1
 8008960:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8008962:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8008966:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008968:	2300      	movs	r3, #0
 800896a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800896c:	2301      	movs	r3, #1
 800896e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008970:	2302      	movs	r3, #2
 8008972:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008974:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008978:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800897a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800897e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008980:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008984:	4618      	mov	r0, r3
 8008986:	f7f9 fc27 	bl	80021d8 <HAL_RCC_OscConfig>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8008990:	f000 f83a 	bl	8008a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008994:	230f      	movs	r3, #15
 8008996:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008998:	2302      	movs	r3, #2
 800899a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800899c:	2300      	movs	r3, #0
 800899e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80089a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80089a6:	2300      	movs	r3, #0
 80089a8:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80089aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80089ae:	2101      	movs	r1, #1
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fa fc1d 	bl	80031f0 <HAL_RCC_ClockConfig>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80089bc:	f000 f824 	bl	8008a08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 80089c0:	2380      	movs	r3, #128	; 0x80
 80089c2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV256;
 80089c4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80089c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80089ca:	463b      	mov	r3, r7
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fa ff2b 	bl	8003828 <HAL_RCCEx_PeriphCLKConfig>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <SystemClock_Config+0xae>
  {
    Error_Handler();
 80089d8:	f000 f816 	bl	8008a08 <Error_Handler>
  }
}
 80089dc:	bf00      	nop
 80089de:	3770      	adds	r7, #112	; 0x70
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a04      	ldr	r2, [pc, #16]	; (8008a04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d101      	bne.n	80089fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80089f6:	f7f7 fc01 	bl	80001fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80089fa:	bf00      	nop
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	40012c00 	.word	0x40012c00

08008a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008a0c:	bf00      	nop
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8008a20:	bf00      	nop
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a32:	4b11      	ldr	r3, [pc, #68]	; (8008a78 <HAL_MspInit+0x4c>)
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	4a10      	ldr	r2, [pc, #64]	; (8008a78 <HAL_MspInit+0x4c>)
 8008a38:	f043 0301 	orr.w	r3, r3, #1
 8008a3c:	6193      	str	r3, [r2, #24]
 8008a3e:	4b0e      	ldr	r3, [pc, #56]	; (8008a78 <HAL_MspInit+0x4c>)
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	607b      	str	r3, [r7, #4]
 8008a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008a4a:	4b0b      	ldr	r3, [pc, #44]	; (8008a78 <HAL_MspInit+0x4c>)
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	4a0a      	ldr	r2, [pc, #40]	; (8008a78 <HAL_MspInit+0x4c>)
 8008a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a54:	61d3      	str	r3, [r2, #28]
 8008a56:	4b08      	ldr	r3, [pc, #32]	; (8008a78 <HAL_MspInit+0x4c>)
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a5e:	603b      	str	r3, [r7, #0]
 8008a60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008a62:	2200      	movs	r2, #0
 8008a64:	210f      	movs	r1, #15
 8008a66:	f06f 0001 	mvn.w	r0, #1
 8008a6a:	f7f8 ff3f 	bl	80018ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008a6e:	bf00      	nop
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	40021000 	.word	0x40021000

08008a7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08c      	sub	sp, #48	; 0x30
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	2019      	movs	r0, #25
 8008a92:	f7f8 ff2b 	bl	80018ec <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8008a96:	2019      	movs	r0, #25
 8008a98:	f7f8 ff54 	bl	8001944 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8008a9c:	4b1e      	ldr	r3, [pc, #120]	; (8008b18 <HAL_InitTick+0x9c>)
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	4a1d      	ldr	r2, [pc, #116]	; (8008b18 <HAL_InitTick+0x9c>)
 8008aa2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008aa6:	6193      	str	r3, [r2, #24]
 8008aa8:	4b1b      	ldr	r3, [pc, #108]	; (8008b18 <HAL_InitTick+0x9c>)
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008ab4:	f107 0210 	add.w	r2, r7, #16
 8008ab8:	f107 0314 	add.w	r3, r7, #20
 8008abc:	4611      	mov	r1, r2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fa fe70 	bl	80037a4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8008ac4:	f7fa fe4c 	bl	8003760 <HAL_RCC_GetPCLK2Freq>
 8008ac8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008acc:	4a13      	ldr	r2, [pc, #76]	; (8008b1c <HAL_InitTick+0xa0>)
 8008ace:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad2:	0c9b      	lsrs	r3, r3, #18
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8008ad8:	4b11      	ldr	r3, [pc, #68]	; (8008b20 <HAL_InitTick+0xa4>)
 8008ada:	4a12      	ldr	r2, [pc, #72]	; (8008b24 <HAL_InitTick+0xa8>)
 8008adc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8008ade:	4b10      	ldr	r3, [pc, #64]	; (8008b20 <HAL_InitTick+0xa4>)
 8008ae0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008ae4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8008ae6:	4a0e      	ldr	r2, [pc, #56]	; (8008b20 <HAL_InitTick+0xa4>)
 8008ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8008aec:	4b0c      	ldr	r3, [pc, #48]	; (8008b20 <HAL_InitTick+0xa4>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008af2:	4b0b      	ldr	r3, [pc, #44]	; (8008b20 <HAL_InitTick+0xa4>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8008af8:	4809      	ldr	r0, [pc, #36]	; (8008b20 <HAL_InitTick+0xa4>)
 8008afa:	f7fb f927 	bl	8003d4c <HAL_TIM_Base_Init>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d104      	bne.n	8008b0e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8008b04:	4806      	ldr	r0, [pc, #24]	; (8008b20 <HAL_InitTick+0xa4>)
 8008b06:	f7fb f9bf 	bl	8003e88 <HAL_TIM_Base_Start_IT>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	e000      	b.n	8008b10 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3730      	adds	r7, #48	; 0x30
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	40021000 	.word	0x40021000
 8008b1c:	431bde83 	.word	0x431bde83
 8008b20:	20002a00 	.word	0x20002a00
 8008b24:	40012c00 	.word	0x40012c00

08008b28 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8008b28:	b480      	push	{r7}
 8008b2a:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008b2c:	bf00      	nop
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8008b36:	b480      	push	{r7}
 8008b38:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8008b3a:	e7fe      	b.n	8008b3a <HardFault_Handler+0x4>

08008b3c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8008b3c:	b480      	push	{r7}
 8008b3e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8008b40:	e7fe      	b.n	8008b40 <MemManage_Handler+0x4>

08008b42 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8008b42:	b480      	push	{r7}
 8008b44:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8008b46:	e7fe      	b.n	8008b46 <BusFault_Handler+0x4>

08008b48 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8008b4c:	e7fe      	b.n	8008b4c <UsageFault_Handler+0x4>

08008b4e <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8008b4e:	b480      	push	{r7}
 8008b50:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b52:	bf00      	nop
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <ADC1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles ADC1 interrupt.
 */
void ADC1_IRQHandler(void) {
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_IRQn 0 */

	/* USER CODE END ADC1_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 8008b62:	4813      	ldr	r0, [pc, #76]	; (8008bb0 <ADC1_IRQHandler+0x54>)
 8008b64:	f7f7 fed6 	bl	8000914 <HAL_ADC_IRQHandler>
	/* USER CODE BEGIN ADC1_IRQn 1 */
	uint32_t data = HAL_ADC_GetValue(&hadc1);
 8008b68:	4811      	ldr	r0, [pc, #68]	; (8008bb0 <ADC1_IRQHandler+0x54>)
 8008b6a:	f7f7 febb 	bl	80008e4 <HAL_ADC_GetValue>
 8008b6e:	6078      	str	r0, [r7, #4]
	//uint8_t msg[100] = {0};
	//sprintf(msg, "%d\n\r", data);
	globaldata[watermark++] = 0x00000FFF & data;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <ADC1_IRQHandler+0x58>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	1c59      	adds	r1, r3, #1
 8008b7a:	480e      	ldr	r0, [pc, #56]	; (8008bb4 <ADC1_IRQHandler+0x58>)
 8008b7c:	6001      	str	r1, [r0, #0]
 8008b7e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008b82:	b291      	uxth	r1, r2
 8008b84:	4a0c      	ldr	r2, [pc, #48]	; (8008bb8 <ADC1_IRQHandler+0x5c>)
 8008b86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if (watermark >= WATERMARK_MAX - 1) {
 8008b8a:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <ADC1_IRQHandler+0x58>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d908      	bls.n	8008ba8 <ADC1_IRQHandler+0x4c>
		watermark = 0;
 8008b96:	4b07      	ldr	r3, [pc, #28]	; (8008bb4 <ADC1_IRQHandler+0x58>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	601a      	str	r2, [r3, #0]
		osThreadFlagsSet(UARTTransmitHandle, 0x2);
 8008b9c:	4b07      	ldr	r3, [pc, #28]	; (8008bbc <ADC1_IRQHandler+0x60>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2102      	movs	r1, #2
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fc fd08 	bl	80055b8 <osThreadFlagsSet>
		//HAL_UART_Transmit(&huart2, "FULL!\n\r", 5, 0); //Because it will be called form ISR
	}
	//osSignalSet(&measureTaskHandle, ADC_VALUE);
	/* USER CODE END ADC1_IRQn 1 */
}
 8008ba8:	bf00      	nop
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	2000297c 	.word	0x2000297c
 8008bb4:	20002934 	.word	0x20002934
 8008bb8:	20001934 	.word	0x20001934
 8008bbc:	200029f0 	.word	0x200029f0

08008bc0 <TIM1_UP_TIM16_IRQHandler>:

/**
 * @brief This function handles TIM1 update and TIM16 interrupts.
 */
void TIM1_UP_TIM16_IRQHandler(void) {
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

	/* USER CODE END TIM1_UP_TIM16_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 8008bc4:	4802      	ldr	r0, [pc, #8]	; (8008bd0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8008bc6:	f7fb f9b7 	bl	8003f38 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

	/* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8008bca:	bf00      	nop
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	20002a00 	.word	0x20002a00

08008bd4 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8008bd8:	4802      	ldr	r0, [pc, #8]	; (8008be4 <USART2_IRQHandler+0x10>)
 8008bda:	f7fb fd03 	bl	80045e4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8008bde:	bf00      	nop
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20002a40 	.word	0x20002a40

08008be8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008be8:	b480      	push	{r7}
 8008bea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008bec:	4b08      	ldr	r3, [pc, #32]	; (8008c10 <SystemInit+0x28>)
 8008bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf2:	4a07      	ldr	r2, [pc, #28]	; (8008c10 <SystemInit+0x28>)
 8008bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008bfc:	4b04      	ldr	r3, [pc, #16]	; (8008c10 <SystemInit+0x28>)
 8008bfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008c02:	609a      	str	r2, [r3, #8]
#endif
}
 8008c04:	bf00      	nop
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	e000ed00 	.word	0xe000ed00

08008c14 <HAL_UART_RxCpltCallback>:
#include "cmsis_os2.h"
/* USER CODE BEGIN 0 */
extern osThreadId_t measureTaskHandle;
/*Called if buffer is full! So make sure you are using the right buffer size for controll
 * commands*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
	uint32_t b = 0;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	60fb      	str	r3, [r7, #12]
	osThreadFlagsSet(measureTaskHandle, 0x1);
 8008c20:	4b05      	ldr	r3, [pc, #20]	; (8008c38 <HAL_UART_RxCpltCallback+0x24>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2101      	movs	r1, #1
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fc fcc6 	bl	80055b8 <osThreadFlagsSet>
	__NOP();
 8008c2c:	bf00      	nop
}
 8008c2e:	bf00      	nop
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	200029f4 	.word	0x200029f4

08008c3c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
	//Disabled in DataHandler Thread
	HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8008c44:	2012      	movs	r0, #18
 8008c46:	f7f8 fe7d 	bl	8001944 <HAL_NVIC_EnableIRQ>
	__NOP();
 8008c4a:	bf00      	nop
}
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8008c58:	4b15      	ldr	r3, [pc, #84]	; (8008cb0 <MX_USART2_UART_Init+0x5c>)
 8008c5a:	4a16      	ldr	r2, [pc, #88]	; (8008cb4 <MX_USART2_UART_Init+0x60>)
 8008c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8008c5e:	4b14      	ldr	r3, [pc, #80]	; (8008cb0 <MX_USART2_UART_Init+0x5c>)
 8008c60:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8008c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008c66:	4b12      	ldr	r3, [pc, #72]	; (8008cb0 <MX_USART2_UART_Init+0x5c>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008c6c:	4b10      	ldr	r3, [pc, #64]	; (8008cb0 <MX_USART2_UART_Init+0x5c>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008c72:	4b0f      	ldr	r3, [pc, #60]	; (8008cb0 <MX_USART2_UART_Init+0x5c>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008c78:	4b0d      	ldr	r3, [pc, #52]	; (8008cb0 <MX_USART2_UART_Init+0x5c>)
 8008c7a:	220c      	movs	r2, #12
 8008c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c7e:	4b0c      	ldr	r3, [pc, #48]	; (8008cb0 <MX_USART2_UART_Init+0x5c>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c84:	4b0a      	ldr	r3, [pc, #40]	; (8008cb0 <MX_USART2_UART_Init+0x5c>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008c8a:	4b09      	ldr	r3, [pc, #36]	; (8008cb0 <MX_USART2_UART_Init+0x5c>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008c90:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <MX_USART2_UART_Init+0x5c>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008c96:	4806      	ldr	r0, [pc, #24]	; (8008cb0 <MX_USART2_UART_Init+0x5c>)
 8008c98:	f7fb fb22 	bl	80042e0 <HAL_UART_Init>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8008ca2:	f7ff feb1 	bl	8008a08 <Error_Handler>
  }
  HAL_UART_MspInit(&huart2);
 8008ca6:	4802      	ldr	r0, [pc, #8]	; (8008cb0 <MX_USART2_UART_Init+0x5c>)
 8008ca8:	f000 f806 	bl	8008cb8 <HAL_UART_MspInit>
}
 8008cac:	bf00      	nop
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	20002a40 	.word	0x20002a40
 8008cb4:	40004400 	.word	0x40004400

08008cb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08a      	sub	sp, #40	; 0x28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cc0:	f107 0314 	add.w	r3, r7, #20
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	605a      	str	r2, [r3, #4]
 8008cca:	609a      	str	r2, [r3, #8]
 8008ccc:	60da      	str	r2, [r3, #12]
 8008cce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a1b      	ldr	r2, [pc, #108]	; (8008d44 <HAL_UART_MspInit+0x8c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d130      	bne.n	8008d3c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008cda:	4b1b      	ldr	r3, [pc, #108]	; (8008d48 <HAL_UART_MspInit+0x90>)
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	4a1a      	ldr	r2, [pc, #104]	; (8008d48 <HAL_UART_MspInit+0x90>)
 8008ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ce4:	61d3      	str	r3, [r2, #28]
 8008ce6:	4b18      	ldr	r3, [pc, #96]	; (8008d48 <HAL_UART_MspInit+0x90>)
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cee:	613b      	str	r3, [r7, #16]
 8008cf0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cf2:	4b15      	ldr	r3, [pc, #84]	; (8008d48 <HAL_UART_MspInit+0x90>)
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	4a14      	ldr	r2, [pc, #80]	; (8008d48 <HAL_UART_MspInit+0x90>)
 8008cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cfc:	6153      	str	r3, [r2, #20]
 8008cfe:	4b12      	ldr	r3, [pc, #72]	; (8008d48 <HAL_UART_MspInit+0x90>)
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d06:	60fb      	str	r3, [r7, #12]
 8008d08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008d0a:	230c      	movs	r3, #12
 8008d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d0e:	2302      	movs	r3, #2
 8008d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d12:	2300      	movs	r3, #0
 8008d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d16:	2300      	movs	r3, #0
 8008d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008d1a:	2307      	movs	r3, #7
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d1e:	f107 0314 	add.w	r3, r7, #20
 8008d22:	4619      	mov	r1, r3
 8008d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d28:	f7f8 ffca 	bl	8001cc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2105      	movs	r1, #5
 8008d30:	2026      	movs	r0, #38	; 0x26
 8008d32:	f7f8 fddb 	bl	80018ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008d36:	2026      	movs	r0, #38	; 0x26
 8008d38:	f7f8 fe04 	bl	8001944 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008d3c:	bf00      	nop
 8008d3e:	3728      	adds	r7, #40	; 0x28
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	40004400 	.word	0x40004400
 8008d48:	40021000 	.word	0x40021000

08008d4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008d84 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008d50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008d52:	e003      	b.n	8008d5c <LoopCopyDataInit>

08008d54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008d54:	4b0c      	ldr	r3, [pc, #48]	; (8008d88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008d56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008d58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008d5a:	3104      	adds	r1, #4

08008d5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008d5c:	480b      	ldr	r0, [pc, #44]	; (8008d8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8008d5e:	4b0c      	ldr	r3, [pc, #48]	; (8008d90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8008d60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008d62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008d64:	d3f6      	bcc.n	8008d54 <CopyDataInit>
	ldr	r2, =_sbss
 8008d66:	4a0b      	ldr	r2, [pc, #44]	; (8008d94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8008d68:	e002      	b.n	8008d70 <LoopFillZerobss>

08008d6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008d6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008d6c:	f842 3b04 	str.w	r3, [r2], #4

08008d70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008d70:	4b09      	ldr	r3, [pc, #36]	; (8008d98 <LoopForever+0x16>)
	cmp	r2, r3
 8008d72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008d74:	d3f9      	bcc.n	8008d6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008d76:	f7ff ff37 	bl	8008be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008d7a:	f000 f811 	bl	8008da0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008d7e:	f7ff fdc1 	bl	8008904 <main>

08008d82 <LoopForever>:

LoopForever:
    b LoopForever
 8008d82:	e7fe      	b.n	8008d82 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008d84:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8008d88:	08009168 	.word	0x08009168
	ldr	r0, =_sdata
 8008d8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008d90:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8008d94:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8008d98:	20002ac0 	.word	0x20002ac0

08008d9c <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008d9c:	e7fe      	b.n	8008d9c <CAN_RX1_IRQHandler>
	...

08008da0 <__libc_init_array>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	4e0d      	ldr	r6, [pc, #52]	; (8008dd8 <__libc_init_array+0x38>)
 8008da4:	4c0d      	ldr	r4, [pc, #52]	; (8008ddc <__libc_init_array+0x3c>)
 8008da6:	1ba4      	subs	r4, r4, r6
 8008da8:	10a4      	asrs	r4, r4, #2
 8008daa:	2500      	movs	r5, #0
 8008dac:	42a5      	cmp	r5, r4
 8008dae:	d109      	bne.n	8008dc4 <__libc_init_array+0x24>
 8008db0:	4e0b      	ldr	r6, [pc, #44]	; (8008de0 <__libc_init_array+0x40>)
 8008db2:	4c0c      	ldr	r4, [pc, #48]	; (8008de4 <__libc_init_array+0x44>)
 8008db4:	f000 f82c 	bl	8008e10 <_init>
 8008db8:	1ba4      	subs	r4, r4, r6
 8008dba:	10a4      	asrs	r4, r4, #2
 8008dbc:	2500      	movs	r5, #0
 8008dbe:	42a5      	cmp	r5, r4
 8008dc0:	d105      	bne.n	8008dce <__libc_init_array+0x2e>
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008dc8:	4798      	blx	r3
 8008dca:	3501      	adds	r5, #1
 8008dcc:	e7ee      	b.n	8008dac <__libc_init_array+0xc>
 8008dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008dd2:	4798      	blx	r3
 8008dd4:	3501      	adds	r5, #1
 8008dd6:	e7f2      	b.n	8008dbe <__libc_init_array+0x1e>
 8008dd8:	08009160 	.word	0x08009160
 8008ddc:	08009160 	.word	0x08009160
 8008de0:	08009160 	.word	0x08009160
 8008de4:	08009164 	.word	0x08009164

08008de8 <memcpy>:
 8008de8:	b510      	push	{r4, lr}
 8008dea:	1e43      	subs	r3, r0, #1
 8008dec:	440a      	add	r2, r1
 8008dee:	4291      	cmp	r1, r2
 8008df0:	d100      	bne.n	8008df4 <memcpy+0xc>
 8008df2:	bd10      	pop	{r4, pc}
 8008df4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008df8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dfc:	e7f7      	b.n	8008dee <memcpy+0x6>

08008dfe <memset>:
 8008dfe:	4402      	add	r2, r0
 8008e00:	4603      	mov	r3, r0
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d100      	bne.n	8008e08 <memset+0xa>
 8008e06:	4770      	bx	lr
 8008e08:	f803 1b01 	strb.w	r1, [r3], #1
 8008e0c:	e7f9      	b.n	8008e02 <memset+0x4>
	...

08008e10 <_init>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	bf00      	nop
 8008e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e16:	bc08      	pop	{r3}
 8008e18:	469e      	mov	lr, r3
 8008e1a:	4770      	bx	lr

08008e1c <_fini>:
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	bf00      	nop
 8008e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e22:	bc08      	pop	{r3}
 8008e24:	469e      	mov	lr, r3
 8008e26:	4770      	bx	lr
