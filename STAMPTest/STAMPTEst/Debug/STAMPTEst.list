
STAMPTEst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08009040  08009040  00019040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009378  08009378  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009378  08009378  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009378  08009378  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009378  08009378  00019378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800937c  0800937c  0001937c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eb0  20000010  08009390  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ec0  08009390  00021ec0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea1f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ed7  00000000  00000000  0003ea5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001740  00000000  00000000  00042938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001548  00000000  00000000  00044078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c731  00000000  00000000  000455c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018243  00000000  00000000  00061cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d8de  00000000  00000000  00079f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117812  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f3c  00000000  00000000  00117890  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009028 	.word	0x08009028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08009028 	.word	0x08009028

080001d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_Init+0x28>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a07      	ldr	r2, [pc, #28]	; (80001f8 <HAL_Init+0x28>)
 80001da:	f043 0310 	orr.w	r3, r3, #16
 80001de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e0:	2003      	movs	r0, #3
 80001e2:	f001 fc75 	bl	8001ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001e6:	2000      	movs	r0, #0
 80001e8:	f008 fd58 	bl	8008c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001ec:	f008 fd2e 	bl	8008c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f0:	2300      	movs	r3, #0
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40022000 	.word	0x40022000

080001fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <HAL_IncTick+0x20>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	461a      	mov	r2, r3
 8000206:	4b06      	ldr	r3, [pc, #24]	; (8000220 <HAL_IncTick+0x24>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4413      	add	r3, r2
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <HAL_IncTick+0x24>)
 800020e:	6013      	str	r3, [r2, #0]
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	20000004 	.word	0x20000004
 8000220:	20001d38 	.word	0x20001d38

08000224 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
  return uwTick;  
 8000228:	4b03      	ldr	r3, [pc, #12]	; (8000238 <HAL_GetTick+0x14>)
 800022a:	681b      	ldr	r3, [r3, #0]
}
 800022c:	4618      	mov	r0, r3
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	20001d38 	.word	0x20001d38

0800023c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr

08000250 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr

08000264 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b09a      	sub	sp, #104	; 0x68
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000280:	2300      	movs	r3, #0
 8000282:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000286:	2300      	movs	r3, #0
 8000288:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800028a:	2300      	movs	r3, #0
 800028c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d101      	bne.n	8000298 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000294:	2301      	movs	r3, #1
 8000296:	e274      	b.n	8000782 <HAL_ADC_Init+0x50a>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80002a0:	d003      	beq.n	80002aa <HAL_ADC_Init+0x32>
 80002a2:	21f9      	movs	r1, #249	; 0xf9
 80002a4:	4882      	ldr	r0, [pc, #520]	; (80004b0 <HAL_ADC_Init+0x238>)
 80002a6:	f008 fcc6 	bl	8008c36 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d012      	beq.n	80002d8 <HAL_ADC_Init+0x60>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80002ba:	d00d      	beq.n	80002d8 <HAL_ADC_Init+0x60>
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80002c4:	d008      	beq.n	80002d8 <HAL_ADC_Init+0x60>
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80002ce:	d003      	beq.n	80002d8 <HAL_ADC_Init+0x60>
 80002d0:	21fa      	movs	r1, #250	; 0xfa
 80002d2:	4877      	ldr	r0, [pc, #476]	; (80004b0 <HAL_ADC_Init+0x238>)
 80002d4:	f008 fcaf 	bl	8008c36 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d00f      	beq.n	8000300 <HAL_ADC_Init+0x88>
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	2b08      	cmp	r3, #8
 80002e6:	d00b      	beq.n	8000300 <HAL_ADC_Init+0x88>
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	2b10      	cmp	r3, #16
 80002ee:	d007      	beq.n	8000300 <HAL_ADC_Init+0x88>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	2b18      	cmp	r3, #24
 80002f6:	d003      	beq.n	8000300 <HAL_ADC_Init+0x88>
 80002f8:	21fb      	movs	r1, #251	; 0xfb
 80002fa:	486d      	ldr	r0, [pc, #436]	; (80004b0 <HAL_ADC_Init+0x238>)
 80002fc:	f008 fc9b 	bl	8008c36 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d007      	beq.n	8000318 <HAL_ADC_Init+0xa0>
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	2b20      	cmp	r3, #32
 800030e:	d003      	beq.n	8000318 <HAL_ADC_Init+0xa0>
 8000310:	21fc      	movs	r1, #252	; 0xfc
 8000312:	4867      	ldr	r0, [pc, #412]	; (80004b0 <HAL_ADC_Init+0x238>)
 8000314:	f008 fc8f 	bl	8008c36 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	691b      	ldr	r3, [r3, #16]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d007      	beq.n	8000330 <HAL_ADC_Init+0xb8>
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	691b      	ldr	r3, [r3, #16]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d003      	beq.n	8000330 <HAL_ADC_Init+0xb8>
 8000328:	21fd      	movs	r1, #253	; 0xfd
 800032a:	4861      	ldr	r0, [pc, #388]	; (80004b0 <HAL_ADC_Init+0x238>)
 800032c:	f008 fc83 	bl	8008c36 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	7e5b      	ldrb	r3, [r3, #25]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d007      	beq.n	8000348 <HAL_ADC_Init+0xd0>
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	7e5b      	ldrb	r3, [r3, #25]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d003      	beq.n	8000348 <HAL_ADC_Init+0xd0>
 8000340:	21fe      	movs	r1, #254	; 0xfe
 8000342:	485b      	ldr	r0, [pc, #364]	; (80004b0 <HAL_ADC_Init+0x238>)
 8000344:	f008 fc77 	bl	8008c36 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800034c:	2b00      	cmp	r3, #0
 800034e:	d012      	beq.n	8000376 <HAL_ADC_Init+0xfe>
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000358:	d00d      	beq.n	8000376 <HAL_ADC_Init+0xfe>
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800035e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000362:	d008      	beq.n	8000376 <HAL_ADC_Init+0xfe>
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000368:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800036c:	d003      	beq.n	8000376 <HAL_ADC_Init+0xfe>
 800036e:	21ff      	movs	r1, #255	; 0xff
 8000370:	484f      	ldr	r0, [pc, #316]	; (80004b0 <HAL_ADC_Init+0x238>)
 8000372:	f008 fc60 	bl	8008c36 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800037a:	2b00      	cmp	r3, #0
 800037c:	d02e      	beq.n	80003dc <HAL_ADC_Init+0x164>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000382:	2b40      	cmp	r3, #64	; 0x40
 8000384:	d02a      	beq.n	80003dc <HAL_ADC_Init+0x164>
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800038a:	2b80      	cmp	r3, #128	; 0x80
 800038c:	d026      	beq.n	80003dc <HAL_ADC_Init+0x164>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000392:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000396:	d021      	beq.n	80003dc <HAL_ADC_Init+0x164>
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800039c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80003a0:	d01c      	beq.n	80003dc <HAL_ADC_Init+0x164>
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80003aa:	d017      	beq.n	80003dc <HAL_ADC_Init+0x164>
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b0:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80003b4:	d012      	beq.n	80003dc <HAL_ADC_Init+0x164>
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ba:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 80003be:	d00d      	beq.n	80003dc <HAL_ADC_Init+0x164>
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80003c8:	d008      	beq.n	80003dc <HAL_ADC_Init+0x164>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d004      	beq.n	80003dc <HAL_ADC_Init+0x164>
 80003d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d6:	4836      	ldr	r0, [pc, #216]	; (80004b0 <HAL_ADC_Init+0x238>)
 80003d8:	f008 fc2d 	bl	8008c36 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d009      	beq.n	80003fa <HAL_ADC_Init+0x182>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d004      	beq.n	80003fa <HAL_ADC_Init+0x182>
 80003f0:	f240 1101 	movw	r1, #257	; 0x101
 80003f4:	482e      	ldr	r0, [pc, #184]	; (80004b0 <HAL_ADC_Init+0x238>)
 80003f6:	f008 fc1e 	bl	8008c36 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	2b04      	cmp	r3, #4
 8000400:	d008      	beq.n	8000414 <HAL_ADC_Init+0x19c>
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	2b08      	cmp	r3, #8
 8000408:	d004      	beq.n	8000414 <HAL_ADC_Init+0x19c>
 800040a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800040e:	4828      	ldr	r0, [pc, #160]	; (80004b0 <HAL_ADC_Init+0x238>)
 8000410:	f008 fc11 	bl	8008c36 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000418:	2b01      	cmp	r3, #1
 800041a:	d008      	beq.n	800042e <HAL_ADC_Init+0x1b6>
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000420:	2b00      	cmp	r3, #0
 8000422:	d004      	beq.n	800042e <HAL_ADC_Init+0x1b6>
 8000424:	f240 1103 	movw	r1, #259	; 0x103
 8000428:	4821      	ldr	r0, [pc, #132]	; (80004b0 <HAL_ADC_Init+0x238>)
 800042a:	f008 fc04 	bl	8008c36 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	7e1b      	ldrb	r3, [r3, #24]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d008      	beq.n	8000448 <HAL_ADC_Init+0x1d0>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	7e1b      	ldrb	r3, [r3, #24]
 800043a:	2b01      	cmp	r3, #1
 800043c:	d004      	beq.n	8000448 <HAL_ADC_Init+0x1d0>
 800043e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000442:	481b      	ldr	r0, [pc, #108]	; (80004b0 <HAL_ADC_Init+0x238>)
 8000444:	f008 fbf7 	bl	8008c36 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	691b      	ldr	r3, [r3, #16]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d031      	beq.n	80004b4 <HAL_ADC_Init+0x23c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d003      	beq.n	8000460 <HAL_ADC_Init+0x1e8>
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	69db      	ldr	r3, [r3, #28]
 800045c:	2b10      	cmp	r3, #16
 800045e:	d904      	bls.n	800046a <HAL_ADC_Init+0x1f2>
 8000460:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000464:	4812      	ldr	r0, [pc, #72]	; (80004b0 <HAL_ADC_Init+0x238>)
 8000466:	f008 fbe6 	bl	8008c36 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d009      	beq.n	8000488 <HAL_ADC_Init+0x210>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800047a:	2b01      	cmp	r3, #1
 800047c:	d004      	beq.n	8000488 <HAL_ADC_Init+0x210>
 800047e:	f240 1109 	movw	r1, #265	; 0x109
 8000482:	480b      	ldr	r0, [pc, #44]	; (80004b0 <HAL_ADC_Init+0x238>)
 8000484:	f008 fbd7 	bl	8008c36 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d010      	beq.n	80004b4 <HAL_ADC_Init+0x23c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000496:	2b00      	cmp	r3, #0
 8000498:	d003      	beq.n	80004a2 <HAL_ADC_Init+0x22a>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800049e:	2b08      	cmp	r3, #8
 80004a0:	d908      	bls.n	80004b4 <HAL_ADC_Init+0x23c>
 80004a2:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80004a6:	4802      	ldr	r0, [pc, #8]	; (80004b0 <HAL_ADC_Init+0x238>)
 80004a8:	f008 fbc5 	bl	8008c36 <assert_failed>
 80004ac:	e002      	b.n	80004b4 <HAL_ADC_Init+0x23c>
 80004ae:	bf00      	nop
 80004b0:	08009040 	.word	0x08009040
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004b8:	f003 0310 	and.w	r3, r3, #16
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d176      	bne.n	80005ae <HAL_ADC_Init+0x336>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d152      	bne.n	800056e <HAL_ADC_Init+0x2f6>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2200      	movs	r2, #0
 80004cc:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2200      	movs	r2, #0
 80004d2:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2200      	movs	r2, #0
 80004d8:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2200      	movs	r2, #0
 80004de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f008 f946 	bl	8008774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d13b      	bne.n	800056e <HAL_ADC_Init+0x2f6>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f001 f8f2 	bl	80016e0 <ADC_Disable>
 80004fc:	4603      	mov	r3, r0
 80004fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000506:	f003 0310 	and.w	r3, r3, #16
 800050a:	2b00      	cmp	r3, #0
 800050c:	d12f      	bne.n	800056e <HAL_ADC_Init+0x2f6>
 800050e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000512:	2b00      	cmp	r3, #0
 8000514:	d12b      	bne.n	800056e <HAL_ADC_Init+0x2f6>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800051e:	f023 0302 	bic.w	r3, r3, #2
 8000522:	f043 0202 	orr.w	r2, r3, #2
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000538:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000548:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800054a:	4b90      	ldr	r3, [pc, #576]	; (800078c <HAL_ADC_Init+0x514>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a90      	ldr	r2, [pc, #576]	; (8000790 <HAL_ADC_Init+0x518>)
 8000550:	fba2 2303 	umull	r2, r3, r2, r3
 8000554:	0c9a      	lsrs	r2, r3, #18
 8000556:	4613      	mov	r3, r2
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	4413      	add	r3, r2
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000560:	e002      	b.n	8000568 <HAL_ADC_Init+0x2f0>
          {
            wait_loop_index--;
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	3b01      	subs	r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d1f9      	bne.n	8000562 <HAL_ADC_Init+0x2ea>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	2b00      	cmp	r3, #0
 800057a:	d007      	beq.n	800058c <HAL_ADC_Init+0x314>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800058a:	d110      	bne.n	80005ae <HAL_ADC_Init+0x336>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f023 0312 	bic.w	r3, r3, #18
 8000594:	f043 0210 	orr.w	r2, r3, #16
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a0:	f043 0201 	orr.w	r2, r3, #1
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80005a8:	2301      	movs	r3, #1
 80005aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b2:	f003 0310 	and.w	r3, r3, #16
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	f040 80d6 	bne.w	8000768 <HAL_ADC_Init+0x4f0>
 80005bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	f040 80d1 	bne.w	8000768 <HAL_ADC_Init+0x4f0>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	f040 80c9 	bne.w	8000768 <HAL_ADC_Init+0x4f0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80005de:	f043 0202 	orr.w	r2, r3, #2
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80005e6:	4b6b      	ldr	r3, [pc, #428]	; (8000794 <HAL_ADC_Init+0x51c>)
 80005e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	f003 0303 	and.w	r3, r3, #3
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d108      	bne.n	800060e <HAL_ADC_Init+0x396>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	2b01      	cmp	r3, #1
 8000608:	d101      	bne.n	800060e <HAL_ADC_Init+0x396>
 800060a:	2301      	movs	r3, #1
 800060c:	e000      	b.n	8000610 <HAL_ADC_Init+0x398>
 800060e:	2300      	movs	r3, #0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d11c      	bne.n	800064e <HAL_ADC_Init+0x3d6>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000614:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000616:	2b00      	cmp	r3, #0
 8000618:	d010      	beq.n	800063c <HAL_ADC_Init+0x3c4>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	f003 0303 	and.w	r3, r3, #3
 8000622:	2b01      	cmp	r3, #1
 8000624:	d107      	bne.n	8000636 <HAL_ADC_Init+0x3be>
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	2b01      	cmp	r3, #1
 8000630:	d101      	bne.n	8000636 <HAL_ADC_Init+0x3be>
 8000632:	2301      	movs	r3, #1
 8000634:	e000      	b.n	8000638 <HAL_ADC_Init+0x3c0>
 8000636:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000638:	2b00      	cmp	r3, #0
 800063a:	d108      	bne.n	800064e <HAL_ADC_Init+0x3d6>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800063c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	431a      	orrs	r2, r3
 800064a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800064c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7e5b      	ldrb	r3, [r3, #25]
 8000652:	035b      	lsls	r3, r3, #13
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000658:	2a01      	cmp	r2, #1
 800065a:	d002      	beq.n	8000662 <HAL_ADC_Init+0x3ea>
 800065c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000660:	e000      	b.n	8000664 <HAL_ADC_Init+0x3ec>
 8000662:	2200      	movs	r2, #0
 8000664:	431a      	orrs	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	431a      	orrs	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	4313      	orrs	r3, r2
 8000672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000674:	4313      	orrs	r3, r2
 8000676:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d11b      	bne.n	80006ba <HAL_ADC_Init+0x442>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	7e5b      	ldrb	r3, [r3, #25]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d109      	bne.n	800069e <HAL_ADC_Init+0x426>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068e:	3b01      	subs	r3, #1
 8000690:	045a      	lsls	r2, r3, #17
 8000692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000694:	4313      	orrs	r3, r2
 8000696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069a:	663b      	str	r3, [r7, #96]	; 0x60
 800069c:	e00d      	b.n	80006ba <HAL_ADC_Init+0x442>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80006a6:	f043 0220 	orr.w	r2, r3, #32
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	f043 0201 	orr.w	r2, r3, #1
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d007      	beq.n	80006d2 <HAL_ADC_Init+0x45a>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ca:	4313      	orrs	r3, r2
 80006cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80006ce:	4313      	orrs	r3, r2
 80006d0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	f003 030c 	and.w	r3, r3, #12
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d114      	bne.n	800070a <HAL_ADC_Init+0x492>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	6812      	ldr	r2, [r2, #0]
 80006ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006ee:	f023 0302 	bic.w	r3, r3, #2
 80006f2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	7e1b      	ldrb	r3, [r3, #24]
 80006f8:	039a      	lsls	r2, r3, #14
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4313      	orrs	r3, r2
 8000704:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000706:	4313      	orrs	r3, r2
 8000708:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	68da      	ldr	r2, [r3, #12]
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <HAL_ADC_Init+0x520>)
 8000712:	4013      	ands	r3, r2
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	6812      	ldr	r2, [r2, #0]
 8000718:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800071a:	430b      	orrs	r3, r1
 800071c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d10c      	bne.n	8000740 <HAL_ADC_Init+0x4c8>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072c:	f023 010f 	bic.w	r1, r3, #15
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	430a      	orrs	r2, r1
 800073c:	631a      	str	r2, [r3, #48]	; 0x30
 800073e:	e007      	b.n	8000750 <HAL_ADC_Init+0x4d8>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f022 020f 	bic.w	r2, r2, #15
 800074e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2200      	movs	r2, #0
 8000754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	f023 0303 	bic.w	r3, r3, #3
 800075e:	f043 0201 	orr.w	r2, r3, #1
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	641a      	str	r2, [r3, #64]	; 0x40
 8000766:	e00a      	b.n	800077e <HAL_ADC_Init+0x506>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f023 0312 	bic.w	r3, r3, #18
 8000770:	f043 0210 	orr.w	r2, r3, #16
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000778:	2301      	movs	r3, #1
 800077a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800077e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000782:	4618      	mov	r0, r3
 8000784:	3768      	adds	r7, #104	; 0x68
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000000c 	.word	0x2000000c
 8000790:	431bde83 	.word	0x431bde83
 8000794:	50000300 	.word	0x50000300
 8000798:	fff0c007 	.word	0xfff0c007

0800079c <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007b0:	d004      	beq.n	80007bc <HAL_ADC_Start_IT+0x20>
 80007b2:	f240 71f7 	movw	r1, #2039	; 0x7f7
 80007b6:	484a      	ldr	r0, [pc, #296]	; (80008e0 <HAL_ADC_Start_IT+0x144>)
 80007b8:	f008 fa3d 	bl	8008c36 <assert_failed>
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f040 8083 	bne.w	80008d2 <HAL_ADC_Start_IT+0x136>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d101      	bne.n	80007da <HAL_ADC_Start_IT+0x3e>
 80007d6:	2302      	movs	r3, #2
 80007d8:	e07e      	b.n	80008d8 <HAL_ADC_Start_IT+0x13c>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2201      	movs	r2, #1
 80007de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 ff1e 	bl	8001624 <ADC_Enable>
 80007e8:	4603      	mov	r3, r0
 80007ea:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d16a      	bne.n	80008c8 <HAL_ADC_Start_IT+0x12c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80007fa:	f023 0301 	bic.w	r3, r3, #1
 80007fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800081c:	2b00      	cmp	r3, #0
 800081e:	d007      	beq.n	8000830 <HAL_ADC_Start_IT+0x94>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000828:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800083c:	d106      	bne.n	800084c <HAL_ADC_Start_IT+0xb0>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f023 0206 	bic.w	r2, r3, #6
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	645a      	str	r2, [r3, #68]	; 0x44
 800084a:	e002      	b.n	8000852 <HAL_ADC_Start_IT+0xb6>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2200      	movs	r2, #0
 8000850:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	221c      	movs	r2, #28
 8000860:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	2b08      	cmp	r3, #8
 8000868:	d110      	bne.n	800088c <HAL_ADC_Start_IT+0xf0>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	685a      	ldr	r2, [r3, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f022 0204 	bic.w	r2, r2, #4
 8000878:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f042 0208 	orr.w	r2, r2, #8
 8000888:	605a      	str	r2, [r3, #4]
          break;
 800088a:	e008      	b.n	800089e <HAL_ADC_Start_IT+0x102>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f042 020c 	orr.w	r2, r2, #12
 800089a:	605a      	str	r2, [r3, #4]
          break;
 800089c:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d107      	bne.n	80008b6 <HAL_ADC_Start_IT+0x11a>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f022 0210 	bic.w	r2, r2, #16
 80008b4:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f042 0204 	orr.w	r2, r2, #4
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	e006      	b.n	80008d6 <HAL_ADC_Start_IT+0x13a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80008d0:	e001      	b.n	80008d6 <HAL_ADC_Start_IT+0x13a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80008d2:	2302      	movs	r3, #2
 80008d4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	08009040 	.word	0x08009040

080008e4 <HAL_ADC_Stop_IT>:
  *         use function @ref HAL_ADCEx_RegularStop_IT().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008f8:	d004      	beq.n	8000904 <HAL_ADC_Stop_IT+0x20>
 80008fa:	f640 01e4 	movw	r1, #2276	; 0x8e4
 80008fe:	481d      	ldr	r0, [pc, #116]	; (8000974 <HAL_ADC_Stop_IT+0x90>)
 8000900:	f008 f999 	bl	8008c36 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800090a:	2b01      	cmp	r3, #1
 800090c:	d101      	bne.n	8000912 <HAL_ADC_Stop_IT+0x2e>
 800090e:	2302      	movs	r3, #2
 8000910:	e02b      	b.n	800096a <HAL_ADC_Stop_IT+0x86>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2201      	movs	r2, #1
 8000916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800091a:	216c      	movs	r1, #108	; 0x6c
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f000 ff3f 	bl	80017a0 <ADC_ConversionStop>
 8000922:	4603      	mov	r3, r0
 8000924:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d119      	bne.n	8000960 <HAL_ADC_Stop_IT+0x7c>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	685a      	ldr	r2, [r3, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f022 021c 	bic.w	r2, r2, #28
 800093a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 fecf 	bl	80016e0 <ADC_Disable>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d109      	bne.n	8000960 <HAL_ADC_Stop_IT+0x7c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000954:	f023 0301 	bic.w	r3, r3, #1
 8000958:	f043 0201 	orr.w	r2, r3, #1
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000968:	7bfb      	ldrb	r3, [r7, #15]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	08009040 	.word	0x08009040

08000978 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000988:	d004      	beq.n	8000994 <HAL_ADC_GetValue+0x1c>
 800098a:	f640 21f1 	movw	r1, #2801	; 0xaf1
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <HAL_ADC_GetValue+0x2c>)
 8000990:	f008 f951 	bl	8008c36 <assert_failed>

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	08009040 	.word	0x08009040

080009a8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009c4:	d004      	beq.n	80009d0 <HAL_ADC_IRQHandler+0x28>
 80009c6:	f44f 6133 	mov.w	r1, #2864	; 0xb30
 80009ca:	4880      	ldr	r0, [pc, #512]	; (8000bcc <HAL_ADC_IRQHandler+0x224>)
 80009cc:	f008 f933 	bl	8008c36 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7e5b      	ldrb	r3, [r3, #25]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d008      	beq.n	80009ea <HAL_ADC_IRQHandler+0x42>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7e5b      	ldrb	r3, [r3, #25]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d004      	beq.n	80009ea <HAL_ADC_IRQHandler+0x42>
 80009e0:	f640 3131 	movw	r1, #2865	; 0xb31
 80009e4:	4879      	ldr	r0, [pc, #484]	; (8000bcc <HAL_ADC_IRQHandler+0x224>)
 80009e6:	f008 f926 	bl	8008c36 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	d008      	beq.n	8000a04 <HAL_ADC_IRQHandler+0x5c>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	2b08      	cmp	r3, #8
 80009f8:	d004      	beq.n	8000a04 <HAL_ADC_IRQHandler+0x5c>
 80009fa:	f640 3132 	movw	r1, #2866	; 0xb32
 80009fe:	4873      	ldr	r0, [pc, #460]	; (8000bcc <HAL_ADC_IRQHandler+0x224>)
 8000a00:	f008 f919 	bl	8008c36 <assert_failed>
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	d106      	bne.n	8000a20 <HAL_ADC_IRQHandler+0x78>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	d00d      	beq.n	8000a3c <HAL_ADC_IRQHandler+0x94>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000a2a:	2b08      	cmp	r3, #8
 8000a2c:	d15e      	bne.n	8000aec <HAL_ADC_IRQHandler+0x144>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	2b08      	cmp	r3, #8
 8000a3a:	d157      	bne.n	8000aec <HAL_ADC_IRQHandler+0x144>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f003 0310 	and.w	r3, r3, #16
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d105      	bne.n	8000a54 <HAL_ADC_IRQHandler+0xac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d139      	bne.n	8000ade <HAL_ADC_IRQHandler+0x136>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d134      	bne.n	8000ade <HAL_ADC_IRQHandler+0x136>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	2b08      	cmp	r3, #8
 8000a80:	d12d      	bne.n	8000ade <HAL_ADC_IRQHandler+0x136>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d11a      	bne.n	8000ac6 <HAL_ADC_IRQHandler+0x11e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f022 020c 	bic.w	r2, r2, #12
 8000a9e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d112      	bne.n	8000ade <HAL_ADC_IRQHandler+0x136>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f043 0201 	orr.w	r2, r3, #1
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ac4:	e00b      	b.n	8000ade <HAL_ADC_IRQHandler+0x136>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f043 0210 	orr.w	r2, r3, #16
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f043 0201 	orr.w	r2, r3, #1
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff fbac 	bl	800023c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	220c      	movs	r2, #12
 8000aea:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f003 0320 	and.w	r3, r3, #32
 8000af6:	2b20      	cmp	r3, #32
 8000af8:	d106      	bne.n	8000b08 <HAL_ADC_IRQHandler+0x160>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 0320 	and.w	r3, r3, #32
 8000b04:	2b20      	cmp	r3, #32
 8000b06:	d00d      	beq.n	8000b24 <HAL_ADC_IRQHandler+0x17c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000b12:	2b40      	cmp	r3, #64	; 0x40
 8000b14:	d16f      	bne.n	8000bf6 <HAL_ADC_IRQHandler+0x24e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b20:	2b40      	cmp	r3, #64	; 0x40
 8000b22:	d168      	bne.n	8000bf6 <HAL_ADC_IRQHandler+0x24e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d010      	beq.n	8000b68 <HAL_ADC_IRQHandler+0x1c0>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d14b      	bne.n	8000be8 <HAL_ADC_IRQHandler+0x240>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d144      	bne.n	8000be8 <HAL_ADC_IRQHandler+0x240>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d13f      	bne.n	8000be8 <HAL_ADC_IRQHandler+0x240>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b72:	2b40      	cmp	r3, #64	; 0x40
 8000b74:	d138      	bne.n	8000be8 <HAL_ADC_IRQHandler+0x240>
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d12f      	bne.n	8000be8 <HAL_ADC_IRQHandler+0x240>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d11c      	bne.n	8000bd0 <HAL_ADC_IRQHandler+0x228>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000ba4:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d114      	bne.n	8000be8 <HAL_ADC_IRQHandler+0x240>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f043 0201 	orr.w	r2, r3, #1
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	641a      	str	r2, [r3, #64]	; 0x40
 8000bca:	e00d      	b.n	8000be8 <HAL_ADC_IRQHandler+0x240>
 8000bcc:	08009040 	.word	0x08009040
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	f043 0210 	orr.w	r2, r3, #16
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be0:	f043 0201 	orr.w	r2, r3, #1
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f000 f8cb 	bl	8000d84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2260      	movs	r2, #96	; 0x60
 8000bf4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c00:	2b80      	cmp	r3, #128	; 0x80
 8000c02:	d113      	bne.n	8000c2c <HAL_ADC_IRQHandler+0x284>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0e:	2b80      	cmp	r3, #128	; 0x80
 8000c10:	d10c      	bne.n	8000c2c <HAL_ADC_IRQHandler+0x284>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fb16 	bl	8000250 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c3a:	d115      	bne.n	8000c68 <HAL_ADC_IRQHandler+0x2c0>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c4a:	d10d      	bne.n	8000c68 <HAL_ADC_IRQHandler+0x2c0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f000 f8a7 	bl	8000dac <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c66:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c76:	d115      	bne.n	8000ca4 <HAL_ADC_IRQHandler+0x2fc>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c86:	d10d      	bne.n	8000ca4 <HAL_ADC_IRQHandler+0x2fc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 f893 	bl	8000dc0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0310 	and.w	r3, r3, #16
 8000cae:	2b10      	cmp	r3, #16
 8000cb0:	d13d      	bne.n	8000d2e <HAL_ADC_IRQHandler+0x386>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0310 	and.w	r3, r3, #16
 8000cbc:	2b10      	cmp	r3, #16
 8000cbe:	d136      	bne.n	8000d2e <HAL_ADC_IRQHandler+0x386>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d102      	bne.n	8000cce <HAL_ADC_IRQHandler+0x326>
    {
      overrun_error = 1U;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	e019      	b.n	8000d02 <HAL_ADC_IRQHandler+0x35a>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cce:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <HAL_ADC_IRQHandler+0x3d8>)
 8000cd0:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	f003 031f 	and.w	r3, r3, #31
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d109      	bne.n	8000cf2 <HAL_ADC_IRQHandler+0x34a>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d10a      	bne.n	8000d02 <HAL_ADC_IRQHandler+0x35a>
        {
          overrun_error = 1U;  
 8000cec:	2301      	movs	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	e007      	b.n	8000d02 <HAL_ADC_IRQHandler+0x35a>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_ADC_IRQHandler+0x35a>
        {
          overrun_error = 1U;  
 8000cfe:	2301      	movs	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d10e      	bne.n	8000d26 <HAL_ADC_IRQHandler+0x37e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d18:	f043 0202 	orr.w	r2, r3, #2
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff fa9f 	bl	8000264 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2210      	movs	r2, #16
 8000d2c:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d3c:	d11b      	bne.n	8000d76 <HAL_ADC_IRQHandler+0x3ce>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d4c:	d113      	bne.n	8000d76 <HAL_ADC_IRQHandler+0x3ce>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f043 0208 	orr.w	r2, r3, #8
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f000 f811 	bl	8000d98 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	50000300 	.word	0x50000300

08000d84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b09a      	sub	sp, #104	; 0x68
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df0:	d004      	beq.n	8000dfc <HAL_ADC_ConfigChannel+0x28>
 8000df2:	f241 517c 	movw	r1, #5500	; 0x157c
 8000df6:	4897      	ldr	r0, [pc, #604]	; (8001054 <HAL_ADC_ConfigChannel+0x280>)
 8000df8:	f007 ff1d 	bl	8008c36 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d040      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d03c      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d038      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	d034      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b05      	cmp	r3, #5
 8000e22:	d030      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b06      	cmp	r3, #6
 8000e2a:	d02c      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b07      	cmp	r3, #7
 8000e32:	d028      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d024      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b09      	cmp	r3, #9
 8000e42:	d020      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b0a      	cmp	r3, #10
 8000e4a:	d01c      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b0b      	cmp	r3, #11
 8000e52:	d018      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b0c      	cmp	r3, #12
 8000e5a:	d014      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b0d      	cmp	r3, #13
 8000e62:	d010      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b0e      	cmp	r3, #14
 8000e6a:	d00c      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d008      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b10      	cmp	r3, #16
 8000e7a:	d004      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0xb2>
 8000e7c:	f241 517d 	movw	r1, #5501	; 0x157d
 8000e80:	4874      	ldr	r0, [pc, #464]	; (8001054 <HAL_ADC_ConfigChannel+0x280>)
 8000e82:	f007 fed8 	bl	8008c36 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d020      	beq.n	8000ed0 <HAL_ADC_ConfigChannel+0xfc>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d01c      	beq.n	8000ed0 <HAL_ADC_ConfigChannel+0xfc>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d018      	beq.n	8000ed0 <HAL_ADC_ConfigChannel+0xfc>
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d014      	beq.n	8000ed0 <HAL_ADC_ConfigChannel+0xfc>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	d010      	beq.n	8000ed0 <HAL_ADC_ConfigChannel+0xfc>
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	d00c      	beq.n	8000ed0 <HAL_ADC_ConfigChannel+0xfc>
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d008      	beq.n	8000ed0 <HAL_ADC_ConfigChannel+0xfc>
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	2b07      	cmp	r3, #7
 8000ec4:	d004      	beq.n	8000ed0 <HAL_ADC_ConfigChannel+0xfc>
 8000ec6:	f241 517e 	movw	r1, #5502	; 0x157e
 8000eca:	4862      	ldr	r0, [pc, #392]	; (8001054 <HAL_ADC_ConfigChannel+0x280>)
 8000ecc:	f007 feb3 	bl	8008c36 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d008      	beq.n	8000eea <HAL_ADC_ConfigChannel+0x116>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d004      	beq.n	8000eea <HAL_ADC_ConfigChannel+0x116>
 8000ee0:	f241 517f 	movw	r1, #5503	; 0x157f
 8000ee4:	485b      	ldr	r0, [pc, #364]	; (8001054 <HAL_ADC_ConfigChannel+0x280>)
 8000ee6:	f007 fea6 	bl	8008c36 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d014      	beq.n	8000f1c <HAL_ADC_ConfigChannel+0x148>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d010      	beq.n	8000f1c <HAL_ADC_ConfigChannel+0x148>
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d00c      	beq.n	8000f1c <HAL_ADC_ConfigChannel+0x148>
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d008      	beq.n	8000f1c <HAL_ADC_ConfigChannel+0x148>
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d004      	beq.n	8000f1c <HAL_ADC_ConfigChannel+0x148>
 8000f12:	f44f 51ac 	mov.w	r1, #5504	; 0x1580
 8000f16:	484f      	ldr	r0, [pc, #316]	; (8001054 <HAL_ADC_ConfigChannel+0x280>)
 8000f18:	f007 fe8d 	bl	8008c36 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	f003 0318 	and.w	r3, r3, #24
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d104      	bne.n	8000f34 <HAL_ADC_ConfigChannel+0x160>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f32:	d326      	bcc.n	8000f82 <HAL_ADC_ConfigChannel+0x1ae>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	f003 0318 	and.w	r3, r3, #24
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d104      	bne.n	8000f4c <HAL_ADC_ConfigChannel+0x178>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f4a:	d31a      	bcc.n	8000f82 <HAL_ADC_ConfigChannel+0x1ae>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	f003 0318 	and.w	r3, r3, #24
 8000f56:	2b10      	cmp	r3, #16
 8000f58:	d103      	bne.n	8000f62 <HAL_ADC_ConfigChannel+0x18e>
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	2bff      	cmp	r3, #255	; 0xff
 8000f60:	d90f      	bls.n	8000f82 <HAL_ADC_ConfigChannel+0x1ae>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	f003 0318 	and.w	r3, r3, #24
 8000f6c:	2b18      	cmp	r3, #24
 8000f6e:	d103      	bne.n	8000f78 <HAL_ADC_ConfigChannel+0x1a4>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	2b3f      	cmp	r3, #63	; 0x3f
 8000f76:	d904      	bls.n	8000f82 <HAL_ADC_ConfigChannel+0x1ae>
 8000f78:	f241 5181 	movw	r1, #5505	; 0x1581
 8000f7c:	4835      	ldr	r0, [pc, #212]	; (8001054 <HAL_ADC_ConfigChannel+0x280>)
 8000f7e:	f007 fe5a 	bl	8008c36 <assert_failed>
  
  
  /* Verification of channel number: Channels 1 to 14 are available in        */  
  /* differential mode. Channels 15U, 16U, 17U, 18 can be used only in           */
  /* single-ended mode.                                                       */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d066      	beq.n	8001058 <HAL_ADC_ConfigChannel+0x284>
  {
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	f000 809f 	beq.w	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	f000 809a 	beq.w	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	f000 8095 	beq.w	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	f000 8090 	beq.w	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b05      	cmp	r3, #5
 8000fb8:	f000 808b 	beq.w	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b06      	cmp	r3, #6
 8000fc2:	f000 8086 	beq.w	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b07      	cmp	r3, #7
 8000fcc:	f000 8081 	beq.w	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d07c      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b09      	cmp	r3, #9
 8000fde:	d078      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b0a      	cmp	r3, #10
 8000fe6:	d074      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b0b      	cmp	r3, #11
 8000fee:	d070      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b0c      	cmp	r3, #12
 8000ff6:	d06c      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b0d      	cmp	r3, #13
 8000ffe:	d068      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b0e      	cmp	r3, #14
 8001006:	d064      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d060      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b10      	cmp	r3, #16
 8001016:	d05c      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b11      	cmp	r3, #17
 800101e:	d058      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b12      	cmp	r3, #18
 8001026:	d054      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d050      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b11      	cmp	r3, #17
 8001036:	d04c      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b11      	cmp	r3, #17
 800103e:	d048      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b11      	cmp	r3, #17
 8001046:	d044      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001048:	f241 5189 	movw	r1, #5513	; 0x1589
 800104c:	4801      	ldr	r0, [pc, #4]	; (8001054 <HAL_ADC_ConfigChannel+0x280>)
 800104e:	f007 fdf2 	bl	8008c36 <assert_failed>
 8001052:	e03e      	b.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001054:	08009040 	.word	0x08009040
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d038      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d034      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b03      	cmp	r3, #3
 800106e:	d030      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b04      	cmp	r3, #4
 8001076:	d02c      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b05      	cmp	r3, #5
 800107e:	d028      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b06      	cmp	r3, #6
 8001086:	d024      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b07      	cmp	r3, #7
 800108e:	d020      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b08      	cmp	r3, #8
 8001096:	d01c      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b09      	cmp	r3, #9
 800109e:	d018      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b0a      	cmp	r3, #10
 80010a6:	d014      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b0b      	cmp	r3, #11
 80010ae:	d010      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b0c      	cmp	r3, #12
 80010b6:	d00c      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b0d      	cmp	r3, #13
 80010be:	d008      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b0e      	cmp	r3, #14
 80010c6:	d004      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x2fe>
 80010c8:	f241 518d 	movw	r1, #5517	; 0x158d
 80010cc:	489e      	ldr	r0, [pc, #632]	; (8001348 <HAL_ADC_ConfigChannel+0x574>)
 80010ce:	f007 fdb2 	bl	8008c36 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x30c>
 80010dc:	2302      	movs	r3, #2
 80010de:	e297      	b.n	8001610 <HAL_ADC_ConfigChannel+0x83c>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f040 827b 	bne.w	80015ee <HAL_ADC_ConfigChannel+0x81a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d81c      	bhi.n	800113a <HAL_ADC_ConfigChannel+0x366>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	461a      	mov	r2, r3
 8001114:	231f      	movs	r3, #31
 8001116:	4093      	lsls	r3, r2
 8001118:	43db      	mvns	r3, r3
 800111a:	4019      	ands	r1, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa00 f203 	lsl.w	r2, r0, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	631a      	str	r2, [r3, #48]	; 0x30
 8001138:	e063      	b.n	8001202 <HAL_ADC_ConfigChannel+0x42e>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b09      	cmp	r3, #9
 8001140:	d81e      	bhi.n	8001180 <HAL_ADC_ConfigChannel+0x3ac>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	3b1e      	subs	r3, #30
 8001156:	221f      	movs	r2, #31
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	4019      	ands	r1, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	3b1e      	subs	r3, #30
 8001172:	fa00 f203 	lsl.w	r2, r0, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	430a      	orrs	r2, r1
 800117c:	635a      	str	r2, [r3, #52]	; 0x34
 800117e:	e040      	b.n	8001202 <HAL_ADC_ConfigChannel+0x42e>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b0e      	cmp	r3, #14
 8001186:	d81e      	bhi.n	80011c6 <HAL_ADC_ConfigChannel+0x3f2>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	3b3c      	subs	r3, #60	; 0x3c
 800119c:	221f      	movs	r2, #31
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	4019      	ands	r1, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	3b3c      	subs	r3, #60	; 0x3c
 80011b8:	fa00 f203 	lsl.w	r2, r0, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	639a      	str	r2, [r3, #56]	; 0x38
 80011c4:	e01d      	b.n	8001202 <HAL_ADC_ConfigChannel+0x42e>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	3b5a      	subs	r3, #90	; 0x5a
 80011da:	221f      	movs	r2, #31
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	4019      	ands	r1, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	3b5a      	subs	r3, #90	; 0x5a
 80011f6:	fa00 f203 	lsl.w	r2, r0, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 030c 	and.w	r3, r3, #12
 800120c:	2b00      	cmp	r3, #0
 800120e:	f040 80e8 	bne.w	80013e2 <HAL_ADC_ConfigChannel+0x60e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b09      	cmp	r3, #9
 8001218:	d91c      	bls.n	8001254 <HAL_ADC_ConfigChannel+0x480>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6999      	ldr	r1, [r3, #24]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	3b1e      	subs	r3, #30
 800122c:	2207      	movs	r2, #7
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	4019      	ands	r1, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	6898      	ldr	r0, [r3, #8]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	3b1e      	subs	r3, #30
 8001246:	fa00 f203 	lsl.w	r2, r0, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	619a      	str	r2, [r3, #24]
 8001252:	e019      	b.n	8001288 <HAL_ADC_ConfigChannel+0x4b4>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6959      	ldr	r1, [r3, #20]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4613      	mov	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4413      	add	r3, r2
 8001264:	2207      	movs	r2, #7
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	4019      	ands	r1, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	6898      	ldr	r0, [r3, #8]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	fa00 f203 	lsl.w	r2, r0, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	695a      	ldr	r2, [r3, #20]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	08db      	lsrs	r3, r3, #3
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d852      	bhi.n	8001350 <HAL_ADC_ConfigChannel+0x57c>
 80012aa:	a201      	add	r2, pc, #4	; (adr r2, 80012b0 <HAL_ADC_ConfigChannel+0x4dc>)
 80012ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b0:	080012c1 	.word	0x080012c1
 80012b4:	080012e3 	.word	0x080012e3
 80012b8:	08001305 	.word	0x08001305
 80012bc:	08001327 	.word	0x08001327
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <HAL_ADC_ConfigChannel+0x578>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	6812      	ldr	r2, [r2, #0]
 80012ce:	0691      	lsls	r1, r2, #26
 80012d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012d2:	430a      	orrs	r2, r1
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012de:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012e0:	e082      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x614>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <HAL_ADC_ConfigChannel+0x578>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	0691      	lsls	r1, r2, #26
 80012f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012f4:	430a      	orrs	r2, r1
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001300:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001302:	e071      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x614>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_ADC_ConfigChannel+0x578>)
 800130c:	4013      	ands	r3, r2
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	0691      	lsls	r1, r2, #26
 8001314:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001316:	430a      	orrs	r2, r1
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001322:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001324:	e060      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x614>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <HAL_ADC_ConfigChannel+0x578>)
 800132e:	4013      	ands	r3, r2
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	0691      	lsls	r1, r2, #26
 8001336:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001338:	430a      	orrs	r2, r1
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001344:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001346:	e04f      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x614>
 8001348:	08009040 	.word	0x08009040
 800134c:	83fff000 	.word	0x83fff000
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	069b      	lsls	r3, r3, #26
 8001360:	429a      	cmp	r2, r3
 8001362:	d107      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001372:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800137a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	069b      	lsls	r3, r3, #26
 8001384:	429a      	cmp	r2, r3
 8001386:	d107      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x5c4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001396:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800139e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	069b      	lsls	r3, r3, #26
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d107      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x5e8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013ba:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	069b      	lsls	r3, r3, #26
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d10a      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x612>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013de:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80013e0:	e001      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x612>
    }

  }
 80013e2:	bf00      	nop
 80013e4:	e000      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x614>
      break;
 80013e6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d108      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x634>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b01      	cmp	r3, #1
 8001402:	d101      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x634>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <HAL_ADC_ConfigChannel+0x636>
 8001408:	2300      	movs	r3, #0
 800140a:	2b00      	cmp	r3, #0
 800140c:	f040 80fa 	bne.w	8001604 <HAL_ADC_ConfigChannel+0x830>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d00f      	beq.n	8001438 <HAL_ADC_ConfigChannel+0x664>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2201      	movs	r2, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001436:	e049      	b.n	80014cc <HAL_ADC_ConfigChannel+0x6f8>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	409a      	lsls	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b09      	cmp	r3, #9
 8001458:	d91c      	bls.n	8001494 <HAL_ADC_ConfigChannel+0x6c0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6999      	ldr	r1, [r3, #24]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	3b1b      	subs	r3, #27
 800146c:	2207      	movs	r2, #7
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	4019      	ands	r1, r3
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	6898      	ldr	r0, [r3, #8]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	3b1b      	subs	r3, #27
 8001486:	fa00 f203 	lsl.w	r2, r0, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	619a      	str	r2, [r3, #24]
 8001492:	e01b      	b.n	80014cc <HAL_ADC_ConfigChannel+0x6f8>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6959      	ldr	r1, [r3, #20]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	2207      	movs	r2, #7
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	4019      	ands	r1, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6898      	ldr	r0, [r3, #8]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	fa00 f203 	lsl.w	r2, r0, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014cc:	4b52      	ldr	r3, [pc, #328]	; (8001618 <HAL_ADC_ConfigChannel+0x844>)
 80014ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b10      	cmp	r3, #16
 80014d6:	d105      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x710>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d014      	beq.n	800150e <HAL_ADC_ConfigChannel+0x73a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014e8:	2b11      	cmp	r3, #17
 80014ea:	d105      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x724>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80014ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00a      	beq.n	800150e <HAL_ADC_ConfigChannel+0x73a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80014fc:	2b12      	cmp	r3, #18
 80014fe:	f040 8081 	bne.w	8001604 <HAL_ADC_ConfigChannel+0x830>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800150a:	2b00      	cmp	r3, #0
 800150c:	d17a      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x830>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b01      	cmp	r3, #1
 800151e:	d108      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x75e>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x75e>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_ADC_ConfigChannel+0x760>
 8001532:	2300      	movs	r3, #0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d150      	bne.n	80015da <HAL_ADC_ConfigChannel+0x806>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001538:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800153a:	2b00      	cmp	r3, #0
 800153c:	d010      	beq.n	8001560 <HAL_ADC_ConfigChannel+0x78c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d107      	bne.n	800155a <HAL_ADC_ConfigChannel+0x786>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <HAL_ADC_ConfigChannel+0x786>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_ADC_ConfigChannel+0x788>
 800155a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800155c:	2b00      	cmp	r3, #0
 800155e:	d13c      	bne.n	80015da <HAL_ADC_ConfigChannel+0x806>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b10      	cmp	r3, #16
 8001566:	d11d      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x7d0>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001570:	d118      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x7d0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800157a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800157c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800157e:	4b27      	ldr	r3, [pc, #156]	; (800161c <HAL_ADC_ConfigChannel+0x848>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a27      	ldr	r2, [pc, #156]	; (8001620 <HAL_ADC_ConfigChannel+0x84c>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	0c9a      	lsrs	r2, r3, #18
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001594:	e002      	b.n	800159c <HAL_ADC_ConfigChannel+0x7c8>
          {
            wait_loop_index--;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3b01      	subs	r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f9      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x7c2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015a2:	e02e      	b.n	8001602 <HAL_ADC_ConfigChannel+0x82e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b11      	cmp	r3, #17
 80015aa:	d10b      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x7f0>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015b4:	d106      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x7f0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80015b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80015be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015c0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015c2:	e01e      	b.n	8001602 <HAL_ADC_ConfigChannel+0x82e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b12      	cmp	r3, #18
 80015ca:	d11a      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x82e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80015cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015d8:	e013      	b.n	8001602 <HAL_ADC_ConfigChannel+0x82e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f043 0220 	orr.w	r2, r3, #32
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015ec:	e00a      	b.n	8001604 <HAL_ADC_ConfigChannel+0x830>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f043 0220 	orr.w	r2, r3, #32
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001600:	e000      	b.n	8001604 <HAL_ADC_ConfigChannel+0x830>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001602:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800160c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001610:	4618      	mov	r0, r3
 8001612:	3768      	adds	r7, #104	; 0x68
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	50000300 	.word	0x50000300
 800161c:	2000000c 	.word	0x2000000c
 8001620:	431bde83 	.word	0x431bde83

08001624 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	2b01      	cmp	r3, #1
 800163c:	d108      	bne.n	8001650 <ADC_Enable+0x2c>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <ADC_Enable+0x2c>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <ADC_Enable+0x2e>
 8001650:	2300      	movs	r3, #0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d13c      	bne.n	80016d0 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <ADC_Enable+0xb8>)
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00d      	beq.n	8001680 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	f043 0210 	orr.w	r2, r3, #16
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	f043 0201 	orr.w	r2, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e028      	b.n	80016d2 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001690:	f7fe fdc8 	bl	8000224 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001696:	e014      	b.n	80016c2 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001698:	f7fe fdc4 	bl	8000224 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d90d      	bls.n	80016c2 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f043 0210 	orr.w	r2, r3, #16
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f043 0201 	orr.w	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e007      	b.n	80016d2 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d1e3      	bne.n	8001698 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	8000003f 	.word	0x8000003f

080016e0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d108      	bne.n	800170c <ADC_Disable+0x2c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <ADC_Disable+0x2c>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <ADC_Disable+0x2e>
 800170c:	2300      	movs	r3, #0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d040      	beq.n	8001794 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 030d 	and.w	r3, r3, #13
 800171c:	2b01      	cmp	r3, #1
 800171e:	d10f      	bne.n	8001740 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0202 	orr.w	r2, r2, #2
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2203      	movs	r2, #3
 8001736:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001738:	f7fe fd74 	bl	8000224 <HAL_GetTick>
 800173c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800173e:	e022      	b.n	8001786 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f043 0210 	orr.w	r2, r3, #16
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	f043 0201 	orr.w	r2, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e01c      	b.n	8001796 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800175c:	f7fe fd62 	bl	8000224 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d90d      	bls.n	8001786 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f043 0210 	orr.w	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f043 0201 	orr.w	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e007      	b.n	8001796 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b01      	cmp	r3, #1
 8001792:	d0e3      	beq.n	800175c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017be:	d004      	beq.n	80017ca <ADC_ConversionStop+0x2a>
 80017c0:	f641 41ab 	movw	r1, #7339	; 0x1cab
 80017c4:	4858      	ldr	r0, [pc, #352]	; (8001928 <ADC_ConversionStop+0x188>)
 80017c6:	f007 fa36 	bl	8008c36 <assert_failed>
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	d00a      	beq.n	80017e6 <ADC_ConversionStop+0x46>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2b60      	cmp	r3, #96	; 0x60
 80017d4:	d007      	beq.n	80017e6 <ADC_ConversionStop+0x46>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b6c      	cmp	r3, #108	; 0x6c
 80017da:	d004      	beq.n	80017e6 <ADC_ConversionStop+0x46>
 80017dc:	f641 41ac 	movw	r1, #7340	; 0x1cac
 80017e0:	4851      	ldr	r0, [pc, #324]	; (8001928 <ADC_ConversionStop+0x188>)
 80017e2:	f007 fa28 	bl	8008c36 <assert_failed>
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 8093 	beq.w	800191c <ADC_ConversionStop+0x17c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001804:	d12a      	bne.n	800185c <ADC_ConversionStop+0xbc>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800180a:	2b01      	cmp	r3, #1
 800180c:	d126      	bne.n	800185c <ADC_ConversionStop+0xbc>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001812:	2b01      	cmp	r3, #1
 8001814:	d122      	bne.n	800185c <ADC_ConversionStop+0xbc>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001816:	230c      	movs	r3, #12
 8001818:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800181a:	e014      	b.n	8001846 <ADC_ConversionStop+0xa6>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4a43      	ldr	r2, [pc, #268]	; (800192c <ADC_ConversionStop+0x18c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d90d      	bls.n	8001840 <ADC_ConversionStop+0xa0>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f043 0210 	orr.w	r2, r3, #16
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001834:	f043 0201 	orr.w	r2, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e06e      	b.n	800191e <ADC_ConversionStop+0x17e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	3301      	adds	r3, #1
 8001844:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001850:	2b40      	cmp	r3, #64	; 0x40
 8001852:	d1e3      	bne.n	800181c <ADC_ConversionStop+0x7c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2240      	movs	r2, #64	; 0x40
 800185a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b60      	cmp	r3, #96	; 0x60
 8001860:	d015      	beq.n	800188e <ADC_ConversionStop+0xee>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b04      	cmp	r3, #4
 800186e:	d10e      	bne.n	800188e <ADC_ConversionStop+0xee>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800187a:	2b00      	cmp	r3, #0
 800187c:	d107      	bne.n	800188e <ADC_ConversionStop+0xee>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0210 	orr.w	r2, r2, #16
 800188c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2b0c      	cmp	r3, #12
 8001892:	d015      	beq.n	80018c0 <ADC_ConversionStop+0x120>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d10e      	bne.n	80018c0 <ADC_ConversionStop+0x120>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d107      	bne.n	80018c0 <ADC_ConversionStop+0x120>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0220 	orr.w	r2, r2, #32
 80018be:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2b60      	cmp	r3, #96	; 0x60
 80018c4:	d004      	beq.n	80018d0 <ADC_ConversionStop+0x130>
 80018c6:	2b6c      	cmp	r3, #108	; 0x6c
 80018c8:	d105      	bne.n	80018d6 <ADC_ConversionStop+0x136>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80018ca:	230c      	movs	r3, #12
 80018cc:	617b      	str	r3, [r7, #20]
        break;
 80018ce:	e005      	b.n	80018dc <ADC_ConversionStop+0x13c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80018d0:	2308      	movs	r3, #8
 80018d2:	617b      	str	r3, [r7, #20]
        break;
 80018d4:	e002      	b.n	80018dc <ADC_ConversionStop+0x13c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80018d6:	2304      	movs	r3, #4
 80018d8:	617b      	str	r3, [r7, #20]
        break;
 80018da:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80018dc:	f7fe fca2 	bl	8000224 <HAL_GetTick>
 80018e0:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80018e2:	e014      	b.n	800190e <ADC_ConversionStop+0x16e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80018e4:	f7fe fc9e 	bl	8000224 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b0b      	cmp	r3, #11
 80018f0:	d90d      	bls.n	800190e <ADC_ConversionStop+0x16e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f043 0210 	orr.w	r2, r3, #16
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f043 0201 	orr.w	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e007      	b.n	800191e <ADC_ConversionStop+0x17e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1e3      	bne.n	80018e4 <ADC_ConversionStop+0x144>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	08009040 	.word	0x08009040
 800192c:	000993ff 	.word	0x000993ff

08001930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800195c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	db0b      	blt.n	80019be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	f003 021f 	and.w	r2, r3, #31
 80019ac:	4907      	ldr	r1, [pc, #28]	; (80019cc <__NVIC_EnableIRQ+0x38>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	2001      	movs	r0, #1
 80019b6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100

080019d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db10      	blt.n	8001a04 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f003 021f 	and.w	r2, r3, #31
 80019e8:	4909      	ldr	r1, [pc, #36]	; (8001a10 <__NVIC_DisableIRQ+0x40>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	2001      	movs	r0, #1
 80019f2:	fa00 f202 	lsl.w	r2, r0, r2
 80019f6:	3320      	adds	r3, #32
 80019f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a00:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100

08001a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0a      	blt.n	8001a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	490c      	ldr	r1, [pc, #48]	; (8001a60 <__NVIC_SetPriority+0x4c>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	440b      	add	r3, r1
 8001a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a3c:	e00a      	b.n	8001a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4908      	ldr	r1, [pc, #32]	; (8001a64 <__NVIC_SetPriority+0x50>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	761a      	strb	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1c3 0307 	rsb	r3, r3, #7
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	bf28      	it	cs
 8001a86:	2304      	movcs	r3, #4
 8001a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d902      	bls.n	8001a98 <NVIC_EncodePriority+0x30>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3b03      	subs	r3, #3
 8001a96:	e000      	b.n	8001a9a <NVIC_EncodePriority+0x32>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	4313      	orrs	r3, r2
         );
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3724      	adds	r7, #36	; 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b07      	cmp	r3, #7
 8001adc:	d00f      	beq.n	8001afe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b06      	cmp	r3, #6
 8001ae2:	d00c      	beq.n	8001afe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	d009      	beq.n	8001afe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d006      	beq.n	8001afe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d003      	beq.n	8001afe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001af6:	21ac      	movs	r1, #172	; 0xac
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001afa:	f007 f89c 	bl	8008c36 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ff16 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	0800907c 	.word	0x0800907c

08001b10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b0f      	cmp	r3, #15
 8001b26:	d903      	bls.n	8001b30 <HAL_NVIC_SetPriority+0x20>
 8001b28:	21c4      	movs	r1, #196	; 0xc4
 8001b2a:	480e      	ldr	r0, [pc, #56]	; (8001b64 <HAL_NVIC_SetPriority+0x54>)
 8001b2c:	f007 f883 	bl	8008c36 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b0f      	cmp	r3, #15
 8001b34:	d903      	bls.n	8001b3e <HAL_NVIC_SetPriority+0x2e>
 8001b36:	21c5      	movs	r1, #197	; 0xc5
 8001b38:	480a      	ldr	r0, [pc, #40]	; (8001b64 <HAL_NVIC_SetPriority+0x54>)
 8001b3a:	f007 f87c 	bl	8008c36 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3e:	f7ff ff1b 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001b42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	68b9      	ldr	r1, [r7, #8]
 8001b48:	6978      	ldr	r0, [r7, #20]
 8001b4a:	f7ff ff8d 	bl	8001a68 <NVIC_EncodePriority>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff5c 	bl	8001a14 <__NVIC_SetPriority>
}
 8001b5c:	bf00      	nop
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	0800907c 	.word	0x0800907c

08001b68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da03      	bge.n	8001b82 <HAL_NVIC_EnableIRQ+0x1a>
 8001b7a:	21d8      	movs	r1, #216	; 0xd8
 8001b7c:	4805      	ldr	r0, [pc, #20]	; (8001b94 <HAL_NVIC_EnableIRQ+0x2c>)
 8001b7e:	f007 f85a 	bl	8008c36 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff04 	bl	8001994 <__NVIC_EnableIRQ>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	0800907c 	.word	0x0800907c

08001b98 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	da03      	bge.n	8001bb2 <HAL_NVIC_DisableIRQ+0x1a>
 8001baa:	21e8      	movs	r1, #232	; 0xe8
 8001bac:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <HAL_NVIC_DisableIRQ+0x2c>)
 8001bae:	f007 f842 	bl	8008c36 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff0a 	bl	80019d0 <__NVIC_DisableIRQ>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	0800907c 	.word	0x0800907c

08001bc8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0a5      	b.n	8001d26 <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a54      	ldr	r2, [pc, #336]	; (8001d30 <HAL_CRC_Init+0x168>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d003      	beq.n	8001bec <HAL_CRC_Init+0x24>
 8001be4:	2170      	movs	r1, #112	; 0x70
 8001be6:	4853      	ldr	r0, [pc, #332]	; (8001d34 <HAL_CRC_Init+0x16c>)
 8001be8:	f007 f825 	bl	8008c36 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7f5b      	ldrb	r3, [r3, #29]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d105      	bne.n	8001c02 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f006 fe21 	bl	8008844 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2202      	movs	r2, #2
 8001c06:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	791b      	ldrb	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d007      	beq.n	8001c20 <HAL_CRC_Init+0x58>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	791b      	ldrb	r3, [r3, #4]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d003      	beq.n	8001c20 <HAL_CRC_Init+0x58>
 8001c18:	217e      	movs	r1, #126	; 0x7e
 8001c1a:	4846      	ldr	r0, [pc, #280]	; (8001d34 <HAL_CRC_Init+0x16c>)
 8001c1c:	f007 f80b 	bl	8008c36 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	791b      	ldrb	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10c      	bne.n	8001c42 <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a42      	ldr	r2, [pc, #264]	; (8001d38 <HAL_CRC_Init+0x170>)
 8001c2e:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0218 	bic.w	r2, r2, #24
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	e00c      	b.n	8001c5c <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6899      	ldr	r1, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f875 	bl	8001d3c <HAL_CRCEx_Polynomial_Set>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e064      	b.n	8001d26 <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	795b      	ldrb	r3, [r3, #5]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d007      	beq.n	8001c74 <HAL_CRC_Init+0xac>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	795b      	ldrb	r3, [r3, #5]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d003      	beq.n	8001c74 <HAL_CRC_Init+0xac>
 8001c6c:	2190      	movs	r1, #144	; 0x90
 8001c6e:	4831      	ldr	r0, [pc, #196]	; (8001d34 <HAL_CRC_Init+0x16c>)
 8001c70:	f006 ffe1 	bl	8008c36 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	795b      	ldrb	r3, [r3, #5]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	611a      	str	r2, [r3, #16]
 8001c86:	e004      	b.n	8001c92 <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6912      	ldr	r2, [r2, #16]
 8001c90:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00f      	beq.n	8001cba <HAL_CRC_Init+0xf2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d00b      	beq.n	8001cba <HAL_CRC_Init+0xf2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	2b40      	cmp	r3, #64	; 0x40
 8001ca8:	d007      	beq.n	8001cba <HAL_CRC_Init+0xf2>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b60      	cmp	r3, #96	; 0x60
 8001cb0:	d003      	beq.n	8001cba <HAL_CRC_Init+0xf2>
 8001cb2:	219c      	movs	r1, #156	; 0x9c
 8001cb4:	481f      	ldr	r0, [pc, #124]	; (8001d34 <HAL_CRC_Init+0x16c>)
 8001cb6:	f006 ffbe 	bl	8008c36 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695a      	ldr	r2, [r3, #20]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <HAL_CRC_Init+0x120>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b80      	cmp	r3, #128	; 0x80
 8001cde:	d003      	beq.n	8001ce8 <HAL_CRC_Init+0x120>
 8001ce0:	21a0      	movs	r1, #160	; 0xa0
 8001ce2:	4814      	ldr	r0, [pc, #80]	; (8001d34 <HAL_CRC_Init+0x16c>)
 8001ce4:	f006 ffa7 	bl	8008c36 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d00b      	beq.n	8001d1e <HAL_CRC_Init+0x156>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d007      	beq.n	8001d1e <HAL_CRC_Init+0x156>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d003      	beq.n	8001d1e <HAL_CRC_Init+0x156>
 8001d16:	21a5      	movs	r1, #165	; 0xa5
 8001d18:	4806      	ldr	r0, [pc, #24]	; (8001d34 <HAL_CRC_Init+0x16c>)
 8001d1a:	f006 ff8c 	bl	8008c36 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023000 	.word	0x40023000
 8001d34:	080090b8 	.word	0x080090b8
 8001d38:	04c11db7 	.word	0x04c11db7

08001d3c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001d4c:	231f      	movs	r3, #31
 8001d4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00c      	beq.n	8001d70 <HAL_CRCEx_Polynomial_Set+0x34>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d009      	beq.n	8001d70 <HAL_CRCEx_Polynomial_Set+0x34>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b10      	cmp	r3, #16
 8001d60:	d006      	beq.n	8001d70 <HAL_CRCEx_Polynomial_Set+0x34>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b18      	cmp	r3, #24
 8001d66:	d003      	beq.n	8001d70 <HAL_CRCEx_Polynomial_Set+0x34>
 8001d68:	215f      	movs	r1, #95	; 0x5f
 8001d6a:	483e      	ldr	r0, [pc, #248]	; (8001e64 <HAL_CRCEx_Polynomial_Set+0x128>)
 8001d6c:	f006 ff63 	bl	8008c36 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001d70:	bf00      	nop
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	613a      	str	r2, [r7, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d009      	beq.n	8001d90 <HAL_CRCEx_Polynomial_Set+0x54>
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b18      	cmp	r3, #24
 8001d94:	d846      	bhi.n	8001e24 <HAL_CRCEx_Polynomial_Set+0xe8>
 8001d96:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <HAL_CRCEx_Polynomial_Set+0x60>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001e2b 	.word	0x08001e2b
 8001da0:	08001e25 	.word	0x08001e25
 8001da4:	08001e25 	.word	0x08001e25
 8001da8:	08001e25 	.word	0x08001e25
 8001dac:	08001e25 	.word	0x08001e25
 8001db0:	08001e25 	.word	0x08001e25
 8001db4:	08001e25 	.word	0x08001e25
 8001db8:	08001e25 	.word	0x08001e25
 8001dbc:	08001e19 	.word	0x08001e19
 8001dc0:	08001e25 	.word	0x08001e25
 8001dc4:	08001e25 	.word	0x08001e25
 8001dc8:	08001e25 	.word	0x08001e25
 8001dcc:	08001e25 	.word	0x08001e25
 8001dd0:	08001e25 	.word	0x08001e25
 8001dd4:	08001e25 	.word	0x08001e25
 8001dd8:	08001e25 	.word	0x08001e25
 8001ddc:	08001e0d 	.word	0x08001e0d
 8001de0:	08001e25 	.word	0x08001e25
 8001de4:	08001e25 	.word	0x08001e25
 8001de8:	08001e25 	.word	0x08001e25
 8001dec:	08001e25 	.word	0x08001e25
 8001df0:	08001e25 	.word	0x08001e25
 8001df4:	08001e25 	.word	0x08001e25
 8001df8:	08001e25 	.word	0x08001e25
 8001dfc:	08001e01 	.word	0x08001e01
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d913      	bls.n	8001e2e <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e0a:	e010      	b.n	8001e2e <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2b07      	cmp	r3, #7
 8001e10:	d90f      	bls.n	8001e32 <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e16:	e00c      	b.n	8001e32 <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	d90b      	bls.n	8001e36 <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e22:	e008      	b.n	8001e36 <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	75fb      	strb	r3, [r7, #23]
      break;
 8001e28:	e006      	b.n	8001e38 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8001e2a:	bf00      	nop
 8001e2c:	e004      	b.n	8001e38 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8001e2e:	bf00      	nop
 8001e30:	e002      	b.n	8001e38 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8001e32:	bf00      	nop
 8001e34:	e000      	b.n	8001e38 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8001e36:	bf00      	nop
  }
  if (status == HAL_OK)
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 0118 	bic.w	r1, r3, #24
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	080090f0 	.word	0x080090f0

08001e68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d005      	beq.n	8001e8a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2204      	movs	r2, #4
 8001e82:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	e027      	b.n	8001eda <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 020e 	bic.w	r2, r2, #14
 8001e98:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0201 	bic.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	4798      	blx	r3
    } 
  }
  return status;
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ef8:	d013      	beq.n	8001f22 <HAL_GPIO_Init+0x3e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a37      	ldr	r2, [pc, #220]	; (8001fdc <HAL_GPIO_Init+0xf8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00f      	beq.n	8001f22 <HAL_GPIO_Init+0x3e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a36      	ldr	r2, [pc, #216]	; (8001fe0 <HAL_GPIO_Init+0xfc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00b      	beq.n	8001f22 <HAL_GPIO_Init+0x3e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a35      	ldr	r2, [pc, #212]	; (8001fe4 <HAL_GPIO_Init+0x100>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <HAL_GPIO_Init+0x3e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a34      	ldr	r2, [pc, #208]	; (8001fe8 <HAL_GPIO_Init+0x104>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x3e>
 8001f1a:	21ba      	movs	r1, #186	; 0xba
 8001f1c:	4833      	ldr	r0, [pc, #204]	; (8001fec <HAL_GPIO_Init+0x108>)
 8001f1e:	f006 fe8a 	bl	8008c36 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_GPIO_Init+0x54>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0c1b      	lsrs	r3, r3, #16
 8001f32:	041b      	lsls	r3, r3, #16
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x5c>
 8001f38:	21bb      	movs	r1, #187	; 0xbb
 8001f3a:	482c      	ldr	r0, [pc, #176]	; (8001fec <HAL_GPIO_Init+0x108>)
 8001f3c:	f006 fe7b 	bl	8008c36 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d035      	beq.n	8001fb4 <HAL_GPIO_Init+0xd0>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d031      	beq.n	8001fb4 <HAL_GPIO_Init+0xd0>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b11      	cmp	r3, #17
 8001f56:	d02d      	beq.n	8001fb4 <HAL_GPIO_Init+0xd0>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d029      	beq.n	8001fb4 <HAL_GPIO_Init+0xd0>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b12      	cmp	r3, #18
 8001f66:	d025      	beq.n	8001fb4 <HAL_GPIO_Init+0xd0>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a20      	ldr	r2, [pc, #128]	; (8001ff0 <HAL_GPIO_Init+0x10c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d020      	beq.n	8001fb4 <HAL_GPIO_Init+0xd0>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4a1f      	ldr	r2, [pc, #124]	; (8001ff4 <HAL_GPIO_Init+0x110>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d01b      	beq.n	8001fb4 <HAL_GPIO_Init+0xd0>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <HAL_GPIO_Init+0x114>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d016      	beq.n	8001fb4 <HAL_GPIO_Init+0xd0>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <HAL_GPIO_Init+0x118>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d011      	beq.n	8001fb4 <HAL_GPIO_Init+0xd0>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a1a      	ldr	r2, [pc, #104]	; (8002000 <HAL_GPIO_Init+0x11c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00c      	beq.n	8001fb4 <HAL_GPIO_Init+0xd0>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_GPIO_Init+0x120>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d007      	beq.n	8001fb4 <HAL_GPIO_Init+0xd0>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0xd0>
 8001fac:	21bc      	movs	r1, #188	; 0xbc
 8001fae:	480f      	ldr	r0, [pc, #60]	; (8001fec <HAL_GPIO_Init+0x108>)
 8001fb0:	f006 fe41 	bl	8008c36 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 81b6 	beq.w	800232a <HAL_GPIO_Init+0x446>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	f000 81b1 	beq.w	800232a <HAL_GPIO_Init+0x446>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	f000 81ac 	beq.w	800232a <HAL_GPIO_Init+0x446>
 8001fd2:	21bd      	movs	r1, #189	; 0xbd
 8001fd4:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_GPIO_Init+0x108>)
 8001fd6:	f006 fe2e 	bl	8008c36 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fda:	e1a6      	b.n	800232a <HAL_GPIO_Init+0x446>
 8001fdc:	48000400 	.word	0x48000400
 8001fe0:	48000800 	.word	0x48000800
 8001fe4:	48000c00 	.word	0x48000c00
 8001fe8:	48001400 	.word	0x48001400
 8001fec:	0800912c 	.word	0x0800912c
 8001ff0:	10110000 	.word	0x10110000
 8001ff4:	10210000 	.word	0x10210000
 8001ff8:	10310000 	.word	0x10310000
 8001ffc:	10120000 	.word	0x10120000
 8002000:	10220000 	.word	0x10220000
 8002004:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8182 	beq.w	8002324 <HAL_GPIO_Init+0x440>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x14c>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b12      	cmp	r3, #18
 800202e:	d147      	bne.n	80020c0 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002036:	d013      	beq.n	8002060 <HAL_GPIO_Init+0x17c>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a81      	ldr	r2, [pc, #516]	; (8002240 <HAL_GPIO_Init+0x35c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00f      	beq.n	8002060 <HAL_GPIO_Init+0x17c>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a80      	ldr	r2, [pc, #512]	; (8002244 <HAL_GPIO_Init+0x360>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00b      	beq.n	8002060 <HAL_GPIO_Init+0x17c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a7f      	ldr	r2, [pc, #508]	; (8002248 <HAL_GPIO_Init+0x364>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d007      	beq.n	8002060 <HAL_GPIO_Init+0x17c>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a7e      	ldr	r2, [pc, #504]	; (800224c <HAL_GPIO_Init+0x368>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x17c>
 8002058:	21cc      	movs	r1, #204	; 0xcc
 800205a:	487d      	ldr	r0, [pc, #500]	; (8002250 <HAL_GPIO_Init+0x36c>)
 800205c:	f006 fdeb 	bl	8008c36 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d907      	bls.n	8002078 <HAL_GPIO_Init+0x194>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x194>
 8002070:	21cd      	movs	r1, #205	; 0xcd
 8002072:	4877      	ldr	r0, [pc, #476]	; (8002250 <HAL_GPIO_Init+0x36c>)
 8002074:	f006 fddf 	bl	8008c36 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	08da      	lsrs	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3208      	adds	r2, #8
 8002080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	220f      	movs	r2, #15
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	6939      	ldr	r1, [r7, #16]
 80020bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0203 	and.w	r2, r3, #3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d00b      	beq.n	8002114 <HAL_GPIO_Init+0x230>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d007      	beq.n	8002114 <HAL_GPIO_Init+0x230>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002108:	2b11      	cmp	r3, #17
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x230>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b12      	cmp	r3, #18
 8002112:	d140      	bne.n	8002196 <HAL_GPIO_Init+0x2b2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00b      	beq.n	8002134 <HAL_GPIO_Init+0x250>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d007      	beq.n	8002134 <HAL_GPIO_Init+0x250>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x250>
 800212c:	21e1      	movs	r1, #225	; 0xe1
 800212e:	4848      	ldr	r0, [pc, #288]	; (8002250 <HAL_GPIO_Init+0x36c>)
 8002130:	f006 fd81 	bl	8008c36 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800216a:	2201      	movs	r2, #1
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	f003 0201 	and.w	r2, r3, #1
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	2203      	movs	r2, #3
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 80a8 	beq.w	8002324 <HAL_GPIO_Init+0x440>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d4:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <HAL_GPIO_Init+0x370>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	4a1e      	ldr	r2, [pc, #120]	; (8002254 <HAL_GPIO_Init+0x370>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6193      	str	r3, [r2, #24]
 80021e0:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <HAL_GPIO_Init+0x370>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021ec:	4a1a      	ldr	r2, [pc, #104]	; (8002258 <HAL_GPIO_Init+0x374>)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	3302      	adds	r3, #2
 80021f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002216:	d021      	beq.n	800225c <HAL_GPIO_Init+0x378>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a09      	ldr	r2, [pc, #36]	; (8002240 <HAL_GPIO_Init+0x35c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00d      	beq.n	800223c <HAL_GPIO_Init+0x358>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <HAL_GPIO_Init+0x360>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d007      	beq.n	8002238 <HAL_GPIO_Init+0x354>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a07      	ldr	r2, [pc, #28]	; (8002248 <HAL_GPIO_Init+0x364>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_GPIO_Init+0x350>
 8002230:	2303      	movs	r3, #3
 8002232:	e014      	b.n	800225e <HAL_GPIO_Init+0x37a>
 8002234:	2305      	movs	r3, #5
 8002236:	e012      	b.n	800225e <HAL_GPIO_Init+0x37a>
 8002238:	2302      	movs	r3, #2
 800223a:	e010      	b.n	800225e <HAL_GPIO_Init+0x37a>
 800223c:	2301      	movs	r3, #1
 800223e:	e00e      	b.n	800225e <HAL_GPIO_Init+0x37a>
 8002240:	48000400 	.word	0x48000400
 8002244:	48000800 	.word	0x48000800
 8002248:	48000c00 	.word	0x48000c00
 800224c:	48001400 	.word	0x48001400
 8002250:	0800912c 	.word	0x0800912c
 8002254:	40021000 	.word	0x40021000
 8002258:	40010000 	.word	0x40010000
 800225c:	2300      	movs	r3, #0
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	f002 0203 	and.w	r2, r2, #3
 8002264:	0092      	lsls	r2, r2, #2
 8002266:	4093      	lsls	r3, r2
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800226e:	4935      	ldr	r1, [pc, #212]	; (8002344 <HAL_GPIO_Init+0x460>)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227c:	4b32      	ldr	r3, [pc, #200]	; (8002348 <HAL_GPIO_Init+0x464>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x3bc>
        {
          temp |= iocurrent;
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022a0:	4a29      	ldr	r2, [pc, #164]	; (8002348 <HAL_GPIO_Init+0x464>)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022a6:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_GPIO_Init+0x464>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x3e6>
        {
          temp |= iocurrent;
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022ca:	4a1f      	ldr	r2, [pc, #124]	; (8002348 <HAL_GPIO_Init+0x464>)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d0:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_GPIO_Init+0x464>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x410>
        {
          temp |= iocurrent;
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022f4:	4a14      	ldr	r2, [pc, #80]	; (8002348 <HAL_GPIO_Init+0x464>)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <HAL_GPIO_Init+0x464>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x43a>
        {
          temp |= iocurrent;
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <HAL_GPIO_Init+0x464>)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	3301      	adds	r3, #1
 8002328:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	f47f ae67 	bne.w	8002008 <HAL_GPIO_Init+0x124>
  }
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40010000 	.word	0x40010000
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <HAL_GPIO_WritePin+0x20>
 8002362:	887b      	ldrh	r3, [r7, #2]
 8002364:	0c1b      	lsrs	r3, r3, #16
 8002366:	041b      	lsls	r3, r3, #16
 8002368:	2b00      	cmp	r3, #0
 800236a:	d004      	beq.n	8002376 <HAL_GPIO_WritePin+0x2a>
 800236c:	f240 11a7 	movw	r1, #423	; 0x1a7
 8002370:	480d      	ldr	r0, [pc, #52]	; (80023a8 <HAL_GPIO_WritePin+0x5c>)
 8002372:	f006 fc60 	bl	8008c36 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002376:	787b      	ldrb	r3, [r7, #1]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d007      	beq.n	800238c <HAL_GPIO_WritePin+0x40>
 800237c:	787b      	ldrb	r3, [r7, #1]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d004      	beq.n	800238c <HAL_GPIO_WritePin+0x40>
 8002382:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8002386:	4808      	ldr	r0, [pc, #32]	; (80023a8 <HAL_GPIO_WritePin+0x5c>)
 8002388:	f006 fc55 	bl	8008c36 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800238c:	787b      	ldrb	r3, [r7, #1]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002398:	e002      	b.n	80023a0 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800239a:	887a      	ldrh	r2, [r7, #2]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	0800912c 	.word	0x0800912c

080023ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d004      	beq.n	80023c8 <HAL_GPIO_TogglePin+0x1c>
 80023be:	887b      	ldrh	r3, [r7, #2]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	041b      	lsls	r3, r3, #16
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d004      	beq.n	80023d2 <HAL_GPIO_TogglePin+0x26>
 80023c8:	f240 11bd 	movw	r1, #445	; 0x1bd
 80023cc:	480a      	ldr	r0, [pc, #40]	; (80023f8 <HAL_GPIO_TogglePin+0x4c>)
 80023ce:	f006 fc32 	bl	8008c36 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d004      	beq.n	80023e8 <HAL_GPIO_TogglePin+0x3c>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	041a      	lsls	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80023e6:	e002      	b.n	80023ee <HAL_GPIO_TogglePin+0x42>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023e8:	887a      	ldrh	r2, [r7, #2]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	619a      	str	r2, [r3, #24]
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	0800912c 	.word	0x0800912c

080023fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002402:	af00      	add	r7, sp, #0
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	f000 bff7 	b.w	8003404 <HAL_RCC_OscConfig+0x1008>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_OscConfig+0x66>
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d119      	bne.n	8002462 <HAL_RCC_OscConfig+0x66>
 800242e:	1d3b      	adds	r3, r7, #4
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d112      	bne.n	8002462 <HAL_RCC_OscConfig+0x66>
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10b      	bne.n	8002462 <HAL_RCC_OscConfig+0x66>
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d104      	bne.n	8002462 <HAL_RCC_OscConfig+0x66>
 8002458:	f240 114b 	movw	r1, #331	; 0x14b
 800245c:	48c3      	ldr	r0, [pc, #780]	; (800276c <HAL_RCC_OscConfig+0x370>)
 800245e:	f006 fbea 	bl	8008c36 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8182 	beq.w	8002776 <HAL_RCC_OscConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d010      	beq.n	800249e <HAL_RCC_OscConfig+0xa2>
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002486:	d00a      	beq.n	800249e <HAL_RCC_OscConfig+0xa2>
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002492:	d004      	beq.n	800249e <HAL_RCC_OscConfig+0xa2>
 8002494:	f240 1151 	movw	r1, #337	; 0x151
 8002498:	48b4      	ldr	r0, [pc, #720]	; (800276c <HAL_RCC_OscConfig+0x370>)
 800249a:	f006 fbcc 	bl	8008c36 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800249e:	4bb4      	ldr	r3, [pc, #720]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d00c      	beq.n	80024c4 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024aa:	4bb1      	ldr	r3, [pc, #708]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d159      	bne.n	800256a <HAL_RCC_OscConfig+0x16e>
 80024b6:	4bae      	ldr	r3, [pc, #696]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c2:	d152      	bne.n	800256a <HAL_RCC_OscConfig+0x16e>
 80024c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024d8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d102      	bne.n	80024f6 <HAL_RCC_OscConfig+0xfa>
 80024f0:	4b9f      	ldr	r3, [pc, #636]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	e015      	b.n	8002522 <HAL_RCC_OscConfig+0x126>
 80024f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024fa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800250a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002512:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800251e:	4b94      	ldr	r3, [pc, #592]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002526:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800252a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800252e:	fa92 f2a2 	rbit	r2, r2
 8002532:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002536:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800253a:	fab2 f282 	clz	r2, r2
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	f042 0220 	orr.w	r2, r2, #32
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	f002 021f 	and.w	r2, r2, #31
 800254a:	2101      	movs	r1, #1
 800254c:	fa01 f202 	lsl.w	r2, r1, r2
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 810e 	beq.w	8002774 <HAL_RCC_OscConfig+0x378>
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 8108 	bne.w	8002774 <HAL_RCC_OscConfig+0x378>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	f000 bf4d 	b.w	8003404 <HAL_RCC_OscConfig+0x1008>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002574:	d106      	bne.n	8002584 <HAL_RCC_OscConfig+0x188>
 8002576:	4b7e      	ldr	r3, [pc, #504]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a7d      	ldr	r2, [pc, #500]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 800257c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e030      	b.n	80025e6 <HAL_RCC_OscConfig+0x1ea>
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x1ac>
 800258e:	4b78      	ldr	r3, [pc, #480]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a77      	ldr	r2, [pc, #476]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 8002594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b75      	ldr	r3, [pc, #468]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a74      	ldr	r2, [pc, #464]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 80025a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e01e      	b.n	80025e6 <HAL_RCC_OscConfig+0x1ea>
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_OscConfig+0x1d2>
 80025b4:	4b6e      	ldr	r3, [pc, #440]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a6d      	ldr	r2, [pc, #436]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 80025ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b6b      	ldr	r3, [pc, #428]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a6a      	ldr	r2, [pc, #424]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 80025c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	e00b      	b.n	80025e6 <HAL_RCC_OscConfig+0x1ea>
 80025ce:	4b68      	ldr	r3, [pc, #416]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a67      	ldr	r2, [pc, #412]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 80025d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b65      	ldr	r3, [pc, #404]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a64      	ldr	r2, [pc, #400]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 80025e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025e6:	4b62      	ldr	r3, [pc, #392]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	f023 020f 	bic.w	r2, r3, #15
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	495e      	ldr	r1, [pc, #376]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d059      	beq.n	80026b8 <HAL_RCC_OscConfig+0x2bc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7fd fe0e 	bl	8000224 <HAL_GetTick>
 8002608:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260c:	e00a      	b.n	8002624 <HAL_RCC_OscConfig+0x228>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260e:	f7fd fe09 	bl	8000224 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d902      	bls.n	8002624 <HAL_RCC_OscConfig+0x228>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	f000 bef0 	b.w	8003404 <HAL_RCC_OscConfig+0x1008>
 8002624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002628:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002638:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d102      	bne.n	8002656 <HAL_RCC_OscConfig+0x25a>
 8002650:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	e015      	b.n	8002682 <HAL_RCC_OscConfig+0x286>
 8002656:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800265a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800266a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800266e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002672:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800267e:	4b3c      	ldr	r3, [pc, #240]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002686:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800268a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800268e:	fa92 f2a2 	rbit	r2, r2
 8002692:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002696:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800269a:	fab2 f282 	clz	r2, r2
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	f042 0220 	orr.w	r2, r2, #32
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	f002 021f 	and.w	r2, r2, #31
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f202 	lsl.w	r2, r1, r2
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0ab      	beq.n	800260e <HAL_RCC_OscConfig+0x212>
 80026b6:	e05e      	b.n	8002776 <HAL_RCC_OscConfig+0x37a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fd fdb4 	bl	8000224 <HAL_GetTick>
 80026bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c0:	e00a      	b.n	80026d8 <HAL_RCC_OscConfig+0x2dc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c2:	f7fd fdaf 	bl	8000224 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d902      	bls.n	80026d8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	f000 be96 	b.w	8003404 <HAL_RCC_OscConfig+0x1008>
 80026d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026dc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80026ec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f0:	fab3 f383 	clz	r3, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b01      	cmp	r3, #1
 8002702:	d102      	bne.n	800270a <HAL_RCC_OscConfig+0x30e>
 8002704:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	e015      	b.n	8002736 <HAL_RCC_OscConfig+0x33a>
 800270a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800270e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800271e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002722:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002726:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <HAL_RCC_OscConfig+0x374>)
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800273a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800273e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002742:	fa92 f2a2 	rbit	r2, r2
 8002746:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800274a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800274e:	fab2 f282 	clz	r2, r2
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	f042 0220 	orr.w	r2, r2, #32
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	f002 021f 	and.w	r2, r2, #31
 800275e:	2101      	movs	r1, #1
 8002760:	fa01 f202 	lsl.w	r2, r1, r2
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1ab      	bne.n	80026c2 <HAL_RCC_OscConfig+0x2c6>
 800276a:	e004      	b.n	8002776 <HAL_RCC_OscConfig+0x37a>
 800276c:	08009168 	.word	0x08009168
 8002770:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 818c 	beq.w	8002a9e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d009      	beq.n	80027a4 <HAL_RCC_OscConfig+0x3a8>
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d004      	beq.n	80027a4 <HAL_RCC_OscConfig+0x3a8>
 800279a:	f240 1189 	movw	r1, #393	; 0x189
 800279e:	48a7      	ldr	r0, [pc, #668]	; (8002a3c <HAL_RCC_OscConfig+0x640>)
 80027a0:	f006 fa49 	bl	8008c36 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	2b1f      	cmp	r3, #31
 80027ac:	d904      	bls.n	80027b8 <HAL_RCC_OscConfig+0x3bc>
 80027ae:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80027b2:	48a2      	ldr	r0, [pc, #648]	; (8002a3c <HAL_RCC_OscConfig+0x640>)
 80027b4:	f006 fa3f 	bl	8008c36 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027b8:	4ba1      	ldr	r3, [pc, #644]	; (8002a40 <HAL_RCC_OscConfig+0x644>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00b      	beq.n	80027dc <HAL_RCC_OscConfig+0x3e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027c4:	4b9e      	ldr	r3, [pc, #632]	; (8002a40 <HAL_RCC_OscConfig+0x644>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d16c      	bne.n	80028aa <HAL_RCC_OscConfig+0x4ae>
 80027d0:	4b9b      	ldr	r3, [pc, #620]	; (8002a40 <HAL_RCC_OscConfig+0x644>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d166      	bne.n	80028aa <HAL_RCC_OscConfig+0x4ae>
 80027dc:	2302      	movs	r3, #2
 80027de:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80027ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_RCC_OscConfig+0x410>
 8002806:	4b8e      	ldr	r3, [pc, #568]	; (8002a40 <HAL_RCC_OscConfig+0x644>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	e013      	b.n	8002834 <HAL_RCC_OscConfig+0x438>
 800280c:	2302      	movs	r3, #2
 800280e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800281e:	2302      	movs	r3, #2
 8002820:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002824:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002830:	4b83      	ldr	r3, [pc, #524]	; (8002a40 <HAL_RCC_OscConfig+0x644>)
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	2202      	movs	r2, #2
 8002836:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800283a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800283e:	fa92 f2a2 	rbit	r2, r2
 8002842:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002846:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800284a:	fab2 f282 	clz	r2, r2
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	f042 0220 	orr.w	r2, r2, #32
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	f002 021f 	and.w	r2, r2, #31
 800285a:	2101      	movs	r1, #1
 800285c:	fa01 f202 	lsl.w	r2, r1, r2
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <HAL_RCC_OscConfig+0x47a>
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d002      	beq.n	8002876 <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	f000 bdc7 	b.w	8003404 <HAL_RCC_OscConfig+0x1008>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002876:	4b72      	ldr	r3, [pc, #456]	; (8002a40 <HAL_RCC_OscConfig+0x644>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	21f8      	movs	r1, #248	; 0xf8
 8002886:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800288e:	fa91 f1a1 	rbit	r1, r1
 8002892:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002896:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800289a:	fab1 f181 	clz	r1, r1
 800289e:	b2c9      	uxtb	r1, r1
 80028a0:	408b      	lsls	r3, r1
 80028a2:	4967      	ldr	r1, [pc, #412]	; (8002a40 <HAL_RCC_OscConfig+0x644>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a8:	e0f9      	b.n	8002a9e <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8085 	beq.w	80029c0 <HAL_RCC_OscConfig+0x5c4>
 80028b6:	2301      	movs	r3, #1
 80028b8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80028c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	461a      	mov	r2, r3
 80028de:	2301      	movs	r3, #1
 80028e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fd fc9f 	bl	8000224 <HAL_GetTick>
 80028e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_OscConfig+0x506>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ec:	f7fd fc9a 	bl	8000224 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d902      	bls.n	8002902 <HAL_RCC_OscConfig+0x506>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	f000 bd81 	b.w	8003404 <HAL_RCC_OscConfig+0x1008>
 8002902:	2302      	movs	r3, #2
 8002904:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002914:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d102      	bne.n	8002932 <HAL_RCC_OscConfig+0x536>
 800292c:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <HAL_RCC_OscConfig+0x644>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	e013      	b.n	800295a <HAL_RCC_OscConfig+0x55e>
 8002932:	2302      	movs	r3, #2
 8002934:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002944:	2302      	movs	r3, #2
 8002946:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800294a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002956:	4b3a      	ldr	r3, [pc, #232]	; (8002a40 <HAL_RCC_OscConfig+0x644>)
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	2202      	movs	r2, #2
 800295c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002960:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002964:	fa92 f2a2 	rbit	r2, r2
 8002968:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800296c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002970:	fab2 f282 	clz	r2, r2
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	f042 0220 	orr.w	r2, r2, #32
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	f002 021f 	and.w	r2, r2, #31
 8002980:	2101      	movs	r1, #1
 8002982:	fa01 f202 	lsl.w	r2, r1, r2
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0af      	beq.n	80028ec <HAL_RCC_OscConfig+0x4f0>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298c:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <HAL_RCC_OscConfig+0x644>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	21f8      	movs	r1, #248	; 0xf8
 800299c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80029a4:	fa91 f1a1 	rbit	r1, r1
 80029a8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80029ac:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80029b0:	fab1 f181 	clz	r1, r1
 80029b4:	b2c9      	uxtb	r1, r1
 80029b6:	408b      	lsls	r3, r1
 80029b8:	4921      	ldr	r1, [pc, #132]	; (8002a40 <HAL_RCC_OscConfig+0x644>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]
 80029be:	e06e      	b.n	8002a9e <HAL_RCC_OscConfig+0x6a2>
 80029c0:	2301      	movs	r3, #1
 80029c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80029d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	461a      	mov	r2, r3
 80029e8:	2300      	movs	r3, #0
 80029ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fd fc1a 	bl	8000224 <HAL_GetTick>
 80029f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x610>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f6:	f7fd fc15 	bl	8000224 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d902      	bls.n	8002a0c <HAL_RCC_OscConfig+0x610>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	f000 bcfc 	b.w	8003404 <HAL_RCC_OscConfig+0x1008>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d106      	bne.n	8002a44 <HAL_RCC_OscConfig+0x648>
 8002a36:	4b02      	ldr	r3, [pc, #8]	; (8002a40 <HAL_RCC_OscConfig+0x644>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	e017      	b.n	8002a6c <HAL_RCC_OscConfig+0x670>
 8002a3c:	08009168 	.word	0x08009168
 8002a40:	40021000 	.word	0x40021000
 8002a44:	2302      	movs	r3, #2
 8002a46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002a56:	2302      	movs	r3, #2
 8002a58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002a5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002a68:	4bbf      	ldr	r3, [pc, #764]	; (8002d68 <HAL_RCC_OscConfig+0x96c>)
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002a72:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002a76:	fa92 f2a2 	rbit	r2, r2
 8002a7a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002a7e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a82:	fab2 f282 	clz	r2, r2
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	f042 0220 	orr.w	r2, r2, #32
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	f002 021f 	and.w	r2, r2, #31
 8002a92:	2101      	movs	r1, #1
 8002a94:	fa01 f202 	lsl.w	r2, r1, r2
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1ab      	bne.n	80029f6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80e6 	beq.w	8002c7a <HAL_RCC_OscConfig+0x87e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d009      	beq.n	8002acc <HAL_RCC_OscConfig+0x6d0>
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d004      	beq.n	8002acc <HAL_RCC_OscConfig+0x6d0>
 8002ac2:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8002ac6:	48a9      	ldr	r0, [pc, #676]	; (8002d6c <HAL_RCC_OscConfig+0x970>)
 8002ac8:	f006 f8b5 	bl	8008c36 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002acc:	1d3b      	adds	r3, r7, #4
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d065      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x7a6>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	4b9e      	ldr	r3, [pc, #632]	; (8002d70 <HAL_RCC_OscConfig+0x974>)
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	461a      	mov	r2, r3
 8002afc:	2301      	movs	r3, #1
 8002afe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7fd fb90 	bl	8000224 <HAL_GetTick>
 8002b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_OscConfig+0x724>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0a:	f7fd fb8b 	bl	8000224 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d902      	bls.n	8002b20 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	f000 bc72 	b.w	8003404 <HAL_RCC_OscConfig+0x1008>
 8002b20:	2302      	movs	r3, #2
 8002b22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002b32:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b36:	2202      	movs	r2, #2
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	fa93 f2a3 	rbit	r2, r3
 8002b44:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002b4e:	2202      	movs	r2, #2
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	fa93 f2a3 	rbit	r2, r3
 8002b5c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002b60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	4b81      	ldr	r3, [pc, #516]	; (8002d68 <HAL_RCC_OscConfig+0x96c>)
 8002b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b66:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	6019      	str	r1, [r3, #0]
 8002b6e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	fa93 f1a3 	rbit	r1, r3
 8002b78:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b7c:	6019      	str	r1, [r3, #0]
  return result;
 8002b7e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f003 031f 	and.w	r3, r3, #31
 8002b94:	2101      	movs	r1, #1
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0b4      	beq.n	8002b0a <HAL_RCC_OscConfig+0x70e>
 8002ba0:	e06b      	b.n	8002c7a <HAL_RCC_OscConfig+0x87e>
 8002ba2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	fa93 f2a3 	rbit	r2, r3
 8002bb4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002bb8:	601a      	str	r2, [r3, #0]
  return result;
 8002bba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002bbe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc0:	fab3 f383 	clz	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b69      	ldr	r3, [pc, #420]	; (8002d70 <HAL_RCC_OscConfig+0x974>)
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd4:	f7fd fb26 	bl	8000224 <HAL_GetTick>
 8002bd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bde:	f7fd fb21 	bl	8000224 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d902      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x7f8>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	f000 bc08 	b.w	8003404 <HAL_RCC_OscConfig+0x1008>
 8002bf4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	fa93 f2a3 	rbit	r2, r3
 8002c06:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c10:	2202      	movs	r2, #2
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	fa93 f2a3 	rbit	r2, r3
 8002c1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002c28:	2202      	movs	r2, #2
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	fa93 f2a3 	rbit	r2, r3
 8002c36:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c3a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c3c:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <HAL_RCC_OscConfig+0x96c>)
 8002c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c40:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c44:	2102      	movs	r1, #2
 8002c46:	6019      	str	r1, [r3, #0]
 8002c48:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	fa93 f1a3 	rbit	r1, r3
 8002c52:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c56:	6019      	str	r1, [r3, #0]
  return result;
 8002c58:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	2101      	movs	r1, #1
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1b1      	bne.n	8002bde <HAL_RCC_OscConfig+0x7e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8170 	beq.w	8002f6a <HAL_RCC_OscConfig+0xb6e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002c90:	1d3b      	adds	r3, r7, #4
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00e      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x8bc>
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d009      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x8bc>
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d004      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x8bc>
 8002cae:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8002cb2:	482e      	ldr	r0, [pc, #184]	; (8002d6c <HAL_RCC_OscConfig+0x970>)
 8002cb4:	f005 ffbf 	bl	8008c36 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <HAL_RCC_OscConfig+0x96c>)
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d112      	bne.n	8002cea <HAL_RCC_OscConfig+0x8ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc4:	4b28      	ldr	r3, [pc, #160]	; (8002d68 <HAL_RCC_OscConfig+0x96c>)
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	4a27      	ldr	r2, [pc, #156]	; (8002d68 <HAL_RCC_OscConfig+0x96c>)
 8002cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cce:	61d3      	str	r3, [r2, #28]
 8002cd0:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <HAL_RCC_OscConfig+0x96c>)
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002cd8:	f107 0308 	add.w	r3, r7, #8
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	f107 0308 	add.w	r3, r7, #8
 8002ce2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cea:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <HAL_RCC_OscConfig+0x978>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11a      	bne.n	8002d2c <HAL_RCC_OscConfig+0x930>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf6:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <HAL_RCC_OscConfig+0x978>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1e      	ldr	r2, [pc, #120]	; (8002d74 <HAL_RCC_OscConfig+0x978>)
 8002cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7fd fa8f 	bl	8000224 <HAL_GetTick>
 8002d06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0a:	e009      	b.n	8002d20 <HAL_RCC_OscConfig+0x924>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0c:	f7fd fa8a 	bl	8000224 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b64      	cmp	r3, #100	; 0x64
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x924>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e371      	b.n	8003404 <HAL_RCC_OscConfig+0x1008>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d20:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <HAL_RCC_OscConfig+0x978>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0ef      	beq.n	8002d0c <HAL_RCC_OscConfig+0x910>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d106      	bne.n	8002d44 <HAL_RCC_OscConfig+0x948>
 8002d36:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <HAL_RCC_OscConfig+0x96c>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4a0b      	ldr	r2, [pc, #44]	; (8002d68 <HAL_RCC_OscConfig+0x96c>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6213      	str	r3, [r2, #32]
 8002d42:	e037      	b.n	8002db4 <HAL_RCC_OscConfig+0x9b8>
 8002d44:	1d3b      	adds	r3, r7, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d114      	bne.n	8002d78 <HAL_RCC_OscConfig+0x97c>
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_RCC_OscConfig+0x96c>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <HAL_RCC_OscConfig+0x96c>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	6213      	str	r3, [r2, #32]
 8002d5a:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <HAL_RCC_OscConfig+0x96c>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a02      	ldr	r2, [pc, #8]	; (8002d68 <HAL_RCC_OscConfig+0x96c>)
 8002d60:	f023 0304 	bic.w	r3, r3, #4
 8002d64:	6213      	str	r3, [r2, #32]
 8002d66:	e025      	b.n	8002db4 <HAL_RCC_OscConfig+0x9b8>
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	08009168 	.word	0x08009168
 8002d70:	10908120 	.word	0x10908120
 8002d74:	40007000 	.word	0x40007000
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b05      	cmp	r3, #5
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x9a0>
 8002d82:	4b5e      	ldr	r3, [pc, #376]	; (8002efc <HAL_RCC_OscConfig+0xb00>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4a5d      	ldr	r2, [pc, #372]	; (8002efc <HAL_RCC_OscConfig+0xb00>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	6213      	str	r3, [r2, #32]
 8002d8e:	4b5b      	ldr	r3, [pc, #364]	; (8002efc <HAL_RCC_OscConfig+0xb00>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a5a      	ldr	r2, [pc, #360]	; (8002efc <HAL_RCC_OscConfig+0xb00>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6213      	str	r3, [r2, #32]
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0x9b8>
 8002d9c:	4b57      	ldr	r3, [pc, #348]	; (8002efc <HAL_RCC_OscConfig+0xb00>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4a56      	ldr	r2, [pc, #344]	; (8002efc <HAL_RCC_OscConfig+0xb00>)
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	6213      	str	r3, [r2, #32]
 8002da8:	4b54      	ldr	r3, [pc, #336]	; (8002efc <HAL_RCC_OscConfig+0xb00>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a53      	ldr	r2, [pc, #332]	; (8002efc <HAL_RCC_OscConfig+0xb00>)
 8002dae:	f023 0304 	bic.w	r3, r3, #4
 8002db2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d064      	beq.n	8002e88 <HAL_RCC_OscConfig+0xa8c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbe:	f7fd fa31 	bl	8000224 <HAL_GetTick>
 8002dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc6:	e00b      	b.n	8002de0 <HAL_RCC_OscConfig+0x9e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fd fa2c 	bl	8000224 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x9e4>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e311      	b.n	8003404 <HAL_RCC_OscConfig+0x1008>
 8002de0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002de4:	2202      	movs	r2, #2
 8002de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	fa93 f2a3 	rbit	r2, r3
 8002df2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	fa93 f2a3 	rbit	r2, r3
 8002e0a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e0e:	601a      	str	r2, [r3, #0]
  return result;
 8002e10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e14:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d102      	bne.n	8002e30 <HAL_RCC_OscConfig+0xa34>
 8002e2a:	4b34      	ldr	r3, [pc, #208]	; (8002efc <HAL_RCC_OscConfig+0xb00>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	e00d      	b.n	8002e4c <HAL_RCC_OscConfig+0xa50>
 8002e30:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e34:	2202      	movs	r2, #2
 8002e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	fa93 f2a3 	rbit	r2, r3
 8002e42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	4b2c      	ldr	r3, [pc, #176]	; (8002efc <HAL_RCC_OscConfig+0xb00>)
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e50:	2102      	movs	r1, #2
 8002e52:	6011      	str	r1, [r2, #0]
 8002e54:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	fa92 f1a2 	rbit	r1, r2
 8002e5e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002e62:	6011      	str	r1, [r2, #0]
  return result;
 8002e64:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	fab2 f282 	clz	r2, r2
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	f002 021f 	and.w	r2, r2, #31
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0a0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x9cc>
 8002e86:	e066      	b.n	8002f56 <HAL_RCC_OscConfig+0xb5a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e88:	f7fd f9cc 	bl	8000224 <HAL_GetTick>
 8002e8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e90:	e00b      	b.n	8002eaa <HAL_RCC_OscConfig+0xaae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e92:	f7fd f9c7 	bl	8000224 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0xaae>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e2ac      	b.n	8003404 <HAL_RCC_OscConfig+0x1008>
 8002eaa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002eae:	2202      	movs	r2, #2
 8002eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	fa93 f2a3 	rbit	r2, r3
 8002ebc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	fa93 f2a3 	rbit	r2, r3
 8002ed4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ed8:	601a      	str	r2, [r3, #0]
  return result;
 8002eda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ede:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee0:	fab3 f383 	clz	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	f043 0302 	orr.w	r3, r3, #2
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d105      	bne.n	8002f00 <HAL_RCC_OscConfig+0xb04>
 8002ef4:	4b01      	ldr	r3, [pc, #4]	; (8002efc <HAL_RCC_OscConfig+0xb00>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	e010      	b.n	8002f1c <HAL_RCC_OscConfig+0xb20>
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f04:	2202      	movs	r2, #2
 8002f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	fa93 f2a3 	rbit	r2, r3
 8002f12:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	4bb6      	ldr	r3, [pc, #728]	; (80031f4 <HAL_RCC_OscConfig+0xdf8>)
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f20:	2102      	movs	r1, #2
 8002f22:	6011      	str	r1, [r2, #0]
 8002f24:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f28:	6812      	ldr	r2, [r2, #0]
 8002f2a:	fa92 f1a2 	rbit	r1, r2
 8002f2e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002f32:	6011      	str	r1, [r2, #0]
  return result;
 8002f34:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	fab2 f282 	clz	r2, r2
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	f002 021f 	and.w	r2, r2, #31
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d19d      	bne.n	8002e92 <HAL_RCC_OscConfig+0xa96>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f56:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d105      	bne.n	8002f6a <HAL_RCC_OscConfig+0xb6e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4ba5      	ldr	r3, [pc, #660]	; (80031f4 <HAL_RCC_OscConfig+0xdf8>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4aa4      	ldr	r2, [pc, #656]	; (80031f4 <HAL_RCC_OscConfig+0xdf8>)
 8002f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f68:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00e      	beq.n	8002f92 <HAL_RCC_OscConfig+0xb96>
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d009      	beq.n	8002f92 <HAL_RCC_OscConfig+0xb96>
 8002f7e:	1d3b      	adds	r3, r7, #4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d004      	beq.n	8002f92 <HAL_RCC_OscConfig+0xb96>
 8002f88:	f240 213a 	movw	r1, #570	; 0x23a
 8002f8c:	489a      	ldr	r0, [pc, #616]	; (80031f8 <HAL_RCC_OscConfig+0xdfc>)
 8002f8e:	f005 fe52 	bl	8008c36 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8232 	beq.w	8003402 <HAL_RCC_OscConfig+0x1006>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f9e:	4b95      	ldr	r3, [pc, #596]	; (80031f4 <HAL_RCC_OscConfig+0xdf8>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	f000 820c 	beq.w	80033c4 <HAL_RCC_OscConfig+0xfc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fac:	1d3b      	adds	r3, r7, #4
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	f040 8184 	bne.w	80032c0 <HAL_RCC_OscConfig+0xec4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002fb8:	1d3b      	adds	r3, r7, #4
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xbdc>
 8002fc2:	1d3b      	adds	r3, r7, #4
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fcc:	d004      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xbdc>
 8002fce:	f240 2143 	movw	r1, #579	; 0x243
 8002fd2:	4889      	ldr	r0, [pc, #548]	; (80031f8 <HAL_RCC_OscConfig+0xdfc>)
 8002fd4:	f005 fe2f 	bl	8008c36 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8002fd8:	1d3b      	adds	r3, r7, #4
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d058      	beq.n	8003094 <HAL_RCC_OscConfig+0xc98>
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fec:	d052      	beq.n	8003094 <HAL_RCC_OscConfig+0xc98>
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ff8:	d04c      	beq.n	8003094 <HAL_RCC_OscConfig+0xc98>
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003004:	d046      	beq.n	8003094 <HAL_RCC_OscConfig+0xc98>
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003010:	d040      	beq.n	8003094 <HAL_RCC_OscConfig+0xc98>
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800301c:	d03a      	beq.n	8003094 <HAL_RCC_OscConfig+0xc98>
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003028:	d034      	beq.n	8003094 <HAL_RCC_OscConfig+0xc98>
 800302a:	1d3b      	adds	r3, r7, #4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003034:	d02e      	beq.n	8003094 <HAL_RCC_OscConfig+0xc98>
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003040:	d028      	beq.n	8003094 <HAL_RCC_OscConfig+0xc98>
 8003042:	1d3b      	adds	r3, r7, #4
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800304c:	d022      	beq.n	8003094 <HAL_RCC_OscConfig+0xc98>
 800304e:	1d3b      	adds	r3, r7, #4
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003058:	d01c      	beq.n	8003094 <HAL_RCC_OscConfig+0xc98>
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003064:	d016      	beq.n	8003094 <HAL_RCC_OscConfig+0xc98>
 8003066:	1d3b      	adds	r3, r7, #4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003070:	d010      	beq.n	8003094 <HAL_RCC_OscConfig+0xc98>
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800307c:	d00a      	beq.n	8003094 <HAL_RCC_OscConfig+0xc98>
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003088:	d004      	beq.n	8003094 <HAL_RCC_OscConfig+0xc98>
 800308a:	f44f 7111 	mov.w	r1, #580	; 0x244
 800308e:	485a      	ldr	r0, [pc, #360]	; (80031f8 <HAL_RCC_OscConfig+0xdfc>)
 8003090:	f005 fdd1 	bl	8008c36 <assert_failed>
 8003094:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003098:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800309c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	fa93 f2a3 	rbit	r2, r3
 80030a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030ac:	601a      	str	r2, [r3, #0]
  return result;
 80030ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030b2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	461a      	mov	r2, r3
 80030c6:	2300      	movs	r3, #0
 80030c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7fd f8ab 	bl	8000224 <HAL_GetTick>
 80030ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d2:	e009      	b.n	80030e8 <HAL_RCC_OscConfig+0xcec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d4:	f7fd f8a6 	bl	8000224 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0xcec>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e18d      	b.n	8003404 <HAL_RCC_OscConfig+0x1008>
 80030e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80030ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	fa93 f2a3 	rbit	r2, r3
 80030fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003100:	601a      	str	r2, [r3, #0]
  return result;
 8003102:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003106:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d102      	bne.n	8003122 <HAL_RCC_OscConfig+0xd26>
 800311c:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <HAL_RCC_OscConfig+0xdf8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	e01b      	b.n	800315a <HAL_RCC_OscConfig+0xd5e>
 8003122:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003126:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800312a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	fa93 f2a3 	rbit	r2, r3
 8003136:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003140:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	fa93 f2a3 	rbit	r2, r3
 8003150:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_RCC_OscConfig+0xdf8>)
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800315e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003162:	6011      	str	r1, [r2, #0]
 8003164:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	fa92 f1a2 	rbit	r1, r2
 800316e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003172:	6011      	str	r1, [r2, #0]
  return result;
 8003174:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	fab2 f282 	clz	r2, r2
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	f042 0220 	orr.w	r2, r2, #32
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	f002 021f 	and.w	r2, r2, #31
 800318a:	2101      	movs	r1, #1
 800318c:	fa01 f202 	lsl.w	r2, r1, r2
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d19e      	bne.n	80030d4 <HAL_RCC_OscConfig+0xcd8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003196:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <HAL_RCC_OscConfig+0xdf8>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800319e:	1d3b      	adds	r3, r7, #4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031a4:	1d3b      	adds	r3, r7, #4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	430b      	orrs	r3, r1
 80031ac:	4911      	ldr	r1, [pc, #68]	; (80031f4 <HAL_RCC_OscConfig+0xdf8>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	604b      	str	r3, [r1, #4]
 80031b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	fa93 f2a3 	rbit	r2, r3
 80031c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031ca:	601a      	str	r2, [r3, #0]
  return result;
 80031cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031d0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	461a      	mov	r2, r3
 80031e4:	2301      	movs	r3, #1
 80031e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fd f81c 	bl	8000224 <HAL_GetTick>
 80031ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f0:	e00e      	b.n	8003210 <HAL_RCC_OscConfig+0xe14>
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000
 80031f8:	08009168 	.word	0x08009168
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fd f812 	bl	8000224 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0xe14>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e0f9      	b.n	8003404 <HAL_RCC_OscConfig+0x1008>
 8003210:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003214:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003218:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	fa93 f2a3 	rbit	r2, r3
 8003224:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003228:	601a      	str	r2, [r3, #0]
  return result;
 800322a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800322e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d102      	bne.n	800324a <HAL_RCC_OscConfig+0xe4e>
 8003244:	4b72      	ldr	r3, [pc, #456]	; (8003410 <HAL_RCC_OscConfig+0x1014>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	e01b      	b.n	8003282 <HAL_RCC_OscConfig+0xe86>
 800324a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800324e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	fa93 f2a3 	rbit	r2, r3
 800325e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003268:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	fa93 f2a3 	rbit	r2, r3
 8003278:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	4b64      	ldr	r3, [pc, #400]	; (8003410 <HAL_RCC_OscConfig+0x1014>)
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003286:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800328a:	6011      	str	r1, [r2, #0]
 800328c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	fa92 f1a2 	rbit	r1, r2
 8003296:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800329a:	6011      	str	r1, [r2, #0]
  return result;
 800329c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	fab2 f282 	clz	r2, r2
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	f042 0220 	orr.w	r2, r2, #32
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	f002 021f 	and.w	r2, r2, #31
 80032b2:	2101      	movs	r1, #1
 80032b4:	fa01 f202 	lsl.w	r2, r1, r2
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d09e      	beq.n	80031fc <HAL_RCC_OscConfig+0xe00>
 80032be:	e0a0      	b.n	8003402 <HAL_RCC_OscConfig+0x1006>
 80032c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	fa93 f2a3 	rbit	r2, r3
 80032d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032d8:	601a      	str	r2, [r3, #0]
  return result;
 80032da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032de:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e0:	fab3 f383 	clz	r3, r3
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	461a      	mov	r2, r3
 80032f2:	2300      	movs	r3, #0
 80032f4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f6:	f7fc ff95 	bl	8000224 <HAL_GetTick>
 80032fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032fe:	e009      	b.n	8003314 <HAL_RCC_OscConfig+0xf18>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003300:	f7fc ff90 	bl	8000224 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0xf18>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e077      	b.n	8003404 <HAL_RCC_OscConfig+0x1008>
 8003314:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003318:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800331c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	fa93 f2a3 	rbit	r2, r3
 8003328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800332c:	601a      	str	r2, [r3, #0]
  return result;
 800332e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003332:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003334:	fab3 f383 	clz	r3, r3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	b2db      	uxtb	r3, r3
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d102      	bne.n	800334e <HAL_RCC_OscConfig+0xf52>
 8003348:	4b31      	ldr	r3, [pc, #196]	; (8003410 <HAL_RCC_OscConfig+0x1014>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	e01b      	b.n	8003386 <HAL_RCC_OscConfig+0xf8a>
 800334e:	f107 0320 	add.w	r3, r7, #32
 8003352:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	f107 0320 	add.w	r3, r7, #32
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	fa93 f2a3 	rbit	r2, r3
 8003362:	f107 031c 	add.w	r3, r7, #28
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	f107 0318 	add.w	r3, r7, #24
 800336c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	f107 0318 	add.w	r3, r7, #24
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	fa93 f2a3 	rbit	r2, r3
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	4b23      	ldr	r3, [pc, #140]	; (8003410 <HAL_RCC_OscConfig+0x1014>)
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	f107 0210 	add.w	r2, r7, #16
 800338a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800338e:	6011      	str	r1, [r2, #0]
 8003390:	f107 0210 	add.w	r2, r7, #16
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	fa92 f1a2 	rbit	r1, r2
 800339a:	f107 020c 	add.w	r2, r7, #12
 800339e:	6011      	str	r1, [r2, #0]
  return result;
 80033a0:	f107 020c 	add.w	r2, r7, #12
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	fab2 f282 	clz	r2, r2
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	f042 0220 	orr.w	r2, r2, #32
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	f002 021f 	and.w	r2, r2, #31
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f202 	lsl.w	r2, r1, r2
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d19e      	bne.n	8003300 <HAL_RCC_OscConfig+0xf04>
 80033c2:	e01e      	b.n	8003402 <HAL_RCC_OscConfig+0x1006>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c4:	1d3b      	adds	r3, r7, #4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_OscConfig+0xfd6>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e018      	b.n	8003404 <HAL_RCC_OscConfig+0x1008>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d2:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <HAL_RCC_OscConfig+0x1014>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033de:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d108      	bne.n	80033fe <HAL_RCC_OscConfig+0x1002>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033f0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d001      	beq.n	8003402 <HAL_RCC_OscConfig+0x1006>
#endif
        {
          return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <HAL_RCC_OscConfig+0x1008>
        }
      }
    }
  }

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000

08003414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b09e      	sub	sp, #120	; 0x78
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e203      	b.n	8003834 <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d116      	bne.n	8003466 <HAL_RCC_ClockConfig+0x52>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d110      	bne.n	8003466 <HAL_RCC_ClockConfig+0x52>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <HAL_RCC_ClockConfig+0x52>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <HAL_RCC_ClockConfig+0x52>
 800345c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8003460:	48a5      	ldr	r0, [pc, #660]	; (80036f8 <HAL_RCC_ClockConfig+0x2e4>)
 8003462:	f005 fbe8 	bl	8008c36 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCC_ClockConfig+0x6e>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d007      	beq.n	8003482 <HAL_RCC_ClockConfig+0x6e>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d004      	beq.n	8003482 <HAL_RCC_ClockConfig+0x6e>
 8003478:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 800347c:	489e      	ldr	r0, [pc, #632]	; (80036f8 <HAL_RCC_ClockConfig+0x2e4>)
 800347e:	f005 fbda 	bl	8008c36 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003482:	4b9e      	ldr	r3, [pc, #632]	; (80036fc <HAL_RCC_ClockConfig+0x2e8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d910      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003490:	4b9a      	ldr	r3, [pc, #616]	; (80036fc <HAL_RCC_ClockConfig+0x2e8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 0207 	bic.w	r2, r3, #7
 8003498:	4998      	ldr	r1, [pc, #608]	; (80036fc <HAL_RCC_ClockConfig+0x2e8>)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	4313      	orrs	r3, r2
 800349e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a0:	4b96      	ldr	r3, [pc, #600]	; (80036fc <HAL_RCC_ClockConfig+0x2e8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d001      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e1c0      	b.n	8003834 <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d031      	beq.n	8003522 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d024      	beq.n	8003510 <HAL_RCC_ClockConfig+0xfc>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d020      	beq.n	8003510 <HAL_RCC_ClockConfig+0xfc>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b90      	cmp	r3, #144	; 0x90
 80034d4:	d01c      	beq.n	8003510 <HAL_RCC_ClockConfig+0xfc>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2ba0      	cmp	r3, #160	; 0xa0
 80034dc:	d018      	beq.n	8003510 <HAL_RCC_ClockConfig+0xfc>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2bb0      	cmp	r3, #176	; 0xb0
 80034e4:	d014      	beq.n	8003510 <HAL_RCC_ClockConfig+0xfc>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2bc0      	cmp	r3, #192	; 0xc0
 80034ec:	d010      	beq.n	8003510 <HAL_RCC_ClockConfig+0xfc>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2bd0      	cmp	r3, #208	; 0xd0
 80034f4:	d00c      	beq.n	8003510 <HAL_RCC_ClockConfig+0xfc>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2be0      	cmp	r3, #224	; 0xe0
 80034fc:	d008      	beq.n	8003510 <HAL_RCC_ClockConfig+0xfc>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2bf0      	cmp	r3, #240	; 0xf0
 8003504:	d004      	beq.n	8003510 <HAL_RCC_ClockConfig+0xfc>
 8003506:	f240 21db 	movw	r1, #731	; 0x2db
 800350a:	487b      	ldr	r0, [pc, #492]	; (80036f8 <HAL_RCC_ClockConfig+0x2e4>)
 800350c:	f005 fb93 	bl	8008c36 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003510:	4b7b      	ldr	r3, [pc, #492]	; (8003700 <HAL_RCC_ClockConfig+0x2ec>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4978      	ldr	r1, [pc, #480]	; (8003700 <HAL_RCC_ClockConfig+0x2ec>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80f3 	beq.w	8003716 <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00c      	beq.n	8003552 <HAL_RCC_ClockConfig+0x13e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d008      	beq.n	8003552 <HAL_RCC_ClockConfig+0x13e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d004      	beq.n	8003552 <HAL_RCC_ClockConfig+0x13e>
 8003548:	f240 21e2 	movw	r1, #738	; 0x2e2
 800354c:	486a      	ldr	r0, [pc, #424]	; (80036f8 <HAL_RCC_ClockConfig+0x2e4>)
 800354e:	f005 fb72 	bl	8008c36 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d13c      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x1c0>
 800355a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800355e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	d102      	bne.n	8003584 <HAL_RCC_ClockConfig+0x170>
 800357e:	4b60      	ldr	r3, [pc, #384]	; (8003700 <HAL_RCC_ClockConfig+0x2ec>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	e00f      	b.n	80035a4 <HAL_RCC_ClockConfig+0x190>
 8003584:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003588:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	667b      	str	r3, [r7, #100]	; 0x64
 8003592:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003596:	663b      	str	r3, [r7, #96]	; 0x60
 8003598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035a0:	4b57      	ldr	r3, [pc, #348]	; (8003700 <HAL_RCC_ClockConfig+0x2ec>)
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80035aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035ac:	fa92 f2a2 	rbit	r2, r2
 80035b0:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80035b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035b4:	fab2 f282 	clz	r2, r2
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	f042 0220 	orr.w	r2, r2, #32
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	f002 021f 	and.w	r2, r2, #31
 80035c4:	2101      	movs	r1, #1
 80035c6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d17b      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e12f      	b.n	8003834 <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d13c      	bne.n	8003656 <HAL_RCC_ClockConfig+0x242>
 80035dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ec:	fab3 f383 	clz	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d102      	bne.n	8003606 <HAL_RCC_ClockConfig+0x1f2>
 8003600:	4b3f      	ldr	r3, [pc, #252]	; (8003700 <HAL_RCC_ClockConfig+0x2ec>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	e00f      	b.n	8003626 <HAL_RCC_ClockConfig+0x212>
 8003606:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800360a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	647b      	str	r3, [r7, #68]	; 0x44
 8003614:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003618:	643b      	str	r3, [r7, #64]	; 0x40
 800361a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003622:	4b37      	ldr	r3, [pc, #220]	; (8003700 <HAL_RCC_ClockConfig+0x2ec>)
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800362a:	63ba      	str	r2, [r7, #56]	; 0x38
 800362c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800362e:	fa92 f2a2 	rbit	r2, r2
 8003632:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003636:	fab2 f282 	clz	r2, r2
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	f042 0220 	orr.w	r2, r2, #32
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	f002 021f 	and.w	r2, r2, #31
 8003646:	2101      	movs	r1, #1
 8003648:	fa01 f202 	lsl.w	r2, r1, r2
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d13a      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0ee      	b.n	8003834 <HAL_RCC_ClockConfig+0x420>
 8003656:	2302      	movs	r3, #2
 8003658:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	fab3 f383 	clz	r3, r3
 8003668:	b2db      	uxtb	r3, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d102      	bne.n	800367e <HAL_RCC_ClockConfig+0x26a>
 8003678:	4b21      	ldr	r3, [pc, #132]	; (8003700 <HAL_RCC_ClockConfig+0x2ec>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	e00d      	b.n	800369a <HAL_RCC_ClockConfig+0x286>
 800367e:	2302      	movs	r3, #2
 8003680:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
 800368a:	2302      	movs	r3, #2
 800368c:	623b      	str	r3, [r7, #32]
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	fa93 f3a3 	rbit	r3, r3
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <HAL_RCC_ClockConfig+0x2ec>)
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	2202      	movs	r2, #2
 800369c:	61ba      	str	r2, [r7, #24]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	fa92 f2a2 	rbit	r2, r2
 80036a4:	617a      	str	r2, [r7, #20]
  return result;
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	fab2 f282 	clz	r2, r2
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	f042 0220 	orr.w	r2, r2, #32
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	f002 021f 	and.w	r2, r2, #31
 80036b8:	2101      	movs	r1, #1
 80036ba:	fa01 f202 	lsl.w	r2, r1, r2
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0b5      	b.n	8003834 <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <HAL_RCC_ClockConfig+0x2ec>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 0203 	bic.w	r2, r3, #3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	490a      	ldr	r1, [pc, #40]	; (8003700 <HAL_RCC_ClockConfig+0x2ec>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036da:	f7fc fda3 	bl	8000224 <HAL_GetTick>
 80036de:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e0:	e010      	b.n	8003704 <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e2:	f7fc fd9f 	bl	8000224 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d907      	bls.n	8003704 <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e09d      	b.n	8003834 <HAL_RCC_ClockConfig+0x420>
 80036f8:	08009168 	.word	0x08009168
 80036fc:	40022000 	.word	0x40022000
 8003700:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003704:	4b4d      	ldr	r3, [pc, #308]	; (800383c <HAL_RCC_ClockConfig+0x428>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 020c 	and.w	r2, r3, #12
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	429a      	cmp	r2, r3
 8003714:	d1e5      	bne.n	80036e2 <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003716:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_RCC_ClockConfig+0x42c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d210      	bcs.n	8003746 <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003724:	4b46      	ldr	r3, [pc, #280]	; (8003840 <HAL_RCC_ClockConfig+0x42c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f023 0207 	bic.w	r2, r3, #7
 800372c:	4944      	ldr	r1, [pc, #272]	; (8003840 <HAL_RCC_ClockConfig+0x42c>)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003734:	4b42      	ldr	r3, [pc, #264]	; (8003840 <HAL_RCC_ClockConfig+0x42c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d001      	beq.n	8003746 <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e076      	b.n	8003834 <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d025      	beq.n	800379e <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d018      	beq.n	800378c <HAL_RCC_ClockConfig+0x378>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003762:	d013      	beq.n	800378c <HAL_RCC_ClockConfig+0x378>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800376c:	d00e      	beq.n	800378c <HAL_RCC_ClockConfig+0x378>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003776:	d009      	beq.n	800378c <HAL_RCC_ClockConfig+0x378>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003780:	d004      	beq.n	800378c <HAL_RCC_ClockConfig+0x378>
 8003782:	f240 311e 	movw	r1, #798	; 0x31e
 8003786:	482f      	ldr	r0, [pc, #188]	; (8003844 <HAL_RCC_ClockConfig+0x430>)
 8003788:	f005 fa55 	bl	8008c36 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800378c:	4b2b      	ldr	r3, [pc, #172]	; (800383c <HAL_RCC_ClockConfig+0x428>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4928      	ldr	r1, [pc, #160]	; (800383c <HAL_RCC_ClockConfig+0x428>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d026      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d018      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x3d0>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ba:	d013      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x3d0>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80037c4:	d00e      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x3d0>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037ce:	d009      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x3d0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037d8:	d004      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x3d0>
 80037da:	f240 3125 	movw	r1, #805	; 0x325
 80037de:	4819      	ldr	r0, [pc, #100]	; (8003844 <HAL_RCC_ClockConfig+0x430>)
 80037e0:	f005 fa29 	bl	8008c36 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037e4:	4b15      	ldr	r3, [pc, #84]	; (800383c <HAL_RCC_ClockConfig+0x428>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4912      	ldr	r1, [pc, #72]	; (800383c <HAL_RCC_ClockConfig+0x428>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037f8:	f000 f82c 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 80037fc:	4601      	mov	r1, r0
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <HAL_RCC_ClockConfig+0x428>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003806:	22f0      	movs	r2, #240	; 0xf0
 8003808:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	fa92 f2a2 	rbit	r2, r2
 8003810:	60fa      	str	r2, [r7, #12]
  return result;
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	fab2 f282 	clz	r2, r2
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	40d3      	lsrs	r3, r2
 800381c:	4a0a      	ldr	r2, [pc, #40]	; (8003848 <HAL_RCC_ClockConfig+0x434>)
 800381e:	5cd3      	ldrb	r3, [r2, r3]
 8003820:	fa21 f303 	lsr.w	r3, r1, r3
 8003824:	4a09      	ldr	r2, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x438>)
 8003826:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003828:	4b09      	ldr	r3, [pc, #36]	; (8003850 <HAL_RCC_ClockConfig+0x43c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f005 fa35 	bl	8008c9c <HAL_InitTick>
  
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3778      	adds	r7, #120	; 0x78
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	40022000 	.word	0x40022000
 8003844:	08009168 	.word	0x08009168
 8003848:	08009360 	.word	0x08009360
 800384c:	2000000c 	.word	0x2000000c
 8003850:	20000000 	.word	0x20000000

08003854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	b08b      	sub	sp, #44	; 0x2c
 8003858:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	2300      	movs	r3, #0
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800386e:	4b29      	ldr	r3, [pc, #164]	; (8003914 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b04      	cmp	r3, #4
 800387c:	d002      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x30>
 800387e:	2b08      	cmp	r3, #8
 8003880:	d003      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0x36>
 8003882:	e03c      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003884:	4b24      	ldr	r3, [pc, #144]	; (8003918 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003886:	623b      	str	r3, [r7, #32]
      break;
 8003888:	e03c      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003890:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003894:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	fa92 f2a2 	rbit	r2, r2
 800389c:	607a      	str	r2, [r7, #4]
  return result;
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	fab2 f282 	clz	r2, r2
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	40d3      	lsrs	r3, r2
 80038a8:	4a1c      	ldr	r2, [pc, #112]	; (800391c <HAL_RCC_GetSysClockFreq+0xc8>)
 80038aa:	5cd3      	ldrb	r3, [r2, r3]
 80038ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80038ae:	4b19      	ldr	r3, [pc, #100]	; (8003914 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	220f      	movs	r2, #15
 80038b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	fa92 f2a2 	rbit	r2, r2
 80038c0:	60fa      	str	r2, [r7, #12]
  return result;
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	fab2 f282 	clz	r2, r2
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	40d3      	lsrs	r3, r2
 80038cc:	4a14      	ldr	r2, [pc, #80]	; (8003920 <HAL_RCC_GetSysClockFreq+0xcc>)
 80038ce:	5cd3      	ldrb	r3, [r2, r3]
 80038d0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038dc:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
 80038ec:	e004      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	4a0c      	ldr	r2, [pc, #48]	; (8003924 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	623b      	str	r3, [r7, #32]
      break;
 80038fc:	e002      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003900:	623b      	str	r3, [r7, #32]
      break;
 8003902:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003904:	6a3b      	ldr	r3, [r7, #32]
}
 8003906:	4618      	mov	r0, r3
 8003908:	372c      	adds	r7, #44	; 0x2c
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	007a1200 	.word	0x007a1200
 800391c:	080092bc 	.word	0x080092bc
 8003920:	080092cc 	.word	0x080092cc
 8003924:	003d0900 	.word	0x003d0900

08003928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	2000000c 	.word	0x2000000c

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003946:	f7ff ffef 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 800394a:	4601      	mov	r1, r0
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003954:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003958:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	fa92 f2a2 	rbit	r2, r2
 8003960:	603a      	str	r2, [r7, #0]
  return result;
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	fab2 f282 	clz	r2, r2
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	40d3      	lsrs	r3, r2
 800396c:	4a04      	ldr	r2, [pc, #16]	; (8003980 <HAL_RCC_GetPCLK1Freq+0x40>)
 800396e:	5cd3      	ldrb	r3, [r2, r3]
 8003970:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40021000 	.word	0x40021000
 8003980:	08009370 	.word	0x08009370

08003984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800398a:	f7ff ffcd 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 800398e:	4601      	mov	r1, r0
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003998:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800399c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	fa92 f2a2 	rbit	r2, r2
 80039a4:	603a      	str	r2, [r7, #0]
  return result;
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	fab2 f282 	clz	r2, r2
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	40d3      	lsrs	r3, r2
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80039b2:	5cd3      	ldrb	r3, [r2, r3]
 80039b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40021000 	.word	0x40021000
 80039c4:	08009370 	.word	0x08009370

080039c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <HAL_RCC_GetClockConfig+0x1a>
 80039d8:	f240 4184 	movw	r1, #1156	; 0x484
 80039dc:	4818      	ldr	r0, [pc, #96]	; (8003a40 <HAL_RCC_GetClockConfig+0x78>)
 80039de:	f005 f92a 	bl	8008c36 <assert_failed>
  assert_param(pFLatency != NULL);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d104      	bne.n	80039f2 <HAL_RCC_GetClockConfig+0x2a>
 80039e8:	f240 4185 	movw	r1, #1157	; 0x485
 80039ec:	4814      	ldr	r0, [pc, #80]	; (8003a40 <HAL_RCC_GetClockConfig+0x78>)
 80039ee:	f005 f922 	bl	8008c36 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	220f      	movs	r2, #15
 80039f6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039f8:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <HAL_RCC_GetClockConfig+0x7c>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 0203 	and.w	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003a04:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <HAL_RCC_GetClockConfig+0x7c>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_RCC_GetClockConfig+0x7c>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_GetClockConfig+0x7c>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	08db      	lsrs	r3, r3, #3
 8003a22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003a2a:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <HAL_RCC_GetClockConfig+0x80>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0207 	and.w	r2, r3, #7
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	601a      	str	r2, [r3, #0]
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	08009168 	.word	0x08009168
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40022000 	.word	0x40022000

08003a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b092      	sub	sp, #72	; 0x48
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a63      	ldr	r2, [pc, #396]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d903      	bls.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x22>
 8003a66:	2171      	movs	r1, #113	; 0x71
 8003a68:	4862      	ldr	r0, [pc, #392]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003a6a:	f005 f8e4 	bl	8008c36 <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 80f4 	beq.w	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d012      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a8c:	d00d      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a96:	d008      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8003aa2:	2177      	movs	r1, #119	; 0x77
 8003aa4:	4853      	ldr	r0, [pc, #332]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003aa6:	f005 f8c6 	bl	8008c36 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab0:	4b51      	ldr	r3, [pc, #324]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10e      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abc:	4b4e      	ldr	r3, [pc, #312]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	4a4d      	ldr	r2, [pc, #308]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	61d3      	str	r3, [r2, #28]
 8003ac8:	4b4b      	ldr	r3, [pc, #300]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	4b48      	ldr	r3, [pc, #288]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d118      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae6:	4b45      	ldr	r3, [pc, #276]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a44      	ldr	r2, [pc, #272]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af2:	f7fc fb97 	bl	8000224 <HAL_GetTick>
 8003af6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	e008      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afa:	f7fc fb93 	bl	8000224 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b64      	cmp	r3, #100	; 0x64
 8003b06:	d901      	bls.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e228      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x512>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	4b3b      	ldr	r3, [pc, #236]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b18:	4b37      	ldr	r3, [pc, #220]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b20:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 808a 	beq.w	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b34:	429a      	cmp	r2, r3
 8003b36:	f000 8082 	beq.w	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b3a:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b48:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	fa93 f3a3 	rbit	r3, r3
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b54:	fab3 f383 	clz	r3, r3
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	4b28      	ldr	r3, [pc, #160]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	461a      	mov	r2, r3
 8003b64:	2301      	movs	r3, #1
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b78:	fab3 f383 	clz	r3, r3
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4b1f      	ldr	r3, [pc, #124]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	461a      	mov	r2, r3
 8003b88:	2300      	movs	r3, #0
 8003b8a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b8c:	4a1a      	ldr	r2, [pc, #104]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b90:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d050      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fc fb42 	bl	8000224 <HAL_GetTick>
 8003ba0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba2:	e00a      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x16e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba4:	f7fc fb3e 	bl	8000224 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x16e>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e1d1      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x512>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	623b      	str	r3, [r7, #32]
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	fa93 f3a3 	rbit	r3, r3
 8003bd0:	61fb      	str	r3, [r7, #28]
  return result;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd4:	fab3 f383 	clz	r3, r3
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f043 0302 	orr.w	r3, r3, #2
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d10d      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	e012      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003bee:	bf00      	nop
 8003bf0:	001f92e1 	.word	0x001f92e1
 8003bf4:	080091a0 	.word	0x080091a0
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	10908100 	.word	0x10908100
 8003c04:	2302      	movs	r3, #2
 8003c06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	4ba2      	ldr	r3, [pc, #648]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	2202      	movs	r2, #2
 8003c16:	613a      	str	r2, [r7, #16]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	fa92 f2a2 	rbit	r2, r2
 8003c1e:	60fa      	str	r2, [r7, #12]
  return result;
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	fab2 f282 	clz	r2, r2
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	f002 021f 	and.w	r2, r2, #31
 8003c32:	2101      	movs	r1, #1
 8003c34:	fa01 f202 	lsl.w	r2, r1, r2
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0b2      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x158>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c3e:	4b97      	ldr	r3, [pc, #604]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4994      	ldr	r1, [pc, #592]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d105      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c58:	4b90      	ldr	r3, [pc, #576]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	4a8f      	ldr	r2, [pc, #572]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01c      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00f      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d00b      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d007      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d003      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003c90:	21be      	movs	r1, #190	; 0xbe
 8003c92:	4883      	ldr	r0, [pc, #524]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003c94:	f004 ffcf 	bl	8008c36 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c98:	4b80      	ldr	r3, [pc, #512]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9c:	f023 0203 	bic.w	r2, r3, #3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	497d      	ldr	r1, [pc, #500]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d014      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x282>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b10      	cmp	r3, #16
 8003cc4:	d003      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x282>
 8003cc6:	21e0      	movs	r1, #224	; 0xe0
 8003cc8:	4875      	ldr	r0, [pc, #468]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003cca:	f004 ffb4 	bl	8008c36 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cce:	4b73      	ldr	r3, [pc, #460]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	f023 0210 	bic.w	r2, r3, #16
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	4970      	ldr	r1, [pc, #448]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d015      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf4:	d007      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003cfe:	21ee      	movs	r1, #238	; 0xee
 8003d00:	4867      	ldr	r0, [pc, #412]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003d02:	f004 ff98 	bl	8008c36 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d06:	4b65      	ldr	r3, [pc, #404]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	4962      	ldr	r1, [pc, #392]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d015      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d004      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 8003d34:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003d38:	4859      	ldr	r0, [pc, #356]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003d3a:	f004 ff7c 	bl	8008c36 <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d3e:	4b57      	ldr	r3, [pc, #348]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f023 0220 	bic.w	r2, r3, #32
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	4954      	ldr	r1, [pc, #336]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d015      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	d004      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003d6c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003d70:	484b      	ldr	r0, [pc, #300]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003d72:	f004 ff60 	bl	8008c36 <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d76:	4b49      	ldr	r3, [pc, #292]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	4946      	ldr	r1, [pc, #280]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d016      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d009      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003da4:	d004      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003da6:	f240 113d 	movw	r1, #317	; 0x13d
 8003daa:	483d      	ldr	r0, [pc, #244]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003dac:	f004 ff43 	bl	8008c36 <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003db0:	4b3a      	ldr	r3, [pc, #232]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	4937      	ldr	r1, [pc, #220]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d04d      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d040      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dde:	d03b      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8003de8:	d036      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8003df2:	d031      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8003dfc:	d02c      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e06:	d027      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8003e10:	d022      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8003e1a:	d01d      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8003e24:	d018      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003e2e:	d013      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003e38:	d00e      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8003e42:	d009      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003e4c:	d004      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003e4e:	f240 114d 	movw	r1, #333	; 0x14d
 8003e52:	4813      	ldr	r0, [pc, #76]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003e54:	f004 feef 	bl	8008c36 <assert_failed>
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	490d      	ldr	r1, [pc, #52]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01b      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e86:	d004      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003e88:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8003e8c:	4804      	ldr	r0, [pc, #16]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003e8e:	f004 fed2 	bl	8008c36 <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e92:	4b02      	ldr	r3, [pc, #8]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e9a:	e003      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	080091a0 	.word	0x080091a0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	492f      	ldr	r1, [pc, #188]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d016      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eca:	d004      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003ecc:	f240 11af 	movw	r1, #431	; 0x1af
 8003ed0:	4826      	ldr	r0, [pc, #152]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8003ed2:	f004 feb0 	bl	8008c36 <assert_failed>
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003ed6:	4b24      	ldr	r3, [pc, #144]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	4921      	ldr	r1, [pc, #132]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d016      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f04:	d004      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8003f06:	f240 11b9 	movw	r1, #441	; 0x1b9
 8003f0a:	4818      	ldr	r0, [pc, #96]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8003f0c:	f004 fe93 	bl	8008c36 <assert_failed>
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003f10:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	4912      	ldr	r1, [pc, #72]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d016      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x510>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f3e:	d004      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003f40:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003f44:	4809      	ldr	r0, [pc, #36]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8003f46:	f004 fe76 	bl	8008c36 <assert_failed>
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003f4a:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	4904      	ldr	r1, [pc, #16]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3748      	adds	r7, #72	; 0x48
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	080091a0 	.word	0x080091a0

08003f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e079      	b.n	8004076 <HAL_TIM_Base_Init+0x106>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a3e      	ldr	r2, [pc, #248]	; (8004080 <HAL_TIM_Base_Init+0x110>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d01d      	beq.n	8003fc8 <HAL_TIM_Base_Init+0x58>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f94:	d018      	beq.n	8003fc8 <HAL_TIM_Base_Init+0x58>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a3a      	ldr	r2, [pc, #232]	; (8004084 <HAL_TIM_Base_Init+0x114>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d013      	beq.n	8003fc8 <HAL_TIM_Base_Init+0x58>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a38      	ldr	r2, [pc, #224]	; (8004088 <HAL_TIM_Base_Init+0x118>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00e      	beq.n	8003fc8 <HAL_TIM_Base_Init+0x58>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a37      	ldr	r2, [pc, #220]	; (800408c <HAL_TIM_Base_Init+0x11c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d009      	beq.n	8003fc8 <HAL_TIM_Base_Init+0x58>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a35      	ldr	r2, [pc, #212]	; (8004090 <HAL_TIM_Base_Init+0x120>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d004      	beq.n	8003fc8 <HAL_TIM_Base_Init+0x58>
 8003fbe:	f240 1119 	movw	r1, #281	; 0x119
 8003fc2:	4834      	ldr	r0, [pc, #208]	; (8004094 <HAL_TIM_Base_Init+0x124>)
 8003fc4:	f004 fe37 	bl	8008c36 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d014      	beq.n	8003ffa <HAL_TIM_Base_Init+0x8a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d010      	beq.n	8003ffa <HAL_TIM_Base_Init+0x8a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d00c      	beq.n	8003ffa <HAL_TIM_Base_Init+0x8a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b40      	cmp	r3, #64	; 0x40
 8003fe6:	d008      	beq.n	8003ffa <HAL_TIM_Base_Init+0x8a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b60      	cmp	r3, #96	; 0x60
 8003fee:	d004      	beq.n	8003ffa <HAL_TIM_Base_Init+0x8a>
 8003ff0:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8003ff4:	4827      	ldr	r0, [pc, #156]	; (8004094 <HAL_TIM_Base_Init+0x124>)
 8003ff6:	f004 fe1e 	bl	8008c36 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00e      	beq.n	8004020 <HAL_TIM_Base_Init+0xb0>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800400a:	d009      	beq.n	8004020 <HAL_TIM_Base_Init+0xb0>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004014:	d004      	beq.n	8004020 <HAL_TIM_Base_Init+0xb0>
 8004016:	f240 111b 	movw	r1, #283	; 0x11b
 800401a:	481e      	ldr	r0, [pc, #120]	; (8004094 <HAL_TIM_Base_Init+0x124>)
 800401c:	f004 fe0b 	bl	8008c36 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_TIM_Base_Init+0xca>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	2b80      	cmp	r3, #128	; 0x80
 800402e:	d004      	beq.n	800403a <HAL_TIM_Base_Init+0xca>
 8004030:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004034:	4817      	ldr	r0, [pc, #92]	; (8004094 <HAL_TIM_Base_Init+0x124>)
 8004036:	f004 fdfe 	bl	8008c36 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_TIM_Base_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f822 	bl	8004098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f000 f9c0 	bl	80043ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40012c00 	.word	0x40012c00
 8004084:	40001000 	.word	0x40001000
 8004088:	40014000 	.word	0x40014000
 800408c:	40014400 	.word	0x40014400
 8004090:	40014800 	.word	0x40014800
 8004094:	080091fc 	.word	0x080091fc

08004098 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a21      	ldr	r2, [pc, #132]	; (8004140 <HAL_TIM_Base_Start_IT+0x94>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01d      	beq.n	80040fa <HAL_TIM_Base_Start_IT+0x4e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c6:	d018      	beq.n	80040fa <HAL_TIM_Base_Start_IT+0x4e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1d      	ldr	r2, [pc, #116]	; (8004144 <HAL_TIM_Base_Start_IT+0x98>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <HAL_TIM_Base_Start_IT+0x4e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1c      	ldr	r2, [pc, #112]	; (8004148 <HAL_TIM_Base_Start_IT+0x9c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00e      	beq.n	80040fa <HAL_TIM_Base_Start_IT+0x4e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1a      	ldr	r2, [pc, #104]	; (800414c <HAL_TIM_Base_Start_IT+0xa0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d009      	beq.n	80040fa <HAL_TIM_Base_Start_IT+0x4e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a19      	ldr	r2, [pc, #100]	; (8004150 <HAL_TIM_Base_Start_IT+0xa4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d004      	beq.n	80040fa <HAL_TIM_Base_Start_IT+0x4e>
 80040f0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80040f4:	4817      	ldr	r0, [pc, #92]	; (8004154 <HAL_TIM_Base_Start_IT+0xa8>)
 80040f6:	f004 fd9e 	bl	8008c36 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	4b11      	ldr	r3, [pc, #68]	; (8004158 <HAL_TIM_Base_Start_IT+0xac>)
 8004112:	4013      	ands	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b06      	cmp	r3, #6
 800411a:	d00b      	beq.n	8004134 <HAL_TIM_Base_Start_IT+0x88>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004122:	d007      	beq.n	8004134 <HAL_TIM_Base_Start_IT+0x88>
  {
    __HAL_TIM_ENABLE(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40001000 	.word	0x40001000
 8004148:	40014000 	.word	0x40014000
 800414c:	40014400 	.word	0x40014400
 8004150:	40014800 	.word	0x40014800
 8004154:	080091fc 	.word	0x080091fc
 8004158:	00010007 	.word	0x00010007

0800415c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b02      	cmp	r3, #2
 8004170:	d122      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b02      	cmp	r3, #2
 800417e:	d11b      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0202 	mvn.w	r2, #2
 8004188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f905 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f8f7 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f908 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d122      	bne.n	800420c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d11b      	bne.n	800420c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0204 	mvn.w	r2, #4
 80041dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f8db 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f8cd 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f8de 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b08      	cmp	r3, #8
 8004218:	d122      	bne.n	8004260 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b08      	cmp	r3, #8
 8004226:	d11b      	bne.n	8004260 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0208 	mvn.w	r2, #8
 8004230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2204      	movs	r2, #4
 8004236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f8b1 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 800424c:	e005      	b.n	800425a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f8a3 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f8b4 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b10      	cmp	r3, #16
 800426c:	d122      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b10      	cmp	r3, #16
 800427a:	d11b      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0210 	mvn.w	r2, #16
 8004284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2208      	movs	r2, #8
 800428a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f887 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 80042a0:	e005      	b.n	80042ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f879 	bl	800439a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f88a 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d10e      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d107      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0201 	mvn.w	r2, #1
 80042d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f004 fc92 	bl	8008c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ea:	2b80      	cmp	r3, #128	; 0x80
 80042ec:	d10e      	bne.n	800430c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f8:	2b80      	cmp	r3, #128	; 0x80
 80042fa:	d107      	bne.n	800430c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f8e8 	bl	80044dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431a:	d10e      	bne.n	800433a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004326:	2b80      	cmp	r3, #128	; 0x80
 8004328:	d107      	bne.n	800433a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f8db 	bl	80044f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d10e      	bne.n	8004366 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d107      	bne.n	8004366 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800435e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f838 	bl	80043d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b20      	cmp	r3, #32
 8004372:	d10e      	bne.n	8004392 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b20      	cmp	r3, #32
 8004380:	d107      	bne.n	8004392 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f06f 0220 	mvn.w	r2, #32
 800438a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f89b 	bl	80044c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a2e      	ldr	r2, [pc, #184]	; (80044b8 <TIM_Base_SetConfig+0xcc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d003      	beq.n	800440c <TIM_Base_SetConfig+0x20>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440a:	d108      	bne.n	800441e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a25      	ldr	r2, [pc, #148]	; (80044b8 <TIM_Base_SetConfig+0xcc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00f      	beq.n	8004446 <TIM_Base_SetConfig+0x5a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442c:	d00b      	beq.n	8004446 <TIM_Base_SetConfig+0x5a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a22      	ldr	r2, [pc, #136]	; (80044bc <TIM_Base_SetConfig+0xd0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d007      	beq.n	8004446 <TIM_Base_SetConfig+0x5a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a21      	ldr	r2, [pc, #132]	; (80044c0 <TIM_Base_SetConfig+0xd4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d003      	beq.n	8004446 <TIM_Base_SetConfig+0x5a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a20      	ldr	r2, [pc, #128]	; (80044c4 <TIM_Base_SetConfig+0xd8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d108      	bne.n	8004458 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a0e      	ldr	r2, [pc, #56]	; (80044b8 <TIM_Base_SetConfig+0xcc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00b      	beq.n	800449c <TIM_Base_SetConfig+0xb0>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a0d      	ldr	r2, [pc, #52]	; (80044bc <TIM_Base_SetConfig+0xd0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d007      	beq.n	800449c <TIM_Base_SetConfig+0xb0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <TIM_Base_SetConfig+0xd4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d003      	beq.n	800449c <TIM_Base_SetConfig+0xb0>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <TIM_Base_SetConfig+0xd8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d103      	bne.n	80044a4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	615a      	str	r2, [r3, #20]
}
 80044aa:	bf00      	nop
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	40014000 	.word	0x40014000
 80044c0:	40014400 	.word	0x40014400
 80044c4:	40014800 	.word	0x40014800

080044c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e06d      	b.n	80045f2 <HAL_UART_Init+0xee>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d014      	beq.n	8004548 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a36      	ldr	r2, [pc, #216]	; (80045fc <HAL_UART_Init+0xf8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d023      	beq.n	8004570 <HAL_UART_Init+0x6c>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a34      	ldr	r2, [pc, #208]	; (8004600 <HAL_UART_Init+0xfc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d01e      	beq.n	8004570 <HAL_UART_Init+0x6c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a33      	ldr	r2, [pc, #204]	; (8004604 <HAL_UART_Init+0x100>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d019      	beq.n	8004570 <HAL_UART_Init+0x6c>
 800453c:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8004540:	4831      	ldr	r0, [pc, #196]	; (8004608 <HAL_UART_Init+0x104>)
 8004542:	f004 fb78 	bl	8008c36 <assert_failed>
 8004546:	e013      	b.n	8004570 <HAL_UART_Init+0x6c>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a2b      	ldr	r2, [pc, #172]	; (80045fc <HAL_UART_Init+0xf8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00e      	beq.n	8004570 <HAL_UART_Init+0x6c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a2a      	ldr	r2, [pc, #168]	; (8004600 <HAL_UART_Init+0xfc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d009      	beq.n	8004570 <HAL_UART_Init+0x6c>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a28      	ldr	r2, [pc, #160]	; (8004604 <HAL_UART_Init+0x100>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_UART_Init+0x6c>
 8004566:	f240 112f 	movw	r1, #303	; 0x12f
 800456a:	4827      	ldr	r0, [pc, #156]	; (8004608 <HAL_UART_Init+0x104>)
 800456c:	f004 fb63 	bl	8008c36 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <HAL_UART_Init+0x82>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f004 fca5 	bl	8008ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2224      	movs	r2, #36	; 0x24
 800458a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fa83 	bl	8004aa8 <UART_SetConfig>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_UART_Init+0xa8>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e022      	b.n	80045f2 <HAL_UART_Init+0xee>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <HAL_UART_Init+0xb6>
  {
    UART_AdvFeatureConfig(huart);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fc87 	bl	8004ec8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0201 	orr.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fdac 	bl	8005148 <UART_CheckIdleState>
 80045f0:	4603      	mov	r3, r0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40013800 	.word	0x40013800
 8004600:	40004400 	.word	0x40004400
 8004604:	40004800 	.word	0x40004800
 8004608:	08009234 	.word	0x08009234

0800460c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	4613      	mov	r3, r2
 8004618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461e:	2b20      	cmp	r3, #32
 8004620:	d144      	bne.n	80046ac <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_UART_Transmit_IT+0x22>
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e03d      	b.n	80046ae <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_UART_Transmit_IT+0x34>
 800463c:	2302      	movs	r3, #2
 800463e:	e036      	b.n	80046ae <HAL_UART_Transmit_IT+0xa2>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	88fa      	ldrh	r2, [r7, #6]
 8004652:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	88fa      	ldrh	r2, [r7, #6]
 800465a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2221      	movs	r2, #33	; 0x21
 800466e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004678:	d107      	bne.n	800468a <HAL_UART_Transmit_IT+0x7e>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d103      	bne.n	800468a <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4a0d      	ldr	r2, [pc, #52]	; (80046bc <HAL_UART_Transmit_IT+0xb0>)
 8004686:	665a      	str	r2, [r3, #100]	; 0x64
 8004688:	e002      	b.n	8004690 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4a0c      	ldr	r2, [pc, #48]	; (80046c0 <HAL_UART_Transmit_IT+0xb4>)
 800468e:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046a6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e000      	b.n	80046ae <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80046ac:	2302      	movs	r3, #2
  }
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	080053a9 	.word	0x080053a9
 80046c0:	08005335 	.word	0x08005335

080046c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	4613      	mov	r3, r2
 80046d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	f040 808a 	bne.w	80047f0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <HAL_UART_Receive_IT+0x24>
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e082      	b.n	80047f2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_UART_Receive_IT+0x36>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e07b      	b.n	80047f2 <HAL_UART_Receive_IT+0x12e>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	88fa      	ldrh	r2, [r7, #6]
 8004714:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004726:	d10e      	bne.n	8004746 <HAL_UART_Receive_IT+0x82>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d105      	bne.n	800473c <HAL_UART_Receive_IT+0x78>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004736:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800473a:	e02d      	b.n	8004798 <HAL_UART_Receive_IT+0xd4>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	22ff      	movs	r2, #255	; 0xff
 8004740:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004744:	e028      	b.n	8004798 <HAL_UART_Receive_IT+0xd4>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10d      	bne.n	800476a <HAL_UART_Receive_IT+0xa6>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d104      	bne.n	8004760 <HAL_UART_Receive_IT+0x9c>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	22ff      	movs	r2, #255	; 0xff
 800475a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800475e:	e01b      	b.n	8004798 <HAL_UART_Receive_IT+0xd4>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	227f      	movs	r2, #127	; 0x7f
 8004764:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004768:	e016      	b.n	8004798 <HAL_UART_Receive_IT+0xd4>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004772:	d10d      	bne.n	8004790 <HAL_UART_Receive_IT+0xcc>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d104      	bne.n	8004786 <HAL_UART_Receive_IT+0xc2>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	227f      	movs	r2, #127	; 0x7f
 8004780:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004784:	e008      	b.n	8004798 <HAL_UART_Receive_IT+0xd4>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	223f      	movs	r2, #63	; 0x3f
 800478a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800478e:	e003      	b.n	8004798 <HAL_UART_Receive_IT+0xd4>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2222      	movs	r2, #34	; 0x22
 80047a2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047bc:	d107      	bne.n	80047ce <HAL_UART_Receive_IT+0x10a>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d103      	bne.n	80047ce <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a0d      	ldr	r2, [pc, #52]	; (8004800 <HAL_UART_Receive_IT+0x13c>)
 80047ca:	661a      	str	r2, [r3, #96]	; 0x60
 80047cc:	e002      	b.n	80047d4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4a0c      	ldr	r2, [pc, #48]	; (8004804 <HAL_UART_Receive_IT+0x140>)
 80047d2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80047ea:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e000      	b.n	80047f2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80047f0:	2302      	movs	r3, #2
  }
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	080054fd 	.word	0x080054fd
 8004804:	08005457 	.word	0x08005457

08004808 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	f640 030f 	movw	r3, #2063	; 0x80f
 800482e:	4013      	ands	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d113      	bne.n	8004860 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00e      	beq.n	8004860 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d009      	beq.n	8004860 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8114 	beq.w	8004a7e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	4798      	blx	r3
      }
      return;
 800485e:	e10e      	b.n	8004a7e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 80d6 	beq.w	8004a14 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d105      	bne.n	800487e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80cb 	beq.w	8004a14 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00e      	beq.n	80048a6 <HAL_UART_IRQHandler+0x9e>
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2201      	movs	r2, #1
 8004898:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800489e:	f043 0201 	orr.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00e      	beq.n	80048ce <HAL_UART_IRQHandler+0xc6>
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2202      	movs	r2, #2
 80048c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c6:	f043 0204 	orr.w	r2, r3, #4
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00e      	beq.n	80048f6 <HAL_UART_IRQHandler+0xee>
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2204      	movs	r2, #4
 80048e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ee:	f043 0202 	orr.w	r2, r3, #2
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d013      	beq.n	8004928 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004910:	2b00      	cmp	r3, #0
 8004912:	d009      	beq.n	8004928 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2208      	movs	r2, #8
 800491a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004920:	f043 0208 	orr.w	r2, r3, #8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00f      	beq.n	8004952 <HAL_UART_IRQHandler+0x14a>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800494a:	f043 0220 	orr.w	r2, r3, #32
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 8093 	beq.w	8004a82 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00c      	beq.n	8004980 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d007      	beq.n	8004980 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004984:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	d004      	beq.n	800499e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800499a:	2b00      	cmp	r3, #0
 800499c:	d031      	beq.n	8004a02 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fc92 	bl	80052c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b40      	cmp	r3, #64	; 0x40
 80049b0:	d123      	bne.n	80049fa <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d013      	beq.n	80049f2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ce:	4a30      	ldr	r2, [pc, #192]	; (8004a90 <HAL_UART_IRQHandler+0x288>)
 80049d0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fd fa46 	bl	8001e68 <HAL_DMA_Abort_IT>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d016      	beq.n	8004a10 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80049ec:	4610      	mov	r0, r2
 80049ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f0:	e00e      	b.n	8004a10 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f84e 	bl	8004a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f8:	e00a      	b.n	8004a10 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f84a 	bl	8004a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a00:	e006      	b.n	8004a10 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f846 	bl	8004a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004a0e:	e038      	b.n	8004a82 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a10:	bf00      	nop
    return;
 8004a12:	e036      	b.n	8004a82 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00d      	beq.n	8004a3a <HAL_UART_IRQHandler+0x232>
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fdb5 	bl	80055a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a38:	e026      	b.n	8004a88 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00d      	beq.n	8004a60 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d008      	beq.n	8004a60 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d017      	beq.n	8004a86 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	4798      	blx	r3
    }
    return;
 8004a5e:	e012      	b.n	8004a86 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00e      	beq.n	8004a88 <HAL_UART_IRQHandler+0x280>
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d009      	beq.n	8004a88 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fcd5 	bl	8005424 <UART_EndTransmit_IT>
    return;
 8004a7a:	bf00      	nop
 8004a7c:	e004      	b.n	8004a88 <HAL_UART_IRQHandler+0x280>
      return;
 8004a7e:	bf00      	nop
 8004a80:	e002      	b.n	8004a88 <HAL_UART_IRQHandler+0x280>
    return;
 8004a82:	bf00      	nop
 8004a84:	e000      	b.n	8004a88 <HAL_UART_IRQHandler+0x280>
    return;
 8004a86:	bf00      	nop
  }

}
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	08005309 	.word	0x08005309

08004a94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	4a9f      	ldr	r2, [pc, #636]	; (8004d3c <UART_SetConfig+0x294>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d904      	bls.n	8004acc <UART_SetConfig+0x24>
 8004ac2:	f640 21a2 	movw	r1, #2722	; 0xaa2
 8004ac6:	489e      	ldr	r0, [pc, #632]	; (8004d40 <UART_SetConfig+0x298>)
 8004ac8:	f004 f8b5 	bl	8008c36 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ad4:	d00d      	beq.n	8004af2 <UART_SetConfig+0x4a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <UART_SetConfig+0x4a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae6:	d004      	beq.n	8004af2 <UART_SetConfig+0x4a>
 8004ae8:	f640 21a3 	movw	r1, #2723	; 0xaa3
 8004aec:	4894      	ldr	r0, [pc, #592]	; (8004d40 <UART_SetConfig+0x298>)
 8004aee:	f004 f8a2 	bl	8008c36 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afa:	d012      	beq.n	8004b22 <UART_SetConfig+0x7a>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00e      	beq.n	8004b22 <UART_SetConfig+0x7a>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b0c:	d009      	beq.n	8004b22 <UART_SetConfig+0x7a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b16:	d004      	beq.n	8004b22 <UART_SetConfig+0x7a>
 8004b18:	f640 21a4 	movw	r1, #2724	; 0xaa4
 8004b1c:	4888      	ldr	r0, [pc, #544]	; (8004d40 <UART_SetConfig+0x298>)
 8004b1e:	f004 f88a 	bl	8008c36 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <UART_SetConfig+0x96>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b32:	d004      	beq.n	8004b3e <UART_SetConfig+0x96>
 8004b34:	f640 21a5 	movw	r1, #2725	; 0xaa5
 8004b38:	4881      	ldr	r0, [pc, #516]	; (8004d40 <UART_SetConfig+0x298>)
 8004b3a:	f004 f87c 	bl	8008c36 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00e      	beq.n	8004b64 <UART_SetConfig+0xbc>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4e:	d009      	beq.n	8004b64 <UART_SetConfig+0xbc>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b58:	d004      	beq.n	8004b64 <UART_SetConfig+0xbc>
 8004b5a:	f640 21a7 	movw	r1, #2727	; 0xaa7
 8004b5e:	4878      	ldr	r0, [pc, #480]	; (8004d40 <UART_SetConfig+0x298>)
 8004b60:	f004 f869 	bl	8008c36 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	f023 030c 	bic.w	r3, r3, #12
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d103      	bne.n	8004b78 <UART_SetConfig+0xd0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d104      	bne.n	8004b82 <UART_SetConfig+0xda>
 8004b78:	f640 21a8 	movw	r1, #2728	; 0xaa8
 8004b7c:	4870      	ldr	r0, [pc, #448]	; (8004d40 <UART_SetConfig+0x298>)
 8004b7e:	f004 f85a 	bl	8008c36 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d013      	beq.n	8004bb2 <UART_SetConfig+0x10a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b92:	d00e      	beq.n	8004bb2 <UART_SetConfig+0x10a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9c:	d009      	beq.n	8004bb2 <UART_SetConfig+0x10a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ba6:	d004      	beq.n	8004bb2 <UART_SetConfig+0x10a>
 8004ba8:	f640 21a9 	movw	r1, #2729	; 0xaa9
 8004bac:	4864      	ldr	r0, [pc, #400]	; (8004d40 <UART_SetConfig+0x298>)
 8004bae:	f004 f842 	bl	8008c36 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <UART_SetConfig+0x126>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc2:	d004      	beq.n	8004bce <UART_SetConfig+0x126>
 8004bc4:	f640 21aa 	movw	r1, #2730	; 0xaaa
 8004bc8:	485d      	ldr	r0, [pc, #372]	; (8004d40 <UART_SetConfig+0x298>)
 8004bca:	f004 f834 	bl	8008c36 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b55      	ldr	r3, [pc, #340]	; (8004d44 <UART_SetConfig+0x29c>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	6939      	ldr	r1, [r7, #16]
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a43      	ldr	r2, [pc, #268]	; (8004d48 <UART_SetConfig+0x2a0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d120      	bne.n	8004c80 <UART_SetConfig+0x1d8>
 8004c3e:	4b43      	ldr	r3, [pc, #268]	; (8004d4c <UART_SetConfig+0x2a4>)
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d816      	bhi.n	8004c78 <UART_SetConfig+0x1d0>
 8004c4a:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <UART_SetConfig+0x1a8>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004c61 	.word	0x08004c61
 8004c54:	08004c6d 	.word	0x08004c6d
 8004c58:	08004c73 	.word	0x08004c73
 8004c5c:	08004c67 	.word	0x08004c67
 8004c60:	2300      	movs	r3, #0
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e01e      	b.n	8004ca4 <UART_SetConfig+0x1fc>
 8004c66:	2302      	movs	r3, #2
 8004c68:	77fb      	strb	r3, [r7, #31]
 8004c6a:	e01b      	b.n	8004ca4 <UART_SetConfig+0x1fc>
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e018      	b.n	8004ca4 <UART_SetConfig+0x1fc>
 8004c72:	2308      	movs	r3, #8
 8004c74:	77fb      	strb	r3, [r7, #31]
 8004c76:	e015      	b.n	8004ca4 <UART_SetConfig+0x1fc>
 8004c78:	2310      	movs	r3, #16
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	bf00      	nop
 8004c7e:	e011      	b.n	8004ca4 <UART_SetConfig+0x1fc>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a32      	ldr	r2, [pc, #200]	; (8004d50 <UART_SetConfig+0x2a8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d102      	bne.n	8004c90 <UART_SetConfig+0x1e8>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	77fb      	strb	r3, [r7, #31]
 8004c8e:	e009      	b.n	8004ca4 <UART_SetConfig+0x1fc>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a2f      	ldr	r2, [pc, #188]	; (8004d54 <UART_SetConfig+0x2ac>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d102      	bne.n	8004ca0 <UART_SetConfig+0x1f8>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	77fb      	strb	r3, [r7, #31]
 8004c9e:	e001      	b.n	8004ca4 <UART_SetConfig+0x1fc>
 8004ca0:	2310      	movs	r3, #16
 8004ca2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cac:	f040 8090 	bne.w	8004dd0 <UART_SetConfig+0x328>
  {
    switch (clocksource)
 8004cb0:	7ffb      	ldrb	r3, [r7, #31]
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d86c      	bhi.n	8004d90 <UART_SetConfig+0x2e8>
 8004cb6:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <UART_SetConfig+0x214>)
 8004cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbc:	08004ce1 	.word	0x08004ce1
 8004cc0:	08004d01 	.word	0x08004d01
 8004cc4:	08004d21 	.word	0x08004d21
 8004cc8:	08004d91 	.word	0x08004d91
 8004ccc:	08004d59 	.word	0x08004d59
 8004cd0:	08004d91 	.word	0x08004d91
 8004cd4:	08004d91 	.word	0x08004d91
 8004cd8:	08004d91 	.word	0x08004d91
 8004cdc:	08004d79 	.word	0x08004d79
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce0:	f7fe fe2e 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8004ce4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	005a      	lsls	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	085b      	lsrs	r3, r3, #1
 8004cf0:	441a      	add	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	61bb      	str	r3, [r7, #24]
        break;
 8004cfe:	e04a      	b.n	8004d96 <UART_SetConfig+0x2ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d00:	f7fe fe40 	bl	8003984 <HAL_RCC_GetPCLK2Freq>
 8004d04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	005a      	lsls	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	441a      	add	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	61bb      	str	r3, [r7, #24]
        break;
 8004d1e:	e03a      	b.n	8004d96 <UART_SetConfig+0x2ee>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004d2a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6852      	ldr	r2, [r2, #4]
 8004d32:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	61bb      	str	r3, [r7, #24]
        break;
 8004d3a:	e02c      	b.n	8004d96 <UART_SetConfig+0x2ee>
 8004d3c:	00895440 	.word	0x00895440
 8004d40:	08009234 	.word	0x08009234
 8004d44:	efff69f3 	.word	0xefff69f3
 8004d48:	40013800 	.word	0x40013800
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40004400 	.word	0x40004400
 8004d54:	40004800 	.word	0x40004800
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d58:	f7fe fd7c 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8004d5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	005a      	lsls	r2, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	085b      	lsrs	r3, r3, #1
 8004d68:	441a      	add	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	61bb      	str	r3, [r7, #24]
        break;
 8004d76:	e00e      	b.n	8004d96 <UART_SetConfig+0x2ee>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	61bb      	str	r3, [r7, #24]
        break;
 8004d8e:	e002      	b.n	8004d96 <UART_SetConfig+0x2ee>
      default:
        ret = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	75fb      	strb	r3, [r7, #23]
        break;
 8004d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b0f      	cmp	r3, #15
 8004d9a:	d916      	bls.n	8004dca <UART_SetConfig+0x322>
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da2:	d212      	bcs.n	8004dca <UART_SetConfig+0x322>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f023 030f 	bic.w	r3, r3, #15
 8004dac:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	897b      	ldrh	r3, [r7, #10]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	897a      	ldrh	r2, [r7, #10]
 8004dc6:	60da      	str	r2, [r3, #12]
 8004dc8:	e072      	b.n	8004eb0 <UART_SetConfig+0x408>
    }
    else
    {
      ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	75fb      	strb	r3, [r7, #23]
 8004dce:	e06f      	b.n	8004eb0 <UART_SetConfig+0x408>
    }
  }
  else
  {
    switch (clocksource)
 8004dd0:	7ffb      	ldrb	r3, [r7, #31]
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d85b      	bhi.n	8004e8e <UART_SetConfig+0x3e6>
 8004dd6:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <UART_SetConfig+0x334>)
 8004dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ddc:	08004e01 	.word	0x08004e01
 8004de0:	08004e1f 	.word	0x08004e1f
 8004de4:	08004e3d 	.word	0x08004e3d
 8004de8:	08004e8f 	.word	0x08004e8f
 8004dec:	08004e59 	.word	0x08004e59
 8004df0:	08004e8f 	.word	0x08004e8f
 8004df4:	08004e8f 	.word	0x08004e8f
 8004df8:	08004e8f 	.word	0x08004e8f
 8004dfc:	08004e77 	.word	0x08004e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e00:	f7fe fd9e 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8004e04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	085a      	lsrs	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	441a      	add	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	61bb      	str	r3, [r7, #24]
        break;
 8004e1c:	e03a      	b.n	8004e94 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e1e:	f7fe fdb1 	bl	8003984 <HAL_RCC_GetPCLK2Freq>
 8004e22:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	085a      	lsrs	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	441a      	add	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	61bb      	str	r3, [r7, #24]
        break;
 8004e3a:	e02b      	b.n	8004e94 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	085b      	lsrs	r3, r3, #1
 8004e42:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004e46:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6852      	ldr	r2, [r2, #4]
 8004e4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	61bb      	str	r3, [r7, #24]
        break;
 8004e56:	e01d      	b.n	8004e94 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e58:	f7fe fcfc 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8004e5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	085a      	lsrs	r2, r3, #1
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	441a      	add	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	61bb      	str	r3, [r7, #24]
        break;
 8004e74:	e00e      	b.n	8004e94 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	61bb      	str	r3, [r7, #24]
        break;
 8004e8c:	e002      	b.n	8004e94 <UART_SetConfig+0x3ec>
      default:
        ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	75fb      	strb	r3, [r7, #23]
        break;
 8004e92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	2b0f      	cmp	r3, #15
 8004e98:	d908      	bls.n	8004eac <UART_SetConfig+0x404>
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea0:	d204      	bcs.n	8004eac <UART_SetConfig+0x404>
    {
      huart->Instance->BRR = usartdiv;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	60da      	str	r2, [r3, #12]
 8004eaa:	e001      	b.n	8004eb0 <UART_SetConfig+0x408>
    }
    else
    {
      ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop

08004ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	2bff      	cmp	r3, #255	; 0xff
 8004ed6:	d904      	bls.n	8004ee2 <UART_AdvFeatureConfig+0x1a>
 8004ed8:	f640 3127 	movw	r1, #2855	; 0xb27
 8004edc:	4898      	ldr	r0, [pc, #608]	; (8005140 <UART_AdvFeatureConfig+0x278>)
 8004ede:	f003 feaa 	bl	8008c36 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d018      	beq.n	8004f20 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d009      	beq.n	8004f0a <UART_AdvFeatureConfig+0x42>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004efe:	d004      	beq.n	8004f0a <UART_AdvFeatureConfig+0x42>
 8004f00:	f640 312c 	movw	r1, #2860	; 0xb2c
 8004f04:	488e      	ldr	r0, [pc, #568]	; (8005140 <UART_AdvFeatureConfig+0x278>)
 8004f06:	f003 fe96 	bl	8008c36 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d018      	beq.n	8004f5e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <UART_AdvFeatureConfig+0x80>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f3c:	d004      	beq.n	8004f48 <UART_AdvFeatureConfig+0x80>
 8004f3e:	f640 3133 	movw	r1, #2867	; 0xb33
 8004f42:	487f      	ldr	r0, [pc, #508]	; (8005140 <UART_AdvFeatureConfig+0x278>)
 8004f44:	f003 fe77 	bl	8008c36 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d018      	beq.n	8004f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d009      	beq.n	8004f86 <UART_AdvFeatureConfig+0xbe>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f7a:	d004      	beq.n	8004f86 <UART_AdvFeatureConfig+0xbe>
 8004f7c:	f640 313a 	movw	r1, #2874	; 0xb3a
 8004f80:	486f      	ldr	r0, [pc, #444]	; (8005140 <UART_AdvFeatureConfig+0x278>)
 8004f82:	f003 fe58 	bl	8008c36 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d018      	beq.n	8004fda <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d009      	beq.n	8004fc4 <UART_AdvFeatureConfig+0xfc>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb8:	d004      	beq.n	8004fc4 <UART_AdvFeatureConfig+0xfc>
 8004fba:	f640 3141 	movw	r1, #2881	; 0xb41
 8004fbe:	4860      	ldr	r0, [pc, #384]	; (8005140 <UART_AdvFeatureConfig+0x278>)
 8004fc0:	f003 fe39 	bl	8008c36 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d018      	beq.n	8005018 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d009      	beq.n	8005002 <UART_AdvFeatureConfig+0x13a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff6:	d004      	beq.n	8005002 <UART_AdvFeatureConfig+0x13a>
 8004ff8:	f640 3148 	movw	r1, #2888	; 0xb48
 8004ffc:	4850      	ldr	r0, [pc, #320]	; (8005140 <UART_AdvFeatureConfig+0x278>)
 8004ffe:	f003 fe1a 	bl	8008c36 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d018      	beq.n	8005056 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005028:	2b00      	cmp	r3, #0
 800502a:	d009      	beq.n	8005040 <UART_AdvFeatureConfig+0x178>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005034:	d004      	beq.n	8005040 <UART_AdvFeatureConfig+0x178>
 8005036:	f640 314f 	movw	r1, #2895	; 0xb4f
 800503a:	4841      	ldr	r0, [pc, #260]	; (8005140 <UART_AdvFeatureConfig+0x278>)
 800503c:	f003 fdfb 	bl	8008c36 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d04a      	beq.n	80050f8 <UART_AdvFeatureConfig+0x230>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a37      	ldr	r2, [pc, #220]	; (8005144 <UART_AdvFeatureConfig+0x27c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <UART_AdvFeatureConfig+0x1ae>
 800506c:	f640 3156 	movw	r1, #2902	; 0xb56
 8005070:	4833      	ldr	r0, [pc, #204]	; (8005140 <UART_AdvFeatureConfig+0x278>)
 8005072:	f003 fde0 	bl	8008c36 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d009      	beq.n	8005092 <UART_AdvFeatureConfig+0x1ca>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005086:	d004      	beq.n	8005092 <UART_AdvFeatureConfig+0x1ca>
 8005088:	f640 3157 	movw	r1, #2903	; 0xb57
 800508c:	482c      	ldr	r0, [pc, #176]	; (8005140 <UART_AdvFeatureConfig+0x278>)
 800508e:	f003 fdd2 	bl	8008c36 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050b0:	d122      	bne.n	80050f8 <UART_AdvFeatureConfig+0x230>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d013      	beq.n	80050e2 <UART_AdvFeatureConfig+0x21a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050c2:	d00e      	beq.n	80050e2 <UART_AdvFeatureConfig+0x21a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050cc:	d009      	beq.n	80050e2 <UART_AdvFeatureConfig+0x21a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050d6:	d004      	beq.n	80050e2 <UART_AdvFeatureConfig+0x21a>
 80050d8:	f640 315c 	movw	r1, #2908	; 0xb5c
 80050dc:	4818      	ldr	r0, [pc, #96]	; (8005140 <UART_AdvFeatureConfig+0x278>)
 80050de:	f003 fdaa 	bl	8008c36 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005100:	2b00      	cmp	r3, #0
 8005102:	d018      	beq.n	8005136 <UART_AdvFeatureConfig+0x26e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005108:	2b00      	cmp	r3, #0
 800510a:	d009      	beq.n	8005120 <UART_AdvFeatureConfig+0x258>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005110:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005114:	d004      	beq.n	8005120 <UART_AdvFeatureConfig+0x258>
 8005116:	f640 3164 	movw	r1, #2916	; 0xb64
 800511a:	4809      	ldr	r0, [pc, #36]	; (8005140 <UART_AdvFeatureConfig+0x278>)
 800511c:	f003 fd8b 	bl	8008c36 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
  }
}
 8005136:	bf00      	nop
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	08009234 	.word	0x08009234
 8005144:	40013800 	.word	0x40013800

08005148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af02      	add	r7, sp, #8
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005156:	f7fb f865 	bl	8000224 <HAL_GetTick>
 800515a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b08      	cmp	r3, #8
 8005168:	d10e      	bne.n	8005188 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800516a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f82a 	bl	80051d2 <UART_WaitOnFlagUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e020      	b.n	80051ca <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b04      	cmp	r3, #4
 8005194:	d10e      	bne.n	80051b4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005196:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f814 	bl	80051d2 <UART_WaitOnFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e00a      	b.n	80051ca <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	4613      	mov	r3, r2
 80051e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e2:	e05d      	b.n	80052a0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ea:	d059      	beq.n	80052a0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ec:	f7fb f81a 	bl	8000224 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d302      	bcc.n	8005202 <UART_WaitOnFlagUntilTimeout+0x30>
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d11b      	bne.n	800523a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005210:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0201 	bic.w	r2, r2, #1
 8005220:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2220      	movs	r2, #32
 8005226:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e042      	b.n	80052c0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d02b      	beq.n	80052a0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005256:	d123      	bne.n	80052a0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005260:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005270:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e00f      	b.n	80052c0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69da      	ldr	r2, [r3, #28]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4013      	ands	r3, r2
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	bf0c      	ite	eq
 80052b0:	2301      	moveq	r3, #1
 80052b2:	2300      	movne	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d092      	beq.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052de:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	661a      	str	r2, [r3, #96]	; 0x60
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f7ff fbb4 	bl	8004a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005340:	2b21      	cmp	r3, #33	; 0x21
 8005342:	d12b      	bne.n	800539c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d110      	bne.n	8005372 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800535e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800536e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005370:	e014      	b.n	800539c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005376:	781a      	ldrb	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	b292      	uxth	r2, r2
 800537e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b4:	2b21      	cmp	r3, #33	; 0x21
 80053b6:	d12f      	bne.n	8005418 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d110      	bne.n	80053e6 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053d2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80053e4:	e018      	b.n	8005418 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	881a      	ldrh	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053f8:	b292      	uxth	r2, r2
 80053fa:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005400:	1c9a      	adds	r2, r3, #2
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800543a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f003 fd05 	bl	8008e58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005464:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800546a:	2b22      	cmp	r3, #34	; 0x22
 800546c:	d13a      	bne.n	80054e4 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005474:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005476:	89bb      	ldrh	r3, [r7, #12]
 8005478:	b2d9      	uxtb	r1, r3
 800547a:	89fb      	ldrh	r3, [r7, #14]
 800547c:	b2da      	uxtb	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	400a      	ands	r2, r1
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005498:	b29b      	uxth	r3, r3
 800549a:	3b01      	subs	r3, #1
 800549c:	b29a      	uxth	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d121      	bne.n	80054f4 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054be:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0201 	bic.w	r2, r2, #1
 80054ce:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f003 fca9 	bl	8008e34 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054e2:	e007      	b.n	80054f4 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0208 	orr.w	r2, r2, #8
 80054f2:	619a      	str	r2, [r3, #24]
}
 80054f4:	bf00      	nop
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800550a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005510:	2b22      	cmp	r3, #34	; 0x22
 8005512:	d13a      	bne.n	800558a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800551a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005520:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005522:	89ba      	ldrh	r2, [r7, #12]
 8005524:	89fb      	ldrh	r3, [r7, #14]
 8005526:	4013      	ands	r3, r2
 8005528:	b29a      	uxth	r2, r3
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005532:	1c9a      	adds	r2, r3, #2
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d121      	bne.n	800559a <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005564:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0201 	bic.w	r2, r2, #1
 8005574:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f003 fc56 	bl	8008e34 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005588:	e007      	b.n	800559a <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699a      	ldr	r2, [r3, #24]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0208 	orr.w	r2, r2, #8
 8005598:	619a      	str	r2, [r3, #24]
}
 800559a:	bf00      	nop
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055be:	f3ef 8305 	mrs	r3, IPSR
 80055c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80055c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10f      	bne.n	80055ea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ca:	f3ef 8310 	mrs	r3, PRIMASK
 80055ce:	607b      	str	r3, [r7, #4]
  return(result);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <osKernelInitialize+0x32>
 80055d6:	4b11      	ldr	r3, [pc, #68]	; (800561c <osKernelInitialize+0x64>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d109      	bne.n	80055f2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055de:	f3ef 8311 	mrs	r3, BASEPRI
 80055e2:	603b      	str	r3, [r7, #0]
  return(result);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80055ea:	f06f 0305 	mvn.w	r3, #5
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	e00c      	b.n	800560c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055f2:	4b0a      	ldr	r3, [pc, #40]	; (800561c <osKernelInitialize+0x64>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d105      	bne.n	8005606 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80055fa:	4b08      	ldr	r3, [pc, #32]	; (800561c <osKernelInitialize+0x64>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	e002      	b.n	800560c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005606:	f04f 33ff 	mov.w	r3, #4294967295
 800560a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800560c:	68fb      	ldr	r3, [r7, #12]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	2000002c 	.word	0x2000002c

08005620 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005626:	f3ef 8305 	mrs	r3, IPSR
 800562a:	60bb      	str	r3, [r7, #8]
  return(result);
 800562c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10f      	bne.n	8005652 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005632:	f3ef 8310 	mrs	r3, PRIMASK
 8005636:	607b      	str	r3, [r7, #4]
  return(result);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d109      	bne.n	8005652 <osKernelStart+0x32>
 800563e:	4b11      	ldr	r3, [pc, #68]	; (8005684 <osKernelStart+0x64>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b02      	cmp	r3, #2
 8005644:	d109      	bne.n	800565a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005646:	f3ef 8311 	mrs	r3, BASEPRI
 800564a:	603b      	str	r3, [r7, #0]
  return(result);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005652:	f06f 0305 	mvn.w	r3, #5
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	e00e      	b.n	8005678 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800565a:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <osKernelStart+0x64>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d107      	bne.n	8005672 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005662:	4b08      	ldr	r3, [pc, #32]	; (8005684 <osKernelStart+0x64>)
 8005664:	2202      	movs	r2, #2
 8005666:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005668:	f001 fa22 	bl	8006ab0 <vTaskStartScheduler>
      stat = osOK;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	e002      	b.n	8005678 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005672:	f04f 33ff 	mov.w	r3, #4294967295
 8005676:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005678:	68fb      	ldr	r3, [r7, #12]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	2000002c 	.word	0x2000002c

08005688 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005688:	b580      	push	{r7, lr}
 800568a:	b092      	sub	sp, #72	; 0x48
 800568c:	af04      	add	r7, sp, #16
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005698:	f3ef 8305 	mrs	r3, IPSR
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f040 8094 	bne.w	80057ce <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056a6:	f3ef 8310 	mrs	r3, PRIMASK
 80056aa:	623b      	str	r3, [r7, #32]
  return(result);
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f040 808d 	bne.w	80057ce <osThreadNew+0x146>
 80056b4:	4b48      	ldr	r3, [pc, #288]	; (80057d8 <osThreadNew+0x150>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d106      	bne.n	80056ca <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056bc:	f3ef 8311 	mrs	r3, BASEPRI
 80056c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f040 8082 	bne.w	80057ce <osThreadNew+0x146>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d07e      	beq.n	80057ce <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80056d0:	2380      	movs	r3, #128	; 0x80
 80056d2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80056d4:	2318      	movs	r3, #24
 80056d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80056d8:	2300      	movs	r3, #0
 80056da:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80056dc:	f107 031b 	add.w	r3, r7, #27
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80056e2:	f04f 33ff 	mov.w	r3, #4294967295
 80056e6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d045      	beq.n	800577a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <osThreadNew+0x74>
        name = attr->name;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <osThreadNew+0x9a>
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	2b38      	cmp	r3, #56	; 0x38
 8005714:	d805      	bhi.n	8005722 <osThreadNew+0x9a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <osThreadNew+0x9e>
        return (NULL);
 8005722:	2300      	movs	r3, #0
 8005724:	e054      	b.n	80057d0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	089b      	lsrs	r3, r3, #2
 8005734:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00e      	beq.n	800575c <osThreadNew+0xd4>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	2b5b      	cmp	r3, #91	; 0x5b
 8005744:	d90a      	bls.n	800575c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800574a:	2b00      	cmp	r3, #0
 800574c:	d006      	beq.n	800575c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <osThreadNew+0xd4>
        mem = 1;
 8005756:	2301      	movs	r3, #1
 8005758:	62bb      	str	r3, [r7, #40]	; 0x28
 800575a:	e010      	b.n	800577e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10c      	bne.n	800577e <osThreadNew+0xf6>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d108      	bne.n	800577e <osThreadNew+0xf6>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d104      	bne.n	800577e <osThreadNew+0xf6>
          mem = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	62bb      	str	r3, [r7, #40]	; 0x28
 8005778:	e001      	b.n	800577e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800577a:	2300      	movs	r3, #0
 800577c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	2b01      	cmp	r3, #1
 8005782:	d110      	bne.n	80057a6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800578c:	9202      	str	r2, [sp, #8]
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005798:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 ffc0 	bl	8006720 <xTaskCreateStatic>
 80057a0:	4603      	mov	r3, r0
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	e013      	b.n	80057ce <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d110      	bne.n	80057ce <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	f107 0314 	add.w	r3, r7, #20
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f001 f807 	bl	80067d2 <xTaskCreate>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d001      	beq.n	80057ce <osThreadNew+0x146>
          hTask = NULL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057ce:	697b      	ldr	r3, [r7, #20]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3738      	adds	r7, #56	; 0x38
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	2000002c 	.word	0x2000002c

080057dc <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	; 0x28
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <osThreadFlagsSet+0x1a>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	da03      	bge.n	80057fe <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80057f6:	f06f 0303 	mvn.w	r3, #3
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	e046      	b.n	800588c <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 80057fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005802:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005804:	f3ef 8305 	mrs	r3, IPSR
 8005808:	61bb      	str	r3, [r7, #24]
  return(result);
 800580a:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10f      	bne.n	8005830 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005810:	f3ef 8310 	mrs	r3, PRIMASK
 8005814:	617b      	str	r3, [r7, #20]
  return(result);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d109      	bne.n	8005830 <osThreadFlagsSet+0x54>
 800581c:	4b1e      	ldr	r3, [pc, #120]	; (8005898 <osThreadFlagsSet+0xbc>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d126      	bne.n	8005872 <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005824:	f3ef 8311 	mrs	r3, BASEPRI
 8005828:	613b      	str	r3, [r7, #16]
  return(result);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d020      	beq.n	8005872 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 8005830:	2300      	movs	r3, #0
 8005832:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8005834:	f107 0308 	add.w	r3, r7, #8
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	2300      	movs	r3, #0
 800583c:	2201      	movs	r2, #1
 800583e:	6839      	ldr	r1, [r7, #0]
 8005840:	69f8      	ldr	r0, [r7, #28]
 8005842:	f001 fefd 	bl	8007640 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8005846:	f107 020c 	add.w	r2, r7, #12
 800584a:	2300      	movs	r3, #0
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	4613      	mov	r3, r2
 8005850:	2200      	movs	r2, #0
 8005852:	2100      	movs	r1, #0
 8005854:	69f8      	ldr	r0, [r7, #28]
 8005856:	f001 fef3 	bl	8007640 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d015      	beq.n	800588c <osThreadFlagsSet+0xb0>
 8005860:	4b0e      	ldr	r3, [pc, #56]	; (800589c <osThreadFlagsSet+0xc0>)
 8005862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	e00c      	b.n	800588c <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8005872:	2300      	movs	r3, #0
 8005874:	2201      	movs	r2, #1
 8005876:	6839      	ldr	r1, [r7, #0]
 8005878:	69f8      	ldr	r0, [r7, #28]
 800587a:	f001 fe3f 	bl	80074fc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800587e:	f107 030c 	add.w	r3, r7, #12
 8005882:	2200      	movs	r2, #0
 8005884:	2100      	movs	r1, #0
 8005886:	69f8      	ldr	r0, [r7, #28]
 8005888:	f001 fe38 	bl	80074fc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800588c:	68fb      	ldr	r3, [r7, #12]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	2000002c 	.word	0x2000002c
 800589c:	e000ed04 	.word	0xe000ed04

080058a0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08e      	sub	sp, #56	; 0x38
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ac:	f3ef 8305 	mrs	r3, IPSR
 80058b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80058b2:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10f      	bne.n	80058d8 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058b8:	f3ef 8310 	mrs	r3, PRIMASK
 80058bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d109      	bne.n	80058d8 <osThreadFlagsWait+0x38>
 80058c4:	4b3f      	ldr	r3, [pc, #252]	; (80059c4 <osThreadFlagsWait+0x124>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d109      	bne.n	80058e0 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058cc:	f3ef 8311 	mrs	r3, BASEPRI
 80058d0:	617b      	str	r3, [r7, #20]
  return(result);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 80058d8:	f06f 0305 	mvn.w	r3, #5
 80058dc:	637b      	str	r3, [r7, #52]	; 0x34
 80058de:	e06b      	b.n	80059b8 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	da03      	bge.n	80058ee <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 80058e6:	f06f 0303 	mvn.w	r3, #3
 80058ea:	637b      	str	r3, [r7, #52]	; 0x34
 80058ec:	e064      	b.n	80059b8 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <osThreadFlagsWait+0x5e>
      clear = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	633b      	str	r3, [r7, #48]	; 0x30
 80058fc:	e001      	b.n	8005902 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800590a:	f001 f9df 	bl	8006ccc <xTaskGetTickCount>
 800590e:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8005910:	f107 0210 	add.w	r2, r7, #16
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005918:	2000      	movs	r0, #0
 800591a:	f001 fd95 	bl	8007448 <xTaskNotifyWait>
 800591e:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	2b01      	cmp	r3, #1
 8005924:	d137      	bne.n	8005996 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8005926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4013      	ands	r3, r2
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005932:	4313      	orrs	r3, r2
 8005934:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00c      	beq.n	800595a <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005944:	4013      	ands	r3, r2
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	429a      	cmp	r2, r3
 800594a:	d032      	beq.n	80059b2 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10f      	bne.n	8005972 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8005952:	f06f 0302 	mvn.w	r3, #2
 8005956:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8005958:	e02e      	b.n	80059b8 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595e:	4013      	ands	r3, r2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d128      	bne.n	80059b6 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d103      	bne.n	8005972 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800596a:	f06f 0302 	mvn.w	r3, #2
 800596e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8005970:	e022      	b.n	80059b8 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8005972:	f001 f9ab 	bl	8006ccc <xTaskGetTickCount>
 8005976:	4602      	mov	r2, r0
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800597e:	6a3a      	ldr	r2, [r7, #32]
 8005980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005982:	429a      	cmp	r2, r3
 8005984:	d902      	bls.n	800598c <osThreadFlagsWait+0xec>
          tout  = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800598a:	e00e      	b.n	80059aa <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800598c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005994:	e009      	b.n	80059aa <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d103      	bne.n	80059a4 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800599c:	f06f 0302 	mvn.w	r3, #2
 80059a0:	637b      	str	r3, [r7, #52]	; 0x34
 80059a2:	e002      	b.n	80059aa <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80059a4:	f06f 0301 	mvn.w	r3, #1
 80059a8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1af      	bne.n	8005910 <osThreadFlagsWait+0x70>
 80059b0:	e002      	b.n	80059b8 <osThreadFlagsWait+0x118>
            break;
 80059b2:	bf00      	nop
 80059b4:	e000      	b.n	80059b8 <osThreadFlagsWait+0x118>
            break;
 80059b6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80059b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3738      	adds	r7, #56	; 0x38
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	2000002c 	.word	0x2000002c

080059c8 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059d0:	f3ef 8305 	mrs	r3, IPSR
 80059d4:	613b      	str	r3, [r7, #16]
  return(result);
 80059d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10f      	bne.n	80059fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059dc:	f3ef 8310 	mrs	r3, PRIMASK
 80059e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d109      	bne.n	80059fc <osDelay+0x34>
 80059e8:	4b0d      	ldr	r3, [pc, #52]	; (8005a20 <osDelay+0x58>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d109      	bne.n	8005a04 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059f0:	f3ef 8311 	mrs	r3, BASEPRI
 80059f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <osDelay+0x3c>
    stat = osErrorISR;
 80059fc:	f06f 0305 	mvn.w	r3, #5
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	e007      	b.n	8005a14 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f001 f81a 	bl	8006a48 <vTaskDelay>
    }
  }

  return (stat);
 8005a14:	697b      	ldr	r3, [r7, #20]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	2000002c 	.word	0x2000002c

08005a24 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08c      	sub	sp, #48	; 0x30
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a34:	f3ef 8305 	mrs	r3, IPSR
 8005a38:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a3a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d170      	bne.n	8005b22 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a40:	f3ef 8310 	mrs	r3, PRIMASK
 8005a44:	617b      	str	r3, [r7, #20]
  return(result);
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d16a      	bne.n	8005b22 <osMessageQueueNew+0xfe>
 8005a4c:	4b37      	ldr	r3, [pc, #220]	; (8005b2c <osMessageQueueNew+0x108>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d105      	bne.n	8005a60 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a54:	f3ef 8311 	mrs	r3, BASEPRI
 8005a58:	613b      	str	r3, [r7, #16]
  return(result);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d160      	bne.n	8005b22 <osMessageQueueNew+0xfe>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d05d      	beq.n	8005b22 <osMessageQueueNew+0xfe>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d05a      	beq.n	8005b22 <osMessageQueueNew+0xfe>
    mem = -1;
 8005a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a70:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d029      	beq.n	8005acc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d012      	beq.n	8005aa6 <osMessageQueueNew+0x82>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b4f      	cmp	r3, #79	; 0x4f
 8005a86:	d90e      	bls.n	8005aa6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00a      	beq.n	8005aa6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	695a      	ldr	r2, [r3, #20]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	fb01 f303 	mul.w	r3, r1, r3
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d302      	bcc.n	8005aa6 <osMessageQueueNew+0x82>
        mem = 1;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	623b      	str	r3, [r7, #32]
 8005aa4:	e014      	b.n	8005ad0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d110      	bne.n	8005ad0 <osMessageQueueNew+0xac>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10c      	bne.n	8005ad0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d108      	bne.n	8005ad0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d104      	bne.n	8005ad0 <osMessageQueueNew+0xac>
          mem = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	623b      	str	r3, [r7, #32]
 8005aca:	e001      	b.n	8005ad0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d10c      	bne.n	8005af0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6899      	ldr	r1, [r3, #8]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f972 	bl	8005dd0 <xQueueGenericCreateStatic>
 8005aec:	6278      	str	r0, [r7, #36]	; 0x24
 8005aee:	e008      	b.n	8005b02 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d105      	bne.n	8005b02 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005af6:	2200      	movs	r2, #0
 8005af8:	68b9      	ldr	r1, [r7, #8]
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f9da 	bl	8005eb4 <xQueueGenericCreate>
 8005b00:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00c      	beq.n	8005b22 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <osMessageQueueNew+0xf2>
        name = attr->name;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	e001      	b.n	8005b1a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005b1a:	69f9      	ldr	r1, [r7, #28]
 8005b1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b1e:	f000 fda3 	bl	8006668 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3728      	adds	r7, #40	; 0x28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	2000002c 	.word	0x2000002c

08005b30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4a07      	ldr	r2, [pc, #28]	; (8005b5c <vApplicationGetIdleTaskMemory+0x2c>)
 8005b40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	4a06      	ldr	r2, [pc, #24]	; (8005b60 <vApplicationGetIdleTaskMemory+0x30>)
 8005b46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2280      	movs	r2, #128	; 0x80
 8005b4c:	601a      	str	r2, [r3, #0]
}
 8005b4e:	bf00      	nop
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	20000030 	.word	0x20000030
 8005b60:	2000008c 	.word	0x2000008c

08005b64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4a07      	ldr	r2, [pc, #28]	; (8005b90 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	4a06      	ldr	r2, [pc, #24]	; (8005b94 <vApplicationGetTimerTaskMemory+0x30>)
 8005b7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b82:	601a      	str	r2, [r3, #0]
}
 8005b84:	bf00      	nop
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	2000028c 	.word	0x2000028c
 8005b94:	200002e8 	.word	0x200002e8

08005b98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f103 0208 	add.w	r2, r3, #8
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f103 0208 	add.w	r2, r3, #8
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f103 0208 	add.w	r2, r3, #8
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b085      	sub	sp, #20
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	601a      	str	r2, [r3, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c50:	d103      	bne.n	8005c5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	e00c      	b.n	8005c74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	e002      	b.n	8005c68 <vListInsert+0x2e>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d2f6      	bcs.n	8005c62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	601a      	str	r2, [r3, #0]
}
 8005ca0:	bf00      	nop
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6892      	ldr	r2, [r2, #8]
 8005cc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6852      	ldr	r2, [r2, #4]
 8005ccc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d103      	bne.n	8005ce0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	1e5a      	subs	r2, r3, #1
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d109      	bne.n	8005d28 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	e7fe      	b.n	8005d26 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005d28:	f002 f9d8 	bl	80080dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d34:	68f9      	ldr	r1, [r7, #12]
 8005d36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d38:	fb01 f303 	mul.w	r3, r1, r3
 8005d3c:	441a      	add	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d5e:	fb01 f303 	mul.w	r3, r1, r3
 8005d62:	441a      	add	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	22ff      	movs	r2, #255	; 0xff
 8005d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	22ff      	movs	r2, #255	; 0xff
 8005d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d114      	bne.n	8005da8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d01a      	beq.n	8005dbc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3310      	adds	r3, #16
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f001 f916 	bl	8006fbc <xTaskRemoveFromEventList>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d012      	beq.n	8005dbc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d96:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <xQueueGenericReset+0xcc>)
 8005d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	e009      	b.n	8005dbc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3310      	adds	r3, #16
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff fef3 	bl	8005b98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3324      	adds	r3, #36	; 0x24
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff feee 	bl	8005b98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005dbc:	f002 f9bc 	bl	8008138 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005dc0:	2301      	movs	r3, #1
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	e000ed04 	.word	0xe000ed04

08005dd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08e      	sub	sp, #56	; 0x38
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d109      	bne.n	8005df8 <xQueueGenericCreateStatic+0x28>
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df6:	e7fe      	b.n	8005df6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d109      	bne.n	8005e12 <xQueueGenericCreateStatic+0x42>
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e10:	e7fe      	b.n	8005e10 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <xQueueGenericCreateStatic+0x4e>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <xQueueGenericCreateStatic+0x52>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <xQueueGenericCreateStatic+0x54>
 8005e22:	2300      	movs	r3, #0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d109      	bne.n	8005e3c <xQueueGenericCreateStatic+0x6c>
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	623b      	str	r3, [r7, #32]
 8005e3a:	e7fe      	b.n	8005e3a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d102      	bne.n	8005e48 <xQueueGenericCreateStatic+0x78>
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <xQueueGenericCreateStatic+0x7c>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <xQueueGenericCreateStatic+0x7e>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d109      	bne.n	8005e66 <xQueueGenericCreateStatic+0x96>
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	61fb      	str	r3, [r7, #28]
 8005e64:	e7fe      	b.n	8005e64 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e66:	2350      	movs	r3, #80	; 0x50
 8005e68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b50      	cmp	r3, #80	; 0x50
 8005e6e:	d009      	beq.n	8005e84 <xQueueGenericCreateStatic+0xb4>
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	e7fe      	b.n	8005e82 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00d      	beq.n	8005eaa <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f842 	bl	8005f2e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3730      	adds	r7, #48	; 0x30
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08a      	sub	sp, #40	; 0x28
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d109      	bne.n	8005edc <xQueueGenericCreate+0x28>
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	e7fe      	b.n	8005eda <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d102      	bne.n	8005ee8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61fb      	str	r3, [r7, #28]
 8005ee6:	e004      	b.n	8005ef2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	fb02 f303 	mul.w	r3, r2, r3
 8005ef0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	3350      	adds	r3, #80	; 0x50
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f002 fa0a 	bl	8008310 <pvPortMalloc>
 8005efc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00f      	beq.n	8005f24 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	3350      	adds	r3, #80	; 0x50
 8005f08:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f12:	79fa      	ldrb	r2, [r7, #7]
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f805 	bl	8005f2e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005f24:	69bb      	ldr	r3, [r7, #24]
	}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3720      	adds	r7, #32
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	e002      	b.n	8005f50 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	69b8      	ldr	r0, [r7, #24]
 8005f60:	f7ff fece 	bl	8005d00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f6c:	bf00      	nop
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08e      	sub	sp, #56	; 0x38
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f82:	2300      	movs	r3, #0
 8005f84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d109      	bne.n	8005fa4 <xQueueGenericSend+0x30>
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fa2:	e7fe      	b.n	8005fa2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d103      	bne.n	8005fb2 <xQueueGenericSend+0x3e>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <xQueueGenericSend+0x42>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <xQueueGenericSend+0x44>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d109      	bne.n	8005fd0 <xQueueGenericSend+0x5c>
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fce:	e7fe      	b.n	8005fce <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d103      	bne.n	8005fde <xQueueGenericSend+0x6a>
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <xQueueGenericSend+0x6e>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <xQueueGenericSend+0x70>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d109      	bne.n	8005ffc <xQueueGenericSend+0x88>
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	623b      	str	r3, [r7, #32]
 8005ffa:	e7fe      	b.n	8005ffa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ffc:	f001 f99a 	bl	8007334 <xTaskGetSchedulerState>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d102      	bne.n	800600c <xQueueGenericSend+0x98>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <xQueueGenericSend+0x9c>
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <xQueueGenericSend+0x9e>
 8006010:	2300      	movs	r3, #0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <xQueueGenericSend+0xb6>
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	e7fe      	b.n	8006028 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800602a:	f002 f857 	bl	80080dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006036:	429a      	cmp	r2, r3
 8006038:	d302      	bcc.n	8006040 <xQueueGenericSend+0xcc>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b02      	cmp	r3, #2
 800603e:	d129      	bne.n	8006094 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006046:	f000 f9ff 	bl	8006448 <prvCopyDataToQueue>
 800604a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	2b00      	cmp	r3, #0
 8006052:	d010      	beq.n	8006076 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	3324      	adds	r3, #36	; 0x24
 8006058:	4618      	mov	r0, r3
 800605a:	f000 ffaf 	bl	8006fbc <xTaskRemoveFromEventList>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d013      	beq.n	800608c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006064:	4b3f      	ldr	r3, [pc, #252]	; (8006164 <xQueueGenericSend+0x1f0>)
 8006066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	e00a      	b.n	800608c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d007      	beq.n	800608c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800607c:	4b39      	ldr	r3, [pc, #228]	; (8006164 <xQueueGenericSend+0x1f0>)
 800607e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800608c:	f002 f854 	bl	8008138 <vPortExitCritical>
				return pdPASS;
 8006090:	2301      	movs	r3, #1
 8006092:	e063      	b.n	800615c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d103      	bne.n	80060a2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800609a:	f002 f84d 	bl	8008138 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	e05c      	b.n	800615c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060a8:	f107 0314 	add.w	r3, r7, #20
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 ffe7 	bl	8007080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060b2:	2301      	movs	r3, #1
 80060b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060b6:	f002 f83f 	bl	8008138 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060ba:	f000 fd5d 	bl	8006b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060be:	f002 f80d 	bl	80080dc <vPortEnterCritical>
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060c8:	b25b      	sxtb	r3, r3
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ce:	d103      	bne.n	80060d8 <xQueueGenericSend+0x164>
 80060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060de:	b25b      	sxtb	r3, r3
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e4:	d103      	bne.n	80060ee <xQueueGenericSend+0x17a>
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060ee:	f002 f823 	bl	8008138 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060f2:	1d3a      	adds	r2, r7, #4
 80060f4:	f107 0314 	add.w	r3, r7, #20
 80060f8:	4611      	mov	r1, r2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 ffd6 	bl	80070ac <xTaskCheckForTimeOut>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d124      	bne.n	8006150 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006108:	f000 fa96 	bl	8006638 <prvIsQueueFull>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d018      	beq.n	8006144 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	3310      	adds	r3, #16
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	4611      	mov	r1, r2
 800611a:	4618      	mov	r0, r3
 800611c:	f000 ff00 	bl	8006f20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006122:	f000 fa21 	bl	8006568 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006126:	f000 fd35 	bl	8006b94 <xTaskResumeAll>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	f47f af7c 	bne.w	800602a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006132:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <xQueueGenericSend+0x1f0>)
 8006134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	e772      	b.n	800602a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006146:	f000 fa0f 	bl	8006568 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800614a:	f000 fd23 	bl	8006b94 <xTaskResumeAll>
 800614e:	e76c      	b.n	800602a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006152:	f000 fa09 	bl	8006568 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006156:	f000 fd1d 	bl	8006b94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800615a:	2300      	movs	r3, #0
		}
	}
}
 800615c:	4618      	mov	r0, r3
 800615e:	3738      	adds	r7, #56	; 0x38
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08e      	sub	sp, #56	; 0x38
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	2b00      	cmp	r3, #0
 800617e:	d109      	bne.n	8006194 <xQueueGenericSendFromISR+0x2c>
 8006180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
 8006192:	e7fe      	b.n	8006192 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d103      	bne.n	80061a2 <xQueueGenericSendFromISR+0x3a>
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <xQueueGenericSendFromISR+0x3e>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e000      	b.n	80061a8 <xQueueGenericSendFromISR+0x40>
 80061a6:	2300      	movs	r3, #0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d109      	bne.n	80061c0 <xQueueGenericSendFromISR+0x58>
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	623b      	str	r3, [r7, #32]
 80061be:	e7fe      	b.n	80061be <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d103      	bne.n	80061ce <xQueueGenericSendFromISR+0x66>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d101      	bne.n	80061d2 <xQueueGenericSendFromISR+0x6a>
 80061ce:	2301      	movs	r3, #1
 80061d0:	e000      	b.n	80061d4 <xQueueGenericSendFromISR+0x6c>
 80061d2:	2300      	movs	r3, #0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d109      	bne.n	80061ec <xQueueGenericSendFromISR+0x84>
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	61fb      	str	r3, [r7, #28]
 80061ea:	e7fe      	b.n	80061ea <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061ec:	f002 f852 	bl	8008294 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061f0:	f3ef 8211 	mrs	r2, BASEPRI
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	61ba      	str	r2, [r7, #24]
 8006206:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006208:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800620a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006214:	429a      	cmp	r2, r3
 8006216:	d302      	bcc.n	800621e <xQueueGenericSendFromISR+0xb6>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d12c      	bne.n	8006278 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800622e:	f000 f90b 	bl	8006448 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006232:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623a:	d112      	bne.n	8006262 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	2b00      	cmp	r3, #0
 8006242:	d016      	beq.n	8006272 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	3324      	adds	r3, #36	; 0x24
 8006248:	4618      	mov	r0, r3
 800624a:	f000 feb7 	bl	8006fbc <xTaskRemoveFromEventList>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00e      	beq.n	8006272 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00b      	beq.n	8006272 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	e007      	b.n	8006272 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006262:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006266:	3301      	adds	r3, #1
 8006268:	b2db      	uxtb	r3, r3
 800626a:	b25a      	sxtb	r2, r3
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006272:	2301      	movs	r3, #1
 8006274:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006276:	e001      	b.n	800627c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006278:	2300      	movs	r3, #0
 800627a:	637b      	str	r3, [r7, #52]	; 0x34
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006288:	4618      	mov	r0, r3
 800628a:	3738      	adds	r7, #56	; 0x38
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08c      	sub	sp, #48	; 0x30
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800629c:	2300      	movs	r3, #0
 800629e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <xQueueReceive+0x2e>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	623b      	str	r3, [r7, #32]
 80062bc:	e7fe      	b.n	80062bc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d103      	bne.n	80062cc <xQueueReceive+0x3c>
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <xQueueReceive+0x40>
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <xQueueReceive+0x42>
 80062d0:	2300      	movs	r3, #0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <xQueueReceive+0x5a>
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	61fb      	str	r3, [r7, #28]
 80062e8:	e7fe      	b.n	80062e8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062ea:	f001 f823 	bl	8007334 <xTaskGetSchedulerState>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <xQueueReceive+0x6a>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <xQueueReceive+0x6e>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e000      	b.n	8006300 <xQueueReceive+0x70>
 80062fe:	2300      	movs	r3, #0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d109      	bne.n	8006318 <xQueueReceive+0x88>
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	61bb      	str	r3, [r7, #24]
 8006316:	e7fe      	b.n	8006316 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006318:	f001 fee0 	bl	80080dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01f      	beq.n	8006368 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800632c:	f000 f8f6 	bl	800651c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	1e5a      	subs	r2, r3, #1
 8006334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006336:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00f      	beq.n	8006360 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006342:	3310      	adds	r3, #16
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fe39 	bl	8006fbc <xTaskRemoveFromEventList>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006350:	4b3c      	ldr	r3, [pc, #240]	; (8006444 <xQueueReceive+0x1b4>)
 8006352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006360:	f001 feea 	bl	8008138 <vPortExitCritical>
				return pdPASS;
 8006364:	2301      	movs	r3, #1
 8006366:	e069      	b.n	800643c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800636e:	f001 fee3 	bl	8008138 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006372:	2300      	movs	r3, #0
 8006374:	e062      	b.n	800643c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d106      	bne.n	800638a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800637c:	f107 0310 	add.w	r3, r7, #16
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fe7d 	bl	8007080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006386:	2301      	movs	r3, #1
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800638a:	f001 fed5 	bl	8008138 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800638e:	f000 fbf3 	bl	8006b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006392:	f001 fea3 	bl	80080dc <vPortEnterCritical>
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800639c:	b25b      	sxtb	r3, r3
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a2:	d103      	bne.n	80063ac <xQueueReceive+0x11c>
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063b2:	b25b      	sxtb	r3, r3
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d103      	bne.n	80063c2 <xQueueReceive+0x132>
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063c2:	f001 feb9 	bl	8008138 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063c6:	1d3a      	adds	r2, r7, #4
 80063c8:	f107 0310 	add.w	r3, r7, #16
 80063cc:	4611      	mov	r1, r2
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fe6c 	bl	80070ac <xTaskCheckForTimeOut>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d123      	bne.n	8006422 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063dc:	f000 f916 	bl	800660c <prvIsQueueEmpty>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d017      	beq.n	8006416 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	3324      	adds	r3, #36	; 0x24
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	4611      	mov	r1, r2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fd96 	bl	8006f20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063f6:	f000 f8b7 	bl	8006568 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063fa:	f000 fbcb 	bl	8006b94 <xTaskResumeAll>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d189      	bne.n	8006318 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006404:	4b0f      	ldr	r3, [pc, #60]	; (8006444 <xQueueReceive+0x1b4>)
 8006406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	e780      	b.n	8006318 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006418:	f000 f8a6 	bl	8006568 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800641c:	f000 fbba 	bl	8006b94 <xTaskResumeAll>
 8006420:	e77a      	b.n	8006318 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006424:	f000 f8a0 	bl	8006568 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006428:	f000 fbb4 	bl	8006b94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800642c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800642e:	f000 f8ed 	bl	800660c <prvIsQueueEmpty>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	f43f af6f 	beq.w	8006318 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800643a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800643c:	4618      	mov	r0, r3
 800643e:	3730      	adds	r7, #48	; 0x30
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	e000ed04 	.word	0xe000ed04

08006448 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10d      	bne.n	8006482 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d14d      	bne.n	800650a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	4618      	mov	r0, r3
 8006474:	f000 ff7c 	bl	8007370 <xTaskPriorityDisinherit>
 8006478:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	605a      	str	r2, [r3, #4]
 8006480:	e043      	b.n	800650a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d119      	bne.n	80064bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6898      	ldr	r0, [r3, #8]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	461a      	mov	r2, r3
 8006492:	68b9      	ldr	r1, [r7, #8]
 8006494:	f002 fdb4 	bl	8009000 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a0:	441a      	add	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d32b      	bcc.n	800650a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	609a      	str	r2, [r3, #8]
 80064ba:	e026      	b.n	800650a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	68d8      	ldr	r0, [r3, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	461a      	mov	r2, r3
 80064c6:	68b9      	ldr	r1, [r7, #8]
 80064c8:	f002 fd9a 	bl	8009000 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d4:	425b      	negs	r3, r3
 80064d6:	441a      	add	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d207      	bcs.n	80064f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f0:	425b      	negs	r3, r3
 80064f2:	441a      	add	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d105      	bne.n	800650a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	3b01      	subs	r3, #1
 8006508:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006512:	697b      	ldr	r3, [r7, #20]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	d018      	beq.n	8006560 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	441a      	add	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	429a      	cmp	r2, r3
 8006546:	d303      	bcc.n	8006550 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68d9      	ldr	r1, [r3, #12]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006558:	461a      	mov	r2, r3
 800655a:	6838      	ldr	r0, [r7, #0]
 800655c:	f002 fd50 	bl	8009000 <memcpy>
	}
}
 8006560:	bf00      	nop
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006570:	f001 fdb4 	bl	80080dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800657a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800657c:	e011      	b.n	80065a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	2b00      	cmp	r3, #0
 8006584:	d012      	beq.n	80065ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3324      	adds	r3, #36	; 0x24
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fd16 	bl	8006fbc <xTaskRemoveFromEventList>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006596:	f000 fde9 	bl	800716c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	3b01      	subs	r3, #1
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	dce9      	bgt.n	800657e <prvUnlockQueue+0x16>
 80065aa:	e000      	b.n	80065ae <prvUnlockQueue+0x46>
					break;
 80065ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	22ff      	movs	r2, #255	; 0xff
 80065b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80065b6:	f001 fdbf 	bl	8008138 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80065ba:	f001 fd8f 	bl	80080dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065c6:	e011      	b.n	80065ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d012      	beq.n	80065f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	3310      	adds	r3, #16
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 fcf1 	bl	8006fbc <xTaskRemoveFromEventList>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065e0:	f000 fdc4 	bl	800716c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	dce9      	bgt.n	80065c8 <prvUnlockQueue+0x60>
 80065f4:	e000      	b.n	80065f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	22ff      	movs	r2, #255	; 0xff
 80065fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006600:	f001 fd9a 	bl	8008138 <vPortExitCritical>
}
 8006604:	bf00      	nop
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006614:	f001 fd62 	bl	80080dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661c:	2b00      	cmp	r3, #0
 800661e:	d102      	bne.n	8006626 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006620:	2301      	movs	r3, #1
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	e001      	b.n	800662a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800662a:	f001 fd85 	bl	8008138 <vPortExitCritical>

	return xReturn;
 800662e:	68fb      	ldr	r3, [r7, #12]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006640:	f001 fd4c 	bl	80080dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664c:	429a      	cmp	r2, r3
 800664e:	d102      	bne.n	8006656 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006650:	2301      	movs	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	e001      	b.n	800665a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800665a:	f001 fd6d 	bl	8008138 <vPortExitCritical>

	return xReturn;
 800665e:	68fb      	ldr	r3, [r7, #12]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	e014      	b.n	80066a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006678:	4a0e      	ldr	r2, [pc, #56]	; (80066b4 <vQueueAddToRegistry+0x4c>)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10b      	bne.n	800669c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006684:	490b      	ldr	r1, [pc, #44]	; (80066b4 <vQueueAddToRegistry+0x4c>)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800668e:	4a09      	ldr	r2, [pc, #36]	; (80066b4 <vQueueAddToRegistry+0x4c>)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	4413      	add	r3, r2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800669a:	e005      	b.n	80066a8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3301      	adds	r3, #1
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b07      	cmp	r3, #7
 80066a6:	d9e7      	bls.n	8006678 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80066a8:	bf00      	nop
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	20001d3c 	.word	0x20001d3c

080066b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80066c8:	f001 fd08 	bl	80080dc <vPortEnterCritical>
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066d2:	b25b      	sxtb	r3, r3
 80066d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d8:	d103      	bne.n	80066e2 <vQueueWaitForMessageRestricted+0x2a>
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066e8:	b25b      	sxtb	r3, r3
 80066ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ee:	d103      	bne.n	80066f8 <vQueueWaitForMessageRestricted+0x40>
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066f8:	f001 fd1e 	bl	8008138 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	2b00      	cmp	r3, #0
 8006702:	d106      	bne.n	8006712 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	3324      	adds	r3, #36	; 0x24
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	4618      	mov	r0, r3
 800670e:	f000 fc2b 	bl	8006f68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006712:	6978      	ldr	r0, [r7, #20]
 8006714:	f7ff ff28 	bl	8006568 <prvUnlockQueue>
	}
 8006718:	bf00      	nop
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08e      	sub	sp, #56	; 0x38
 8006724:	af04      	add	r7, sp, #16
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800672e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006730:	2b00      	cmp	r3, #0
 8006732:	d109      	bne.n	8006748 <xTaskCreateStatic+0x28>
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	623b      	str	r3, [r7, #32]
 8006746:	e7fe      	b.n	8006746 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <xTaskCreateStatic+0x42>
 800674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	e7fe      	b.n	8006760 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006762:	235c      	movs	r3, #92	; 0x5c
 8006764:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	2b5c      	cmp	r3, #92	; 0x5c
 800676a:	d009      	beq.n	8006780 <xTaskCreateStatic+0x60>
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	e7fe      	b.n	800677e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	2b00      	cmp	r3, #0
 8006784:	d01e      	beq.n	80067c4 <xTaskCreateStatic+0xa4>
 8006786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01b      	beq.n	80067c4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800678c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006794:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	2202      	movs	r2, #2
 800679a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800679e:	2300      	movs	r3, #0
 80067a0:	9303      	str	r3, [sp, #12]
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	9302      	str	r3, [sp, #8]
 80067a6:	f107 0314 	add.w	r3, r7, #20
 80067aa:	9301      	str	r3, [sp, #4]
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 f850 	bl	800685c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067be:	f000 f8d3 	bl	8006968 <prvAddNewTaskToReadyList>
 80067c2:	e001      	b.n	80067c8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067c8:	697b      	ldr	r3, [r7, #20]
	}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3728      	adds	r7, #40	; 0x28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b08c      	sub	sp, #48	; 0x30
 80067d6:	af04      	add	r7, sp, #16
 80067d8:	60f8      	str	r0, [r7, #12]
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	603b      	str	r3, [r7, #0]
 80067de:	4613      	mov	r3, r2
 80067e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4618      	mov	r0, r3
 80067e8:	f001 fd92 	bl	8008310 <pvPortMalloc>
 80067ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00e      	beq.n	8006812 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80067f4:	205c      	movs	r0, #92	; 0x5c
 80067f6:	f001 fd8b 	bl	8008310 <pvPortMalloc>
 80067fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
 8006808:	e005      	b.n	8006816 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800680a:	6978      	ldr	r0, [r7, #20]
 800680c:	f001 fe42 	bl	8008494 <vPortFree>
 8006810:	e001      	b.n	8006816 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d017      	beq.n	800684c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006824:	88fa      	ldrh	r2, [r7, #6]
 8006826:	2300      	movs	r3, #0
 8006828:	9303      	str	r3, [sp, #12]
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	9302      	str	r3, [sp, #8]
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	9301      	str	r3, [sp, #4]
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 f80e 	bl	800685c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006840:	69f8      	ldr	r0, [r7, #28]
 8006842:	f000 f891 	bl	8006968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006846:	2301      	movs	r3, #1
 8006848:	61bb      	str	r3, [r7, #24]
 800684a:	e002      	b.n	8006852 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800684c:	f04f 33ff 	mov.w	r3, #4294967295
 8006850:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006852:	69bb      	ldr	r3, [r7, #24]
	}
 8006854:	4618      	mov	r0, r3
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	461a      	mov	r2, r3
 8006874:	21a5      	movs	r1, #165	; 0xa5
 8006876:	f002 fbce 	bl	8009016 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006884:	3b01      	subs	r3, #1
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	f023 0307 	bic.w	r3, r3, #7
 8006892:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	2b00      	cmp	r3, #0
 800689c:	d009      	beq.n	80068b2 <prvInitialiseNewTask+0x56>
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	e7fe      	b.n	80068b0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068b2:	2300      	movs	r3, #0
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	e012      	b.n	80068de <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	7819      	ldrb	r1, [r3, #0]
 80068c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	3334      	adds	r3, #52	; 0x34
 80068c8:	460a      	mov	r2, r1
 80068ca:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	4413      	add	r3, r2
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d006      	beq.n	80068e6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	3301      	adds	r3, #1
 80068dc:	61fb      	str	r3, [r7, #28]
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	2b0f      	cmp	r3, #15
 80068e2:	d9e9      	bls.n	80068b8 <prvInitialiseNewTask+0x5c>
 80068e4:	e000      	b.n	80068e8 <prvInitialiseNewTask+0x8c>
		{
			break;
 80068e6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	2b37      	cmp	r3, #55	; 0x37
 80068f4:	d901      	bls.n	80068fa <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068f6:	2337      	movs	r3, #55	; 0x37
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006904:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	2200      	movs	r2, #0
 800690a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	3304      	adds	r3, #4
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff f961 	bl	8005bd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	3318      	adds	r3, #24
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff f95c 	bl	8005bd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006924:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800692c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006934:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	2200      	movs	r2, #0
 800693a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	68f9      	ldr	r1, [r7, #12]
 8006948:	69b8      	ldr	r0, [r7, #24]
 800694a:	f001 fa9f 	bl	8007e8c <pxPortInitialiseStack>
 800694e:	4602      	mov	r2, r0
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006960:	bf00      	nop
 8006962:	3720      	adds	r7, #32
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006970:	f001 fbb4 	bl	80080dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006974:	4b2d      	ldr	r3, [pc, #180]	; (8006a2c <prvAddNewTaskToReadyList+0xc4>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3301      	adds	r3, #1
 800697a:	4a2c      	ldr	r2, [pc, #176]	; (8006a2c <prvAddNewTaskToReadyList+0xc4>)
 800697c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800697e:	4b2c      	ldr	r3, [pc, #176]	; (8006a30 <prvAddNewTaskToReadyList+0xc8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006986:	4a2a      	ldr	r2, [pc, #168]	; (8006a30 <prvAddNewTaskToReadyList+0xc8>)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800698c:	4b27      	ldr	r3, [pc, #156]	; (8006a2c <prvAddNewTaskToReadyList+0xc4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d110      	bne.n	80069b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006994:	f000 fc0e 	bl	80071b4 <prvInitialiseTaskLists>
 8006998:	e00d      	b.n	80069b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800699a:	4b26      	ldr	r3, [pc, #152]	; (8006a34 <prvAddNewTaskToReadyList+0xcc>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069a2:	4b23      	ldr	r3, [pc, #140]	; (8006a30 <prvAddNewTaskToReadyList+0xc8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d802      	bhi.n	80069b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069b0:	4a1f      	ldr	r2, [pc, #124]	; (8006a30 <prvAddNewTaskToReadyList+0xc8>)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069b6:	4b20      	ldr	r3, [pc, #128]	; (8006a38 <prvAddNewTaskToReadyList+0xd0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	4a1e      	ldr	r2, [pc, #120]	; (8006a38 <prvAddNewTaskToReadyList+0xd0>)
 80069be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80069c0:	4b1d      	ldr	r3, [pc, #116]	; (8006a38 <prvAddNewTaskToReadyList+0xd0>)
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069cc:	4b1b      	ldr	r3, [pc, #108]	; (8006a3c <prvAddNewTaskToReadyList+0xd4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d903      	bls.n	80069dc <prvAddNewTaskToReadyList+0x74>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	4a18      	ldr	r2, [pc, #96]	; (8006a3c <prvAddNewTaskToReadyList+0xd4>)
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e0:	4613      	mov	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4a15      	ldr	r2, [pc, #84]	; (8006a40 <prvAddNewTaskToReadyList+0xd8>)
 80069ea:	441a      	add	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3304      	adds	r3, #4
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f7ff f8fd 	bl	8005bf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069f8:	f001 fb9e 	bl	8008138 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069fc:	4b0d      	ldr	r3, [pc, #52]	; (8006a34 <prvAddNewTaskToReadyList+0xcc>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00e      	beq.n	8006a22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a04:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <prvAddNewTaskToReadyList+0xc8>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d207      	bcs.n	8006a22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a12:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <prvAddNewTaskToReadyList+0xdc>)
 8006a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000bbc 	.word	0x20000bbc
 8006a30:	200006e8 	.word	0x200006e8
 8006a34:	20000bc8 	.word	0x20000bc8
 8006a38:	20000bd8 	.word	0x20000bd8
 8006a3c:	20000bc4 	.word	0x20000bc4
 8006a40:	200006ec 	.word	0x200006ec
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d016      	beq.n	8006a88 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a5a:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <vTaskDelay+0x60>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d009      	beq.n	8006a76 <vTaskDelay+0x2e>
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	60bb      	str	r3, [r7, #8]
 8006a74:	e7fe      	b.n	8006a74 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006a76:	f000 f87f 	bl	8006b78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fea7 	bl	80077d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a82:	f000 f887 	bl	8006b94 <xTaskResumeAll>
 8006a86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d107      	bne.n	8006a9e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006a8e:	4b07      	ldr	r3, [pc, #28]	; (8006aac <vTaskDelay+0x64>)
 8006a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a9e:	bf00      	nop
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000be4 	.word	0x20000be4
 8006aac:	e000ed04 	.word	0xe000ed04

08006ab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	; 0x28
 8006ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006abe:	463a      	mov	r2, r7
 8006ac0:	1d39      	adds	r1, r7, #4
 8006ac2:	f107 0308 	add.w	r3, r7, #8
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff f832 	bl	8005b30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	9202      	str	r2, [sp, #8]
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	2300      	movs	r3, #0
 8006adc:	460a      	mov	r2, r1
 8006ade:	4920      	ldr	r1, [pc, #128]	; (8006b60 <vTaskStartScheduler+0xb0>)
 8006ae0:	4820      	ldr	r0, [pc, #128]	; (8006b64 <vTaskStartScheduler+0xb4>)
 8006ae2:	f7ff fe1d 	bl	8006720 <xTaskCreateStatic>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	4b1f      	ldr	r3, [pc, #124]	; (8006b68 <vTaskStartScheduler+0xb8>)
 8006aea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006aec:	4b1e      	ldr	r3, [pc, #120]	; (8006b68 <vTaskStartScheduler+0xb8>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006af4:	2301      	movs	r3, #1
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	e001      	b.n	8006afe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d102      	bne.n	8006b0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b04:	f000 feb8 	bl	8007878 <xTimerCreateTimerTask>
 8006b08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d115      	bne.n	8006b3c <vTaskStartScheduler+0x8c>
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b22:	4b12      	ldr	r3, [pc, #72]	; (8006b6c <vTaskStartScheduler+0xbc>)
 8006b24:	f04f 32ff 	mov.w	r2, #4294967295
 8006b28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b2a:	4b11      	ldr	r3, [pc, #68]	; (8006b70 <vTaskStartScheduler+0xc0>)
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006b30:	4b10      	ldr	r3, [pc, #64]	; (8006b74 <vTaskStartScheduler+0xc4>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b36:	f001 fa33 	bl	8007fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b3a:	e00d      	b.n	8006b58 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b42:	d109      	bne.n	8006b58 <vTaskStartScheduler+0xa8>
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	e7fe      	b.n	8006b56 <vTaskStartScheduler+0xa6>
}
 8006b58:	bf00      	nop
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	08009270 	.word	0x08009270
 8006b64:	08007185 	.word	0x08007185
 8006b68:	20000be0 	.word	0x20000be0
 8006b6c:	20000bdc 	.word	0x20000bdc
 8006b70:	20000bc8 	.word	0x20000bc8
 8006b74:	20000bc0 	.word	0x20000bc0

08006b78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006b7c:	4b04      	ldr	r3, [pc, #16]	; (8006b90 <vTaskSuspendAll+0x18>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3301      	adds	r3, #1
 8006b82:	4a03      	ldr	r2, [pc, #12]	; (8006b90 <vTaskSuspendAll+0x18>)
 8006b84:	6013      	str	r3, [r2, #0]
}
 8006b86:	bf00      	nop
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	20000be4 	.word	0x20000be4

08006b94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ba2:	4b41      	ldr	r3, [pc, #260]	; (8006ca8 <xTaskResumeAll+0x114>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d109      	bne.n	8006bbe <xTaskResumeAll+0x2a>
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	e7fe      	b.n	8006bbc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bbe:	f001 fa8d 	bl	80080dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bc2:	4b39      	ldr	r3, [pc, #228]	; (8006ca8 <xTaskResumeAll+0x114>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	4a37      	ldr	r2, [pc, #220]	; (8006ca8 <xTaskResumeAll+0x114>)
 8006bca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bcc:	4b36      	ldr	r3, [pc, #216]	; (8006ca8 <xTaskResumeAll+0x114>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d162      	bne.n	8006c9a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bd4:	4b35      	ldr	r3, [pc, #212]	; (8006cac <xTaskResumeAll+0x118>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d05e      	beq.n	8006c9a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bdc:	e02f      	b.n	8006c3e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006bde:	4b34      	ldr	r3, [pc, #208]	; (8006cb0 <xTaskResumeAll+0x11c>)
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3318      	adds	r3, #24
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7ff f85e 	bl	8005cac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7ff f859 	bl	8005cac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfe:	4b2d      	ldr	r3, [pc, #180]	; (8006cb4 <xTaskResumeAll+0x120>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d903      	bls.n	8006c0e <xTaskResumeAll+0x7a>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0a:	4a2a      	ldr	r2, [pc, #168]	; (8006cb4 <xTaskResumeAll+0x120>)
 8006c0c:	6013      	str	r3, [r2, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4a27      	ldr	r2, [pc, #156]	; (8006cb8 <xTaskResumeAll+0x124>)
 8006c1c:	441a      	add	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3304      	adds	r3, #4
 8006c22:	4619      	mov	r1, r3
 8006c24:	4610      	mov	r0, r2
 8006c26:	f7fe ffe4 	bl	8005bf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2e:	4b23      	ldr	r3, [pc, #140]	; (8006cbc <xTaskResumeAll+0x128>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d302      	bcc.n	8006c3e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006c38:	4b21      	ldr	r3, [pc, #132]	; (8006cc0 <xTaskResumeAll+0x12c>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c3e:	4b1c      	ldr	r3, [pc, #112]	; (8006cb0 <xTaskResumeAll+0x11c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1cb      	bne.n	8006bde <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c4c:	f000 fb4c 	bl	80072e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c50:	4b1c      	ldr	r3, [pc, #112]	; (8006cc4 <xTaskResumeAll+0x130>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d010      	beq.n	8006c7e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c5c:	f000 f846 	bl	8006cec <xTaskIncrementTick>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006c66:	4b16      	ldr	r3, [pc, #88]	; (8006cc0 <xTaskResumeAll+0x12c>)
 8006c68:	2201      	movs	r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1f1      	bne.n	8006c5c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006c78:	4b12      	ldr	r3, [pc, #72]	; (8006cc4 <xTaskResumeAll+0x130>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c7e:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <xTaskResumeAll+0x12c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c86:	2301      	movs	r3, #1
 8006c88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c8a:	4b0f      	ldr	r3, [pc, #60]	; (8006cc8 <xTaskResumeAll+0x134>)
 8006c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c9a:	f001 fa4d 	bl	8008138 <vPortExitCritical>

	return xAlreadyYielded;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	20000be4 	.word	0x20000be4
 8006cac:	20000bbc 	.word	0x20000bbc
 8006cb0:	20000b7c 	.word	0x20000b7c
 8006cb4:	20000bc4 	.word	0x20000bc4
 8006cb8:	200006ec 	.word	0x200006ec
 8006cbc:	200006e8 	.word	0x200006e8
 8006cc0:	20000bd0 	.word	0x20000bd0
 8006cc4:	20000bcc 	.word	0x20000bcc
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006cd2:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <xTaskGetTickCount+0x1c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006cd8:	687b      	ldr	r3, [r7, #4]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	20000bc0 	.word	0x20000bc0

08006cec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cf6:	4b51      	ldr	r3, [pc, #324]	; (8006e3c <xTaskIncrementTick+0x150>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f040 808d 	bne.w	8006e1a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d00:	4b4f      	ldr	r3, [pc, #316]	; (8006e40 <xTaskIncrementTick+0x154>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3301      	adds	r3, #1
 8006d06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d08:	4a4d      	ldr	r2, [pc, #308]	; (8006e40 <xTaskIncrementTick+0x154>)
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d11f      	bne.n	8006d54 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d14:	4b4b      	ldr	r3, [pc, #300]	; (8006e44 <xTaskIncrementTick+0x158>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <xTaskIncrementTick+0x46>
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	603b      	str	r3, [r7, #0]
 8006d30:	e7fe      	b.n	8006d30 <xTaskIncrementTick+0x44>
 8006d32:	4b44      	ldr	r3, [pc, #272]	; (8006e44 <xTaskIncrementTick+0x158>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	4b43      	ldr	r3, [pc, #268]	; (8006e48 <xTaskIncrementTick+0x15c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a41      	ldr	r2, [pc, #260]	; (8006e44 <xTaskIncrementTick+0x158>)
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	4a41      	ldr	r2, [pc, #260]	; (8006e48 <xTaskIncrementTick+0x15c>)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	4b41      	ldr	r3, [pc, #260]	; (8006e4c <xTaskIncrementTick+0x160>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	4a3f      	ldr	r2, [pc, #252]	; (8006e4c <xTaskIncrementTick+0x160>)
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	f000 faca 	bl	80072e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d54:	4b3e      	ldr	r3, [pc, #248]	; (8006e50 <xTaskIncrementTick+0x164>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d34e      	bcc.n	8006dfc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d5e:	4b39      	ldr	r3, [pc, #228]	; (8006e44 <xTaskIncrementTick+0x158>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <xTaskIncrementTick+0x80>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <xTaskIncrementTick+0x82>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d004      	beq.n	8006d7c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d72:	4b37      	ldr	r3, [pc, #220]	; (8006e50 <xTaskIncrementTick+0x164>)
 8006d74:	f04f 32ff 	mov.w	r2, #4294967295
 8006d78:	601a      	str	r2, [r3, #0]
					break;
 8006d7a:	e03f      	b.n	8006dfc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d7c:	4b31      	ldr	r3, [pc, #196]	; (8006e44 <xTaskIncrementTick+0x158>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d203      	bcs.n	8006d9c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d94:	4a2e      	ldr	r2, [pc, #184]	; (8006e50 <xTaskIncrementTick+0x164>)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6013      	str	r3, [r2, #0]
						break;
 8006d9a:	e02f      	b.n	8006dfc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fe ff83 	bl	8005cac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d004      	beq.n	8006db8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	3318      	adds	r3, #24
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe ff7a 	bl	8005cac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbc:	4b25      	ldr	r3, [pc, #148]	; (8006e54 <xTaskIncrementTick+0x168>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d903      	bls.n	8006dcc <xTaskIncrementTick+0xe0>
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	4a22      	ldr	r2, [pc, #136]	; (8006e54 <xTaskIncrementTick+0x168>)
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4a1f      	ldr	r2, [pc, #124]	; (8006e58 <xTaskIncrementTick+0x16c>)
 8006dda:	441a      	add	r2, r3
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4619      	mov	r1, r3
 8006de2:	4610      	mov	r0, r2
 8006de4:	f7fe ff05 	bl	8005bf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dec:	4b1b      	ldr	r3, [pc, #108]	; (8006e5c <xTaskIncrementTick+0x170>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d3b3      	bcc.n	8006d5e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006df6:	2301      	movs	r3, #1
 8006df8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dfa:	e7b0      	b.n	8006d5e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006dfc:	4b17      	ldr	r3, [pc, #92]	; (8006e5c <xTaskIncrementTick+0x170>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e02:	4915      	ldr	r1, [pc, #84]	; (8006e58 <xTaskIncrementTick+0x16c>)
 8006e04:	4613      	mov	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d907      	bls.n	8006e24 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006e14:	2301      	movs	r3, #1
 8006e16:	617b      	str	r3, [r7, #20]
 8006e18:	e004      	b.n	8006e24 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006e1a:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <xTaskIncrementTick+0x174>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	4a0f      	ldr	r2, [pc, #60]	; (8006e60 <xTaskIncrementTick+0x174>)
 8006e22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006e24:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <xTaskIncrementTick+0x178>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e30:	697b      	ldr	r3, [r7, #20]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000be4 	.word	0x20000be4
 8006e40:	20000bc0 	.word	0x20000bc0
 8006e44:	20000b74 	.word	0x20000b74
 8006e48:	20000b78 	.word	0x20000b78
 8006e4c:	20000bd4 	.word	0x20000bd4
 8006e50:	20000bdc 	.word	0x20000bdc
 8006e54:	20000bc4 	.word	0x20000bc4
 8006e58:	200006ec 	.word	0x200006ec
 8006e5c:	200006e8 	.word	0x200006e8
 8006e60:	20000bcc 	.word	0x20000bcc
 8006e64:	20000bd0 	.word	0x20000bd0

08006e68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e6e:	4b27      	ldr	r3, [pc, #156]	; (8006f0c <vTaskSwitchContext+0xa4>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e76:	4b26      	ldr	r3, [pc, #152]	; (8006f10 <vTaskSwitchContext+0xa8>)
 8006e78:	2201      	movs	r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e7c:	e040      	b.n	8006f00 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006e7e:	4b24      	ldr	r3, [pc, #144]	; (8006f10 <vTaskSwitchContext+0xa8>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006e84:	4b23      	ldr	r3, [pc, #140]	; (8006f14 <vTaskSwitchContext+0xac>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	e00f      	b.n	8006eac <vTaskSwitchContext+0x44>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d109      	bne.n	8006ea6 <vTaskSwitchContext+0x3e>
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	607b      	str	r3, [r7, #4]
 8006ea4:	e7fe      	b.n	8006ea4 <vTaskSwitchContext+0x3c>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	491a      	ldr	r1, [pc, #104]	; (8006f18 <vTaskSwitchContext+0xb0>)
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	440b      	add	r3, r1
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0e5      	beq.n	8006e8c <vTaskSwitchContext+0x24>
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4a13      	ldr	r2, [pc, #76]	; (8006f18 <vTaskSwitchContext+0xb0>)
 8006ecc:	4413      	add	r3, r2
 8006ece:	60bb      	str	r3, [r7, #8]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	605a      	str	r2, [r3, #4]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d104      	bne.n	8006ef0 <vTaskSwitchContext+0x88>
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	605a      	str	r2, [r3, #4]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	4a09      	ldr	r2, [pc, #36]	; (8006f1c <vTaskSwitchContext+0xb4>)
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	4a06      	ldr	r2, [pc, #24]	; (8006f14 <vTaskSwitchContext+0xac>)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6013      	str	r3, [r2, #0]
}
 8006f00:	bf00      	nop
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	20000be4 	.word	0x20000be4
 8006f10:	20000bd0 	.word	0x20000bd0
 8006f14:	20000bc4 	.word	0x20000bc4
 8006f18:	200006ec 	.word	0x200006ec
 8006f1c:	200006e8 	.word	0x200006e8

08006f20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d109      	bne.n	8006f44 <vTaskPlaceOnEventList+0x24>
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	e7fe      	b.n	8006f42 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f44:	4b07      	ldr	r3, [pc, #28]	; (8006f64 <vTaskPlaceOnEventList+0x44>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3318      	adds	r3, #24
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7fe fe74 	bl	8005c3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f52:	2101      	movs	r1, #1
 8006f54:	6838      	ldr	r0, [r7, #0]
 8006f56:	f000 fc3b 	bl	80077d0 <prvAddCurrentTaskToDelayedList>
}
 8006f5a:	bf00      	nop
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	200006e8 	.word	0x200006e8

08006f68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d109      	bne.n	8006f8e <vTaskPlaceOnEventListRestricted+0x26>
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	e7fe      	b.n	8006f8c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f8e:	4b0a      	ldr	r3, [pc, #40]	; (8006fb8 <vTaskPlaceOnEventListRestricted+0x50>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3318      	adds	r3, #24
 8006f94:	4619      	mov	r1, r3
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7fe fe2b 	bl	8005bf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	68b8      	ldr	r0, [r7, #8]
 8006fac:	f000 fc10 	bl	80077d0 <prvAddCurrentTaskToDelayedList>
	}
 8006fb0:	bf00      	nop
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	200006e8 	.word	0x200006e8

08006fbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d109      	bne.n	8006fe6 <xTaskRemoveFromEventList+0x2a>
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	e7fe      	b.n	8006fe4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	3318      	adds	r3, #24
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe fe5e 	bl	8005cac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ff0:	4b1d      	ldr	r3, [pc, #116]	; (8007068 <xTaskRemoveFromEventList+0xac>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d11d      	bne.n	8007034 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fe fe55 	bl	8005cac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007006:	4b19      	ldr	r3, [pc, #100]	; (800706c <xTaskRemoveFromEventList+0xb0>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d903      	bls.n	8007016 <xTaskRemoveFromEventList+0x5a>
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	4a16      	ldr	r2, [pc, #88]	; (800706c <xTaskRemoveFromEventList+0xb0>)
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4a13      	ldr	r2, [pc, #76]	; (8007070 <xTaskRemoveFromEventList+0xb4>)
 8007024:	441a      	add	r2, r3
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	3304      	adds	r3, #4
 800702a:	4619      	mov	r1, r3
 800702c:	4610      	mov	r0, r2
 800702e:	f7fe fde0 	bl	8005bf2 <vListInsertEnd>
 8007032:	e005      	b.n	8007040 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	3318      	adds	r3, #24
 8007038:	4619      	mov	r1, r3
 800703a:	480e      	ldr	r0, [pc, #56]	; (8007074 <xTaskRemoveFromEventList+0xb8>)
 800703c:	f7fe fdd9 	bl	8005bf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007044:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <xTaskRemoveFromEventList+0xbc>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	429a      	cmp	r2, r3
 800704c:	d905      	bls.n	800705a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800704e:	2301      	movs	r3, #1
 8007050:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007052:	4b0a      	ldr	r3, [pc, #40]	; (800707c <xTaskRemoveFromEventList+0xc0>)
 8007054:	2201      	movs	r2, #1
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	e001      	b.n	800705e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800705a:	2300      	movs	r3, #0
 800705c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800705e:	697b      	ldr	r3, [r7, #20]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3718      	adds	r7, #24
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000be4 	.word	0x20000be4
 800706c:	20000bc4 	.word	0x20000bc4
 8007070:	200006ec 	.word	0x200006ec
 8007074:	20000b7c 	.word	0x20000b7c
 8007078:	200006e8 	.word	0x200006e8
 800707c:	20000bd0 	.word	0x20000bd0

08007080 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007088:	4b06      	ldr	r3, [pc, #24]	; (80070a4 <vTaskInternalSetTimeOutState+0x24>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007090:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <vTaskInternalSetTimeOutState+0x28>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	605a      	str	r2, [r3, #4]
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	20000bd4 	.word	0x20000bd4
 80070a8:	20000bc0 	.word	0x20000bc0

080070ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d109      	bne.n	80070d0 <xTaskCheckForTimeOut+0x24>
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	613b      	str	r3, [r7, #16]
 80070ce:	e7fe      	b.n	80070ce <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d109      	bne.n	80070ea <xTaskCheckForTimeOut+0x3e>
 80070d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	e7fe      	b.n	80070e8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80070ea:	f000 fff7 	bl	80080dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070ee:	4b1d      	ldr	r3, [pc, #116]	; (8007164 <xTaskCheckForTimeOut+0xb8>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007106:	d102      	bne.n	800710e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007108:	2300      	movs	r3, #0
 800710a:	61fb      	str	r3, [r7, #28]
 800710c:	e023      	b.n	8007156 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	4b15      	ldr	r3, [pc, #84]	; (8007168 <xTaskCheckForTimeOut+0xbc>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d007      	beq.n	800712a <xTaskCheckForTimeOut+0x7e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	429a      	cmp	r2, r3
 8007122:	d302      	bcc.n	800712a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007124:	2301      	movs	r3, #1
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	e015      	b.n	8007156 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	429a      	cmp	r2, r3
 8007132:	d20b      	bcs.n	800714c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	1ad2      	subs	r2, r2, r3
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff ff9d 	bl	8007080 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007146:	2300      	movs	r3, #0
 8007148:	61fb      	str	r3, [r7, #28]
 800714a:	e004      	b.n	8007156 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007152:	2301      	movs	r3, #1
 8007154:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007156:	f000 ffef 	bl	8008138 <vPortExitCritical>

	return xReturn;
 800715a:	69fb      	ldr	r3, [r7, #28]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3720      	adds	r7, #32
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	20000bc0 	.word	0x20000bc0
 8007168:	20000bd4 	.word	0x20000bd4

0800716c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007170:	4b03      	ldr	r3, [pc, #12]	; (8007180 <vTaskMissedYield+0x14>)
 8007172:	2201      	movs	r2, #1
 8007174:	601a      	str	r2, [r3, #0]
}
 8007176:	bf00      	nop
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	20000bd0 	.word	0x20000bd0

08007184 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800718c:	f000 f852 	bl	8007234 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007190:	4b06      	ldr	r3, [pc, #24]	; (80071ac <prvIdleTask+0x28>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d9f9      	bls.n	800718c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007198:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <prvIdleTask+0x2c>)
 800719a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071a8:	e7f0      	b.n	800718c <prvIdleTask+0x8>
 80071aa:	bf00      	nop
 80071ac:	200006ec 	.word	0x200006ec
 80071b0:	e000ed04 	.word	0xe000ed04

080071b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071ba:	2300      	movs	r3, #0
 80071bc:	607b      	str	r3, [r7, #4]
 80071be:	e00c      	b.n	80071da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	4613      	mov	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4a12      	ldr	r2, [pc, #72]	; (8007214 <prvInitialiseTaskLists+0x60>)
 80071cc:	4413      	add	r3, r2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fe fce2 	bl	8005b98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3301      	adds	r3, #1
 80071d8:	607b      	str	r3, [r7, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b37      	cmp	r3, #55	; 0x37
 80071de:	d9ef      	bls.n	80071c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071e0:	480d      	ldr	r0, [pc, #52]	; (8007218 <prvInitialiseTaskLists+0x64>)
 80071e2:	f7fe fcd9 	bl	8005b98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071e6:	480d      	ldr	r0, [pc, #52]	; (800721c <prvInitialiseTaskLists+0x68>)
 80071e8:	f7fe fcd6 	bl	8005b98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071ec:	480c      	ldr	r0, [pc, #48]	; (8007220 <prvInitialiseTaskLists+0x6c>)
 80071ee:	f7fe fcd3 	bl	8005b98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071f2:	480c      	ldr	r0, [pc, #48]	; (8007224 <prvInitialiseTaskLists+0x70>)
 80071f4:	f7fe fcd0 	bl	8005b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071f8:	480b      	ldr	r0, [pc, #44]	; (8007228 <prvInitialiseTaskLists+0x74>)
 80071fa:	f7fe fccd 	bl	8005b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071fe:	4b0b      	ldr	r3, [pc, #44]	; (800722c <prvInitialiseTaskLists+0x78>)
 8007200:	4a05      	ldr	r2, [pc, #20]	; (8007218 <prvInitialiseTaskLists+0x64>)
 8007202:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007204:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <prvInitialiseTaskLists+0x7c>)
 8007206:	4a05      	ldr	r2, [pc, #20]	; (800721c <prvInitialiseTaskLists+0x68>)
 8007208:	601a      	str	r2, [r3, #0]
}
 800720a:	bf00      	nop
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	200006ec 	.word	0x200006ec
 8007218:	20000b4c 	.word	0x20000b4c
 800721c:	20000b60 	.word	0x20000b60
 8007220:	20000b7c 	.word	0x20000b7c
 8007224:	20000b90 	.word	0x20000b90
 8007228:	20000ba8 	.word	0x20000ba8
 800722c:	20000b74 	.word	0x20000b74
 8007230:	20000b78 	.word	0x20000b78

08007234 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800723a:	e019      	b.n	8007270 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800723c:	f000 ff4e 	bl	80080dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007240:	4b0f      	ldr	r3, [pc, #60]	; (8007280 <prvCheckTasksWaitingTermination+0x4c>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3304      	adds	r3, #4
 800724c:	4618      	mov	r0, r3
 800724e:	f7fe fd2d 	bl	8005cac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007252:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <prvCheckTasksWaitingTermination+0x50>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3b01      	subs	r3, #1
 8007258:	4a0a      	ldr	r2, [pc, #40]	; (8007284 <prvCheckTasksWaitingTermination+0x50>)
 800725a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800725c:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <prvCheckTasksWaitingTermination+0x54>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3b01      	subs	r3, #1
 8007262:	4a09      	ldr	r2, [pc, #36]	; (8007288 <prvCheckTasksWaitingTermination+0x54>)
 8007264:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007266:	f000 ff67 	bl	8008138 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f80e 	bl	800728c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007270:	4b05      	ldr	r3, [pc, #20]	; (8007288 <prvCheckTasksWaitingTermination+0x54>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e1      	bne.n	800723c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20000b90 	.word	0x20000b90
 8007284:	20000bbc 	.word	0x20000bbc
 8007288:	20000ba4 	.word	0x20000ba4

0800728c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800729a:	2b00      	cmp	r3, #0
 800729c:	d108      	bne.n	80072b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a2:	4618      	mov	r0, r3
 80072a4:	f001 f8f6 	bl	8008494 <vPortFree>
				vPortFree( pxTCB );
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 f8f3 	bl	8008494 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072ae:	e017      	b.n	80072e0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d103      	bne.n	80072c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f001 f8ea 	bl	8008494 <vPortFree>
	}
 80072c0:	e00e      	b.n	80072e0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d009      	beq.n	80072e0 <prvDeleteTCB+0x54>
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	e7fe      	b.n	80072de <prvDeleteTCB+0x52>
	}
 80072e0:	bf00      	nop
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072ee:	4b0f      	ldr	r3, [pc, #60]	; (800732c <prvResetNextTaskUnblockTime+0x44>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <prvResetNextTaskUnblockTime+0x14>
 80072f8:	2301      	movs	r3, #1
 80072fa:	e000      	b.n	80072fe <prvResetNextTaskUnblockTime+0x16>
 80072fc:	2300      	movs	r3, #0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007302:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <prvResetNextTaskUnblockTime+0x48>)
 8007304:	f04f 32ff 	mov.w	r2, #4294967295
 8007308:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800730a:	e008      	b.n	800731e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800730c:	4b07      	ldr	r3, [pc, #28]	; (800732c <prvResetNextTaskUnblockTime+0x44>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	4a05      	ldr	r2, [pc, #20]	; (8007330 <prvResetNextTaskUnblockTime+0x48>)
 800731c:	6013      	str	r3, [r2, #0]
}
 800731e:	bf00      	nop
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	20000b74 	.word	0x20000b74
 8007330:	20000bdc 	.word	0x20000bdc

08007334 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800733a:	4b0b      	ldr	r3, [pc, #44]	; (8007368 <xTaskGetSchedulerState+0x34>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d102      	bne.n	8007348 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007342:	2301      	movs	r3, #1
 8007344:	607b      	str	r3, [r7, #4]
 8007346:	e008      	b.n	800735a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007348:	4b08      	ldr	r3, [pc, #32]	; (800736c <xTaskGetSchedulerState+0x38>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d102      	bne.n	8007356 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007350:	2302      	movs	r3, #2
 8007352:	607b      	str	r3, [r7, #4]
 8007354:	e001      	b.n	800735a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007356:	2300      	movs	r3, #0
 8007358:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800735a:	687b      	ldr	r3, [r7, #4]
	}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	20000bc8 	.word	0x20000bc8
 800736c:	20000be4 	.word	0x20000be4

08007370 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800737c:	2300      	movs	r3, #0
 800737e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d054      	beq.n	8007430 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007386:	4b2d      	ldr	r3, [pc, #180]	; (800743c <xTaskPriorityDisinherit+0xcc>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	429a      	cmp	r2, r3
 800738e:	d009      	beq.n	80073a4 <xTaskPriorityDisinherit+0x34>
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	e7fe      	b.n	80073a2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d109      	bne.n	80073c0 <xTaskPriorityDisinherit+0x50>
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	60bb      	str	r3, [r7, #8]
 80073be:	e7fe      	b.n	80073be <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c4:	1e5a      	subs	r2, r3, #1
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d02c      	beq.n	8007430 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d128      	bne.n	8007430 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	3304      	adds	r3, #4
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fc62 	bl	8005cac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007400:	4b0f      	ldr	r3, [pc, #60]	; (8007440 <xTaskPriorityDisinherit+0xd0>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	429a      	cmp	r2, r3
 8007406:	d903      	bls.n	8007410 <xTaskPriorityDisinherit+0xa0>
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740c:	4a0c      	ldr	r2, [pc, #48]	; (8007440 <xTaskPriorityDisinherit+0xd0>)
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4a09      	ldr	r2, [pc, #36]	; (8007444 <xTaskPriorityDisinherit+0xd4>)
 800741e:	441a      	add	r2, r3
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	3304      	adds	r3, #4
 8007424:	4619      	mov	r1, r3
 8007426:	4610      	mov	r0, r2
 8007428:	f7fe fbe3 	bl	8005bf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800742c:	2301      	movs	r3, #1
 800742e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007430:	697b      	ldr	r3, [r7, #20]
	}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	200006e8 	.word	0x200006e8
 8007440:	20000bc4 	.word	0x20000bc4
 8007444:	200006ec 	.word	0x200006ec

08007448 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007456:	f000 fe41 	bl	80080dc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800745a:	4b26      	ldr	r3, [pc, #152]	; (80074f4 <xTaskNotifyWait+0xac>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d01a      	beq.n	800749e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007468:	4b22      	ldr	r3, [pc, #136]	; (80074f4 <xTaskNotifyWait+0xac>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	43d2      	mvns	r2, r2
 8007472:	400a      	ands	r2, r1
 8007474:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007476:	4b1f      	ldr	r3, [pc, #124]	; (80074f4 <xTaskNotifyWait+0xac>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00b      	beq.n	800749e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007486:	2101      	movs	r1, #1
 8007488:	6838      	ldr	r0, [r7, #0]
 800748a:	f000 f9a1 	bl	80077d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800748e:	4b1a      	ldr	r3, [pc, #104]	; (80074f8 <xTaskNotifyWait+0xb0>)
 8007490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800749e:	f000 fe4b 	bl	8008138 <vPortExitCritical>

		taskENTER_CRITICAL();
 80074a2:	f000 fe1b 	bl	80080dc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80074ac:	4b11      	ldr	r3, [pc, #68]	; (80074f4 <xTaskNotifyWait+0xac>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80074b6:	4b0f      	ldr	r3, [pc, #60]	; (80074f4 <xTaskNotifyWait+0xac>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d002      	beq.n	80074ca <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]
 80074c8:	e008      	b.n	80074dc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80074ca:	4b0a      	ldr	r3, [pc, #40]	; (80074f4 <xTaskNotifyWait+0xac>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	43d2      	mvns	r2, r2
 80074d4:	400a      	ands	r2, r1
 80074d6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80074d8:	2301      	movs	r3, #1
 80074da:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074dc:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <xTaskNotifyWait+0xac>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80074e6:	f000 fe27 	bl	8008138 <vPortExitCritical>

		return xReturn;
 80074ea:	697b      	ldr	r3, [r7, #20]
	}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	200006e8 	.word	0x200006e8
 80074f8:	e000ed04 	.word	0xe000ed04

080074fc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08a      	sub	sp, #40	; 0x28
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	603b      	str	r3, [r7, #0]
 8007508:	4613      	mov	r3, r2
 800750a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800750c:	2301      	movs	r3, #1
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d109      	bne.n	800752a <xTaskGenericNotify+0x2e>
 8007516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	61bb      	str	r3, [r7, #24]
 8007528:	e7fe      	b.n	8007528 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800752e:	f000 fdd5 	bl	80080dc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007546:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8007550:	79fb      	ldrb	r3, [r7, #7]
 8007552:	2b04      	cmp	r3, #4
 8007554:	d827      	bhi.n	80075a6 <xTaskGenericNotify+0xaa>
 8007556:	a201      	add	r2, pc, #4	; (adr r2, 800755c <xTaskGenericNotify+0x60>)
 8007558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755c:	080075a7 	.word	0x080075a7
 8007560:	08007571 	.word	0x08007571
 8007564:	0800757f 	.word	0x0800757f
 8007568:	0800758b 	.word	0x0800758b
 800756c:	08007593 	.word	0x08007593
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	431a      	orrs	r2, r3
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800757c:	e013      	b.n	80075a6 <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007588:	e00d      	b.n	80075a6 <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007590:	e009      	b.n	80075a6 <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007592:	7ffb      	ldrb	r3, [r7, #31]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d003      	beq.n	80075a0 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800759e:	e001      	b.n	80075a4 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 80075a0:	2300      	movs	r3, #0
 80075a2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80075a4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80075a6:	7ffb      	ldrb	r3, [r7, #31]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d139      	bne.n	8007620 <xTaskGenericNotify+0x124>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	3304      	adds	r3, #4
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fe fb7b 	bl	8005cac <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ba:	4b1d      	ldr	r3, [pc, #116]	; (8007630 <xTaskGenericNotify+0x134>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d903      	bls.n	80075ca <xTaskGenericNotify+0xce>
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c6:	4a1a      	ldr	r2, [pc, #104]	; (8007630 <xTaskGenericNotify+0x134>)
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ce:	4613      	mov	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4a17      	ldr	r2, [pc, #92]	; (8007634 <xTaskGenericNotify+0x138>)
 80075d8:	441a      	add	r2, r3
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	3304      	adds	r3, #4
 80075de:	4619      	mov	r1, r3
 80075e0:	4610      	mov	r0, r2
 80075e2:	f7fe fb06 	bl	8005bf2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d009      	beq.n	8007602 <xTaskGenericNotify+0x106>
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	617b      	str	r3, [r7, #20]
 8007600:	e7fe      	b.n	8007600 <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007606:	4b0c      	ldr	r3, [pc, #48]	; (8007638 <xTaskGenericNotify+0x13c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760c:	429a      	cmp	r2, r3
 800760e:	d907      	bls.n	8007620 <xTaskGenericNotify+0x124>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007610:	4b0a      	ldr	r3, [pc, #40]	; (800763c <xTaskGenericNotify+0x140>)
 8007612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007620:	f000 fd8a 	bl	8008138 <vPortExitCritical>

		return xReturn;
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007626:	4618      	mov	r0, r3
 8007628:	3728      	adds	r7, #40	; 0x28
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20000bc4 	.word	0x20000bc4
 8007634:	200006ec 	.word	0x200006ec
 8007638:	200006e8 	.word	0x200006e8
 800763c:	e000ed04 	.word	0xe000ed04

08007640 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08e      	sub	sp, #56	; 0x38
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	4613      	mov	r3, r2
 800764e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007650:	2301      	movs	r3, #1
 8007652:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d109      	bne.n	800766e <xTaskGenericNotifyFromISR+0x2e>
 800765a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
 800766c:	e7fe      	b.n	800766c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800766e:	f000 fe11 	bl	8008294 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007676:	f3ef 8211 	mrs	r2, BASEPRI
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	623a      	str	r2, [r7, #32]
 800768c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800768e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007690:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80076a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	2202      	movs	r2, #2
 80076ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80076b2:	79fb      	ldrb	r3, [r7, #7]
 80076b4:	2b04      	cmp	r3, #4
 80076b6:	d829      	bhi.n	800770c <xTaskGenericNotifyFromISR+0xcc>
 80076b8:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <xTaskGenericNotifyFromISR+0x80>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	0800770d 	.word	0x0800770d
 80076c4:	080076d5 	.word	0x080076d5
 80076c8:	080076e3 	.word	0x080076e3
 80076cc:	080076ef 	.word	0x080076ef
 80076d0:	080076f7 	.word	0x080076f7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	431a      	orrs	r2, r3
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80076e0:	e014      	b.n	800770c <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80076ec:	e00e      	b.n	800770c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80076f4:	e00a      	b.n	800770c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80076f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d003      	beq.n	8007706 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007704:	e001      	b.n	800770a <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8007706:	2300      	movs	r3, #0
 8007708:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800770a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800770c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007710:	2b01      	cmp	r3, #1
 8007712:	d146      	bne.n	80077a2 <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007718:	2b00      	cmp	r3, #0
 800771a:	d009      	beq.n	8007730 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	e7fe      	b.n	800772e <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007730:	4b21      	ldr	r3, [pc, #132]	; (80077b8 <xTaskGenericNotifyFromISR+0x178>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d11d      	bne.n	8007774 <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773a:	3304      	adds	r3, #4
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fab5 	bl	8005cac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007746:	4b1d      	ldr	r3, [pc, #116]	; (80077bc <xTaskGenericNotifyFromISR+0x17c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	429a      	cmp	r2, r3
 800774c:	d903      	bls.n	8007756 <xTaskGenericNotifyFromISR+0x116>
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	4a1a      	ldr	r2, [pc, #104]	; (80077bc <xTaskGenericNotifyFromISR+0x17c>)
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4a17      	ldr	r2, [pc, #92]	; (80077c0 <xTaskGenericNotifyFromISR+0x180>)
 8007764:	441a      	add	r2, r3
 8007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007768:	3304      	adds	r3, #4
 800776a:	4619      	mov	r1, r3
 800776c:	4610      	mov	r0, r2
 800776e:	f7fe fa40 	bl	8005bf2 <vListInsertEnd>
 8007772:	e005      	b.n	8007780 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	3318      	adds	r3, #24
 8007778:	4619      	mov	r1, r3
 800777a:	4812      	ldr	r0, [pc, #72]	; (80077c4 <xTaskGenericNotifyFromISR+0x184>)
 800777c:	f7fe fa39 	bl	8005bf2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007784:	4b10      	ldr	r3, [pc, #64]	; (80077c8 <xTaskGenericNotifyFromISR+0x188>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778a:	429a      	cmp	r2, r3
 800778c:	d909      	bls.n	80077a2 <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800778e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007796:	2201      	movs	r2, #1
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	e002      	b.n	80077a2 <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800779c:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <xTaskGenericNotifyFromISR+0x18c>)
 800779e:	2201      	movs	r2, #1
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	617b      	str	r3, [r7, #20]
	__asm volatile
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80077ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3738      	adds	r7, #56	; 0x38
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20000be4 	.word	0x20000be4
 80077bc:	20000bc4 	.word	0x20000bc4
 80077c0:	200006ec 	.word	0x200006ec
 80077c4:	20000b7c 	.word	0x20000b7c
 80077c8:	200006e8 	.word	0x200006e8
 80077cc:	20000bd0 	.word	0x20000bd0

080077d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077da:	4b21      	ldr	r3, [pc, #132]	; (8007860 <prvAddCurrentTaskToDelayedList+0x90>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077e0:	4b20      	ldr	r3, [pc, #128]	; (8007864 <prvAddCurrentTaskToDelayedList+0x94>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3304      	adds	r3, #4
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fe fa60 	bl	8005cac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f2:	d10a      	bne.n	800780a <prvAddCurrentTaskToDelayedList+0x3a>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d007      	beq.n	800780a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077fa:	4b1a      	ldr	r3, [pc, #104]	; (8007864 <prvAddCurrentTaskToDelayedList+0x94>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3304      	adds	r3, #4
 8007800:	4619      	mov	r1, r3
 8007802:	4819      	ldr	r0, [pc, #100]	; (8007868 <prvAddCurrentTaskToDelayedList+0x98>)
 8007804:	f7fe f9f5 	bl	8005bf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007808:	e026      	b.n	8007858 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4413      	add	r3, r2
 8007810:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007812:	4b14      	ldr	r3, [pc, #80]	; (8007864 <prvAddCurrentTaskToDelayedList+0x94>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	429a      	cmp	r2, r3
 8007820:	d209      	bcs.n	8007836 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007822:	4b12      	ldr	r3, [pc, #72]	; (800786c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	4b0f      	ldr	r3, [pc, #60]	; (8007864 <prvAddCurrentTaskToDelayedList+0x94>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3304      	adds	r3, #4
 800782c:	4619      	mov	r1, r3
 800782e:	4610      	mov	r0, r2
 8007830:	f7fe fa03 	bl	8005c3a <vListInsert>
}
 8007834:	e010      	b.n	8007858 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007836:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <prvAddCurrentTaskToDelayedList+0x94>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3304      	adds	r3, #4
 8007840:	4619      	mov	r1, r3
 8007842:	4610      	mov	r0, r2
 8007844:	f7fe f9f9 	bl	8005c3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007848:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <prvAddCurrentTaskToDelayedList+0xa4>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	429a      	cmp	r2, r3
 8007850:	d202      	bcs.n	8007858 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007852:	4a08      	ldr	r2, [pc, #32]	; (8007874 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	6013      	str	r3, [r2, #0]
}
 8007858:	bf00      	nop
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	20000bc0 	.word	0x20000bc0
 8007864:	200006e8 	.word	0x200006e8
 8007868:	20000ba8 	.word	0x20000ba8
 800786c:	20000b78 	.word	0x20000b78
 8007870:	20000b74 	.word	0x20000b74
 8007874:	20000bdc 	.word	0x20000bdc

08007878 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	; 0x28
 800787c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800787e:	2300      	movs	r3, #0
 8007880:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007882:	f000 fac3 	bl	8007e0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007886:	4b1c      	ldr	r3, [pc, #112]	; (80078f8 <xTimerCreateTimerTask+0x80>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d021      	beq.n	80078d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800788e:	2300      	movs	r3, #0
 8007890:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007892:	2300      	movs	r3, #0
 8007894:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007896:	1d3a      	adds	r2, r7, #4
 8007898:	f107 0108 	add.w	r1, r7, #8
 800789c:	f107 030c 	add.w	r3, r7, #12
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fe f95f 	bl	8005b64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078a6:	6879      	ldr	r1, [r7, #4]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	9202      	str	r2, [sp, #8]
 80078ae:	9301      	str	r3, [sp, #4]
 80078b0:	2302      	movs	r3, #2
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	2300      	movs	r3, #0
 80078b6:	460a      	mov	r2, r1
 80078b8:	4910      	ldr	r1, [pc, #64]	; (80078fc <xTimerCreateTimerTask+0x84>)
 80078ba:	4811      	ldr	r0, [pc, #68]	; (8007900 <xTimerCreateTimerTask+0x88>)
 80078bc:	f7fe ff30 	bl	8006720 <xTaskCreateStatic>
 80078c0:	4602      	mov	r2, r0
 80078c2:	4b10      	ldr	r3, [pc, #64]	; (8007904 <xTimerCreateTimerTask+0x8c>)
 80078c4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078c6:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <xTimerCreateTimerTask+0x8c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078ce:	2301      	movs	r3, #1
 80078d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d109      	bne.n	80078ec <xTimerCreateTimerTask+0x74>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	613b      	str	r3, [r7, #16]
 80078ea:	e7fe      	b.n	80078ea <xTimerCreateTimerTask+0x72>
	return xReturn;
 80078ec:	697b      	ldr	r3, [r7, #20]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20000c18 	.word	0x20000c18
 80078fc:	08009278 	.word	0x08009278
 8007900:	08007a21 	.word	0x08007a21
 8007904:	20000c1c 	.word	0x20000c1c

08007908 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	; 0x28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007916:	2300      	movs	r3, #0
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d109      	bne.n	8007934 <xTimerGenericCommand+0x2c>
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	623b      	str	r3, [r7, #32]
 8007932:	e7fe      	b.n	8007932 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007934:	4b19      	ldr	r3, [pc, #100]	; (800799c <xTimerGenericCommand+0x94>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d02a      	beq.n	8007992 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2b05      	cmp	r3, #5
 800794c:	dc18      	bgt.n	8007980 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800794e:	f7ff fcf1 	bl	8007334 <xTaskGetSchedulerState>
 8007952:	4603      	mov	r3, r0
 8007954:	2b02      	cmp	r3, #2
 8007956:	d109      	bne.n	800796c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007958:	4b10      	ldr	r3, [pc, #64]	; (800799c <xTimerGenericCommand+0x94>)
 800795a:	6818      	ldr	r0, [r3, #0]
 800795c:	f107 0110 	add.w	r1, r7, #16
 8007960:	2300      	movs	r3, #0
 8007962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007964:	f7fe fb06 	bl	8005f74 <xQueueGenericSend>
 8007968:	6278      	str	r0, [r7, #36]	; 0x24
 800796a:	e012      	b.n	8007992 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800796c:	4b0b      	ldr	r3, [pc, #44]	; (800799c <xTimerGenericCommand+0x94>)
 800796e:	6818      	ldr	r0, [r3, #0]
 8007970:	f107 0110 	add.w	r1, r7, #16
 8007974:	2300      	movs	r3, #0
 8007976:	2200      	movs	r2, #0
 8007978:	f7fe fafc 	bl	8005f74 <xQueueGenericSend>
 800797c:	6278      	str	r0, [r7, #36]	; 0x24
 800797e:	e008      	b.n	8007992 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007980:	4b06      	ldr	r3, [pc, #24]	; (800799c <xTimerGenericCommand+0x94>)
 8007982:	6818      	ldr	r0, [r3, #0]
 8007984:	f107 0110 	add.w	r1, r7, #16
 8007988:	2300      	movs	r3, #0
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	f7fe fbec 	bl	8006168 <xQueueGenericSendFromISR>
 8007990:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007994:	4618      	mov	r0, r3
 8007996:	3728      	adds	r7, #40	; 0x28
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20000c18 	.word	0x20000c18

080079a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af02      	add	r7, sp, #8
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079aa:	4b1c      	ldr	r3, [pc, #112]	; (8007a1c <prvProcessExpiredTimer+0x7c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	3304      	adds	r3, #4
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe f977 	bl	8005cac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d121      	bne.n	8007a0a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	699a      	ldr	r2, [r3, #24]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	18d1      	adds	r1, r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	6978      	ldr	r0, [r7, #20]
 80079d4:	f000 f8c8 	bl	8007b68 <prvInsertTimerInActiveList>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d015      	beq.n	8007a0a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079de:	2300      	movs	r3, #0
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	2300      	movs	r3, #0
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	2100      	movs	r1, #0
 80079e8:	6978      	ldr	r0, [r7, #20]
 80079ea:	f7ff ff8d 	bl	8007908 <xTimerGenericCommand>
 80079ee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <prvProcessExpiredTimer+0x6a>
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	60fb      	str	r3, [r7, #12]
 8007a08:	e7fe      	b.n	8007a08 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	6978      	ldr	r0, [r7, #20]
 8007a10:	4798      	blx	r3
}
 8007a12:	bf00      	nop
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000c10 	.word	0x20000c10

08007a20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a28:	f107 0308 	add.w	r3, r7, #8
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 f857 	bl	8007ae0 <prvGetNextExpireTime>
 8007a32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4619      	mov	r1, r3
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f803 	bl	8007a44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a3e:	f000 f8d5 	bl	8007bec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a42:	e7f1      	b.n	8007a28 <prvTimerTask+0x8>

08007a44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a4e:	f7ff f893 	bl	8006b78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a52:	f107 0308 	add.w	r3, r7, #8
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 f866 	bl	8007b28 <prvSampleTimeNow>
 8007a5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d130      	bne.n	8007ac6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10a      	bne.n	8007a80 <prvProcessTimerOrBlockTask+0x3c>
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d806      	bhi.n	8007a80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a72:	f7ff f88f 	bl	8006b94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a76:	68f9      	ldr	r1, [r7, #12]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7ff ff91 	bl	80079a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a7e:	e024      	b.n	8007aca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d008      	beq.n	8007a98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a86:	4b13      	ldr	r3, [pc, #76]	; (8007ad4 <prvProcessTimerOrBlockTask+0x90>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	bf0c      	ite	eq
 8007a90:	2301      	moveq	r3, #1
 8007a92:	2300      	movne	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a98:	4b0f      	ldr	r3, [pc, #60]	; (8007ad8 <prvProcessTimerOrBlockTask+0x94>)
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f7fe fe07 	bl	80066b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007aaa:	f7ff f873 	bl	8006b94 <xTaskResumeAll>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10a      	bne.n	8007aca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ab4:	4b09      	ldr	r3, [pc, #36]	; (8007adc <prvProcessTimerOrBlockTask+0x98>)
 8007ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	f3bf 8f6f 	isb	sy
}
 8007ac4:	e001      	b.n	8007aca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ac6:	f7ff f865 	bl	8006b94 <xTaskResumeAll>
}
 8007aca:	bf00      	nop
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000c14 	.word	0x20000c14
 8007ad8:	20000c18 	.word	0x20000c18
 8007adc:	e000ed04 	.word	0xe000ed04

08007ae0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ae8:	4b0e      	ldr	r3, [pc, #56]	; (8007b24 <prvGetNextExpireTime+0x44>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	bf0c      	ite	eq
 8007af2:	2301      	moveq	r3, #1
 8007af4:	2300      	movne	r3, #0
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	461a      	mov	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d105      	bne.n	8007b12 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b06:	4b07      	ldr	r3, [pc, #28]	; (8007b24 <prvGetNextExpireTime+0x44>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	e001      	b.n	8007b16 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b16:	68fb      	ldr	r3, [r7, #12]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	20000c10 	.word	0x20000c10

08007b28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b30:	f7ff f8cc 	bl	8006ccc <xTaskGetTickCount>
 8007b34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b36:	4b0b      	ldr	r3, [pc, #44]	; (8007b64 <prvSampleTimeNow+0x3c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d205      	bcs.n	8007b4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b40:	f000 f904 	bl	8007d4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	e002      	b.n	8007b52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b52:	4a04      	ldr	r2, [pc, #16]	; (8007b64 <prvSampleTimeNow+0x3c>)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b58:	68fb      	ldr	r3, [r7, #12]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20000c20 	.word	0x20000c20

08007b68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b76:	2300      	movs	r3, #0
 8007b78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d812      	bhi.n	8007bb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	1ad2      	subs	r2, r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d302      	bcc.n	8007ba2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	e01b      	b.n	8007bda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ba2:	4b10      	ldr	r3, [pc, #64]	; (8007be4 <prvInsertTimerInActiveList+0x7c>)
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3304      	adds	r3, #4
 8007baa:	4619      	mov	r1, r3
 8007bac:	4610      	mov	r0, r2
 8007bae:	f7fe f844 	bl	8005c3a <vListInsert>
 8007bb2:	e012      	b.n	8007bda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d206      	bcs.n	8007bca <prvInsertTimerInActiveList+0x62>
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d302      	bcc.n	8007bca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	e007      	b.n	8007bda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bca:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <prvInsertTimerInActiveList+0x80>)
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	f7fe f830 	bl	8005c3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bda:	697b      	ldr	r3, [r7, #20]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	20000c14 	.word	0x20000c14
 8007be8:	20000c10 	.word	0x20000c10

08007bec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08e      	sub	sp, #56	; 0x38
 8007bf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bf2:	e099      	b.n	8007d28 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	da17      	bge.n	8007c2a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007bfa:	1d3b      	adds	r3, r7, #4
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d109      	bne.n	8007c1a <prvProcessReceivedCommands+0x2e>
 8007c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	61fb      	str	r3, [r7, #28]
 8007c18:	e7fe      	b.n	8007c18 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c20:	6850      	ldr	r0, [r2, #4]
 8007c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c24:	6892      	ldr	r2, [r2, #8]
 8007c26:	4611      	mov	r1, r2
 8007c28:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	db7a      	blt.n	8007d26 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d004      	beq.n	8007c46 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	3304      	adds	r3, #4
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe f833 	bl	8005cac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c46:	463b      	mov	r3, r7
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7ff ff6d 	bl	8007b28 <prvSampleTimeNow>
 8007c4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b09      	cmp	r3, #9
 8007c54:	d868      	bhi.n	8007d28 <prvProcessReceivedCommands+0x13c>
 8007c56:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <prvProcessReceivedCommands+0x70>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007c85 	.word	0x08007c85
 8007c60:	08007c85 	.word	0x08007c85
 8007c64:	08007c85 	.word	0x08007c85
 8007c68:	08007d29 	.word	0x08007d29
 8007c6c:	08007cdf 	.word	0x08007cdf
 8007c70:	08007d15 	.word	0x08007d15
 8007c74:	08007c85 	.word	0x08007c85
 8007c78:	08007c85 	.word	0x08007c85
 8007c7c:	08007d29 	.word	0x08007d29
 8007c80:	08007cdf 	.word	0x08007cdf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	18d1      	adds	r1, r2, r3
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c92:	f7ff ff69 	bl	8007b68 <prvInsertTimerInActiveList>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d045      	beq.n	8007d28 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d13d      	bne.n	8007d28 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	441a      	add	r2, r3
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2100      	movs	r1, #0
 8007cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cbe:	f7ff fe23 	bl	8007908 <xTimerGenericCommand>
 8007cc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d12e      	bne.n	8007d28 <prvProcessReceivedCommands+0x13c>
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	61bb      	str	r3, [r7, #24]
 8007cdc:	e7fe      	b.n	8007cdc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d109      	bne.n	8007d00 <prvProcessReceivedCommands+0x114>
 8007cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	617b      	str	r3, [r7, #20]
 8007cfe:	e7fe      	b.n	8007cfe <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	699a      	ldr	r2, [r3, #24]
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	18d1      	adds	r1, r2, r3
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d0e:	f7ff ff2b 	bl	8007b68 <prvInsertTimerInActiveList>
					break;
 8007d12:	e009      	b.n	8007d28 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d104      	bne.n	8007d28 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d20:	f000 fbb8 	bl	8008494 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d24:	e000      	b.n	8007d28 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d26:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d28:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <prvProcessReceivedCommands+0x15c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	1d39      	adds	r1, r7, #4
 8007d2e:	2200      	movs	r2, #0
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fe faad 	bl	8006290 <xQueueReceive>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f47f af5b 	bne.w	8007bf4 <prvProcessReceivedCommands+0x8>
	}
}
 8007d3e:	bf00      	nop
 8007d40:	3730      	adds	r7, #48	; 0x30
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000c18 	.word	0x20000c18

08007d4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d52:	e044      	b.n	8007dde <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d54:	4b2b      	ldr	r3, [pc, #172]	; (8007e04 <prvSwitchTimerLists+0xb8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d5e:	4b29      	ldr	r3, [pc, #164]	; (8007e04 <prvSwitchTimerLists+0xb8>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fd ff9d 	bl	8005cac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d12d      	bne.n	8007dde <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	4413      	add	r3, r2
 8007d8a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d90e      	bls.n	8007db2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007da0:	4b18      	ldr	r3, [pc, #96]	; (8007e04 <prvSwitchTimerLists+0xb8>)
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3304      	adds	r3, #4
 8007da8:	4619      	mov	r1, r3
 8007daa:	4610      	mov	r0, r2
 8007dac:	f7fd ff45 	bl	8005c3a <vListInsert>
 8007db0:	e015      	b.n	8007dde <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007db2:	2300      	movs	r3, #0
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	2300      	movs	r3, #0
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	2100      	movs	r1, #0
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f7ff fda3 	bl	8007908 <xTimerGenericCommand>
 8007dc2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d109      	bne.n	8007dde <prvSwitchTimerLists+0x92>
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	e7fe      	b.n	8007ddc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dde:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <prvSwitchTimerLists+0xb8>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1b5      	bne.n	8007d54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007de8:	4b06      	ldr	r3, [pc, #24]	; (8007e04 <prvSwitchTimerLists+0xb8>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007dee:	4b06      	ldr	r3, [pc, #24]	; (8007e08 <prvSwitchTimerLists+0xbc>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a04      	ldr	r2, [pc, #16]	; (8007e04 <prvSwitchTimerLists+0xb8>)
 8007df4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007df6:	4a04      	ldr	r2, [pc, #16]	; (8007e08 <prvSwitchTimerLists+0xbc>)
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	6013      	str	r3, [r2, #0]
}
 8007dfc:	bf00      	nop
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20000c10 	.word	0x20000c10
 8007e08:	20000c14 	.word	0x20000c14

08007e0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e12:	f000 f963 	bl	80080dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e16:	4b15      	ldr	r3, [pc, #84]	; (8007e6c <prvCheckForValidListAndQueue+0x60>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d120      	bne.n	8007e60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e1e:	4814      	ldr	r0, [pc, #80]	; (8007e70 <prvCheckForValidListAndQueue+0x64>)
 8007e20:	f7fd feba 	bl	8005b98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e24:	4813      	ldr	r0, [pc, #76]	; (8007e74 <prvCheckForValidListAndQueue+0x68>)
 8007e26:	f7fd feb7 	bl	8005b98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e2a:	4b13      	ldr	r3, [pc, #76]	; (8007e78 <prvCheckForValidListAndQueue+0x6c>)
 8007e2c:	4a10      	ldr	r2, [pc, #64]	; (8007e70 <prvCheckForValidListAndQueue+0x64>)
 8007e2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e30:	4b12      	ldr	r3, [pc, #72]	; (8007e7c <prvCheckForValidListAndQueue+0x70>)
 8007e32:	4a10      	ldr	r2, [pc, #64]	; (8007e74 <prvCheckForValidListAndQueue+0x68>)
 8007e34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e36:	2300      	movs	r3, #0
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	4b11      	ldr	r3, [pc, #68]	; (8007e80 <prvCheckForValidListAndQueue+0x74>)
 8007e3c:	4a11      	ldr	r2, [pc, #68]	; (8007e84 <prvCheckForValidListAndQueue+0x78>)
 8007e3e:	2110      	movs	r1, #16
 8007e40:	200a      	movs	r0, #10
 8007e42:	f7fd ffc5 	bl	8005dd0 <xQueueGenericCreateStatic>
 8007e46:	4602      	mov	r2, r0
 8007e48:	4b08      	ldr	r3, [pc, #32]	; (8007e6c <prvCheckForValidListAndQueue+0x60>)
 8007e4a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e4c:	4b07      	ldr	r3, [pc, #28]	; (8007e6c <prvCheckForValidListAndQueue+0x60>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e54:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <prvCheckForValidListAndQueue+0x60>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	490b      	ldr	r1, [pc, #44]	; (8007e88 <prvCheckForValidListAndQueue+0x7c>)
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe fc04 	bl	8006668 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e60:	f000 f96a 	bl	8008138 <vPortExitCritical>
}
 8007e64:	bf00      	nop
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000c18 	.word	0x20000c18
 8007e70:	20000be8 	.word	0x20000be8
 8007e74:	20000bfc 	.word	0x20000bfc
 8007e78:	20000c10 	.word	0x20000c10
 8007e7c:	20000c14 	.word	0x20000c14
 8007e80:	20000cc4 	.word	0x20000cc4
 8007e84:	20000c24 	.word	0x20000c24
 8007e88:	08009280 	.word	0x08009280

08007e8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	3b04      	subs	r3, #4
 8007e9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3b04      	subs	r3, #4
 8007eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f023 0201 	bic.w	r2, r3, #1
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	3b04      	subs	r3, #4
 8007eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ebc:	4a0c      	ldr	r2, [pc, #48]	; (8007ef0 <pxPortInitialiseStack+0x64>)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	3b14      	subs	r3, #20
 8007ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3b04      	subs	r3, #4
 8007ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f06f 0202 	mvn.w	r2, #2
 8007eda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3b20      	subs	r3, #32
 8007ee0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	08007ef5 	.word	0x08007ef5

08007ef4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007efe:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <prvTaskExitError+0x50>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f06:	d009      	beq.n	8007f1c <prvTaskExitError+0x28>
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	60fb      	str	r3, [r7, #12]
 8007f1a:	e7fe      	b.n	8007f1a <prvTaskExitError+0x26>
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f2e:	bf00      	nop
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0fc      	beq.n	8007f30 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f36:	bf00      	nop
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	20000008 	.word	0x20000008
	...

08007f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f50:	4b07      	ldr	r3, [pc, #28]	; (8007f70 <pxCurrentTCBConst2>)
 8007f52:	6819      	ldr	r1, [r3, #0]
 8007f54:	6808      	ldr	r0, [r1, #0]
 8007f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5a:	f380 8809 	msr	PSP, r0
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f04f 0000 	mov.w	r0, #0
 8007f66:	f380 8811 	msr	BASEPRI, r0
 8007f6a:	4770      	bx	lr
 8007f6c:	f3af 8000 	nop.w

08007f70 <pxCurrentTCBConst2>:
 8007f70:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f74:	bf00      	nop
 8007f76:	bf00      	nop

08007f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f78:	4808      	ldr	r0, [pc, #32]	; (8007f9c <prvPortStartFirstTask+0x24>)
 8007f7a:	6800      	ldr	r0, [r0, #0]
 8007f7c:	6800      	ldr	r0, [r0, #0]
 8007f7e:	f380 8808 	msr	MSP, r0
 8007f82:	f04f 0000 	mov.w	r0, #0
 8007f86:	f380 8814 	msr	CONTROL, r0
 8007f8a:	b662      	cpsie	i
 8007f8c:	b661      	cpsie	f
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	df00      	svc	0
 8007f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f9a:	bf00      	nop
 8007f9c:	e000ed08 	.word	0xe000ed08

08007fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fa6:	4b44      	ldr	r3, [pc, #272]	; (80080b8 <xPortStartScheduler+0x118>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a44      	ldr	r2, [pc, #272]	; (80080bc <xPortStartScheduler+0x11c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d109      	bne.n	8007fc4 <xPortStartScheduler+0x24>
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	613b      	str	r3, [r7, #16]
 8007fc2:	e7fe      	b.n	8007fc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fc4:	4b3c      	ldr	r3, [pc, #240]	; (80080b8 <xPortStartScheduler+0x118>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a3d      	ldr	r2, [pc, #244]	; (80080c0 <xPortStartScheduler+0x120>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d109      	bne.n	8007fe2 <xPortStartScheduler+0x42>
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	e7fe      	b.n	8007fe0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fe2:	4b38      	ldr	r3, [pc, #224]	; (80080c4 <xPortStartScheduler+0x124>)
 8007fe4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	22ff      	movs	r2, #255	; 0xff
 8007ff2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ffc:	78fb      	ldrb	r3, [r7, #3]
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008004:	b2da      	uxtb	r2, r3
 8008006:	4b30      	ldr	r3, [pc, #192]	; (80080c8 <xPortStartScheduler+0x128>)
 8008008:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800800a:	4b30      	ldr	r3, [pc, #192]	; (80080cc <xPortStartScheduler+0x12c>)
 800800c:	2207      	movs	r2, #7
 800800e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008010:	e009      	b.n	8008026 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008012:	4b2e      	ldr	r3, [pc, #184]	; (80080cc <xPortStartScheduler+0x12c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3b01      	subs	r3, #1
 8008018:	4a2c      	ldr	r2, [pc, #176]	; (80080cc <xPortStartScheduler+0x12c>)
 800801a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	b2db      	uxtb	r3, r3
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	b2db      	uxtb	r3, r3
 8008024:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008026:	78fb      	ldrb	r3, [r7, #3]
 8008028:	b2db      	uxtb	r3, r3
 800802a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802e:	2b80      	cmp	r3, #128	; 0x80
 8008030:	d0ef      	beq.n	8008012 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008032:	4b26      	ldr	r3, [pc, #152]	; (80080cc <xPortStartScheduler+0x12c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f1c3 0307 	rsb	r3, r3, #7
 800803a:	2b04      	cmp	r3, #4
 800803c:	d009      	beq.n	8008052 <xPortStartScheduler+0xb2>
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	60bb      	str	r3, [r7, #8]
 8008050:	e7fe      	b.n	8008050 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008052:	4b1e      	ldr	r3, [pc, #120]	; (80080cc <xPortStartScheduler+0x12c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	021b      	lsls	r3, r3, #8
 8008058:	4a1c      	ldr	r2, [pc, #112]	; (80080cc <xPortStartScheduler+0x12c>)
 800805a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800805c:	4b1b      	ldr	r3, [pc, #108]	; (80080cc <xPortStartScheduler+0x12c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008064:	4a19      	ldr	r2, [pc, #100]	; (80080cc <xPortStartScheduler+0x12c>)
 8008066:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	b2da      	uxtb	r2, r3
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008070:	4b17      	ldr	r3, [pc, #92]	; (80080d0 <xPortStartScheduler+0x130>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a16      	ldr	r2, [pc, #88]	; (80080d0 <xPortStartScheduler+0x130>)
 8008076:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800807a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800807c:	4b14      	ldr	r3, [pc, #80]	; (80080d0 <xPortStartScheduler+0x130>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a13      	ldr	r2, [pc, #76]	; (80080d0 <xPortStartScheduler+0x130>)
 8008082:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008086:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008088:	f000 f8d6 	bl	8008238 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800808c:	4b11      	ldr	r3, [pc, #68]	; (80080d4 <xPortStartScheduler+0x134>)
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008092:	f000 f8f5 	bl	8008280 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008096:	4b10      	ldr	r3, [pc, #64]	; (80080d8 <xPortStartScheduler+0x138>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a0f      	ldr	r2, [pc, #60]	; (80080d8 <xPortStartScheduler+0x138>)
 800809c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80080a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080a2:	f7ff ff69 	bl	8007f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080a6:	f7fe fedf 	bl	8006e68 <vTaskSwitchContext>
	prvTaskExitError();
 80080aa:	f7ff ff23 	bl	8007ef4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	e000ed00 	.word	0xe000ed00
 80080bc:	410fc271 	.word	0x410fc271
 80080c0:	410fc270 	.word	0x410fc270
 80080c4:	e000e400 	.word	0xe000e400
 80080c8:	20000d14 	.word	0x20000d14
 80080cc:	20000d18 	.word	0x20000d18
 80080d0:	e000ed20 	.word	0xe000ed20
 80080d4:	20000008 	.word	0x20000008
 80080d8:	e000ef34 	.word	0xe000ef34

080080dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080f4:	4b0e      	ldr	r3, [pc, #56]	; (8008130 <vPortEnterCritical+0x54>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3301      	adds	r3, #1
 80080fa:	4a0d      	ldr	r2, [pc, #52]	; (8008130 <vPortEnterCritical+0x54>)
 80080fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080fe:	4b0c      	ldr	r3, [pc, #48]	; (8008130 <vPortEnterCritical+0x54>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d10e      	bne.n	8008124 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008106:	4b0b      	ldr	r3, [pc, #44]	; (8008134 <vPortEnterCritical+0x58>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d009      	beq.n	8008124 <vPortEnterCritical+0x48>
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	603b      	str	r3, [r7, #0]
 8008122:	e7fe      	b.n	8008122 <vPortEnterCritical+0x46>
	}
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	20000008 	.word	0x20000008
 8008134:	e000ed04 	.word	0xe000ed04

08008138 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800813e:	4b11      	ldr	r3, [pc, #68]	; (8008184 <vPortExitCritical+0x4c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d109      	bne.n	800815a <vPortExitCritical+0x22>
 8008146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	607b      	str	r3, [r7, #4]
 8008158:	e7fe      	b.n	8008158 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800815a:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <vPortExitCritical+0x4c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3b01      	subs	r3, #1
 8008160:	4a08      	ldr	r2, [pc, #32]	; (8008184 <vPortExitCritical+0x4c>)
 8008162:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008164:	4b07      	ldr	r3, [pc, #28]	; (8008184 <vPortExitCritical+0x4c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d104      	bne.n	8008176 <vPortExitCritical+0x3e>
 800816c:	2300      	movs	r3, #0
 800816e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	20000008 	.word	0x20000008
	...

08008190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008190:	f3ef 8009 	mrs	r0, PSP
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	4b15      	ldr	r3, [pc, #84]	; (80081f0 <pxCurrentTCBConst>)
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	f01e 0f10 	tst.w	lr, #16
 80081a0:	bf08      	it	eq
 80081a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081aa:	6010      	str	r0, [r2, #0]
 80081ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081b4:	f380 8811 	msr	BASEPRI, r0
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f7fe fe52 	bl	8006e68 <vTaskSwitchContext>
 80081c4:	f04f 0000 	mov.w	r0, #0
 80081c8:	f380 8811 	msr	BASEPRI, r0
 80081cc:	bc09      	pop	{r0, r3}
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	6808      	ldr	r0, [r1, #0]
 80081d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d6:	f01e 0f10 	tst.w	lr, #16
 80081da:	bf08      	it	eq
 80081dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081e0:	f380 8809 	msr	PSP, r0
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	f3af 8000 	nop.w

080081f0 <pxCurrentTCBConst>:
 80081f0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop

080081f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008210:	f7fe fd6c 	bl	8006cec <xTaskIncrementTick>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800821a:	4b06      	ldr	r3, [pc, #24]	; (8008234 <SysTick_Handler+0x3c>)
 800821c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	2300      	movs	r3, #0
 8008224:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800822c:	bf00      	nop
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	e000ed04 	.word	0xe000ed04

08008238 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008238:	b480      	push	{r7}
 800823a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800823c:	4b0b      	ldr	r3, [pc, #44]	; (800826c <vPortSetupTimerInterrupt+0x34>)
 800823e:	2200      	movs	r2, #0
 8008240:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008242:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <vPortSetupTimerInterrupt+0x38>)
 8008244:	2200      	movs	r2, #0
 8008246:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008248:	4b0a      	ldr	r3, [pc, #40]	; (8008274 <vPortSetupTimerInterrupt+0x3c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a0a      	ldr	r2, [pc, #40]	; (8008278 <vPortSetupTimerInterrupt+0x40>)
 800824e:	fba2 2303 	umull	r2, r3, r2, r3
 8008252:	099b      	lsrs	r3, r3, #6
 8008254:	4a09      	ldr	r2, [pc, #36]	; (800827c <vPortSetupTimerInterrupt+0x44>)
 8008256:	3b01      	subs	r3, #1
 8008258:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800825a:	4b04      	ldr	r3, [pc, #16]	; (800826c <vPortSetupTimerInterrupt+0x34>)
 800825c:	2207      	movs	r2, #7
 800825e:	601a      	str	r2, [r3, #0]
}
 8008260:	bf00      	nop
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	e000e010 	.word	0xe000e010
 8008270:	e000e018 	.word	0xe000e018
 8008274:	2000000c 	.word	0x2000000c
 8008278:	10624dd3 	.word	0x10624dd3
 800827c:	e000e014 	.word	0xe000e014

08008280 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008280:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008290 <vPortEnableVFP+0x10>
 8008284:	6801      	ldr	r1, [r0, #0]
 8008286:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800828a:	6001      	str	r1, [r0, #0]
 800828c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800828e:	bf00      	nop
 8008290:	e000ed88 	.word	0xe000ed88

08008294 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800829a:	f3ef 8305 	mrs	r3, IPSR
 800829e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2b0f      	cmp	r3, #15
 80082a4:	d913      	bls.n	80082ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082a6:	4a16      	ldr	r2, [pc, #88]	; (8008300 <vPortValidateInterruptPriority+0x6c>)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4413      	add	r3, r2
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082b0:	4b14      	ldr	r3, [pc, #80]	; (8008304 <vPortValidateInterruptPriority+0x70>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	7afa      	ldrb	r2, [r7, #11]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d209      	bcs.n	80082ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	607b      	str	r3, [r7, #4]
 80082cc:	e7fe      	b.n	80082cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082ce:	4b0e      	ldr	r3, [pc, #56]	; (8008308 <vPortValidateInterruptPriority+0x74>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082d6:	4b0d      	ldr	r3, [pc, #52]	; (800830c <vPortValidateInterruptPriority+0x78>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d909      	bls.n	80082f2 <vPortValidateInterruptPriority+0x5e>
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	603b      	str	r3, [r7, #0]
 80082f0:	e7fe      	b.n	80082f0 <vPortValidateInterruptPriority+0x5c>
	}
 80082f2:	bf00      	nop
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	e000e3f0 	.word	0xe000e3f0
 8008304:	20000d14 	.word	0x20000d14
 8008308:	e000ed0c 	.word	0xe000ed0c
 800830c:	20000d18 	.word	0x20000d18

08008310 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08a      	sub	sp, #40	; 0x28
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008318:	2300      	movs	r3, #0
 800831a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800831c:	f7fe fc2c 	bl	8006b78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008320:	4b57      	ldr	r3, [pc, #348]	; (8008480 <pvPortMalloc+0x170>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008328:	f000 f90c 	bl	8008544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800832c:	4b55      	ldr	r3, [pc, #340]	; (8008484 <pvPortMalloc+0x174>)
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4013      	ands	r3, r2
 8008334:	2b00      	cmp	r3, #0
 8008336:	f040 808c 	bne.w	8008452 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d01c      	beq.n	800837a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008340:	2208      	movs	r2, #8
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4413      	add	r3, r2
 8008346:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f003 0307 	and.w	r3, r3, #7
 800834e:	2b00      	cmp	r3, #0
 8008350:	d013      	beq.n	800837a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f023 0307 	bic.w	r3, r3, #7
 8008358:	3308      	adds	r3, #8
 800835a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	2b00      	cmp	r3, #0
 8008364:	d009      	beq.n	800837a <pvPortMalloc+0x6a>
 8008366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	e7fe      	b.n	8008378 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d068      	beq.n	8008452 <pvPortMalloc+0x142>
 8008380:	4b41      	ldr	r3, [pc, #260]	; (8008488 <pvPortMalloc+0x178>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	429a      	cmp	r2, r3
 8008388:	d863      	bhi.n	8008452 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800838a:	4b40      	ldr	r3, [pc, #256]	; (800848c <pvPortMalloc+0x17c>)
 800838c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800838e:	4b3f      	ldr	r3, [pc, #252]	; (800848c <pvPortMalloc+0x17c>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008394:	e004      	b.n	80083a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d903      	bls.n	80083b2 <pvPortMalloc+0xa2>
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1f1      	bne.n	8008396 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083b2:	4b33      	ldr	r3, [pc, #204]	; (8008480 <pvPortMalloc+0x170>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d04a      	beq.n	8008452 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2208      	movs	r2, #8
 80083c2:	4413      	add	r3, r2
 80083c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	6a3b      	ldr	r3, [r7, #32]
 80083cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	685a      	ldr	r2, [r3, #4]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	1ad2      	subs	r2, r2, r3
 80083d6:	2308      	movs	r3, #8
 80083d8:	005b      	lsls	r3, r3, #1
 80083da:	429a      	cmp	r2, r3
 80083dc:	d91e      	bls.n	800841c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4413      	add	r3, r2
 80083e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	f003 0307 	and.w	r3, r3, #7
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d009      	beq.n	8008404 <pvPortMalloc+0xf4>
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	613b      	str	r3, [r7, #16]
 8008402:	e7fe      	b.n	8008402 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	1ad2      	subs	r2, r2, r3
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008416:	69b8      	ldr	r0, [r7, #24]
 8008418:	f000 f8f6 	bl	8008608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800841c:	4b1a      	ldr	r3, [pc, #104]	; (8008488 <pvPortMalloc+0x178>)
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	4a18      	ldr	r2, [pc, #96]	; (8008488 <pvPortMalloc+0x178>)
 8008428:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800842a:	4b17      	ldr	r3, [pc, #92]	; (8008488 <pvPortMalloc+0x178>)
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	4b18      	ldr	r3, [pc, #96]	; (8008490 <pvPortMalloc+0x180>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	429a      	cmp	r2, r3
 8008434:	d203      	bcs.n	800843e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008436:	4b14      	ldr	r3, [pc, #80]	; (8008488 <pvPortMalloc+0x178>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a15      	ldr	r2, [pc, #84]	; (8008490 <pvPortMalloc+0x180>)
 800843c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	4b10      	ldr	r3, [pc, #64]	; (8008484 <pvPortMalloc+0x174>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	431a      	orrs	r2, r3
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	2200      	movs	r2, #0
 8008450:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008452:	f7fe fb9f 	bl	8006b94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	f003 0307 	and.w	r3, r3, #7
 800845c:	2b00      	cmp	r3, #0
 800845e:	d009      	beq.n	8008474 <pvPortMalloc+0x164>
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	60fb      	str	r3, [r7, #12]
 8008472:	e7fe      	b.n	8008472 <pvPortMalloc+0x162>
	return pvReturn;
 8008474:	69fb      	ldr	r3, [r7, #28]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3728      	adds	r7, #40	; 0x28
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	20001924 	.word	0x20001924
 8008484:	20001930 	.word	0x20001930
 8008488:	20001928 	.word	0x20001928
 800848c:	2000191c 	.word	0x2000191c
 8008490:	2000192c 	.word	0x2000192c

08008494 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d046      	beq.n	8008534 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084a6:	2308      	movs	r3, #8
 80084a8:	425b      	negs	r3, r3
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	4413      	add	r3, r2
 80084ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	4b20      	ldr	r3, [pc, #128]	; (800853c <vPortFree+0xa8>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4013      	ands	r3, r2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d109      	bne.n	80084d6 <vPortFree+0x42>
 80084c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	e7fe      	b.n	80084d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d009      	beq.n	80084f2 <vPortFree+0x5e>
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	60bb      	str	r3, [r7, #8]
 80084f0:	e7fe      	b.n	80084f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	4b11      	ldr	r3, [pc, #68]	; (800853c <vPortFree+0xa8>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4013      	ands	r3, r2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d019      	beq.n	8008534 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d115      	bne.n	8008534 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	4b0b      	ldr	r3, [pc, #44]	; (800853c <vPortFree+0xa8>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	43db      	mvns	r3, r3
 8008512:	401a      	ands	r2, r3
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008518:	f7fe fb2e 	bl	8006b78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	685a      	ldr	r2, [r3, #4]
 8008520:	4b07      	ldr	r3, [pc, #28]	; (8008540 <vPortFree+0xac>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4413      	add	r3, r2
 8008526:	4a06      	ldr	r2, [pc, #24]	; (8008540 <vPortFree+0xac>)
 8008528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800852a:	6938      	ldr	r0, [r7, #16]
 800852c:	f000 f86c 	bl	8008608 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008530:	f7fe fb30 	bl	8006b94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008534:	bf00      	nop
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	20001930 	.word	0x20001930
 8008540:	20001928 	.word	0x20001928

08008544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800854a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800854e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008550:	4b27      	ldr	r3, [pc, #156]	; (80085f0 <prvHeapInit+0xac>)
 8008552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f003 0307 	and.w	r3, r3, #7
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00c      	beq.n	8008578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3307      	adds	r3, #7
 8008562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f023 0307 	bic.w	r3, r3, #7
 800856a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	4a1f      	ldr	r2, [pc, #124]	; (80085f0 <prvHeapInit+0xac>)
 8008574:	4413      	add	r3, r2
 8008576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800857c:	4a1d      	ldr	r2, [pc, #116]	; (80085f4 <prvHeapInit+0xb0>)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008582:	4b1c      	ldr	r3, [pc, #112]	; (80085f4 <prvHeapInit+0xb0>)
 8008584:	2200      	movs	r2, #0
 8008586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	4413      	add	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008590:	2208      	movs	r2, #8
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	1a9b      	subs	r3, r3, r2
 8008596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f023 0307 	bic.w	r3, r3, #7
 800859e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4a15      	ldr	r2, [pc, #84]	; (80085f8 <prvHeapInit+0xb4>)
 80085a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085a6:	4b14      	ldr	r3, [pc, #80]	; (80085f8 <prvHeapInit+0xb4>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2200      	movs	r2, #0
 80085ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085ae:	4b12      	ldr	r3, [pc, #72]	; (80085f8 <prvHeapInit+0xb4>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085c4:	4b0c      	ldr	r3, [pc, #48]	; (80085f8 <prvHeapInit+0xb4>)
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	4a0a      	ldr	r2, [pc, #40]	; (80085fc <prvHeapInit+0xb8>)
 80085d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	4a09      	ldr	r2, [pc, #36]	; (8008600 <prvHeapInit+0xbc>)
 80085da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085dc:	4b09      	ldr	r3, [pc, #36]	; (8008604 <prvHeapInit+0xc0>)
 80085de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085e2:	601a      	str	r2, [r3, #0]
}
 80085e4:	bf00      	nop
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	20000d1c 	.word	0x20000d1c
 80085f4:	2000191c 	.word	0x2000191c
 80085f8:	20001924 	.word	0x20001924
 80085fc:	2000192c 	.word	0x2000192c
 8008600:	20001928 	.word	0x20001928
 8008604:	20001930 	.word	0x20001930

08008608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008610:	4b28      	ldr	r3, [pc, #160]	; (80086b4 <prvInsertBlockIntoFreeList+0xac>)
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	e002      	b.n	800861c <prvInsertBlockIntoFreeList+0x14>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	429a      	cmp	r2, r3
 8008624:	d8f7      	bhi.n	8008616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	4413      	add	r3, r2
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	429a      	cmp	r2, r3
 8008636:	d108      	bne.n	800864a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	441a      	add	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	441a      	add	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	429a      	cmp	r2, r3
 800865c:	d118      	bne.n	8008690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	4b15      	ldr	r3, [pc, #84]	; (80086b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	429a      	cmp	r2, r3
 8008668:	d00d      	beq.n	8008686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	441a      	add	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	e008      	b.n	8008698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008686:	4b0c      	ldr	r3, [pc, #48]	; (80086b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	e003      	b.n	8008698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	429a      	cmp	r2, r3
 800869e:	d002      	beq.n	80086a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086a6:	bf00      	nop
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	2000191c 	.word	0x2000191c
 80086b8:	20001924 	.word	0x20001924

080086bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80086c2:	463b      	mov	r3, r7
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	605a      	str	r2, [r3, #4]
 80086ca:	609a      	str	r2, [r3, #8]
 80086cc:	60da      	str	r2, [r3, #12]
 80086ce:	611a      	str	r2, [r3, #16]
 80086d0:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80086d2:	4b27      	ldr	r3, [pc, #156]	; (8008770 <MX_ADC1_Init+0xb4>)
 80086d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80086d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80086da:	4b25      	ldr	r3, [pc, #148]	; (8008770 <MX_ADC1_Init+0xb4>)
 80086dc:	2200      	movs	r2, #0
 80086de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80086e0:	4b23      	ldr	r3, [pc, #140]	; (8008770 <MX_ADC1_Init+0xb4>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80086e6:	4b22      	ldr	r3, [pc, #136]	; (8008770 <MX_ADC1_Init+0xb4>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80086ec:	4b20      	ldr	r3, [pc, #128]	; (8008770 <MX_ADC1_Init+0xb4>)
 80086ee:	2201      	movs	r2, #1
 80086f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80086f2:	4b1f      	ldr	r3, [pc, #124]	; (8008770 <MX_ADC1_Init+0xb4>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80086fa:	4b1d      	ldr	r3, [pc, #116]	; (8008770 <MX_ADC1_Init+0xb4>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008700:	4b1b      	ldr	r3, [pc, #108]	; (8008770 <MX_ADC1_Init+0xb4>)
 8008702:	2201      	movs	r2, #1
 8008704:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008706:	4b1a      	ldr	r3, [pc, #104]	; (8008770 <MX_ADC1_Init+0xb4>)
 8008708:	2200      	movs	r2, #0
 800870a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800870c:	4b18      	ldr	r3, [pc, #96]	; (8008770 <MX_ADC1_Init+0xb4>)
 800870e:	2201      	movs	r2, #1
 8008710:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008712:	4b17      	ldr	r3, [pc, #92]	; (8008770 <MX_ADC1_Init+0xb4>)
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800871a:	4b15      	ldr	r3, [pc, #84]	; (8008770 <MX_ADC1_Init+0xb4>)
 800871c:	2204      	movs	r2, #4
 800871e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008720:	4b13      	ldr	r3, [pc, #76]	; (8008770 <MX_ADC1_Init+0xb4>)
 8008722:	2200      	movs	r2, #0
 8008724:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8008726:	4b12      	ldr	r3, [pc, #72]	; (8008770 <MX_ADC1_Init+0xb4>)
 8008728:	2200      	movs	r2, #0
 800872a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800872c:	4810      	ldr	r0, [pc, #64]	; (8008770 <MX_ADC1_Init+0xb4>)
 800872e:	f7f7 fda3 	bl	8000278 <HAL_ADC_Init>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8008738:	f000 fa76 	bl	8008c28 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800873c:	2306      	movs	r3, #6
 800873e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008740:	2301      	movs	r3, #1
 8008742:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008744:	2300      	movs	r3, #0
 8008746:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8008748:	2300      	movs	r3, #0
 800874a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800874c:	2300      	movs	r3, #0
 800874e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008754:	463b      	mov	r3, r7
 8008756:	4619      	mov	r1, r3
 8008758:	4805      	ldr	r0, [pc, #20]	; (8008770 <MX_ADC1_Init+0xb4>)
 800875a:	f7f8 fb3b 	bl	8000dd4 <HAL_ADC_ConfigChannel>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8008764:	f000 fa60 	bl	8008c28 <Error_Handler>
  }

}
 8008768:	bf00      	nop
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	20001d7c 	.word	0x20001d7c

08008774 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08a      	sub	sp, #40	; 0x28
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800877c:	f107 0314 	add.w	r3, r7, #20
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	605a      	str	r2, [r3, #4]
 8008786:	609a      	str	r2, [r3, #8]
 8008788:	60da      	str	r2, [r3, #12]
 800878a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008794:	d12b      	bne.n	80087ee <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008796:	4b18      	ldr	r3, [pc, #96]	; (80087f8 <HAL_ADC_MspInit+0x84>)
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	4a17      	ldr	r2, [pc, #92]	; (80087f8 <HAL_ADC_MspInit+0x84>)
 800879c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087a0:	6153      	str	r3, [r2, #20]
 80087a2:	4b15      	ldr	r3, [pc, #84]	; (80087f8 <HAL_ADC_MspInit+0x84>)
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087aa:	613b      	str	r3, [r7, #16]
 80087ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80087ae:	4b12      	ldr	r3, [pc, #72]	; (80087f8 <HAL_ADC_MspInit+0x84>)
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	4a11      	ldr	r2, [pc, #68]	; (80087f8 <HAL_ADC_MspInit+0x84>)
 80087b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087b8:	6153      	str	r3, [r2, #20]
 80087ba:	4b0f      	ldr	r3, [pc, #60]	; (80087f8 <HAL_ADC_MspInit+0x84>)
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80087c6:	2301      	movs	r3, #1
 80087c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80087ca:	2303      	movs	r3, #3
 80087cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ce:	2300      	movs	r3, #0
 80087d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087d2:	f107 0314 	add.w	r3, r7, #20
 80087d6:	4619      	mov	r1, r3
 80087d8:	4808      	ldr	r0, [pc, #32]	; (80087fc <HAL_ADC_MspInit+0x88>)
 80087da:	f7f9 fb83 	bl	8001ee4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80087de:	2200      	movs	r2, #0
 80087e0:	2105      	movs	r1, #5
 80087e2:	2012      	movs	r0, #18
 80087e4:	f7f9 f994 	bl	8001b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80087e8:	2012      	movs	r0, #18
 80087ea:	f7f9 f9bd 	bl	8001b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80087ee:	bf00      	nop
 80087f0:	3728      	adds	r7, #40	; 0x28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	40021000 	.word	0x40021000
 80087fc:	48000800 	.word	0x48000800

08008800 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8008804:	4b0d      	ldr	r3, [pc, #52]	; (800883c <MX_CRC_Init+0x3c>)
 8008806:	4a0e      	ldr	r2, [pc, #56]	; (8008840 <MX_CRC_Init+0x40>)
 8008808:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800880a:	4b0c      	ldr	r3, [pc, #48]	; (800883c <MX_CRC_Init+0x3c>)
 800880c:	2200      	movs	r2, #0
 800880e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008810:	4b0a      	ldr	r3, [pc, #40]	; (800883c <MX_CRC_Init+0x3c>)
 8008812:	2200      	movs	r2, #0
 8008814:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8008816:	4b09      	ldr	r3, [pc, #36]	; (800883c <MX_CRC_Init+0x3c>)
 8008818:	2200      	movs	r2, #0
 800881a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800881c:	4b07      	ldr	r3, [pc, #28]	; (800883c <MX_CRC_Init+0x3c>)
 800881e:	2200      	movs	r2, #0
 8008820:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008822:	4b06      	ldr	r3, [pc, #24]	; (800883c <MX_CRC_Init+0x3c>)
 8008824:	2201      	movs	r2, #1
 8008826:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008828:	4804      	ldr	r0, [pc, #16]	; (800883c <MX_CRC_Init+0x3c>)
 800882a:	f7f9 f9cd 	bl	8001bc8 <HAL_CRC_Init>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8008834:	f000 f9f8 	bl	8008c28 <Error_Handler>
  }

}
 8008838:	bf00      	nop
 800883a:	bd80      	pop	{r7, pc}
 800883c:	20001dcc 	.word	0x20001dcc
 8008840:	40023000 	.word	0x40023000

08008844 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a0a      	ldr	r2, [pc, #40]	; (800887c <HAL_CRC_MspInit+0x38>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d10b      	bne.n	800886e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008856:	4b0a      	ldr	r3, [pc, #40]	; (8008880 <HAL_CRC_MspInit+0x3c>)
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	4a09      	ldr	r2, [pc, #36]	; (8008880 <HAL_CRC_MspInit+0x3c>)
 800885c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008860:	6153      	str	r3, [r2, #20]
 8008862:	4b07      	ldr	r3, [pc, #28]	; (8008880 <HAL_CRC_MspInit+0x3c>)
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800886e:	bf00      	nop
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	40023000 	.word	0x40023000
 8008880:	40021000 	.word	0x40021000

08008884 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of dataQueue */
  dataQueueHandle = osMessageQueueNew (128, sizeof(uint32_t), &dataQueue_attributes);
 8008888:	4a10      	ldr	r2, [pc, #64]	; (80088cc <MX_FREERTOS_Init+0x48>)
 800888a:	2104      	movs	r1, #4
 800888c:	2080      	movs	r0, #128	; 0x80
 800888e:	f7fd f8c9 	bl	8005a24 <osMessageQueueNew>
 8008892:	4602      	mov	r2, r0
 8008894:	4b0e      	ldr	r3, [pc, #56]	; (80088d0 <MX_FREERTOS_Init+0x4c>)
 8008896:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of measureTask */
  measureTaskHandle = osThreadNew(StartMeasurement, NULL, &measureTask_attributes);
 8008898:	4a0e      	ldr	r2, [pc, #56]	; (80088d4 <MX_FREERTOS_Init+0x50>)
 800889a:	2100      	movs	r1, #0
 800889c:	480e      	ldr	r0, [pc, #56]	; (80088d8 <MX_FREERTOS_Init+0x54>)
 800889e:	f7fc fef3 	bl	8005688 <osThreadNew>
 80088a2:	4602      	mov	r2, r0
 80088a4:	4b0d      	ldr	r3, [pc, #52]	; (80088dc <MX_FREERTOS_Init+0x58>)
 80088a6:	601a      	str	r2, [r3, #0]

  /* creation of UARTTransmit */
  UARTTransmitHandle = osThreadNew(TransmitTask, NULL, &UARTTransmit_attributes);
 80088a8:	4a0d      	ldr	r2, [pc, #52]	; (80088e0 <MX_FREERTOS_Init+0x5c>)
 80088aa:	2100      	movs	r1, #0
 80088ac:	480d      	ldr	r0, [pc, #52]	; (80088e4 <MX_FREERTOS_Init+0x60>)
 80088ae:	f7fc feeb 	bl	8005688 <osThreadNew>
 80088b2:	4602      	mov	r2, r0
 80088b4:	4b0c      	ldr	r3, [pc, #48]	; (80088e8 <MX_FREERTOS_Init+0x64>)
 80088b6:	601a      	str	r2, [r3, #0]

  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(HeartBeatTask, NULL, &HeartBeat_attributes);
 80088b8:	4a0c      	ldr	r2, [pc, #48]	; (80088ec <MX_FREERTOS_Init+0x68>)
 80088ba:	2100      	movs	r1, #0
 80088bc:	480c      	ldr	r0, [pc, #48]	; (80088f0 <MX_FREERTOS_Init+0x6c>)
 80088be:	f7fc fee3 	bl	8005688 <osThreadNew>
 80088c2:	4602      	mov	r2, r0
 80088c4:	4b0b      	ldr	r3, [pc, #44]	; (80088f4 <MX_FREERTOS_Init+0x70>)
 80088c6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80088c8:	bf00      	nop
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	08009348 	.word	0x08009348
 80088d0:	20001dfc 	.word	0x20001dfc
 80088d4:	080092dc 	.word	0x080092dc
 80088d8:	080088f9 	.word	0x080088f9
 80088dc:	20001df4 	.word	0x20001df4
 80088e0:	08009300 	.word	0x08009300
 80088e4:	0800896d 	.word	0x0800896d
 80088e8:	20001df0 	.word	0x20001df0
 80088ec:	08009324 	.word	0x08009324
 80088f0:	080089ad 	.word	0x080089ad
 80088f4:	20001df8 	.word	0x20001df8

080088f8 <StartMeasurement>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasurement */
void StartMeasurement(void *argument)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMeasurement */
	/* Infinite loop */
	uint8_t cmd;
	osStatus_t status = {0};
 8008900:	2300      	movs	r3, #0
 8008902:	60fb      	str	r3, [r7, #12]
	//HAL_UART_Transmit(&huart2, &d, 1,0);
	HAL_UART_Receive_IT(&huart2, &cmd, 1);
 8008904:	f107 030b 	add.w	r3, r7, #11
 8008908:	2201      	movs	r2, #1
 800890a:	4619      	mov	r1, r3
 800890c:	4814      	ldr	r0, [pc, #80]	; (8008960 <StartMeasurement+0x68>)
 800890e:	f7fb fed9 	bl	80046c4 <HAL_UART_Receive_IT>

	for (;;) {
		status = osThreadFlagsWait(0x1, osFlagsWaitAll, osWaitForever);
 8008912:	f04f 32ff 	mov.w	r2, #4294967295
 8008916:	2101      	movs	r1, #1
 8008918:	2001      	movs	r0, #1
 800891a:	f7fc ffc1 	bl	80058a0 <osThreadFlagsWait>
 800891e:	4603      	mov	r3, r0
 8008920:	60fb      	str	r3, [r7, #12]
		HAL_UART_Receive_IT(&huart2, &cmd, 1);
 8008922:	f107 030b 	add.w	r3, r7, #11
 8008926:	2201      	movs	r2, #1
 8008928:	4619      	mov	r1, r3
 800892a:	480d      	ldr	r0, [pc, #52]	; (8008960 <StartMeasurement+0x68>)
 800892c:	f7fb feca 	bl	80046c4 <HAL_UART_Receive_IT>
		if (cmd & 0x1){
 8008930:	7afb      	ldrb	r3, [r7, #11]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <StartMeasurement+0x4a>
			HAL_ADC_Start_IT(&hadc1);
 800893a:	480a      	ldr	r0, [pc, #40]	; (8008964 <StartMeasurement+0x6c>)
 800893c:	f7f7 ff2e 	bl	800079c <HAL_ADC_Start_IT>
 8008940:	e00a      	b.n	8008958 <StartMeasurement+0x60>
		} else if (cmd & 0x2) {
 8008942:	7afb      	ldrb	r3, [r7, #11]
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d005      	beq.n	8008958 <StartMeasurement+0x60>
			HAL_ADC_Stop_IT(&hadc1);
 800894c:	4805      	ldr	r0, [pc, #20]	; (8008964 <StartMeasurement+0x6c>)
 800894e:	f7f7 ffc9 	bl	80008e4 <HAL_ADC_Stop_IT>
			watermark = 0;
 8008952:	4b05      	ldr	r3, [pc, #20]	; (8008968 <StartMeasurement+0x70>)
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]
		}
		osDelay(1);
 8008958:	2001      	movs	r0, #1
 800895a:	f7fd f835 	bl	80059c8 <osDelay>
		status = osThreadFlagsWait(0x1, osFlagsWaitAll, osWaitForever);
 800895e:	e7d8      	b.n	8008912 <StartMeasurement+0x1a>
 8008960:	20001e40 	.word	0x20001e40
 8008964:	20001d7c 	.word	0x20001d7c
 8008968:	20001d34 	.word	0x20001d34

0800896c <TransmitTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_TransmitTask */
void TransmitTask(void *argument)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TransmitTask */
	/* Infinite loop */
	osStatus_t status = {0};
 8008974:	2300      	movs	r3, #0
 8008976:	60fb      	str	r3, [r7, #12]
	for (;;) {
		status = osThreadFlagsWait(0x2, osFlagsWaitAny, osWaitForever);
 8008978:	f04f 32ff 	mov.w	r2, #4294967295
 800897c:	2100      	movs	r1, #0
 800897e:	2002      	movs	r0, #2
 8008980:	f7fc ff8e 	bl	80058a0 <osThreadFlagsWait>
 8008984:	4603      	mov	r3, r0
 8008986:	60fb      	str	r3, [r7, #12]
		HAL_NVIC_DisableIRQ(ADC1_IRQn);
 8008988:	2012      	movs	r0, #18
 800898a:	f7f9 f905 	bl	8001b98 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)globaldata, WATERMARK_MAX);
 800898e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008992:	4904      	ldr	r1, [pc, #16]	; (80089a4 <TransmitTask+0x38>)
 8008994:	4804      	ldr	r0, [pc, #16]	; (80089a8 <TransmitTask+0x3c>)
 8008996:	f7fb fe39 	bl	800460c <HAL_UART_Transmit_IT>
		osDelay(1);
 800899a:	2001      	movs	r0, #1
 800899c:	f7fd f814 	bl	80059c8 <osDelay>
		status = osThreadFlagsWait(0x2, osFlagsWaitAny, osWaitForever);
 80089a0:	e7ea      	b.n	8008978 <TransmitTask+0xc>
 80089a2:	bf00      	nop
 80089a4:	20001934 	.word	0x20001934
 80089a8:	20001e40 	.word	0x20001e40

080089ac <HeartBeatTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HeartBeatTask */
void HeartBeatTask(void *argument)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HeartBeatTask */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80089b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80089b8:	4803      	ldr	r0, [pc, #12]	; (80089c8 <HeartBeatTask+0x1c>)
 80089ba:	f7f9 fcf7 	bl	80023ac <HAL_GPIO_TogglePin>
		osDelay(100);
 80089be:	2064      	movs	r0, #100	; 0x64
 80089c0:	f7fd f802 	bl	80059c8 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80089c4:	e7f6      	b.n	80089b4 <HeartBeatTask+0x8>
 80089c6:	bf00      	nop
 80089c8:	48000400 	.word	0x48000400

080089cc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08a      	sub	sp, #40	; 0x28
 80089d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089d2:	f107 0314 	add.w	r3, r7, #20
 80089d6:	2200      	movs	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	605a      	str	r2, [r3, #4]
 80089dc:	609a      	str	r2, [r3, #8]
 80089de:	60da      	str	r2, [r3, #12]
 80089e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80089e2:	4b4b      	ldr	r3, [pc, #300]	; (8008b10 <MX_GPIO_Init+0x144>)
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	4a4a      	ldr	r2, [pc, #296]	; (8008b10 <MX_GPIO_Init+0x144>)
 80089e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089ec:	6153      	str	r3, [r2, #20]
 80089ee:	4b48      	ldr	r3, [pc, #288]	; (8008b10 <MX_GPIO_Init+0x144>)
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089f6:	613b      	str	r3, [r7, #16]
 80089f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80089fa:	4b45      	ldr	r3, [pc, #276]	; (8008b10 <MX_GPIO_Init+0x144>)
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	4a44      	ldr	r2, [pc, #272]	; (8008b10 <MX_GPIO_Init+0x144>)
 8008a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008a04:	6153      	str	r3, [r2, #20]
 8008a06:	4b42      	ldr	r3, [pc, #264]	; (8008b10 <MX_GPIO_Init+0x144>)
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a12:	4b3f      	ldr	r3, [pc, #252]	; (8008b10 <MX_GPIO_Init+0x144>)
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	4a3e      	ldr	r2, [pc, #248]	; (8008b10 <MX_GPIO_Init+0x144>)
 8008a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a1c:	6153      	str	r3, [r2, #20]
 8008a1e:	4b3c      	ldr	r3, [pc, #240]	; (8008b10 <MX_GPIO_Init+0x144>)
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a26:	60bb      	str	r3, [r7, #8]
 8008a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a2a:	4b39      	ldr	r3, [pc, #228]	; (8008b10 <MX_GPIO_Init+0x144>)
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	4a38      	ldr	r2, [pc, #224]	; (8008b10 <MX_GPIO_Init+0x144>)
 8008a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a34:	6153      	str	r3, [r2, #20]
 8008a36:	4b36      	ldr	r3, [pc, #216]	; (8008b10 <MX_GPIO_Init+0x144>)
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a3e:	607b      	str	r3, [r7, #4]
 8008a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008a42:	4b33      	ldr	r3, [pc, #204]	; (8008b10 <MX_GPIO_Init+0x144>)
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	4a32      	ldr	r2, [pc, #200]	; (8008b10 <MX_GPIO_Init+0x144>)
 8008a48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a4c:	6153      	str	r3, [r2, #20]
 8008a4e:	4b30      	ldr	r3, [pc, #192]	; (8008b10 <MX_GPIO_Init+0x144>)
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a56:	603b      	str	r3, [r7, #0]
 8008a58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008a60:	482c      	ldr	r0, [pc, #176]	; (8008b14 <MX_GPIO_Init+0x148>)
 8008a62:	f7f9 fc73 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008a6c:	4b2a      	ldr	r3, [pc, #168]	; (8008b18 <MX_GPIO_Init+0x14c>)
 8008a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a70:	2300      	movs	r3, #0
 8008a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008a74:	f107 0314 	add.w	r3, r7, #20
 8008a78:	4619      	mov	r1, r3
 8008a7a:	4828      	ldr	r0, [pc, #160]	; (8008b1c <MX_GPIO_Init+0x150>)
 8008a7c:	f7f9 fa32 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4 
                           PC5 PC6 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8008a80:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8008a84:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008a86:	2303      	movs	r3, #3
 8008a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a8e:	f107 0314 	add.w	r3, r7, #20
 8008a92:	4619      	mov	r1, r3
 8008a94:	4821      	ldr	r0, [pc, #132]	; (8008b1c <MX_GPIO_Init+0x150>)
 8008a96:	f7f9 fa25 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5 
                           PA6 PA7 PA8 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8008a9a:	f649 73f3 	movw	r3, #40947	; 0x9ff3
 8008a9e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008aa8:	f107 0314 	add.w	r3, r7, #20
 8008aac:	4619      	mov	r1, r3
 8008aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008ab2:	f7f9 fa17 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB14 PB15 
                           PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8008ab6:	f64d 73f7 	movw	r3, #57335	; 0xdff7
 8008aba:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008abc:	2303      	movs	r3, #3
 8008abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ac4:	f107 0314 	add.w	r3, r7, #20
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4812      	ldr	r0, [pc, #72]	; (8008b14 <MX_GPIO_Init+0x148>)
 8008acc:	f7f9 fa0a 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8008ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008ae2:	f107 0314 	add.w	r3, r7, #20
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	480a      	ldr	r0, [pc, #40]	; (8008b14 <MX_GPIO_Init+0x148>)
 8008aea:	f7f9 f9fb 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008aee:	2304      	movs	r3, #4
 8008af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008af2:	2303      	movs	r3, #3
 8008af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008af6:	2300      	movs	r3, #0
 8008af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008afa:	f107 0314 	add.w	r3, r7, #20
 8008afe:	4619      	mov	r1, r3
 8008b00:	4807      	ldr	r0, [pc, #28]	; (8008b20 <MX_GPIO_Init+0x154>)
 8008b02:	f7f9 f9ef 	bl	8001ee4 <HAL_GPIO_Init>

}
 8008b06:	bf00      	nop
 8008b08:	3728      	adds	r7, #40	; 0x28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	40021000 	.word	0x40021000
 8008b14:	48000400 	.word	0x48000400
 8008b18:	10210000 	.word	0x10210000
 8008b1c:	48000800 	.word	0x48000800
 8008b20:	48000c00 	.word	0x48000c00

08008b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008b28:	f7f7 fb52 	bl	80001d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008b2c:	f000 f80f 	bl	8008b4e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008b30:	f7ff ff4c 	bl	80089cc <MX_GPIO_Init>
  MX_ADC1_Init();
 8008b34:	f7ff fdc2 	bl	80086bc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8008b38:	f000 f99a 	bl	8008e70 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8008b3c:	f7ff fe60 	bl	8008800 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8008b40:	f7fc fd3a 	bl	80055b8 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8008b44:	f7ff fe9e 	bl	8008884 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8008b48:	f7fc fd6a 	bl	8005620 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8008b4c:	e7fe      	b.n	8008b4c <main+0x28>

08008b4e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b09c      	sub	sp, #112	; 0x70
 8008b52:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008b54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008b58:	2228      	movs	r2, #40	; 0x28
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fa5a 	bl	8009016 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008b62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b66:	2200      	movs	r2, #0
 8008b68:	601a      	str	r2, [r3, #0]
 8008b6a:	605a      	str	r2, [r3, #4]
 8008b6c:	609a      	str	r2, [r3, #8]
 8008b6e:	60da      	str	r2, [r3, #12]
 8008b70:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008b72:	463b      	mov	r3, r7
 8008b74:	2234      	movs	r2, #52	; 0x34
 8008b76:	2100      	movs	r1, #0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fa4c 	bl	8009016 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8008b82:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8008b86:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008b90:	2302      	movs	r3, #2
 8008b92:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b98:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8008b9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008ba0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7f9 fc29 	bl	80023fc <HAL_RCC_OscConfig>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8008bb0:	f000 f83a 	bl	8008c28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008bb4:	230f      	movs	r3, #15
 8008bb6:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008bb8:	2302      	movs	r3, #2
 8008bba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bc4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008bca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008bce:	2101      	movs	r1, #1
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fa fc1f 	bl	8003414 <HAL_RCC_ClockConfig>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8008bdc:	f000 f824 	bl	8008c28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 8008be0:	2380      	movs	r3, #128	; 0x80
 8008be2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV256;
 8008be4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8008be8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008bea:	463b      	mov	r3, r7
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fa ff2d 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <SystemClock_Config+0xae>
  {
    Error_Handler();
 8008bf8:	f000 f816 	bl	8008c28 <Error_Handler>
  }
}
 8008bfc:	bf00      	nop
 8008bfe:	3770      	adds	r7, #112	; 0x70
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a04      	ldr	r2, [pc, #16]	; (8008c24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d101      	bne.n	8008c1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008c16:	f7f7 faf1 	bl	80001fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008c1a:	bf00      	nop
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	40012c00 	.word	0x40012c00

08008c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008c2c:	bf00      	nop
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8008c36:	b480      	push	{r7}
 8008c38:	b083      	sub	sp, #12
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c52:	4b11      	ldr	r3, [pc, #68]	; (8008c98 <HAL_MspInit+0x4c>)
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	4a10      	ldr	r2, [pc, #64]	; (8008c98 <HAL_MspInit+0x4c>)
 8008c58:	f043 0301 	orr.w	r3, r3, #1
 8008c5c:	6193      	str	r3, [r2, #24]
 8008c5e:	4b0e      	ldr	r3, [pc, #56]	; (8008c98 <HAL_MspInit+0x4c>)
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	607b      	str	r3, [r7, #4]
 8008c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c6a:	4b0b      	ldr	r3, [pc, #44]	; (8008c98 <HAL_MspInit+0x4c>)
 8008c6c:	69db      	ldr	r3, [r3, #28]
 8008c6e:	4a0a      	ldr	r2, [pc, #40]	; (8008c98 <HAL_MspInit+0x4c>)
 8008c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c74:	61d3      	str	r3, [r2, #28]
 8008c76:	4b08      	ldr	r3, [pc, #32]	; (8008c98 <HAL_MspInit+0x4c>)
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c7e:	603b      	str	r3, [r7, #0]
 8008c80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008c82:	2200      	movs	r2, #0
 8008c84:	210f      	movs	r1, #15
 8008c86:	f06f 0001 	mvn.w	r0, #1
 8008c8a:	f7f8 ff41 	bl	8001b10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c8e:	bf00      	nop
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	40021000 	.word	0x40021000

08008c9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08c      	sub	sp, #48	; 0x30
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8008cac:	2200      	movs	r2, #0
 8008cae:	6879      	ldr	r1, [r7, #4]
 8008cb0:	2019      	movs	r0, #25
 8008cb2:	f7f8 ff2d 	bl	8001b10 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8008cb6:	2019      	movs	r0, #25
 8008cb8:	f7f8 ff56 	bl	8001b68 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8008cbc:	4b1e      	ldr	r3, [pc, #120]	; (8008d38 <HAL_InitTick+0x9c>)
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	4a1d      	ldr	r2, [pc, #116]	; (8008d38 <HAL_InitTick+0x9c>)
 8008cc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008cc6:	6193      	str	r3, [r2, #24]
 8008cc8:	4b1b      	ldr	r3, [pc, #108]	; (8008d38 <HAL_InitTick+0x9c>)
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cd0:	60fb      	str	r3, [r7, #12]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008cd4:	f107 0210 	add.w	r2, r7, #16
 8008cd8:	f107 0314 	add.w	r3, r7, #20
 8008cdc:	4611      	mov	r1, r2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fa fe72 	bl	80039c8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8008ce4:	f7fa fe4e 	bl	8003984 <HAL_RCC_GetPCLK2Freq>
 8008ce8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cec:	4a13      	ldr	r2, [pc, #76]	; (8008d3c <HAL_InitTick+0xa0>)
 8008cee:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf2:	0c9b      	lsrs	r3, r3, #18
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8008cf8:	4b11      	ldr	r3, [pc, #68]	; (8008d40 <HAL_InitTick+0xa4>)
 8008cfa:	4a12      	ldr	r2, [pc, #72]	; (8008d44 <HAL_InitTick+0xa8>)
 8008cfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8008cfe:	4b10      	ldr	r3, [pc, #64]	; (8008d40 <HAL_InitTick+0xa4>)
 8008d00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008d04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8008d06:	4a0e      	ldr	r2, [pc, #56]	; (8008d40 <HAL_InitTick+0xa4>)
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8008d0c:	4b0c      	ldr	r3, [pc, #48]	; (8008d40 <HAL_InitTick+0xa4>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d12:	4b0b      	ldr	r3, [pc, #44]	; (8008d40 <HAL_InitTick+0xa4>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8008d18:	4809      	ldr	r0, [pc, #36]	; (8008d40 <HAL_InitTick+0xa4>)
 8008d1a:	f7fb f929 	bl	8003f70 <HAL_TIM_Base_Init>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d104      	bne.n	8008d2e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8008d24:	4806      	ldr	r0, [pc, #24]	; (8008d40 <HAL_InitTick+0xa4>)
 8008d26:	f7fb f9c1 	bl	80040ac <HAL_TIM_Base_Start_IT>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	e000      	b.n	8008d30 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3730      	adds	r7, #48	; 0x30
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	40021000 	.word	0x40021000
 8008d3c:	431bde83 	.word	0x431bde83
 8008d40:	20001e00 	.word	0x20001e00
 8008d44:	40012c00 	.word	0x40012c00

08008d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008d4c:	bf00      	nop
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d56:	b480      	push	{r7}
 8008d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d5a:	e7fe      	b.n	8008d5a <HardFault_Handler+0x4>

08008d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d60:	e7fe      	b.n	8008d60 <MemManage_Handler+0x4>

08008d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008d62:	b480      	push	{r7}
 8008d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d66:	e7fe      	b.n	8008d66 <BusFault_Handler+0x4>

08008d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008d6c:	e7fe      	b.n	8008d6c <UsageFault_Handler+0x4>

08008d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008d72:	bf00      	nop
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008d82:	4813      	ldr	r0, [pc, #76]	; (8008dd0 <ADC1_IRQHandler+0x54>)
 8008d84:	f7f7 fe10 	bl	80009a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */
	uint32_t data = HAL_ADC_GetValue(&hadc1);
 8008d88:	4811      	ldr	r0, [pc, #68]	; (8008dd0 <ADC1_IRQHandler+0x54>)
 8008d8a:	f7f7 fdf5 	bl	8000978 <HAL_ADC_GetValue>
 8008d8e:	6078      	str	r0, [r7, #4]
	//uint8_t msg[100] = {0};
	//sprintf(msg, "%d\n\r", data);
	globaldata[watermark++] = 0x00000FFF & data;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	4b0f      	ldr	r3, [pc, #60]	; (8008dd4 <ADC1_IRQHandler+0x58>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	1c59      	adds	r1, r3, #1
 8008d9a:	480e      	ldr	r0, [pc, #56]	; (8008dd4 <ADC1_IRQHandler+0x58>)
 8008d9c:	6001      	str	r1, [r0, #0]
 8008d9e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008da2:	b291      	uxth	r1, r2
 8008da4:	4a0c      	ldr	r2, [pc, #48]	; (8008dd8 <ADC1_IRQHandler+0x5c>)
 8008da6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if (watermark >= WATERMARK_MAX - 1) {
 8008daa:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <ADC1_IRQHandler+0x58>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8008db2:	d908      	bls.n	8008dc6 <ADC1_IRQHandler+0x4a>
		watermark = 0;
 8008db4:	4b07      	ldr	r3, [pc, #28]	; (8008dd4 <ADC1_IRQHandler+0x58>)
 8008db6:	2200      	movs	r2, #0
 8008db8:	601a      	str	r2, [r3, #0]
		osThreadFlagsSet(UARTTransmitHandle, 0x2);
 8008dba:	4b08      	ldr	r3, [pc, #32]	; (8008ddc <ADC1_IRQHandler+0x60>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2102      	movs	r1, #2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fc fd0b 	bl	80057dc <osThreadFlagsSet>
		//HAL_UART_Transmit(&huart2, "FULL!\n\r", 5, 0); //Because it will be called form ISR
	}
	//osSignalSet(&measureTaskHandle, ADC_VALUE);
  /* USER CODE END ADC1_IRQn 1 */
}
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20001d7c 	.word	0x20001d7c
 8008dd4:	20001d34 	.word	0x20001d34
 8008dd8:	20001934 	.word	0x20001934
 8008ddc:	20001df0 	.word	0x20001df0

08008de0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008de4:	4802      	ldr	r0, [pc, #8]	; (8008df0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8008de6:	f7fb f9b9 	bl	800415c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8008dea:	bf00      	nop
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20001e00 	.word	0x20001e00

08008df4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008df8:	4802      	ldr	r0, [pc, #8]	; (8008e04 <USART2_IRQHandler+0x10>)
 8008dfa:	f7fb fd05 	bl	8004808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008dfe:	bf00      	nop
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	20001e40 	.word	0x20001e40

08008e08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008e0c:	4b08      	ldr	r3, [pc, #32]	; (8008e30 <SystemInit+0x28>)
 8008e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e12:	4a07      	ldr	r2, [pc, #28]	; (8008e30 <SystemInit+0x28>)
 8008e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008e1c:	4b04      	ldr	r3, [pc, #16]	; (8008e30 <SystemInit+0x28>)
 8008e1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008e22:	609a      	str	r2, [r3, #8]
#endif
}
 8008e24:	bf00      	nop
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	e000ed00 	.word	0xe000ed00

08008e34 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
#include "cmsis_os2.h"
extern osThreadId_t measureTaskHandle;
/*Called if buffer is full! So make sure you are using the right buffer size for controll
 * commands*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(measureTaskHandle, 0x1);
 8008e3c:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <HAL_UART_RxCpltCallback+0x20>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2101      	movs	r1, #1
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fc fcca 	bl	80057dc <osThreadFlagsSet>
	__NOP();
 8008e48:	bf00      	nop
}
 8008e4a:	bf00      	nop
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	20001df4 	.word	0x20001df4

08008e58 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
	//Disabled in DataHandler Thread
	HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8008e60:	2012      	movs	r0, #18
 8008e62:	f7f8 fe81 	bl	8001b68 <HAL_NVIC_EnableIRQ>
	__NOP();
 8008e66:	bf00      	nop
}
 8008e68:	bf00      	nop
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8008e74:	4b14      	ldr	r3, [pc, #80]	; (8008ec8 <MX_USART2_UART_Init+0x58>)
 8008e76:	4a15      	ldr	r2, [pc, #84]	; (8008ecc <MX_USART2_UART_Init+0x5c>)
 8008e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8008e7a:	4b13      	ldr	r3, [pc, #76]	; (8008ec8 <MX_USART2_UART_Init+0x58>)
 8008e7c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8008e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008e82:	4b11      	ldr	r3, [pc, #68]	; (8008ec8 <MX_USART2_UART_Init+0x58>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008e88:	4b0f      	ldr	r3, [pc, #60]	; (8008ec8 <MX_USART2_UART_Init+0x58>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008e8e:	4b0e      	ldr	r3, [pc, #56]	; (8008ec8 <MX_USART2_UART_Init+0x58>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008e94:	4b0c      	ldr	r3, [pc, #48]	; (8008ec8 <MX_USART2_UART_Init+0x58>)
 8008e96:	220c      	movs	r2, #12
 8008e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e9a:	4b0b      	ldr	r3, [pc, #44]	; (8008ec8 <MX_USART2_UART_Init+0x58>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ea0:	4b09      	ldr	r3, [pc, #36]	; (8008ec8 <MX_USART2_UART_Init+0x58>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008ea6:	4b08      	ldr	r3, [pc, #32]	; (8008ec8 <MX_USART2_UART_Init+0x58>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008eac:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <MX_USART2_UART_Init+0x58>)
 8008eae:	2200      	movs	r2, #0
 8008eb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008eb2:	4805      	ldr	r0, [pc, #20]	; (8008ec8 <MX_USART2_UART_Init+0x58>)
 8008eb4:	f7fb fb26 	bl	8004504 <HAL_UART_Init>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8008ebe:	f7ff feb3 	bl	8008c28 <Error_Handler>
  }

}
 8008ec2:	bf00      	nop
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	20001e40 	.word	0x20001e40
 8008ecc:	40004400 	.word	0x40004400

08008ed0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08a      	sub	sp, #40	; 0x28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ed8:	f107 0314 	add.w	r3, r7, #20
 8008edc:	2200      	movs	r2, #0
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	605a      	str	r2, [r3, #4]
 8008ee2:	609a      	str	r2, [r3, #8]
 8008ee4:	60da      	str	r2, [r3, #12]
 8008ee6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a1b      	ldr	r2, [pc, #108]	; (8008f5c <HAL_UART_MspInit+0x8c>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d130      	bne.n	8008f54 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008ef2:	4b1b      	ldr	r3, [pc, #108]	; (8008f60 <HAL_UART_MspInit+0x90>)
 8008ef4:	69db      	ldr	r3, [r3, #28]
 8008ef6:	4a1a      	ldr	r2, [pc, #104]	; (8008f60 <HAL_UART_MspInit+0x90>)
 8008ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008efc:	61d3      	str	r3, [r2, #28]
 8008efe:	4b18      	ldr	r3, [pc, #96]	; (8008f60 <HAL_UART_MspInit+0x90>)
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f06:	613b      	str	r3, [r7, #16]
 8008f08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f0a:	4b15      	ldr	r3, [pc, #84]	; (8008f60 <HAL_UART_MspInit+0x90>)
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	4a14      	ldr	r2, [pc, #80]	; (8008f60 <HAL_UART_MspInit+0x90>)
 8008f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f14:	6153      	str	r3, [r2, #20]
 8008f16:	4b12      	ldr	r3, [pc, #72]	; (8008f60 <HAL_UART_MspInit+0x90>)
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f1e:	60fb      	str	r3, [r7, #12]
 8008f20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008f22:	230c      	movs	r3, #12
 8008f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f26:	2302      	movs	r3, #2
 8008f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008f32:	2307      	movs	r3, #7
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f36:	f107 0314 	add.w	r3, r7, #20
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f40:	f7f8 ffd0 	bl	8001ee4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8008f44:	2200      	movs	r2, #0
 8008f46:	2105      	movs	r1, #5
 8008f48:	2026      	movs	r0, #38	; 0x26
 8008f4a:	f7f8 fde1 	bl	8001b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008f4e:	2026      	movs	r0, #38	; 0x26
 8008f50:	f7f8 fe0a 	bl	8001b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008f54:	bf00      	nop
 8008f56:	3728      	adds	r7, #40	; 0x28
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	40004400 	.word	0x40004400
 8008f60:	40021000 	.word	0x40021000

08008f64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008f9c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008f68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008f6a:	e003      	b.n	8008f74 <LoopCopyDataInit>

08008f6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008f6c:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008f6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008f70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008f72:	3104      	adds	r1, #4

08008f74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008f74:	480b      	ldr	r0, [pc, #44]	; (8008fa4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008f76:	4b0c      	ldr	r3, [pc, #48]	; (8008fa8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8008f78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008f7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008f7c:	d3f6      	bcc.n	8008f6c <CopyDataInit>
	ldr	r2, =_sbss
 8008f7e:	4a0b      	ldr	r2, [pc, #44]	; (8008fac <LoopForever+0x12>)
	b	LoopFillZerobss
 8008f80:	e002      	b.n	8008f88 <LoopFillZerobss>

08008f82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008f82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008f84:	f842 3b04 	str.w	r3, [r2], #4

08008f88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008f88:	4b09      	ldr	r3, [pc, #36]	; (8008fb0 <LoopForever+0x16>)
	cmp	r2, r3
 8008f8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008f8c:	d3f9      	bcc.n	8008f82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008f8e:	f7ff ff3b 	bl	8008e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008f92:	f000 f811 	bl	8008fb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008f96:	f7ff fdc5 	bl	8008b24 <main>

08008f9a <LoopForever>:

LoopForever:
    b LoopForever
 8008f9a:	e7fe      	b.n	8008f9a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008f9c:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8008fa0:	08009380 	.word	0x08009380
	ldr	r0, =_sdata
 8008fa4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008fa8:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8008fac:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8008fb0:	20001ec0 	.word	0x20001ec0

08008fb4 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008fb4:	e7fe      	b.n	8008fb4 <CAN_RX1_IRQHandler>
	...

08008fb8 <__libc_init_array>:
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	4e0d      	ldr	r6, [pc, #52]	; (8008ff0 <__libc_init_array+0x38>)
 8008fbc:	4c0d      	ldr	r4, [pc, #52]	; (8008ff4 <__libc_init_array+0x3c>)
 8008fbe:	1ba4      	subs	r4, r4, r6
 8008fc0:	10a4      	asrs	r4, r4, #2
 8008fc2:	2500      	movs	r5, #0
 8008fc4:	42a5      	cmp	r5, r4
 8008fc6:	d109      	bne.n	8008fdc <__libc_init_array+0x24>
 8008fc8:	4e0b      	ldr	r6, [pc, #44]	; (8008ff8 <__libc_init_array+0x40>)
 8008fca:	4c0c      	ldr	r4, [pc, #48]	; (8008ffc <__libc_init_array+0x44>)
 8008fcc:	f000 f82c 	bl	8009028 <_init>
 8008fd0:	1ba4      	subs	r4, r4, r6
 8008fd2:	10a4      	asrs	r4, r4, #2
 8008fd4:	2500      	movs	r5, #0
 8008fd6:	42a5      	cmp	r5, r4
 8008fd8:	d105      	bne.n	8008fe6 <__libc_init_array+0x2e>
 8008fda:	bd70      	pop	{r4, r5, r6, pc}
 8008fdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008fe0:	4798      	blx	r3
 8008fe2:	3501      	adds	r5, #1
 8008fe4:	e7ee      	b.n	8008fc4 <__libc_init_array+0xc>
 8008fe6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008fea:	4798      	blx	r3
 8008fec:	3501      	adds	r5, #1
 8008fee:	e7f2      	b.n	8008fd6 <__libc_init_array+0x1e>
 8008ff0:	08009378 	.word	0x08009378
 8008ff4:	08009378 	.word	0x08009378
 8008ff8:	08009378 	.word	0x08009378
 8008ffc:	0800937c 	.word	0x0800937c

08009000 <memcpy>:
 8009000:	b510      	push	{r4, lr}
 8009002:	1e43      	subs	r3, r0, #1
 8009004:	440a      	add	r2, r1
 8009006:	4291      	cmp	r1, r2
 8009008:	d100      	bne.n	800900c <memcpy+0xc>
 800900a:	bd10      	pop	{r4, pc}
 800900c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009010:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009014:	e7f7      	b.n	8009006 <memcpy+0x6>

08009016 <memset>:
 8009016:	4402      	add	r2, r0
 8009018:	4603      	mov	r3, r0
 800901a:	4293      	cmp	r3, r2
 800901c:	d100      	bne.n	8009020 <memset+0xa>
 800901e:	4770      	bx	lr
 8009020:	f803 1b01 	strb.w	r1, [r3], #1
 8009024:	e7f9      	b.n	800901a <memset+0x4>
	...

08009028 <_init>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	bf00      	nop
 800902c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902e:	bc08      	pop	{r3}
 8009030:	469e      	mov	lr, r3
 8009032:	4770      	bx	lr

08009034 <_fini>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	bf00      	nop
 8009038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903a:	bc08      	pop	{r3}
 800903c:	469e      	mov	lr, r3
 800903e:	4770      	bx	lr
