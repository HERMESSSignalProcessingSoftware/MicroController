
STAMPTEst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000819c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800832c  0800832c  0001832c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085d8  080085d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080085d8  080085d8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085d8  080085d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085d8  080085d8  000185d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085dc  080085dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080085e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a98  20000074  08008654  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b0c  08008654  00021b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c52f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035e9  00000000  00000000  0003c5d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001580  00000000  00000000  0003fbc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d8  00000000  00000000  00041140  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bd06  00000000  00000000  00042518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014fac  00000000  00000000  0005e21e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c8be  00000000  00000000  000731ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010fa88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf0  00000000  00000000  0010fb04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008314 	.word	0x08008314

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008314 	.word	0x08008314

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <HAL_Init+0x28>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <HAL_Init+0x28>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000290:	2003      	movs	r0, #3
 8000292:	f001 fb37 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000296:	2000      	movs	r0, #0
 8000298:	f007 faa0 	bl	80077dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800029c:	f007 fa76 	bl	800778c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40022000 	.word	0x40022000

080002ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <HAL_IncTick+0x20>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	461a      	mov	r2, r3
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <HAL_IncTick+0x24>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4413      	add	r3, r2
 80002bc:	4a04      	ldr	r2, [pc, #16]	; (80002d0 <HAL_IncTick+0x24>)
 80002be:	6013      	str	r3, [r2, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000004 	.word	0x20000004
 80002d0:	200019a4 	.word	0x200019a4

080002d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <HAL_GetTick+0x14>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	200019a4 	.word	0x200019a4

080002ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b09a      	sub	sp, #104	; 0x68
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800031c:	2300      	movs	r3, #0
 800031e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000322:	2300      	movs	r3, #0
 8000324:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000326:	2300      	movs	r3, #0
 8000328:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d101      	bne.n	8000334 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000330:	2301      	movs	r3, #1
 8000332:	e274      	b.n	800081e <HAL_ADC_Init+0x50a>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800033c:	d003      	beq.n	8000346 <HAL_ADC_Init+0x32>
 800033e:	21f9      	movs	r1, #249	; 0xf9
 8000340:	4882      	ldr	r0, [pc, #520]	; (800054c <HAL_ADC_Init+0x238>)
 8000342:	f007 fa18 	bl	8007776 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d012      	beq.n	8000374 <HAL_ADC_Init+0x60>
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000356:	d00d      	beq.n	8000374 <HAL_ADC_Init+0x60>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000360:	d008      	beq.n	8000374 <HAL_ADC_Init+0x60>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800036a:	d003      	beq.n	8000374 <HAL_ADC_Init+0x60>
 800036c:	21fa      	movs	r1, #250	; 0xfa
 800036e:	4877      	ldr	r0, [pc, #476]	; (800054c <HAL_ADC_Init+0x238>)
 8000370:	f007 fa01 	bl	8007776 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d00f      	beq.n	800039c <HAL_ADC_Init+0x88>
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	2b08      	cmp	r3, #8
 8000382:	d00b      	beq.n	800039c <HAL_ADC_Init+0x88>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	2b10      	cmp	r3, #16
 800038a:	d007      	beq.n	800039c <HAL_ADC_Init+0x88>
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	2b18      	cmp	r3, #24
 8000392:	d003      	beq.n	800039c <HAL_ADC_Init+0x88>
 8000394:	21fb      	movs	r1, #251	; 0xfb
 8000396:	486d      	ldr	r0, [pc, #436]	; (800054c <HAL_ADC_Init+0x238>)
 8000398:	f007 f9ed 	bl	8007776 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d007      	beq.n	80003b4 <HAL_ADC_Init+0xa0>
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	68db      	ldr	r3, [r3, #12]
 80003a8:	2b20      	cmp	r3, #32
 80003aa:	d003      	beq.n	80003b4 <HAL_ADC_Init+0xa0>
 80003ac:	21fc      	movs	r1, #252	; 0xfc
 80003ae:	4867      	ldr	r0, [pc, #412]	; (800054c <HAL_ADC_Init+0x238>)
 80003b0:	f007 f9e1 	bl	8007776 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	691b      	ldr	r3, [r3, #16]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d007      	beq.n	80003cc <HAL_ADC_Init+0xb8>
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	691b      	ldr	r3, [r3, #16]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d003      	beq.n	80003cc <HAL_ADC_Init+0xb8>
 80003c4:	21fd      	movs	r1, #253	; 0xfd
 80003c6:	4861      	ldr	r0, [pc, #388]	; (800054c <HAL_ADC_Init+0x238>)
 80003c8:	f007 f9d5 	bl	8007776 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	7e5b      	ldrb	r3, [r3, #25]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d007      	beq.n	80003e4 <HAL_ADC_Init+0xd0>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	7e5b      	ldrb	r3, [r3, #25]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d003      	beq.n	80003e4 <HAL_ADC_Init+0xd0>
 80003dc:	21fe      	movs	r1, #254	; 0xfe
 80003de:	485b      	ldr	r0, [pc, #364]	; (800054c <HAL_ADC_Init+0x238>)
 80003e0:	f007 f9c9 	bl	8007776 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d012      	beq.n	8000412 <HAL_ADC_Init+0xfe>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003f4:	d00d      	beq.n	8000412 <HAL_ADC_Init+0xfe>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003fe:	d008      	beq.n	8000412 <HAL_ADC_Init+0xfe>
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000404:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000408:	d003      	beq.n	8000412 <HAL_ADC_Init+0xfe>
 800040a:	21ff      	movs	r1, #255	; 0xff
 800040c:	484f      	ldr	r0, [pc, #316]	; (800054c <HAL_ADC_Init+0x238>)
 800040e:	f007 f9b2 	bl	8007776 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000416:	2b00      	cmp	r3, #0
 8000418:	d02e      	beq.n	8000478 <HAL_ADC_Init+0x164>
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800041e:	2b40      	cmp	r3, #64	; 0x40
 8000420:	d02a      	beq.n	8000478 <HAL_ADC_Init+0x164>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000426:	2b80      	cmp	r3, #128	; 0x80
 8000428:	d026      	beq.n	8000478 <HAL_ADC_Init+0x164>
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800042e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000432:	d021      	beq.n	8000478 <HAL_ADC_Init+0x164>
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000438:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800043c:	d01c      	beq.n	8000478 <HAL_ADC_Init+0x164>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000442:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000446:	d017      	beq.n	8000478 <HAL_ADC_Init+0x164>
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800044c:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000450:	d012      	beq.n	8000478 <HAL_ADC_Init+0x164>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000456:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 800045a:	d00d      	beq.n	8000478 <HAL_ADC_Init+0x164>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000460:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000464:	d008      	beq.n	8000478 <HAL_ADC_Init+0x164>
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800046a:	2b01      	cmp	r3, #1
 800046c:	d004      	beq.n	8000478 <HAL_ADC_Init+0x164>
 800046e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000472:	4836      	ldr	r0, [pc, #216]	; (800054c <HAL_ADC_Init+0x238>)
 8000474:	f007 f97f 	bl	8007776 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800047e:	2b00      	cmp	r3, #0
 8000480:	d009      	beq.n	8000496 <HAL_ADC_Init+0x182>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000488:	2b01      	cmp	r3, #1
 800048a:	d004      	beq.n	8000496 <HAL_ADC_Init+0x182>
 800048c:	f240 1101 	movw	r1, #257	; 0x101
 8000490:	482e      	ldr	r0, [pc, #184]	; (800054c <HAL_ADC_Init+0x238>)
 8000492:	f007 f970 	bl	8007776 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	2b04      	cmp	r3, #4
 800049c:	d008      	beq.n	80004b0 <HAL_ADC_Init+0x19c>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	2b08      	cmp	r3, #8
 80004a4:	d004      	beq.n	80004b0 <HAL_ADC_Init+0x19c>
 80004a6:	f44f 7181 	mov.w	r1, #258	; 0x102
 80004aa:	4828      	ldr	r0, [pc, #160]	; (800054c <HAL_ADC_Init+0x238>)
 80004ac:	f007 f963 	bl	8007776 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d008      	beq.n	80004ca <HAL_ADC_Init+0x1b6>
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d004      	beq.n	80004ca <HAL_ADC_Init+0x1b6>
 80004c0:	f240 1103 	movw	r1, #259	; 0x103
 80004c4:	4821      	ldr	r0, [pc, #132]	; (800054c <HAL_ADC_Init+0x238>)
 80004c6:	f007 f956 	bl	8007776 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	7e1b      	ldrb	r3, [r3, #24]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d008      	beq.n	80004e4 <HAL_ADC_Init+0x1d0>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	7e1b      	ldrb	r3, [r3, #24]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d004      	beq.n	80004e4 <HAL_ADC_Init+0x1d0>
 80004da:	f44f 7182 	mov.w	r1, #260	; 0x104
 80004de:	481b      	ldr	r0, [pc, #108]	; (800054c <HAL_ADC_Init+0x238>)
 80004e0:	f007 f949 	bl	8007776 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	691b      	ldr	r3, [r3, #16]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d031      	beq.n	8000550 <HAL_ADC_Init+0x23c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d003      	beq.n	80004fc <HAL_ADC_Init+0x1e8>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	2b10      	cmp	r3, #16
 80004fa:	d904      	bls.n	8000506 <HAL_ADC_Init+0x1f2>
 80004fc:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000500:	4812      	ldr	r0, [pc, #72]	; (800054c <HAL_ADC_Init+0x238>)
 8000502:	f007 f938 	bl	8007776 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d009      	beq.n	8000524 <HAL_ADC_Init+0x210>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d004      	beq.n	8000524 <HAL_ADC_Init+0x210>
 800051a:	f240 1109 	movw	r1, #265	; 0x109
 800051e:	480b      	ldr	r0, [pc, #44]	; (800054c <HAL_ADC_Init+0x238>)
 8000520:	f007 f929 	bl	8007776 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d010      	beq.n	8000550 <HAL_ADC_Init+0x23c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000532:	2b00      	cmp	r3, #0
 8000534:	d003      	beq.n	800053e <HAL_ADC_Init+0x22a>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053a:	2b08      	cmp	r3, #8
 800053c:	d908      	bls.n	8000550 <HAL_ADC_Init+0x23c>
 800053e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8000542:	4802      	ldr	r0, [pc, #8]	; (800054c <HAL_ADC_Init+0x238>)
 8000544:	f007 f917 	bl	8007776 <assert_failed>
 8000548:	e002      	b.n	8000550 <HAL_ADC_Init+0x23c>
 800054a:	bf00      	nop
 800054c:	0800832c 	.word	0x0800832c
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 0310 	and.w	r3, r3, #16
 8000558:	2b00      	cmp	r3, #0
 800055a:	d176      	bne.n	800064a <HAL_ADC_Init+0x336>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	2b00      	cmp	r3, #0
 8000562:	d152      	bne.n	800060a <HAL_ADC_Init+0x2f6>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2200      	movs	r2, #0
 8000568:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2200      	movs	r2, #0
 8000574:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2200      	movs	r2, #0
 800057a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f006 fee2 	bl	8007348 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058e:	2b00      	cmp	r3, #0
 8000590:	d13b      	bne.n	800060a <HAL_ADC_Init+0x2f6>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f001 f8a8 	bl	80016e8 <ADC_Disable>
 8000598:	4603      	mov	r3, r0
 800059a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a2:	f003 0310 	and.w	r3, r3, #16
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d12f      	bne.n	800060a <HAL_ADC_Init+0x2f6>
 80005aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d12b      	bne.n	800060a <HAL_ADC_Init+0x2f6>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005ba:	f023 0302 	bic.w	r3, r3, #2
 80005be:	f043 0202 	orr.w	r2, r3, #2
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80005d4:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	689a      	ldr	r2, [r3, #8]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005e4:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80005e6:	4b90      	ldr	r3, [pc, #576]	; (8000828 <HAL_ADC_Init+0x514>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a90      	ldr	r2, [pc, #576]	; (800082c <HAL_ADC_Init+0x518>)
 80005ec:	fba2 2303 	umull	r2, r3, r2, r3
 80005f0:	0c9a      	lsrs	r2, r3, #18
 80005f2:	4613      	mov	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80005fc:	e002      	b.n	8000604 <HAL_ADC_Init+0x2f0>
          {
            wait_loop_index--;
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	3b01      	subs	r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f9      	bne.n	80005fe <HAL_ADC_Init+0x2ea>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	2b00      	cmp	r3, #0
 8000616:	d007      	beq.n	8000628 <HAL_ADC_Init+0x314>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000626:	d110      	bne.n	800064a <HAL_ADC_Init+0x336>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f023 0312 	bic.w	r3, r3, #18
 8000630:	f043 0210 	orr.w	r2, r3, #16
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063c:	f043 0201 	orr.w	r2, r3, #1
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000644:	2301      	movs	r3, #1
 8000646:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	f003 0310 	and.w	r3, r3, #16
 8000652:	2b00      	cmp	r3, #0
 8000654:	f040 80d6 	bne.w	8000804 <HAL_ADC_Init+0x4f0>
 8000658:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800065c:	2b00      	cmp	r3, #0
 800065e:	f040 80d1 	bne.w	8000804 <HAL_ADC_Init+0x4f0>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800066c:	2b00      	cmp	r3, #0
 800066e:	f040 80c9 	bne.w	8000804 <HAL_ADC_Init+0x4f0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800067a:	f043 0202 	orr.w	r2, r3, #2
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000682:	4b6b      	ldr	r3, [pc, #428]	; (8000830 <HAL_ADC_Init+0x51c>)
 8000684:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	f003 0303 	and.w	r3, r3, #3
 8000694:	2b01      	cmp	r3, #1
 8000696:	d108      	bne.n	80006aa <HAL_ADC_Init+0x396>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d101      	bne.n	80006aa <HAL_ADC_Init+0x396>
 80006a6:	2301      	movs	r3, #1
 80006a8:	e000      	b.n	80006ac <HAL_ADC_Init+0x398>
 80006aa:	2300      	movs	r3, #0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d11c      	bne.n	80006ea <HAL_ADC_Init+0x3d6>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80006b0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d010      	beq.n	80006d8 <HAL_ADC_Init+0x3c4>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	f003 0303 	and.w	r3, r3, #3
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d107      	bne.n	80006d2 <HAL_ADC_Init+0x3be>
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d101      	bne.n	80006d2 <HAL_ADC_Init+0x3be>
 80006ce:	2301      	movs	r3, #1
 80006d0:	e000      	b.n	80006d4 <HAL_ADC_Init+0x3c0>
 80006d2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d108      	bne.n	80006ea <HAL_ADC_Init+0x3d6>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80006d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	431a      	orrs	r2, r3
 80006e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006e8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7e5b      	ldrb	r3, [r3, #25]
 80006ee:	035b      	lsls	r3, r3, #13
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80006f4:	2a01      	cmp	r2, #1
 80006f6:	d002      	beq.n	80006fe <HAL_ADC_Init+0x3ea>
 80006f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006fc:	e000      	b.n	8000700 <HAL_ADC_Init+0x3ec>
 80006fe:	2200      	movs	r2, #0
 8000700:	431a      	orrs	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	431a      	orrs	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	4313      	orrs	r3, r2
 800070e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000710:	4313      	orrs	r3, r2
 8000712:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d11b      	bne.n	8000756 <HAL_ADC_Init+0x442>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	7e5b      	ldrb	r3, [r3, #25]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d109      	bne.n	800073a <HAL_ADC_Init+0x426>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072a:	3b01      	subs	r3, #1
 800072c:	045a      	lsls	r2, r3, #17
 800072e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000730:	4313      	orrs	r3, r2
 8000732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000736:	663b      	str	r3, [r7, #96]	; 0x60
 8000738:	e00d      	b.n	8000756 <HAL_ADC_Init+0x442>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000742:	f043 0220 	orr.w	r2, r3, #32
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	f043 0201 	orr.w	r2, r3, #1
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800075a:	2b01      	cmp	r3, #1
 800075c:	d007      	beq.n	800076e <HAL_ADC_Init+0x45a>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000766:	4313      	orrs	r3, r2
 8000768:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800076a:	4313      	orrs	r3, r2
 800076c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f003 030c 	and.w	r3, r3, #12
 8000778:	2b00      	cmp	r3, #0
 800077a:	d114      	bne.n	80007a6 <HAL_ADC_Init+0x492>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	6812      	ldr	r2, [r2, #0]
 8000786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800078a:	f023 0302 	bic.w	r3, r3, #2
 800078e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7e1b      	ldrb	r3, [r3, #24]
 8000794:	039a      	lsls	r2, r3, #14
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	4313      	orrs	r3, r2
 80007a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80007a2:	4313      	orrs	r3, r2
 80007a4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	68da      	ldr	r2, [r3, #12]
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <HAL_ADC_Init+0x520>)
 80007ae:	4013      	ands	r3, r2
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	6812      	ldr	r2, [r2, #0]
 80007b4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80007b6:	430b      	orrs	r3, r1
 80007b8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	691b      	ldr	r3, [r3, #16]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d10c      	bne.n	80007dc <HAL_ADC_Init+0x4c8>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c8:	f023 010f 	bic.w	r1, r3, #15
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	430a      	orrs	r2, r1
 80007d8:	631a      	str	r2, [r3, #48]	; 0x30
 80007da:	e007      	b.n	80007ec <HAL_ADC_Init+0x4d8>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f022 020f 	bic.w	r2, r2, #15
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f023 0303 	bic.w	r3, r3, #3
 80007fa:	f043 0201 	orr.w	r2, r3, #1
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	641a      	str	r2, [r3, #64]	; 0x40
 8000802:	e00a      	b.n	800081a <HAL_ADC_Init+0x506>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f023 0312 	bic.w	r3, r3, #18
 800080c:	f043 0210 	orr.w	r2, r3, #16
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000814:	2301      	movs	r3, #1
 8000816:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800081a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800081e:	4618      	mov	r0, r3
 8000820:	3768      	adds	r7, #104	; 0x68
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000000c 	.word	0x2000000c
 800082c:	431bde83 	.word	0x431bde83
 8000830:	50000300 	.word	0x50000300
 8000834:	fff0c007 	.word	0xfff0c007

08000838 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800084c:	d004      	beq.n	8000858 <HAL_ADC_Start_IT+0x20>
 800084e:	f240 71f7 	movw	r1, #2039	; 0x7f7
 8000852:	484a      	ldr	r0, [pc, #296]	; (800097c <HAL_ADC_Start_IT+0x144>)
 8000854:	f006 ff8f 	bl	8007776 <assert_failed>
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	2b00      	cmp	r3, #0
 8000864:	f040 8083 	bne.w	800096e <HAL_ADC_Start_IT+0x136>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800086e:	2b01      	cmp	r3, #1
 8000870:	d101      	bne.n	8000876 <HAL_ADC_Start_IT+0x3e>
 8000872:	2302      	movs	r3, #2
 8000874:	e07e      	b.n	8000974 <HAL_ADC_Start_IT+0x13c>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2201      	movs	r2, #1
 800087a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 fed4 	bl	800162c <ADC_Enable>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d16a      	bne.n	8000964 <HAL_ADC_Start_IT+0x12c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000896:	f023 0301 	bic.w	r3, r3, #1
 800089a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d007      	beq.n	80008cc <HAL_ADC_Start_IT+0x94>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008d8:	d106      	bne.n	80008e8 <HAL_ADC_Start_IT+0xb0>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f023 0206 	bic.w	r2, r3, #6
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	645a      	str	r2, [r3, #68]	; 0x44
 80008e6:	e002      	b.n	80008ee <HAL_ADC_Start_IT+0xb6>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	221c      	movs	r2, #28
 80008fc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	2b08      	cmp	r3, #8
 8000904:	d110      	bne.n	8000928 <HAL_ADC_Start_IT+0xf0>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f022 0204 	bic.w	r2, r2, #4
 8000914:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f042 0208 	orr.w	r2, r2, #8
 8000924:	605a      	str	r2, [r3, #4]
          break;
 8000926:	e008      	b.n	800093a <HAL_ADC_Start_IT+0x102>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f042 020c 	orr.w	r2, r2, #12
 8000936:	605a      	str	r2, [r3, #4]
          break;
 8000938:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800093e:	2b01      	cmp	r3, #1
 8000940:	d107      	bne.n	8000952 <HAL_ADC_Start_IT+0x11a>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	685a      	ldr	r2, [r3, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f022 0210 	bic.w	r2, r2, #16
 8000950:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f042 0204 	orr.w	r2, r2, #4
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	e006      	b.n	8000972 <HAL_ADC_Start_IT+0x13a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800096c:	e001      	b.n	8000972 <HAL_ADC_Start_IT+0x13a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800096e:	2302      	movs	r3, #2
 8000970:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000972:	7bfb      	ldrb	r3, [r7, #15]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	0800832c 	.word	0x0800832c

08000980 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000990:	d004      	beq.n	800099c <HAL_ADC_GetValue+0x1c>
 8000992:	f640 21f1 	movw	r1, #2801	; 0xaf1
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <HAL_ADC_GetValue+0x2c>)
 8000998:	f006 feed 	bl	8007776 <assert_failed>

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	0800832c 	.word	0x0800832c

080009b0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009cc:	d004      	beq.n	80009d8 <HAL_ADC_IRQHandler+0x28>
 80009ce:	f44f 6133 	mov.w	r1, #2864	; 0xb30
 80009d2:	4880      	ldr	r0, [pc, #512]	; (8000bd4 <HAL_ADC_IRQHandler+0x224>)
 80009d4:	f006 fecf 	bl	8007776 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7e5b      	ldrb	r3, [r3, #25]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d008      	beq.n	80009f2 <HAL_ADC_IRQHandler+0x42>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7e5b      	ldrb	r3, [r3, #25]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d004      	beq.n	80009f2 <HAL_ADC_IRQHandler+0x42>
 80009e8:	f640 3131 	movw	r1, #2865	; 0xb31
 80009ec:	4879      	ldr	r0, [pc, #484]	; (8000bd4 <HAL_ADC_IRQHandler+0x224>)
 80009ee:	f006 fec2 	bl	8007776 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	d008      	beq.n	8000a0c <HAL_ADC_IRQHandler+0x5c>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	2b08      	cmp	r3, #8
 8000a00:	d004      	beq.n	8000a0c <HAL_ADC_IRQHandler+0x5c>
 8000a02:	f640 3132 	movw	r1, #2866	; 0xb32
 8000a06:	4873      	ldr	r0, [pc, #460]	; (8000bd4 <HAL_ADC_IRQHandler+0x224>)
 8000a08:	f006 feb5 	bl	8007776 <assert_failed>
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	d106      	bne.n	8000a28 <HAL_ADC_IRQHandler+0x78>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	d00d      	beq.n	8000a44 <HAL_ADC_IRQHandler+0x94>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000a32:	2b08      	cmp	r3, #8
 8000a34:	d15e      	bne.n	8000af4 <HAL_ADC_IRQHandler+0x144>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f003 0308 	and.w	r3, r3, #8
 8000a40:	2b08      	cmp	r3, #8
 8000a42:	d157      	bne.n	8000af4 <HAL_ADC_IRQHandler+0x144>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f003 0310 	and.w	r3, r3, #16
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d105      	bne.n	8000a5c <HAL_ADC_IRQHandler+0xac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d139      	bne.n	8000ae6 <HAL_ADC_IRQHandler+0x136>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d134      	bne.n	8000ae6 <HAL_ADC_IRQHandler+0x136>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	2b08      	cmp	r3, #8
 8000a88:	d12d      	bne.n	8000ae6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d11a      	bne.n	8000ace <HAL_ADC_IRQHandler+0x11e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	685a      	ldr	r2, [r3, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f022 020c 	bic.w	r2, r2, #12
 8000aa6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d112      	bne.n	8000ae6 <HAL_ADC_IRQHandler+0x136>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f043 0201 	orr.w	r2, r3, #1
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	641a      	str	r2, [r3, #64]	; 0x40
 8000acc:	e00b      	b.n	8000ae6 <HAL_ADC_IRQHandler+0x136>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f043 0210 	orr.w	r2, r3, #16
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f043 0201 	orr.w	r2, r3, #1
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f006 fdae 	bl	8007648 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	220c      	movs	r2, #12
 8000af2:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f003 0320 	and.w	r3, r3, #32
 8000afe:	2b20      	cmp	r3, #32
 8000b00:	d106      	bne.n	8000b10 <HAL_ADC_IRQHandler+0x160>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f003 0320 	and.w	r3, r3, #32
 8000b0c:	2b20      	cmp	r3, #32
 8000b0e:	d00d      	beq.n	8000b2c <HAL_ADC_IRQHandler+0x17c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000b1a:	2b40      	cmp	r3, #64	; 0x40
 8000b1c:	d16f      	bne.n	8000bfe <HAL_ADC_IRQHandler+0x24e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b28:	2b40      	cmp	r3, #64	; 0x40
 8000b2a:	d168      	bne.n	8000bfe <HAL_ADC_IRQHandler+0x24e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d010      	beq.n	8000b70 <HAL_ADC_IRQHandler+0x1c0>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d14b      	bne.n	8000bf0 <HAL_ADC_IRQHandler+0x240>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d144      	bne.n	8000bf0 <HAL_ADC_IRQHandler+0x240>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d13f      	bne.n	8000bf0 <HAL_ADC_IRQHandler+0x240>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7a:	2b40      	cmp	r3, #64	; 0x40
 8000b7c:	d138      	bne.n	8000bf0 <HAL_ADC_IRQHandler+0x240>
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d12f      	bne.n	8000bf0 <HAL_ADC_IRQHandler+0x240>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	f003 0308 	and.w	r3, r3, #8
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d11c      	bne.n	8000bd8 <HAL_ADC_IRQHandler+0x228>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000bac:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d114      	bne.n	8000bf0 <HAL_ADC_IRQHandler+0x240>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f043 0201 	orr.w	r2, r3, #1
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	641a      	str	r2, [r3, #64]	; 0x40
 8000bd2:	e00d      	b.n	8000bf0 <HAL_ADC_IRQHandler+0x240>
 8000bd4:	0800832c 	.word	0x0800832c
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f043 0210 	orr.w	r2, r3, #16
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be8:	f043 0201 	orr.w	r2, r3, #1
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 f8cb 	bl	8000d8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2260      	movs	r2, #96	; 0x60
 8000bfc:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c08:	2b80      	cmp	r3, #128	; 0x80
 8000c0a:	d113      	bne.n	8000c34 <HAL_ADC_IRQHandler+0x284>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c16:	2b80      	cmp	r3, #128	; 0x80
 8000c18:	d10c      	bne.n	8000c34 <HAL_ADC_IRQHandler+0x284>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fb60 	bl	80002ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2280      	movs	r2, #128	; 0x80
 8000c32:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c42:	d115      	bne.n	8000c70 <HAL_ADC_IRQHandler+0x2c0>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c52:	d10d      	bne.n	8000c70 <HAL_ADC_IRQHandler+0x2c0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 f8a7 	bl	8000db4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c6e:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c7e:	d115      	bne.n	8000cac <HAL_ADC_IRQHandler+0x2fc>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c8e:	d10d      	bne.n	8000cac <HAL_ADC_IRQHandler+0x2fc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f000 f893 	bl	8000dc8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000caa:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	2b10      	cmp	r3, #16
 8000cb8:	d13d      	bne.n	8000d36 <HAL_ADC_IRQHandler+0x386>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0310 	and.w	r3, r3, #16
 8000cc4:	2b10      	cmp	r3, #16
 8000cc6:	d136      	bne.n	8000d36 <HAL_ADC_IRQHandler+0x386>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d102      	bne.n	8000cd6 <HAL_ADC_IRQHandler+0x326>
    {
      overrun_error = 1U;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	e019      	b.n	8000d0a <HAL_ADC_IRQHandler+0x35a>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cd6:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <HAL_ADC_IRQHandler+0x3d8>)
 8000cd8:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 031f 	and.w	r3, r3, #31
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d109      	bne.n	8000cfa <HAL_ADC_IRQHandler+0x34a>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d10a      	bne.n	8000d0a <HAL_ADC_IRQHandler+0x35a>
        {
          overrun_error = 1U;  
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e007      	b.n	8000d0a <HAL_ADC_IRQHandler+0x35a>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_ADC_IRQHandler+0x35a>
        {
          overrun_error = 1U;  
 8000d06:	2301      	movs	r3, #1
 8000d08:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d10e      	bne.n	8000d2e <HAL_ADC_IRQHandler+0x37e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d20:	f043 0202 	orr.w	r2, r3, #2
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff fae9 	bl	8000300 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2210      	movs	r2, #16
 8000d34:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d44:	d11b      	bne.n	8000d7e <HAL_ADC_IRQHandler+0x3ce>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d54:	d113      	bne.n	8000d7e <HAL_ADC_IRQHandler+0x3ce>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f043 0208 	orr.w	r2, r3, #8
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d76:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f000 f811 	bl	8000da0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	50000300 	.word	0x50000300

08000d8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b09a      	sub	sp, #104	; 0x68
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df8:	d004      	beq.n	8000e04 <HAL_ADC_ConfigChannel+0x28>
 8000dfa:	f241 517c 	movw	r1, #5500	; 0x157c
 8000dfe:	4897      	ldr	r0, [pc, #604]	; (800105c <HAL_ADC_ConfigChannel+0x280>)
 8000e00:	f006 fcb9 	bl	8007776 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d040      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d03c      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d038      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d034      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b05      	cmp	r3, #5
 8000e2a:	d030      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b06      	cmp	r3, #6
 8000e32:	d02c      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b07      	cmp	r3, #7
 8000e3a:	d028      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d024      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b09      	cmp	r3, #9
 8000e4a:	d020      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b0a      	cmp	r3, #10
 8000e52:	d01c      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b0b      	cmp	r3, #11
 8000e5a:	d018      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b0c      	cmp	r3, #12
 8000e62:	d014      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b0d      	cmp	r3, #13
 8000e6a:	d010      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b0e      	cmp	r3, #14
 8000e72:	d00c      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d008      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b10      	cmp	r3, #16
 8000e82:	d004      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xb2>
 8000e84:	f241 517d 	movw	r1, #5501	; 0x157d
 8000e88:	4874      	ldr	r0, [pc, #464]	; (800105c <HAL_ADC_ConfigChannel+0x280>)
 8000e8a:	f006 fc74 	bl	8007776 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d020      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0xfc>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d01c      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0xfc>
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d018      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0xfc>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d014      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0xfc>
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d010      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0xfc>
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b05      	cmp	r3, #5
 8000ebc:	d00c      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0xfc>
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d008      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0xfc>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b07      	cmp	r3, #7
 8000ecc:	d004      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0xfc>
 8000ece:	f241 517e 	movw	r1, #5502	; 0x157e
 8000ed2:	4862      	ldr	r0, [pc, #392]	; (800105c <HAL_ADC_ConfigChannel+0x280>)
 8000ed4:	f006 fc4f 	bl	8007776 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d008      	beq.n	8000ef2 <HAL_ADC_ConfigChannel+0x116>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d004      	beq.n	8000ef2 <HAL_ADC_ConfigChannel+0x116>
 8000ee8:	f241 517f 	movw	r1, #5503	; 0x157f
 8000eec:	485b      	ldr	r0, [pc, #364]	; (800105c <HAL_ADC_ConfigChannel+0x280>)
 8000eee:	f006 fc42 	bl	8007776 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d014      	beq.n	8000f24 <HAL_ADC_ConfigChannel+0x148>
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d010      	beq.n	8000f24 <HAL_ADC_ConfigChannel+0x148>
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d00c      	beq.n	8000f24 <HAL_ADC_ConfigChannel+0x148>
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d008      	beq.n	8000f24 <HAL_ADC_ConfigChannel+0x148>
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d004      	beq.n	8000f24 <HAL_ADC_ConfigChannel+0x148>
 8000f1a:	f44f 51ac 	mov.w	r1, #5504	; 0x1580
 8000f1e:	484f      	ldr	r0, [pc, #316]	; (800105c <HAL_ADC_ConfigChannel+0x280>)
 8000f20:	f006 fc29 	bl	8007776 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	f003 0318 	and.w	r3, r3, #24
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d104      	bne.n	8000f3c <HAL_ADC_ConfigChannel+0x160>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f3a:	d326      	bcc.n	8000f8a <HAL_ADC_ConfigChannel+0x1ae>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	f003 0318 	and.w	r3, r3, #24
 8000f46:	2b08      	cmp	r3, #8
 8000f48:	d104      	bne.n	8000f54 <HAL_ADC_ConfigChannel+0x178>
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f52:	d31a      	bcc.n	8000f8a <HAL_ADC_ConfigChannel+0x1ae>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	f003 0318 	and.w	r3, r3, #24
 8000f5e:	2b10      	cmp	r3, #16
 8000f60:	d103      	bne.n	8000f6a <HAL_ADC_ConfigChannel+0x18e>
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	2bff      	cmp	r3, #255	; 0xff
 8000f68:	d90f      	bls.n	8000f8a <HAL_ADC_ConfigChannel+0x1ae>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	f003 0318 	and.w	r3, r3, #24
 8000f74:	2b18      	cmp	r3, #24
 8000f76:	d103      	bne.n	8000f80 <HAL_ADC_ConfigChannel+0x1a4>
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	2b3f      	cmp	r3, #63	; 0x3f
 8000f7e:	d904      	bls.n	8000f8a <HAL_ADC_ConfigChannel+0x1ae>
 8000f80:	f241 5181 	movw	r1, #5505	; 0x1581
 8000f84:	4835      	ldr	r0, [pc, #212]	; (800105c <HAL_ADC_ConfigChannel+0x280>)
 8000f86:	f006 fbf6 	bl	8007776 <assert_failed>
  
  
  /* Verification of channel number: Channels 1 to 14 are available in        */  
  /* differential mode. Channels 15U, 16U, 17U, 18 can be used only in           */
  /* single-ended mode.                                                       */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d066      	beq.n	8001060 <HAL_ADC_ConfigChannel+0x284>
  {
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	f000 809f 	beq.w	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	f000 809a 	beq.w	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	f000 8095 	beq.w	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	f000 8090 	beq.w	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	f000 808b 	beq.w	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b06      	cmp	r3, #6
 8000fca:	f000 8086 	beq.w	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b07      	cmp	r3, #7
 8000fd4:	f000 8081 	beq.w	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	d07c      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b09      	cmp	r3, #9
 8000fe6:	d078      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b0a      	cmp	r3, #10
 8000fee:	d074      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b0b      	cmp	r3, #11
 8000ff6:	d070      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b0c      	cmp	r3, #12
 8000ffe:	d06c      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b0d      	cmp	r3, #13
 8001006:	d068      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b0e      	cmp	r3, #14
 800100e:	d064      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d060      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b10      	cmp	r3, #16
 800101e:	d05c      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b11      	cmp	r3, #17
 8001026:	d058      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b12      	cmp	r3, #18
 800102e:	d054      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d050      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b11      	cmp	r3, #17
 800103e:	d04c      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b11      	cmp	r3, #17
 8001046:	d048      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b11      	cmp	r3, #17
 800104e:	d044      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001050:	f241 5189 	movw	r1, #5513	; 0x1589
 8001054:	4801      	ldr	r0, [pc, #4]	; (800105c <HAL_ADC_ConfigChannel+0x280>)
 8001056:	f006 fb8e 	bl	8007776 <assert_failed>
 800105a:	e03e      	b.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 800105c:	0800832c 	.word	0x0800832c
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d038      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d034      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d030      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b04      	cmp	r3, #4
 800107e:	d02c      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b05      	cmp	r3, #5
 8001086:	d028      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b06      	cmp	r3, #6
 800108e:	d024      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b07      	cmp	r3, #7
 8001096:	d020      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b08      	cmp	r3, #8
 800109e:	d01c      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b09      	cmp	r3, #9
 80010a6:	d018      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b0a      	cmp	r3, #10
 80010ae:	d014      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b0b      	cmp	r3, #11
 80010b6:	d010      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b0c      	cmp	r3, #12
 80010be:	d00c      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b0d      	cmp	r3, #13
 80010c6:	d008      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b0e      	cmp	r3, #14
 80010ce:	d004      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2fe>
 80010d0:	f241 518d 	movw	r1, #5517	; 0x158d
 80010d4:	489e      	ldr	r0, [pc, #632]	; (8001350 <HAL_ADC_ConfigChannel+0x574>)
 80010d6:	f006 fb4e 	bl	8007776 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d101      	bne.n	80010e8 <HAL_ADC_ConfigChannel+0x30c>
 80010e4:	2302      	movs	r3, #2
 80010e6:	e297      	b.n	8001618 <HAL_ADC_ConfigChannel+0x83c>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f040 827b 	bne.w	80015f6 <HAL_ADC_ConfigChannel+0x81a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b04      	cmp	r3, #4
 8001106:	d81c      	bhi.n	8001142 <HAL_ADC_ConfigChannel+0x366>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	461a      	mov	r2, r3
 800111c:	231f      	movs	r3, #31
 800111e:	4093      	lsls	r3, r2
 8001120:	43db      	mvns	r3, r3
 8001122:	4019      	ands	r1, r3
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa00 f203 	lsl.w	r2, r0, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	631a      	str	r2, [r3, #48]	; 0x30
 8001140:	e063      	b.n	800120a <HAL_ADC_ConfigChannel+0x42e>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b09      	cmp	r3, #9
 8001148:	d81e      	bhi.n	8001188 <HAL_ADC_ConfigChannel+0x3ac>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	3b1e      	subs	r3, #30
 800115e:	221f      	movs	r2, #31
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	4019      	ands	r1, r3
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	3b1e      	subs	r3, #30
 800117a:	fa00 f203 	lsl.w	r2, r0, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	430a      	orrs	r2, r1
 8001184:	635a      	str	r2, [r3, #52]	; 0x34
 8001186:	e040      	b.n	800120a <HAL_ADC_ConfigChannel+0x42e>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b0e      	cmp	r3, #14
 800118e:	d81e      	bhi.n	80011ce <HAL_ADC_ConfigChannel+0x3f2>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	3b3c      	subs	r3, #60	; 0x3c
 80011a4:	221f      	movs	r2, #31
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	4019      	ands	r1, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	3b3c      	subs	r3, #60	; 0x3c
 80011c0:	fa00 f203 	lsl.w	r2, r0, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	639a      	str	r2, [r3, #56]	; 0x38
 80011cc:	e01d      	b.n	800120a <HAL_ADC_ConfigChannel+0x42e>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	3b5a      	subs	r3, #90	; 0x5a
 80011e2:	221f      	movs	r2, #31
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	4019      	ands	r1, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	3b5a      	subs	r3, #90	; 0x5a
 80011fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b00      	cmp	r3, #0
 8001216:	f040 80e8 	bne.w	80013ea <HAL_ADC_ConfigChannel+0x60e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b09      	cmp	r3, #9
 8001220:	d91c      	bls.n	800125c <HAL_ADC_ConfigChannel+0x480>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6999      	ldr	r1, [r3, #24]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	3b1e      	subs	r3, #30
 8001234:	2207      	movs	r2, #7
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	4019      	ands	r1, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	6898      	ldr	r0, [r3, #8]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	3b1e      	subs	r3, #30
 800124e:	fa00 f203 	lsl.w	r2, r0, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	619a      	str	r2, [r3, #24]
 800125a:	e019      	b.n	8001290 <HAL_ADC_ConfigChannel+0x4b4>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6959      	ldr	r1, [r3, #20]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	2207      	movs	r2, #7
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	4019      	ands	r1, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	6898      	ldr	r0, [r3, #8]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4613      	mov	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	fa00 f203 	lsl.w	r2, r0, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	695a      	ldr	r2, [r3, #20]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	08db      	lsrs	r3, r3, #3
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d852      	bhi.n	8001358 <HAL_ADC_ConfigChannel+0x57c>
 80012b2:	a201      	add	r2, pc, #4	; (adr r2, 80012b8 <HAL_ADC_ConfigChannel+0x4dc>)
 80012b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b8:	080012c9 	.word	0x080012c9
 80012bc:	080012eb 	.word	0x080012eb
 80012c0:	0800130d 	.word	0x0800130d
 80012c4:	0800132f 	.word	0x0800132f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <HAL_ADC_ConfigChannel+0x578>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	0691      	lsls	r1, r2, #26
 80012d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012da:	430a      	orrs	r2, r1
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012e6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012e8:	e082      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x614>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_ADC_ConfigChannel+0x578>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	0691      	lsls	r1, r2, #26
 80012fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012fc:	430a      	orrs	r2, r1
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001308:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800130a:	e071      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x614>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_ADC_ConfigChannel+0x578>)
 8001314:	4013      	ands	r3, r2
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	0691      	lsls	r1, r2, #26
 800131c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800131e:	430a      	orrs	r2, r1
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800132a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800132c:	e060      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x614>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001334:	4b07      	ldr	r3, [pc, #28]	; (8001354 <HAL_ADC_ConfigChannel+0x578>)
 8001336:	4013      	ands	r3, r2
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	0691      	lsls	r1, r2, #26
 800133e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001340:	430a      	orrs	r2, r1
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800134c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800134e:	e04f      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x614>
 8001350:	0800832c 	.word	0x0800832c
 8001354:	83fff000 	.word	0x83fff000
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	069b      	lsls	r3, r3, #26
 8001368:	429a      	cmp	r2, r3
 800136a:	d107      	bne.n	800137c <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800137a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001382:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	069b      	lsls	r3, r3, #26
 800138c:	429a      	cmp	r2, r3
 800138e:	d107      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x5c4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800139e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	069b      	lsls	r3, r3, #26
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d107      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x5e8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013c2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	069b      	lsls	r3, r3, #26
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d10a      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x612>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013e6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80013e8:	e001      	b.n	80013ee <HAL_ADC_ConfigChannel+0x612>
    }

  }
 80013ea:	bf00      	nop
 80013ec:	e000      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x614>
      break;
 80013ee:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d108      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x634>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x634>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <HAL_ADC_ConfigChannel+0x636>
 8001410:	2300      	movs	r3, #0
 8001412:	2b00      	cmp	r3, #0
 8001414:	f040 80fa 	bne.w	800160c <HAL_ADC_ConfigChannel+0x830>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d00f      	beq.n	8001440 <HAL_ADC_ConfigChannel+0x664>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2201      	movs	r2, #1
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	400a      	ands	r2, r1
 800143a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800143e:	e049      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x6f8>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2201      	movs	r2, #1
 800144e:	409a      	lsls	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b09      	cmp	r3, #9
 8001460:	d91c      	bls.n	800149c <HAL_ADC_ConfigChannel+0x6c0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6999      	ldr	r1, [r3, #24]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	3b1b      	subs	r3, #27
 8001474:	2207      	movs	r2, #7
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	4019      	ands	r1, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	6898      	ldr	r0, [r3, #8]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	3b1b      	subs	r3, #27
 800148e:	fa00 f203 	lsl.w	r2, r0, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	619a      	str	r2, [r3, #24]
 800149a:	e01b      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x6f8>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6959      	ldr	r1, [r3, #20]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	2207      	movs	r2, #7
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	4019      	ands	r1, r3
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	6898      	ldr	r0, [r3, #8]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	fa00 f203 	lsl.w	r2, r0, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d4:	4b52      	ldr	r3, [pc, #328]	; (8001620 <HAL_ADC_ConfigChannel+0x844>)
 80014d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b10      	cmp	r3, #16
 80014de:	d105      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x710>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d014      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x73a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014f0:	2b11      	cmp	r3, #17
 80014f2:	d105      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x724>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80014f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00a      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x73a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001504:	2b12      	cmp	r3, #18
 8001506:	f040 8081 	bne.w	800160c <HAL_ADC_ConfigChannel+0x830>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800150a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001512:	2b00      	cmp	r3, #0
 8001514:	d17a      	bne.n	800160c <HAL_ADC_ConfigChannel+0x830>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	2b01      	cmp	r3, #1
 8001526:	d108      	bne.n	800153a <HAL_ADC_ConfigChannel+0x75e>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <HAL_ADC_ConfigChannel+0x75e>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_ADC_ConfigChannel+0x760>
 800153a:	2300      	movs	r3, #0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d150      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x806>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001540:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001542:	2b00      	cmp	r3, #0
 8001544:	d010      	beq.n	8001568 <HAL_ADC_ConfigChannel+0x78c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	2b01      	cmp	r3, #1
 8001550:	d107      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x786>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b01      	cmp	r3, #1
 800155c:	d101      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x786>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_ADC_ConfigChannel+0x788>
 8001562:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001564:	2b00      	cmp	r3, #0
 8001566:	d13c      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x806>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b10      	cmp	r3, #16
 800156e:	d11d      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x7d0>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001578:	d118      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x7d0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800157a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001584:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001586:	4b27      	ldr	r3, [pc, #156]	; (8001624 <HAL_ADC_ConfigChannel+0x848>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a27      	ldr	r2, [pc, #156]	; (8001628 <HAL_ADC_ConfigChannel+0x84c>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	0c9a      	lsrs	r2, r3, #18
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800159c:	e002      	b.n	80015a4 <HAL_ADC_ConfigChannel+0x7c8>
          {
            wait_loop_index--;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f9      	bne.n	800159e <HAL_ADC_ConfigChannel+0x7c2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015aa:	e02e      	b.n	800160a <HAL_ADC_ConfigChannel+0x82e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b11      	cmp	r3, #17
 80015b2:	d10b      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x7f0>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015bc:	d106      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x7f0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80015be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80015c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015c8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015ca:	e01e      	b.n	800160a <HAL_ADC_ConfigChannel+0x82e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b12      	cmp	r3, #18
 80015d2:	d11a      	bne.n	800160a <HAL_ADC_ConfigChannel+0x82e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80015d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015de:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015e0:	e013      	b.n	800160a <HAL_ADC_ConfigChannel+0x82e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f043 0220 	orr.w	r2, r3, #32
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015f4:	e00a      	b.n	800160c <HAL_ADC_ConfigChannel+0x830>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f043 0220 	orr.w	r2, r3, #32
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001608:	e000      	b.n	800160c <HAL_ADC_ConfigChannel+0x830>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800160a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001614:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001618:	4618      	mov	r0, r3
 800161a:	3768      	adds	r7, #104	; 0x68
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	50000300 	.word	0x50000300
 8001624:	2000000c 	.word	0x2000000c
 8001628:	431bde83 	.word	0x431bde83

0800162c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b01      	cmp	r3, #1
 8001644:	d108      	bne.n	8001658 <ADC_Enable+0x2c>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <ADC_Enable+0x2c>
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <ADC_Enable+0x2e>
 8001658:	2300      	movs	r3, #0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d13c      	bne.n	80016d8 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <ADC_Enable+0xb8>)
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00d      	beq.n	8001688 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	f043 0210 	orr.w	r2, r3, #16
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	f043 0201 	orr.w	r2, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e028      	b.n	80016da <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001698:	f7fe fe1c 	bl	80002d4 <HAL_GetTick>
 800169c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800169e:	e014      	b.n	80016ca <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016a0:	f7fe fe18 	bl	80002d4 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d90d      	bls.n	80016ca <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f043 0210 	orr.w	r2, r3, #16
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f043 0201 	orr.w	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e007      	b.n	80016da <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d1e3      	bne.n	80016a0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	8000003f 	.word	0x8000003f

080016e8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d108      	bne.n	8001714 <ADC_Disable+0x2c>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <ADC_Disable+0x2c>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <ADC_Disable+0x2e>
 8001714:	2300      	movs	r3, #0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d040      	beq.n	800179c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 030d 	and.w	r3, r3, #13
 8001724:	2b01      	cmp	r3, #1
 8001726:	d10f      	bne.n	8001748 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0202 	orr.w	r2, r2, #2
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2203      	movs	r2, #3
 800173e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001740:	f7fe fdc8 	bl	80002d4 <HAL_GetTick>
 8001744:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001746:	e022      	b.n	800178e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f043 0210 	orr.w	r2, r3, #16
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001758:	f043 0201 	orr.w	r2, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e01c      	b.n	800179e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001764:	f7fe fdb6 	bl	80002d4 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d90d      	bls.n	800178e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f043 0210 	orr.w	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f043 0201 	orr.w	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e007      	b.n	800179e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b01      	cmp	r3, #1
 800179a:	d0e3      	beq.n	8001764 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b07      	cmp	r3, #7
 8001910:	d00f      	beq.n	8001932 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b06      	cmp	r3, #6
 8001916:	d00c      	beq.n	8001932 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b05      	cmp	r3, #5
 800191c:	d009      	beq.n	8001932 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b04      	cmp	r3, #4
 8001922:	d006      	beq.n	8001932 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d003      	beq.n	8001932 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800192a:	21ac      	movs	r1, #172	; 0xac
 800192c:	4804      	ldr	r0, [pc, #16]	; (8001940 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800192e:	f005 ff22 	bl	8007776 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ff38 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	08008368 	.word	0x08008368

08001944 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	d903      	bls.n	8001964 <HAL_NVIC_SetPriority+0x20>
 800195c:	21c4      	movs	r1, #196	; 0xc4
 800195e:	480e      	ldr	r0, [pc, #56]	; (8001998 <HAL_NVIC_SetPriority+0x54>)
 8001960:	f005 ff09 	bl	8007776 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b0f      	cmp	r3, #15
 8001968:	d903      	bls.n	8001972 <HAL_NVIC_SetPriority+0x2e>
 800196a:	21c5      	movs	r1, #197	; 0xc5
 800196c:	480a      	ldr	r0, [pc, #40]	; (8001998 <HAL_NVIC_SetPriority+0x54>)
 800196e:	f005 ff02 	bl	8007776 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001972:	f7ff ff3d 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 8001976:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	6978      	ldr	r0, [r7, #20]
 800197e:	f7ff ff8d 	bl	800189c <NVIC_EncodePriority>
 8001982:	4602      	mov	r2, r0
 8001984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff5c 	bl	8001848 <__NVIC_SetPriority>
}
 8001990:	bf00      	nop
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	08008368 	.word	0x08008368

0800199c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	da03      	bge.n	80019b6 <HAL_NVIC_EnableIRQ+0x1a>
 80019ae:	21d8      	movs	r1, #216	; 0xd8
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_NVIC_EnableIRQ+0x2c>)
 80019b2:	f005 fee0 	bl	8007776 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ff26 	bl	800180c <__NVIC_EnableIRQ>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	08008368 	.word	0x08008368

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019e0:	d013      	beq.n	8001a0a <HAL_GPIO_Init+0x3e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a37      	ldr	r2, [pc, #220]	; (8001ac4 <HAL_GPIO_Init+0xf8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00f      	beq.n	8001a0a <HAL_GPIO_Init+0x3e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a36      	ldr	r2, [pc, #216]	; (8001ac8 <HAL_GPIO_Init+0xfc>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00b      	beq.n	8001a0a <HAL_GPIO_Init+0x3e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a35      	ldr	r2, [pc, #212]	; (8001acc <HAL_GPIO_Init+0x100>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d007      	beq.n	8001a0a <HAL_GPIO_Init+0x3e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a34      	ldr	r2, [pc, #208]	; (8001ad0 <HAL_GPIO_Init+0x104>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x3e>
 8001a02:	21ba      	movs	r1, #186	; 0xba
 8001a04:	4833      	ldr	r0, [pc, #204]	; (8001ad4 <HAL_GPIO_Init+0x108>)
 8001a06:	f005 feb6 	bl	8007776 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_GPIO_Init+0x54>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	041b      	lsls	r3, r3, #16
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x5c>
 8001a20:	21bb      	movs	r1, #187	; 0xbb
 8001a22:	482c      	ldr	r0, [pc, #176]	; (8001ad4 <HAL_GPIO_Init+0x108>)
 8001a24:	f005 fea7 	bl	8007776 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d035      	beq.n	8001a9c <HAL_GPIO_Init+0xd0>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d031      	beq.n	8001a9c <HAL_GPIO_Init+0xd0>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b11      	cmp	r3, #17
 8001a3e:	d02d      	beq.n	8001a9c <HAL_GPIO_Init+0xd0>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d029      	beq.n	8001a9c <HAL_GPIO_Init+0xd0>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b12      	cmp	r3, #18
 8001a4e:	d025      	beq.n	8001a9c <HAL_GPIO_Init+0xd0>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <HAL_GPIO_Init+0x10c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d020      	beq.n	8001a9c <HAL_GPIO_Init+0xd0>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <HAL_GPIO_Init+0x110>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d01b      	beq.n	8001a9c <HAL_GPIO_Init+0xd0>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4a1d      	ldr	r2, [pc, #116]	; (8001ae0 <HAL_GPIO_Init+0x114>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d016      	beq.n	8001a9c <HAL_GPIO_Init+0xd0>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a1c      	ldr	r2, [pc, #112]	; (8001ae4 <HAL_GPIO_Init+0x118>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d011      	beq.n	8001a9c <HAL_GPIO_Init+0xd0>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ae8 <HAL_GPIO_Init+0x11c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00c      	beq.n	8001a9c <HAL_GPIO_Init+0xd0>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a19      	ldr	r2, [pc, #100]	; (8001aec <HAL_GPIO_Init+0x120>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d007      	beq.n	8001a9c <HAL_GPIO_Init+0xd0>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0xd0>
 8001a94:	21bc      	movs	r1, #188	; 0xbc
 8001a96:	480f      	ldr	r0, [pc, #60]	; (8001ad4 <HAL_GPIO_Init+0x108>)
 8001a98:	f005 fe6d 	bl	8007776 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 81b6 	beq.w	8001e12 <HAL_GPIO_Init+0x446>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	f000 81b1 	beq.w	8001e12 <HAL_GPIO_Init+0x446>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	f000 81ac 	beq.w	8001e12 <HAL_GPIO_Init+0x446>
 8001aba:	21bd      	movs	r1, #189	; 0xbd
 8001abc:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <HAL_GPIO_Init+0x108>)
 8001abe:	f005 fe5a 	bl	8007776 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac2:	e1a6      	b.n	8001e12 <HAL_GPIO_Init+0x446>
 8001ac4:	48000400 	.word	0x48000400
 8001ac8:	48000800 	.word	0x48000800
 8001acc:	48000c00 	.word	0x48000c00
 8001ad0:	48001400 	.word	0x48001400
 8001ad4:	080083a4 	.word	0x080083a4
 8001ad8:	10110000 	.word	0x10110000
 8001adc:	10210000 	.word	0x10210000
 8001ae0:	10310000 	.word	0x10310000
 8001ae4:	10120000 	.word	0x10120000
 8001ae8:	10220000 	.word	0x10220000
 8001aec:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2101      	movs	r1, #1
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8182 	beq.w	8001e0c <HAL_GPIO_Init+0x440>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x14c>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b12      	cmp	r3, #18
 8001b16:	d147      	bne.n	8001ba8 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b1e:	d013      	beq.n	8001b48 <HAL_GPIO_Init+0x17c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a81      	ldr	r2, [pc, #516]	; (8001d28 <HAL_GPIO_Init+0x35c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d00f      	beq.n	8001b48 <HAL_GPIO_Init+0x17c>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a80      	ldr	r2, [pc, #512]	; (8001d2c <HAL_GPIO_Init+0x360>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d00b      	beq.n	8001b48 <HAL_GPIO_Init+0x17c>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a7f      	ldr	r2, [pc, #508]	; (8001d30 <HAL_GPIO_Init+0x364>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d007      	beq.n	8001b48 <HAL_GPIO_Init+0x17c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a7e      	ldr	r2, [pc, #504]	; (8001d34 <HAL_GPIO_Init+0x368>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x17c>
 8001b40:	21cc      	movs	r1, #204	; 0xcc
 8001b42:	487d      	ldr	r0, [pc, #500]	; (8001d38 <HAL_GPIO_Init+0x36c>)
 8001b44:	f005 fe17 	bl	8007776 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	2b0c      	cmp	r3, #12
 8001b4e:	d907      	bls.n	8001b60 <HAL_GPIO_Init+0x194>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x194>
 8001b58:	21cd      	movs	r1, #205	; 0xcd
 8001b5a:	4877      	ldr	r0, [pc, #476]	; (8001d38 <HAL_GPIO_Init+0x36c>)
 8001b5c:	f005 fe0b 	bl	8007776 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	08da      	lsrs	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3208      	adds	r2, #8
 8001b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	220f      	movs	r2, #15
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	6939      	ldr	r1, [r7, #16]
 8001ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0203 	and.w	r2, r3, #3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d00b      	beq.n	8001bfc <HAL_GPIO_Init+0x230>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d007      	beq.n	8001bfc <HAL_GPIO_Init+0x230>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bf0:	2b11      	cmp	r3, #17
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x230>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b12      	cmp	r3, #18
 8001bfa:	d140      	bne.n	8001c7e <HAL_GPIO_Init+0x2b2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00b      	beq.n	8001c1c <HAL_GPIO_Init+0x250>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d007      	beq.n	8001c1c <HAL_GPIO_Init+0x250>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x250>
 8001c14:	21e1      	movs	r1, #225	; 0xe1
 8001c16:	4848      	ldr	r0, [pc, #288]	; (8001d38 <HAL_GPIO_Init+0x36c>)
 8001c18:	f005 fdad 	bl	8007776 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c52:	2201      	movs	r2, #1
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	091b      	lsrs	r3, r3, #4
 8001c68:	f003 0201 	and.w	r2, r3, #1
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80a8 	beq.w	8001e0c <HAL_GPIO_Init+0x440>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <HAL_GPIO_Init+0x370>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <HAL_GPIO_Init+0x370>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <HAL_GPIO_Init+0x370>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cd4:	4a1a      	ldr	r2, [pc, #104]	; (8001d40 <HAL_GPIO_Init+0x374>)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cfe:	d021      	beq.n	8001d44 <HAL_GPIO_Init+0x378>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_GPIO_Init+0x35c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d00d      	beq.n	8001d24 <HAL_GPIO_Init+0x358>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <HAL_GPIO_Init+0x360>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d007      	beq.n	8001d20 <HAL_GPIO_Init+0x354>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <HAL_GPIO_Init+0x364>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d101      	bne.n	8001d1c <HAL_GPIO_Init+0x350>
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e014      	b.n	8001d46 <HAL_GPIO_Init+0x37a>
 8001d1c:	2305      	movs	r3, #5
 8001d1e:	e012      	b.n	8001d46 <HAL_GPIO_Init+0x37a>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e010      	b.n	8001d46 <HAL_GPIO_Init+0x37a>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e00e      	b.n	8001d46 <HAL_GPIO_Init+0x37a>
 8001d28:	48000400 	.word	0x48000400
 8001d2c:	48000800 	.word	0x48000800
 8001d30:	48000c00 	.word	0x48000c00
 8001d34:	48001400 	.word	0x48001400
 8001d38:	080083a4 	.word	0x080083a4
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010000 	.word	0x40010000
 8001d44:	2300      	movs	r3, #0
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	f002 0203 	and.w	r2, r2, #3
 8001d4c:	0092      	lsls	r2, r2, #2
 8001d4e:	4093      	lsls	r3, r2
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d56:	4935      	ldr	r1, [pc, #212]	; (8001e2c <HAL_GPIO_Init+0x460>)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d64:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <HAL_GPIO_Init+0x464>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x3bc>
        {
          temp |= iocurrent;
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d88:	4a29      	ldr	r2, [pc, #164]	; (8001e30 <HAL_GPIO_Init+0x464>)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d8e:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <HAL_GPIO_Init+0x464>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x3e6>
        {
          temp |= iocurrent;
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001db2:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <HAL_GPIO_Init+0x464>)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db8:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_GPIO_Init+0x464>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x410>
        {
          temp |= iocurrent;
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_GPIO_Init+0x464>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <HAL_GPIO_Init+0x464>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x43a>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_GPIO_Init+0x464>)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f47f ae67 	bne.w	8001af0 <HAL_GPIO_Init+0x124>
  }
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40010400 	.word	0x40010400

08001e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]
 8001e40:	4613      	mov	r3, r2
 8001e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001e44:	887b      	ldrh	r3, [r7, #2]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <HAL_GPIO_WritePin+0x20>
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d004      	beq.n	8001e5e <HAL_GPIO_WritePin+0x2a>
 8001e54:	f240 11a7 	movw	r1, #423	; 0x1a7
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <HAL_GPIO_WritePin+0x5c>)
 8001e5a:	f005 fc8c 	bl	8007776 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001e5e:	787b      	ldrb	r3, [r7, #1]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <HAL_GPIO_WritePin+0x40>
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d004      	beq.n	8001e74 <HAL_GPIO_WritePin+0x40>
 8001e6a:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8001e6e:	4808      	ldr	r0, [pc, #32]	; (8001e90 <HAL_GPIO_WritePin+0x5c>)
 8001e70:	f005 fc81 	bl	8007776 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001e74:	787b      	ldrb	r3, [r7, #1]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e80:	e002      	b.n	8001e88 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	080083a4 	.word	0x080083a4

08001e94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001ea0:	887b      	ldrh	r3, [r7, #2]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <HAL_GPIO_TogglePin+0x1c>
 8001ea6:	887b      	ldrh	r3, [r7, #2]
 8001ea8:	0c1b      	lsrs	r3, r3, #16
 8001eaa:	041b      	lsls	r3, r3, #16
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d004      	beq.n	8001eba <HAL_GPIO_TogglePin+0x26>
 8001eb0:	f240 11bd 	movw	r1, #445	; 0x1bd
 8001eb4:	480a      	ldr	r0, [pc, #40]	; (8001ee0 <HAL_GPIO_TogglePin+0x4c>)
 8001eb6:	f005 fc5e 	bl	8007776 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	887b      	ldrh	r3, [r7, #2]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d004      	beq.n	8001ed0 <HAL_GPIO_TogglePin+0x3c>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ec6:	887b      	ldrh	r3, [r7, #2]
 8001ec8:	041a      	lsls	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001ece:	e002      	b.n	8001ed6 <HAL_GPIO_TogglePin+0x42>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ed0:	887a      	ldrh	r2, [r7, #2]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	080083a4 	.word	0x080083a4

08001ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f000 bff7 	b.w	8002eec <HAL_RCC_OscConfig+0x1008>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d020      	beq.n	8001f4a <HAL_RCC_OscConfig+0x66>
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d119      	bne.n	8001f4a <HAL_RCC_OscConfig+0x66>
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d112      	bne.n	8001f4a <HAL_RCC_OscConfig+0x66>
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10b      	bne.n	8001f4a <HAL_RCC_OscConfig+0x66>
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d104      	bne.n	8001f4a <HAL_RCC_OscConfig+0x66>
 8001f40:	f240 114b 	movw	r1, #331	; 0x14b
 8001f44:	48c3      	ldr	r0, [pc, #780]	; (8002254 <HAL_RCC_OscConfig+0x370>)
 8001f46:	f005 fc16 	bl	8007776 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8182 	beq.w	800225e <HAL_RCC_OscConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d010      	beq.n	8001f86 <HAL_RCC_OscConfig+0xa2>
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6e:	d00a      	beq.n	8001f86 <HAL_RCC_OscConfig+0xa2>
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7a:	d004      	beq.n	8001f86 <HAL_RCC_OscConfig+0xa2>
 8001f7c:	f240 1151 	movw	r1, #337	; 0x151
 8001f80:	48b4      	ldr	r0, [pc, #720]	; (8002254 <HAL_RCC_OscConfig+0x370>)
 8001f82:	f005 fbf8 	bl	8007776 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f86:	4bb4      	ldr	r3, [pc, #720]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d00c      	beq.n	8001fac <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f92:	4bb1      	ldr	r3, [pc, #708]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d159      	bne.n	8002052 <HAL_RCC_OscConfig+0x16e>
 8001f9e:	4bae      	ldr	r3, [pc, #696]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001faa:	d152      	bne.n	8002052 <HAL_RCC_OscConfig+0x16e>
 8001fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fc0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d102      	bne.n	8001fde <HAL_RCC_OscConfig+0xfa>
 8001fd8:	4b9f      	ldr	r3, [pc, #636]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	e015      	b.n	800200a <HAL_RCC_OscConfig+0x126>
 8001fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ffa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002006:	4b94      	ldr	r3, [pc, #592]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800200e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002012:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002016:	fa92 f2a2 	rbit	r2, r2
 800201a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800201e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002022:	fab2 f282 	clz	r2, r2
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	f042 0220 	orr.w	r2, r2, #32
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	f002 021f 	and.w	r2, r2, #31
 8002032:	2101      	movs	r1, #1
 8002034:	fa01 f202 	lsl.w	r2, r1, r2
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 810e 	beq.w	800225c <HAL_RCC_OscConfig+0x378>
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 8108 	bne.w	800225c <HAL_RCC_OscConfig+0x378>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	f000 bf4d 	b.w	8002eec <HAL_RCC_OscConfig+0x1008>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205c:	d106      	bne.n	800206c <HAL_RCC_OscConfig+0x188>
 800205e:	4b7e      	ldr	r3, [pc, #504]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a7d      	ldr	r2, [pc, #500]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e030      	b.n	80020ce <HAL_RCC_OscConfig+0x1ea>
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x1ac>
 8002076:	4b78      	ldr	r3, [pc, #480]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a77      	ldr	r2, [pc, #476]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 800207c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b75      	ldr	r3, [pc, #468]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a74      	ldr	r2, [pc, #464]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 8002088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e01e      	b.n	80020ce <HAL_RCC_OscConfig+0x1ea>
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800209a:	d10c      	bne.n	80020b6 <HAL_RCC_OscConfig+0x1d2>
 800209c:	4b6e      	ldr	r3, [pc, #440]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a6d      	ldr	r2, [pc, #436]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 80020a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b6b      	ldr	r3, [pc, #428]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a6a      	ldr	r2, [pc, #424]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 80020ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	e00b      	b.n	80020ce <HAL_RCC_OscConfig+0x1ea>
 80020b6:	4b68      	ldr	r3, [pc, #416]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a67      	ldr	r2, [pc, #412]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 80020bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b65      	ldr	r3, [pc, #404]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a64      	ldr	r2, [pc, #400]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 80020c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020cc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ce:	4b62      	ldr	r3, [pc, #392]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	f023 020f 	bic.w	r2, r3, #15
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	495e      	ldr	r1, [pc, #376]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d059      	beq.n	80021a0 <HAL_RCC_OscConfig+0x2bc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7fe f8f2 	bl	80002d4 <HAL_GetTick>
 80020f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_OscConfig+0x228>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f6:	f7fe f8ed 	bl	80002d4 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d902      	bls.n	800210c <HAL_RCC_OscConfig+0x228>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	f000 bef0 	b.w	8002eec <HAL_RCC_OscConfig+0x1008>
 800210c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002110:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002120:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d102      	bne.n	800213e <HAL_RCC_OscConfig+0x25a>
 8002138:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	e015      	b.n	800216a <HAL_RCC_OscConfig+0x286>
 800213e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002142:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002152:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002156:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800215a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002166:	4b3c      	ldr	r3, [pc, #240]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800216e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002172:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002176:	fa92 f2a2 	rbit	r2, r2
 800217a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800217e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002182:	fab2 f282 	clz	r2, r2
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	f042 0220 	orr.w	r2, r2, #32
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	f002 021f 	and.w	r2, r2, #31
 8002192:	2101      	movs	r1, #1
 8002194:	fa01 f202 	lsl.w	r2, r1, r2
 8002198:	4013      	ands	r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0ab      	beq.n	80020f6 <HAL_RCC_OscConfig+0x212>
 800219e:	e05e      	b.n	800225e <HAL_RCC_OscConfig+0x37a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7fe f898 	bl	80002d4 <HAL_GetTick>
 80021a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_OscConfig+0x2dc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021aa:	f7fe f893 	bl	80002d4 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d902      	bls.n	80021c0 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	f000 be96 	b.w	8002eec <HAL_RCC_OscConfig+0x1008>
 80021c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80021d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d8:	fab3 f383 	clz	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d102      	bne.n	80021f2 <HAL_RCC_OscConfig+0x30e>
 80021ec:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	e015      	b.n	800221e <HAL_RCC_OscConfig+0x33a>
 80021f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800220a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800220e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800221a:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <HAL_RCC_OscConfig+0x374>)
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002222:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002226:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800222a:	fa92 f2a2 	rbit	r2, r2
 800222e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002232:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002236:	fab2 f282 	clz	r2, r2
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	f042 0220 	orr.w	r2, r2, #32
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	f002 021f 	and.w	r2, r2, #31
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f202 	lsl.w	r2, r1, r2
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1ab      	bne.n	80021aa <HAL_RCC_OscConfig+0x2c6>
 8002252:	e004      	b.n	800225e <HAL_RCC_OscConfig+0x37a>
 8002254:	080083e0 	.word	0x080083e0
 8002258:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 818c 	beq.w	8002586 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <HAL_RCC_OscConfig+0x3a8>
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d004      	beq.n	800228c <HAL_RCC_OscConfig+0x3a8>
 8002282:	f240 1189 	movw	r1, #393	; 0x189
 8002286:	48a7      	ldr	r0, [pc, #668]	; (8002524 <HAL_RCC_OscConfig+0x640>)
 8002288:	f005 fa75 	bl	8007776 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	2b1f      	cmp	r3, #31
 8002294:	d904      	bls.n	80022a0 <HAL_RCC_OscConfig+0x3bc>
 8002296:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800229a:	48a2      	ldr	r0, [pc, #648]	; (8002524 <HAL_RCC_OscConfig+0x640>)
 800229c:	f005 fa6b 	bl	8007776 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022a0:	4ba1      	ldr	r3, [pc, #644]	; (8002528 <HAL_RCC_OscConfig+0x644>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00b      	beq.n	80022c4 <HAL_RCC_OscConfig+0x3e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022ac:	4b9e      	ldr	r3, [pc, #632]	; (8002528 <HAL_RCC_OscConfig+0x644>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d16c      	bne.n	8002392 <HAL_RCC_OscConfig+0x4ae>
 80022b8:	4b9b      	ldr	r3, [pc, #620]	; (8002528 <HAL_RCC_OscConfig+0x644>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d166      	bne.n	8002392 <HAL_RCC_OscConfig+0x4ae>
 80022c4:	2302      	movs	r3, #2
 80022c6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80022d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d102      	bne.n	80022f4 <HAL_RCC_OscConfig+0x410>
 80022ee:	4b8e      	ldr	r3, [pc, #568]	; (8002528 <HAL_RCC_OscConfig+0x644>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	e013      	b.n	800231c <HAL_RCC_OscConfig+0x438>
 80022f4:	2302      	movs	r3, #2
 80022f6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002306:	2302      	movs	r3, #2
 8002308:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800230c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002318:	4b83      	ldr	r3, [pc, #524]	; (8002528 <HAL_RCC_OscConfig+0x644>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	2202      	movs	r2, #2
 800231e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002322:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002326:	fa92 f2a2 	rbit	r2, r2
 800232a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800232e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002332:	fab2 f282 	clz	r2, r2
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	f042 0220 	orr.w	r2, r2, #32
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	f002 021f 	and.w	r2, r2, #31
 8002342:	2101      	movs	r1, #1
 8002344:	fa01 f202 	lsl.w	r2, r1, r2
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d007      	beq.n	800235e <HAL_RCC_OscConfig+0x47a>
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d002      	beq.n	800235e <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	f000 bdc7 	b.w	8002eec <HAL_RCC_OscConfig+0x1008>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235e:	4b72      	ldr	r3, [pc, #456]	; (8002528 <HAL_RCC_OscConfig+0x644>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	21f8      	movs	r1, #248	; 0xf8
 800236e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002376:	fa91 f1a1 	rbit	r1, r1
 800237a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800237e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002382:	fab1 f181 	clz	r1, r1
 8002386:	b2c9      	uxtb	r1, r1
 8002388:	408b      	lsls	r3, r1
 800238a:	4967      	ldr	r1, [pc, #412]	; (8002528 <HAL_RCC_OscConfig+0x644>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002390:	e0f9      	b.n	8002586 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8085 	beq.w	80024a8 <HAL_RCC_OscConfig+0x5c4>
 800239e:	2301      	movs	r3, #1
 80023a0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80023b0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	461a      	mov	r2, r3
 80023c6:	2301      	movs	r3, #1
 80023c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7fd ff83 	bl	80002d4 <HAL_GetTick>
 80023ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d2:	e00a      	b.n	80023ea <HAL_RCC_OscConfig+0x506>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d4:	f7fd ff7e 	bl	80002d4 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d902      	bls.n	80023ea <HAL_RCC_OscConfig+0x506>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	f000 bd81 	b.w	8002eec <HAL_RCC_OscConfig+0x1008>
 80023ea:	2302      	movs	r3, #2
 80023ec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80023fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b01      	cmp	r3, #1
 8002412:	d102      	bne.n	800241a <HAL_RCC_OscConfig+0x536>
 8002414:	4b44      	ldr	r3, [pc, #272]	; (8002528 <HAL_RCC_OscConfig+0x644>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	e013      	b.n	8002442 <HAL_RCC_OscConfig+0x55e>
 800241a:	2302      	movs	r3, #2
 800241c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800242c:	2302      	movs	r3, #2
 800242e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002432:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800243e:	4b3a      	ldr	r3, [pc, #232]	; (8002528 <HAL_RCC_OscConfig+0x644>)
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	2202      	movs	r2, #2
 8002444:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002448:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800244c:	fa92 f2a2 	rbit	r2, r2
 8002450:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002454:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002458:	fab2 f282 	clz	r2, r2
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f042 0220 	orr.w	r2, r2, #32
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	f002 021f 	and.w	r2, r2, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f202 	lsl.w	r2, r1, r2
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0af      	beq.n	80023d4 <HAL_RCC_OscConfig+0x4f0>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <HAL_RCC_OscConfig+0x644>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	21f8      	movs	r1, #248	; 0xf8
 8002484:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800248c:	fa91 f1a1 	rbit	r1, r1
 8002490:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002494:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002498:	fab1 f181 	clz	r1, r1
 800249c:	b2c9      	uxtb	r1, r1
 800249e:	408b      	lsls	r3, r1
 80024a0:	4921      	ldr	r1, [pc, #132]	; (8002528 <HAL_RCC_OscConfig+0x644>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
 80024a6:	e06e      	b.n	8002586 <HAL_RCC_OscConfig+0x6a2>
 80024a8:	2301      	movs	r3, #1
 80024aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80024ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	461a      	mov	r2, r3
 80024d0:	2300      	movs	r3, #0
 80024d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fd fefe 	bl	80002d4 <HAL_GetTick>
 80024d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_OscConfig+0x610>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024de:	f7fd fef9 	bl	80002d4 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d902      	bls.n	80024f4 <HAL_RCC_OscConfig+0x610>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	f000 bcfc 	b.w	8002eec <HAL_RCC_OscConfig+0x1008>
 80024f4:	2302      	movs	r3, #2
 80024f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d106      	bne.n	800252c <HAL_RCC_OscConfig+0x648>
 800251e:	4b02      	ldr	r3, [pc, #8]	; (8002528 <HAL_RCC_OscConfig+0x644>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	e017      	b.n	8002554 <HAL_RCC_OscConfig+0x670>
 8002524:	080083e0 	.word	0x080083e0
 8002528:	40021000 	.word	0x40021000
 800252c:	2302      	movs	r3, #2
 800252e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800253e:	2302      	movs	r3, #2
 8002540:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002544:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002550:	4bbf      	ldr	r3, [pc, #764]	; (8002850 <HAL_RCC_OscConfig+0x96c>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	2202      	movs	r2, #2
 8002556:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800255a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800255e:	fa92 f2a2 	rbit	r2, r2
 8002562:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002566:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800256a:	fab2 f282 	clz	r2, r2
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	f042 0220 	orr.w	r2, r2, #32
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	f002 021f 	and.w	r2, r2, #31
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f202 	lsl.w	r2, r1, r2
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1ab      	bne.n	80024de <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80e6 	beq.w	8002762 <HAL_RCC_OscConfig+0x87e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <HAL_RCC_OscConfig+0x6d0>
 80025a0:	1d3b      	adds	r3, r7, #4
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d004      	beq.n	80025b4 <HAL_RCC_OscConfig+0x6d0>
 80025aa:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 80025ae:	48a9      	ldr	r0, [pc, #676]	; (8002854 <HAL_RCC_OscConfig+0x970>)
 80025b0:	f005 f8e1 	bl	8007776 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d065      	beq.n	800268a <HAL_RCC_OscConfig+0x7a6>
 80025be:	2301      	movs	r3, #1
 80025c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80025d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d4:	fab3 f383 	clz	r3, r3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	4b9e      	ldr	r3, [pc, #632]	; (8002858 <HAL_RCC_OscConfig+0x974>)
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	461a      	mov	r2, r3
 80025e4:	2301      	movs	r3, #1
 80025e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e8:	f7fd fe74 	bl	80002d4 <HAL_GetTick>
 80025ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCC_OscConfig+0x724>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f2:	f7fd fe6f 	bl	80002d4 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d902      	bls.n	8002608 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	f000 bc72 	b.w	8002eec <HAL_RCC_OscConfig+0x1008>
 8002608:	2302      	movs	r3, #2
 800260a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800261a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800261e:	2202      	movs	r2, #2
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	fa93 f2a3 	rbit	r2, r3
 800262c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002636:	2202      	movs	r2, #2
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	fa93 f2a3 	rbit	r2, r3
 8002644:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002648:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264a:	4b81      	ldr	r3, [pc, #516]	; (8002850 <HAL_RCC_OscConfig+0x96c>)
 800264c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800264e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002652:	2102      	movs	r1, #2
 8002654:	6019      	str	r1, [r3, #0]
 8002656:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	fa93 f1a3 	rbit	r1, r3
 8002660:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002664:	6019      	str	r1, [r3, #0]
  return result;
 8002666:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0b4      	beq.n	80025f2 <HAL_RCC_OscConfig+0x70e>
 8002688:	e06b      	b.n	8002762 <HAL_RCC_OscConfig+0x87e>
 800268a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026a0:	601a      	str	r2, [r3, #0]
  return result;
 80026a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026a6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b69      	ldr	r3, [pc, #420]	; (8002858 <HAL_RCC_OscConfig+0x974>)
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	461a      	mov	r2, r3
 80026b8:	2300      	movs	r3, #0
 80026ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026bc:	f7fd fe0a 	bl	80002d4 <HAL_GetTick>
 80026c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x7f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c6:	f7fd fe05 	bl	80002d4 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d902      	bls.n	80026dc <HAL_RCC_OscConfig+0x7f8>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	f000 bc08 	b.w	8002eec <HAL_RCC_OscConfig+0x1008>
 80026dc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026e0:	2202      	movs	r2, #2
 80026e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	fa93 f2a3 	rbit	r2, r3
 80026ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80026f8:	2202      	movs	r2, #2
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002710:	2202      	movs	r2, #2
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	fa93 f2a3 	rbit	r2, r3
 800271e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002722:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002724:	4b4a      	ldr	r3, [pc, #296]	; (8002850 <HAL_RCC_OscConfig+0x96c>)
 8002726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002728:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800272c:	2102      	movs	r1, #2
 800272e:	6019      	str	r1, [r3, #0]
 8002730:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	fa93 f1a3 	rbit	r1, r3
 800273a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800273e:	6019      	str	r1, [r3, #0]
  return result;
 8002740:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	2101      	movs	r1, #1
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1b1      	bne.n	80026c6 <HAL_RCC_OscConfig+0x7e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8170 	beq.w	8002a52 <HAL_RCC_OscConfig+0xb6e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00e      	beq.n	80027a0 <HAL_RCC_OscConfig+0x8bc>
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d009      	beq.n	80027a0 <HAL_RCC_OscConfig+0x8bc>
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b05      	cmp	r3, #5
 8002794:	d004      	beq.n	80027a0 <HAL_RCC_OscConfig+0x8bc>
 8002796:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 800279a:	482e      	ldr	r0, [pc, #184]	; (8002854 <HAL_RCC_OscConfig+0x970>)
 800279c:	f004 ffeb 	bl	8007776 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <HAL_RCC_OscConfig+0x96c>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d112      	bne.n	80027d2 <HAL_RCC_OscConfig+0x8ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ac:	4b28      	ldr	r3, [pc, #160]	; (8002850 <HAL_RCC_OscConfig+0x96c>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	4a27      	ldr	r2, [pc, #156]	; (8002850 <HAL_RCC_OscConfig+0x96c>)
 80027b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b6:	61d3      	str	r3, [r2, #28]
 80027b8:	4b25      	ldr	r3, [pc, #148]	; (8002850 <HAL_RCC_OscConfig+0x96c>)
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80027c0:	f107 0308 	add.w	r3, r7, #8
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	4b22      	ldr	r3, [pc, #136]	; (800285c <HAL_RCC_OscConfig+0x978>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d11a      	bne.n	8002814 <HAL_RCC_OscConfig+0x930>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027de:	4b1f      	ldr	r3, [pc, #124]	; (800285c <HAL_RCC_OscConfig+0x978>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1e      	ldr	r2, [pc, #120]	; (800285c <HAL_RCC_OscConfig+0x978>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ea:	f7fd fd73 	bl	80002d4 <HAL_GetTick>
 80027ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f2:	e009      	b.n	8002808 <HAL_RCC_OscConfig+0x924>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f4:	f7fd fd6e 	bl	80002d4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b64      	cmp	r3, #100	; 0x64
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x924>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e371      	b.n	8002eec <HAL_RCC_OscConfig+0x1008>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <HAL_RCC_OscConfig+0x978>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ef      	beq.n	80027f4 <HAL_RCC_OscConfig+0x910>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002814:	1d3b      	adds	r3, r7, #4
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d106      	bne.n	800282c <HAL_RCC_OscConfig+0x948>
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_RCC_OscConfig+0x96c>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <HAL_RCC_OscConfig+0x96c>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6213      	str	r3, [r2, #32]
 800282a:	e037      	b.n	800289c <HAL_RCC_OscConfig+0x9b8>
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d114      	bne.n	8002860 <HAL_RCC_OscConfig+0x97c>
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_RCC_OscConfig+0x96c>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	4a05      	ldr	r2, [pc, #20]	; (8002850 <HAL_RCC_OscConfig+0x96c>)
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	6213      	str	r3, [r2, #32]
 8002842:	4b03      	ldr	r3, [pc, #12]	; (8002850 <HAL_RCC_OscConfig+0x96c>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4a02      	ldr	r2, [pc, #8]	; (8002850 <HAL_RCC_OscConfig+0x96c>)
 8002848:	f023 0304 	bic.w	r3, r3, #4
 800284c:	6213      	str	r3, [r2, #32]
 800284e:	e025      	b.n	800289c <HAL_RCC_OscConfig+0x9b8>
 8002850:	40021000 	.word	0x40021000
 8002854:	080083e0 	.word	0x080083e0
 8002858:	10908120 	.word	0x10908120
 800285c:	40007000 	.word	0x40007000
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b05      	cmp	r3, #5
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x9a0>
 800286a:	4b5e      	ldr	r3, [pc, #376]	; (80029e4 <HAL_RCC_OscConfig+0xb00>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	4a5d      	ldr	r2, [pc, #372]	; (80029e4 <HAL_RCC_OscConfig+0xb00>)
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	6213      	str	r3, [r2, #32]
 8002876:	4b5b      	ldr	r3, [pc, #364]	; (80029e4 <HAL_RCC_OscConfig+0xb00>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4a5a      	ldr	r2, [pc, #360]	; (80029e4 <HAL_RCC_OscConfig+0xb00>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6213      	str	r3, [r2, #32]
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0x9b8>
 8002884:	4b57      	ldr	r3, [pc, #348]	; (80029e4 <HAL_RCC_OscConfig+0xb00>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4a56      	ldr	r2, [pc, #344]	; (80029e4 <HAL_RCC_OscConfig+0xb00>)
 800288a:	f023 0301 	bic.w	r3, r3, #1
 800288e:	6213      	str	r3, [r2, #32]
 8002890:	4b54      	ldr	r3, [pc, #336]	; (80029e4 <HAL_RCC_OscConfig+0xb00>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4a53      	ldr	r2, [pc, #332]	; (80029e4 <HAL_RCC_OscConfig+0xb00>)
 8002896:	f023 0304 	bic.w	r3, r3, #4
 800289a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d064      	beq.n	8002970 <HAL_RCC_OscConfig+0xa8c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a6:	f7fd fd15 	bl	80002d4 <HAL_GetTick>
 80028aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ae:	e00b      	b.n	80028c8 <HAL_RCC_OscConfig+0x9e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b0:	f7fd fd10 	bl	80002d4 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x9e4>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e311      	b.n	8002eec <HAL_RCC_OscConfig+0x1008>
 80028c8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028cc:	2202      	movs	r2, #2
 80028ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	fa93 f2a3 	rbit	r2, r3
 80028da:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80028e4:	2202      	movs	r2, #2
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028f6:	601a      	str	r2, [r3, #0]
  return result;
 80028f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f043 0302 	orr.w	r3, r3, #2
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d102      	bne.n	8002918 <HAL_RCC_OscConfig+0xa34>
 8002912:	4b34      	ldr	r3, [pc, #208]	; (80029e4 <HAL_RCC_OscConfig+0xb00>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	e00d      	b.n	8002934 <HAL_RCC_OscConfig+0xa50>
 8002918:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800291c:	2202      	movs	r2, #2
 800291e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	fa93 f2a3 	rbit	r2, r3
 800292a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <HAL_RCC_OscConfig+0xb00>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002938:	2102      	movs	r1, #2
 800293a:	6011      	str	r1, [r2, #0]
 800293c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	fa92 f1a2 	rbit	r1, r2
 8002946:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800294a:	6011      	str	r1, [r2, #0]
  return result;
 800294c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	fab2 f282 	clz	r2, r2
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	f002 021f 	and.w	r2, r2, #31
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f202 	lsl.w	r2, r1, r2
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0a0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x9cc>
 800296e:	e066      	b.n	8002a3e <HAL_RCC_OscConfig+0xb5a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002970:	f7fd fcb0 	bl	80002d4 <HAL_GetTick>
 8002974:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002978:	e00b      	b.n	8002992 <HAL_RCC_OscConfig+0xaae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7fd fcab 	bl	80002d4 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0xaae>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e2ac      	b.n	8002eec <HAL_RCC_OscConfig+0x1008>
 8002992:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002996:	2202      	movs	r2, #2
 8002998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	fa93 f2a3 	rbit	r2, r3
 80029a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80029ae:	2202      	movs	r2, #2
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029c0:	601a      	str	r2, [r3, #0]
  return result;
 80029c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f043 0302 	orr.w	r3, r3, #2
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d105      	bne.n	80029e8 <HAL_RCC_OscConfig+0xb04>
 80029dc:	4b01      	ldr	r3, [pc, #4]	; (80029e4 <HAL_RCC_OscConfig+0xb00>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	e010      	b.n	8002a04 <HAL_RCC_OscConfig+0xb20>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
 80029e8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029ec:	2202      	movs	r2, #2
 80029ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	fa93 f2a3 	rbit	r2, r3
 80029fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	4bb6      	ldr	r3, [pc, #728]	; (8002cdc <HAL_RCC_OscConfig+0xdf8>)
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a08:	2102      	movs	r1, #2
 8002a0a:	6011      	str	r1, [r2, #0]
 8002a0c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	fa92 f1a2 	rbit	r1, r2
 8002a16:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002a1a:	6011      	str	r1, [r2, #0]
  return result;
 8002a1c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	fab2 f282 	clz	r2, r2
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	f002 021f 	and.w	r2, r2, #31
 8002a32:	2101      	movs	r1, #1
 8002a34:	fa01 f202 	lsl.w	r2, r1, r2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d19d      	bne.n	800297a <HAL_RCC_OscConfig+0xa96>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a3e:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d105      	bne.n	8002a52 <HAL_RCC_OscConfig+0xb6e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a46:	4ba5      	ldr	r3, [pc, #660]	; (8002cdc <HAL_RCC_OscConfig+0xdf8>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	4aa4      	ldr	r2, [pc, #656]	; (8002cdc <HAL_RCC_OscConfig+0xdf8>)
 8002a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a50:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00e      	beq.n	8002a7a <HAL_RCC_OscConfig+0xb96>
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d009      	beq.n	8002a7a <HAL_RCC_OscConfig+0xb96>
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d004      	beq.n	8002a7a <HAL_RCC_OscConfig+0xb96>
 8002a70:	f240 213a 	movw	r1, #570	; 0x23a
 8002a74:	489a      	ldr	r0, [pc, #616]	; (8002ce0 <HAL_RCC_OscConfig+0xdfc>)
 8002a76:	f004 fe7e 	bl	8007776 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8232 	beq.w	8002eea <HAL_RCC_OscConfig+0x1006>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a86:	4b95      	ldr	r3, [pc, #596]	; (8002cdc <HAL_RCC_OscConfig+0xdf8>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	f000 820c 	beq.w	8002eac <HAL_RCC_OscConfig+0xfc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	f040 8184 	bne.w	8002da8 <HAL_RCC_OscConfig+0xec4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCC_OscConfig+0xbdc>
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d004      	beq.n	8002ac0 <HAL_RCC_OscConfig+0xbdc>
 8002ab6:	f240 2143 	movw	r1, #579	; 0x243
 8002aba:	4889      	ldr	r0, [pc, #548]	; (8002ce0 <HAL_RCC_OscConfig+0xdfc>)
 8002abc:	f004 fe5b 	bl	8007776 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d058      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc98>
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ad4:	d052      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc98>
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ae0:	d04c      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc98>
 8002ae2:	1d3b      	adds	r3, r7, #4
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002aec:	d046      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc98>
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af8:	d040      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc98>
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b04:	d03a      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc98>
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b10:	d034      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc98>
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b1c:	d02e      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc98>
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b28:	d028      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc98>
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b34:	d022      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc98>
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b40:	d01c      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc98>
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b4c:	d016      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc98>
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b58:	d010      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc98>
 8002b5a:	1d3b      	adds	r3, r7, #4
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc98>
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002b70:	d004      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc98>
 8002b72:	f44f 7111 	mov.w	r1, #580	; 0x244
 8002b76:	485a      	ldr	r0, [pc, #360]	; (8002ce0 <HAL_RCC_OscConfig+0xdfc>)
 8002b78:	f004 fdfd 	bl	8007776 <assert_failed>
 8002b7c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	fa93 f2a3 	rbit	r2, r3
 8002b90:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b94:	601a      	str	r2, [r3, #0]
  return result;
 8002b96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b9a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ba6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	461a      	mov	r2, r3
 8002bae:	2300      	movs	r3, #0
 8002bb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fd fb8f 	bl	80002d4 <HAL_GetTick>
 8002bb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bba:	e009      	b.n	8002bd0 <HAL_RCC_OscConfig+0xcec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fd fb8a 	bl	80002d4 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0xcec>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e18d      	b.n	8002eec <HAL_RCC_OscConfig+0x1008>
 8002bd0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002bd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	fa93 f2a3 	rbit	r2, r3
 8002be4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002be8:	601a      	str	r2, [r3, #0]
  return result;
 8002bea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002bee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d102      	bne.n	8002c0a <HAL_RCC_OscConfig+0xd26>
 8002c04:	4b35      	ldr	r3, [pc, #212]	; (8002cdc <HAL_RCC_OscConfig+0xdf8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	e01b      	b.n	8002c42 <HAL_RCC_OscConfig+0xd5e>
 8002c0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	fa93 f2a3 	rbit	r2, r3
 8002c1e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <HAL_RCC_OscConfig+0xdf8>)
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c46:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c4a:	6011      	str	r1, [r2, #0]
 8002c4c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	fa92 f1a2 	rbit	r1, r2
 8002c56:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002c5a:	6011      	str	r1, [r2, #0]
  return result;
 8002c5c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	fab2 f282 	clz	r2, r2
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	f042 0220 	orr.w	r2, r2, #32
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	f002 021f 	and.w	r2, r2, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f202 	lsl.w	r2, r1, r2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d19e      	bne.n	8002bbc <HAL_RCC_OscConfig+0xcd8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <HAL_RCC_OscConfig+0xdf8>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	430b      	orrs	r3, r1
 8002c94:	4911      	ldr	r1, [pc, #68]	; (8002cdc <HAL_RCC_OscConfig+0xdf8>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	604b      	str	r3, [r1, #4]
 8002c9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	fa93 f2a3 	rbit	r2, r3
 8002cae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cb2:	601a      	str	r2, [r3, #0]
  return result;
 8002cb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cb8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2301      	movs	r3, #1
 8002cce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fd fb00 	bl	80002d4 <HAL_GetTick>
 8002cd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd8:	e00e      	b.n	8002cf8 <HAL_RCC_OscConfig+0xe14>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	080083e0 	.word	0x080083e0
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce4:	f7fd faf6 	bl	80002d4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0xe14>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0f9      	b.n	8002eec <HAL_RCC_OscConfig+0x1008>
 8002cf8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	fa93 f2a3 	rbit	r2, r3
 8002d0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d10:	601a      	str	r2, [r3, #0]
  return result;
 8002d12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d102      	bne.n	8002d32 <HAL_RCC_OscConfig+0xe4e>
 8002d2c:	4b72      	ldr	r3, [pc, #456]	; (8002ef8 <HAL_RCC_OscConfig+0x1014>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	e01b      	b.n	8002d6a <HAL_RCC_OscConfig+0xe86>
 8002d32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	fa93 f2a3 	rbit	r2, r3
 8002d46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	fa93 f2a3 	rbit	r2, r3
 8002d60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	4b64      	ldr	r3, [pc, #400]	; (8002ef8 <HAL_RCC_OscConfig+0x1014>)
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d6e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d72:	6011      	str	r1, [r2, #0]
 8002d74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	fa92 f1a2 	rbit	r1, r2
 8002d7e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d82:	6011      	str	r1, [r2, #0]
  return result;
 8002d84:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	fab2 f282 	clz	r2, r2
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	f042 0220 	orr.w	r2, r2, #32
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f002 021f 	and.w	r2, r2, #31
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d09e      	beq.n	8002ce4 <HAL_RCC_OscConfig+0xe00>
 8002da6:	e0a0      	b.n	8002eea <HAL_RCC_OscConfig+0x1006>
 8002da8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	fa93 f2a3 	rbit	r2, r3
 8002dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dc0:	601a      	str	r2, [r3, #0]
  return result;
 8002dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dc6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2300      	movs	r3, #0
 8002ddc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fd fa79 	bl	80002d4 <HAL_GetTick>
 8002de2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de6:	e009      	b.n	8002dfc <HAL_RCC_OscConfig+0xf18>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fd fa74 	bl	80002d4 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0xf18>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e077      	b.n	8002eec <HAL_RCC_OscConfig+0x1008>
 8002dfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	fa93 f2a3 	rbit	r2, r3
 8002e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e14:	601a      	str	r2, [r3, #0]
  return result;
 8002e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d102      	bne.n	8002e36 <HAL_RCC_OscConfig+0xf52>
 8002e30:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <HAL_RCC_OscConfig+0x1014>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	e01b      	b.n	8002e6e <HAL_RCC_OscConfig+0xf8a>
 8002e36:	f107 0320 	add.w	r3, r7, #32
 8002e3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	f107 0320 	add.w	r3, r7, #32
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f2a3 	rbit	r2, r3
 8002e4a:	f107 031c 	add.w	r3, r7, #28
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	f107 0318 	add.w	r3, r7, #24
 8002e54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	f107 0318 	add.w	r3, r7, #24
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	fa93 f2a3 	rbit	r2, r3
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <HAL_RCC_OscConfig+0x1014>)
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	f107 0210 	add.w	r2, r7, #16
 8002e72:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e76:	6011      	str	r1, [r2, #0]
 8002e78:	f107 0210 	add.w	r2, r7, #16
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	fa92 f1a2 	rbit	r1, r2
 8002e82:	f107 020c 	add.w	r2, r7, #12
 8002e86:	6011      	str	r1, [r2, #0]
  return result;
 8002e88:	f107 020c 	add.w	r2, r7, #12
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	fab2 f282 	clz	r2, r2
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	f042 0220 	orr.w	r2, r2, #32
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f002 021f 	and.w	r2, r2, #31
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d19e      	bne.n	8002de8 <HAL_RCC_OscConfig+0xf04>
 8002eaa:	e01e      	b.n	8002eea <HAL_RCC_OscConfig+0x1006>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0xfd6>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e018      	b.n	8002eec <HAL_RCC_OscConfig+0x1008>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002eba:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <HAL_RCC_OscConfig+0x1014>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ec2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ec6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d108      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x1002>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ed4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ed8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d001      	beq.n	8002eea <HAL_RCC_OscConfig+0x1006>
#endif
        {
          return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <HAL_RCC_OscConfig+0x1008>
        }
      }
    }
  }

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000

08002efc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b09e      	sub	sp, #120	; 0x78
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e203      	b.n	800331c <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d116      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x52>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d110      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x52>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10a      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x52>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d104      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x52>
 8002f44:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002f48:	48a5      	ldr	r0, [pc, #660]	; (80031e0 <HAL_RCC_ClockConfig+0x2e4>)
 8002f4a:	f004 fc14 	bl	8007776 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x6e>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d007      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x6e>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d004      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x6e>
 8002f60:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8002f64:	489e      	ldr	r0, [pc, #632]	; (80031e0 <HAL_RCC_ClockConfig+0x2e4>)
 8002f66:	f004 fc06 	bl	8007776 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f6a:	4b9e      	ldr	r3, [pc, #632]	; (80031e4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d910      	bls.n	8002f9a <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f78:	4b9a      	ldr	r3, [pc, #616]	; (80031e4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f023 0207 	bic.w	r2, r3, #7
 8002f80:	4998      	ldr	r1, [pc, #608]	; (80031e4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f88:	4b96      	ldr	r3, [pc, #600]	; (80031e4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e1c0      	b.n	800331c <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d031      	beq.n	800300a <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d024      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0xfc>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b80      	cmp	r3, #128	; 0x80
 8002fb4:	d020      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0xfc>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b90      	cmp	r3, #144	; 0x90
 8002fbc:	d01c      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0xfc>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2ba0      	cmp	r3, #160	; 0xa0
 8002fc4:	d018      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0xfc>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2bb0      	cmp	r3, #176	; 0xb0
 8002fcc:	d014      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0xfc>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8002fd4:	d010      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0xfc>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2bd0      	cmp	r3, #208	; 0xd0
 8002fdc:	d00c      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0xfc>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2be0      	cmp	r3, #224	; 0xe0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0xfc>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2bf0      	cmp	r3, #240	; 0xf0
 8002fec:	d004      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0xfc>
 8002fee:	f240 21db 	movw	r1, #731	; 0x2db
 8002ff2:	487b      	ldr	r0, [pc, #492]	; (80031e0 <HAL_RCC_ClockConfig+0x2e4>)
 8002ff4:	f004 fbbf 	bl	8007776 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff8:	4b7b      	ldr	r3, [pc, #492]	; (80031e8 <HAL_RCC_ClockConfig+0x2ec>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	4978      	ldr	r1, [pc, #480]	; (80031e8 <HAL_RCC_ClockConfig+0x2ec>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80f3 	beq.w	80031fe <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00c      	beq.n	800303a <HAL_RCC_ClockConfig+0x13e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d008      	beq.n	800303a <HAL_RCC_ClockConfig+0x13e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d004      	beq.n	800303a <HAL_RCC_ClockConfig+0x13e>
 8003030:	f240 21e2 	movw	r1, #738	; 0x2e2
 8003034:	486a      	ldr	r0, [pc, #424]	; (80031e0 <HAL_RCC_ClockConfig+0x2e4>)
 8003036:	f004 fb9e 	bl	8007776 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d13c      	bne.n	80030bc <HAL_RCC_ClockConfig+0x1c0>
 8003042:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003046:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	fab3 f383 	clz	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b01      	cmp	r3, #1
 8003064:	d102      	bne.n	800306c <HAL_RCC_ClockConfig+0x170>
 8003066:	4b60      	ldr	r3, [pc, #384]	; (80031e8 <HAL_RCC_ClockConfig+0x2ec>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	e00f      	b.n	800308c <HAL_RCC_ClockConfig+0x190>
 800306c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003070:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	667b      	str	r3, [r7, #100]	; 0x64
 800307a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800307e:	663b      	str	r3, [r7, #96]	; 0x60
 8003080:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003088:	4b57      	ldr	r3, [pc, #348]	; (80031e8 <HAL_RCC_ClockConfig+0x2ec>)
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003090:	65ba      	str	r2, [r7, #88]	; 0x58
 8003092:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003094:	fa92 f2a2 	rbit	r2, r2
 8003098:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800309a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800309c:	fab2 f282 	clz	r2, r2
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	f042 0220 	orr.w	r2, r2, #32
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	f002 021f 	and.w	r2, r2, #31
 80030ac:	2101      	movs	r1, #1
 80030ae:	fa01 f202 	lsl.w	r2, r1, r2
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d17b      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e12f      	b.n	800331c <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d13c      	bne.n	800313e <HAL_RCC_ClockConfig+0x242>
 80030c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d102      	bne.n	80030ee <HAL_RCC_ClockConfig+0x1f2>
 80030e8:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <HAL_RCC_ClockConfig+0x2ec>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	e00f      	b.n	800310e <HAL_RCC_ClockConfig+0x212>
 80030ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030f2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	647b      	str	r3, [r7, #68]	; 0x44
 80030fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003100:	643b      	str	r3, [r7, #64]	; 0x40
 8003102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003104:	fa93 f3a3 	rbit	r3, r3
 8003108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800310a:	4b37      	ldr	r3, [pc, #220]	; (80031e8 <HAL_RCC_ClockConfig+0x2ec>)
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003112:	63ba      	str	r2, [r7, #56]	; 0x38
 8003114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003116:	fa92 f2a2 	rbit	r2, r2
 800311a:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800311c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800311e:	fab2 f282 	clz	r2, r2
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	f042 0220 	orr.w	r2, r2, #32
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	f002 021f 	and.w	r2, r2, #31
 800312e:	2101      	movs	r1, #1
 8003130:	fa01 f202 	lsl.w	r2, r1, r2
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d13a      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e0ee      	b.n	800331c <HAL_RCC_ClockConfig+0x420>
 800313e:	2302      	movs	r3, #2
 8003140:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d102      	bne.n	8003166 <HAL_RCC_ClockConfig+0x26a>
 8003160:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <HAL_RCC_ClockConfig+0x2ec>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	e00d      	b.n	8003182 <HAL_RCC_ClockConfig+0x286>
 8003166:	2302      	movs	r3, #2
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
 8003172:	2302      	movs	r3, #2
 8003174:	623b      	str	r3, [r7, #32]
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <HAL_RCC_ClockConfig+0x2ec>)
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	2202      	movs	r2, #2
 8003184:	61ba      	str	r2, [r7, #24]
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	fa92 f2a2 	rbit	r2, r2
 800318c:	617a      	str	r2, [r7, #20]
  return result;
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	fab2 f282 	clz	r2, r2
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	f042 0220 	orr.w	r2, r2, #32
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	f002 021f 	and.w	r2, r2, #31
 80031a0:	2101      	movs	r1, #1
 80031a2:	fa01 f202 	lsl.w	r2, r1, r2
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0b5      	b.n	800331c <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b0:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <HAL_RCC_ClockConfig+0x2ec>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f023 0203 	bic.w	r2, r3, #3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	490a      	ldr	r1, [pc, #40]	; (80031e8 <HAL_RCC_ClockConfig+0x2ec>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c2:	f7fd f887 	bl	80002d4 <HAL_GetTick>
 80031c6:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c8:	e010      	b.n	80031ec <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ca:	f7fd f883 	bl	80002d4 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d8:	4293      	cmp	r3, r2
 80031da:	d907      	bls.n	80031ec <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e09d      	b.n	800331c <HAL_RCC_ClockConfig+0x420>
 80031e0:	080083e0 	.word	0x080083e0
 80031e4:	40022000 	.word	0x40022000
 80031e8:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ec:	4b4d      	ldr	r3, [pc, #308]	; (8003324 <HAL_RCC_ClockConfig+0x428>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 020c 	and.w	r2, r3, #12
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d1e5      	bne.n	80031ca <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031fe:	4b4a      	ldr	r3, [pc, #296]	; (8003328 <HAL_RCC_ClockConfig+0x42c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d210      	bcs.n	800322e <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320c:	4b46      	ldr	r3, [pc, #280]	; (8003328 <HAL_RCC_ClockConfig+0x42c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 0207 	bic.w	r2, r3, #7
 8003214:	4944      	ldr	r1, [pc, #272]	; (8003328 <HAL_RCC_ClockConfig+0x42c>)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321c:	4b42      	ldr	r3, [pc, #264]	; (8003328 <HAL_RCC_ClockConfig+0x42c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d001      	beq.n	800322e <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e076      	b.n	800331c <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d025      	beq.n	8003286 <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d018      	beq.n	8003274 <HAL_RCC_ClockConfig+0x378>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324a:	d013      	beq.n	8003274 <HAL_RCC_ClockConfig+0x378>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003254:	d00e      	beq.n	8003274 <HAL_RCC_ClockConfig+0x378>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800325e:	d009      	beq.n	8003274 <HAL_RCC_ClockConfig+0x378>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003268:	d004      	beq.n	8003274 <HAL_RCC_ClockConfig+0x378>
 800326a:	f240 311e 	movw	r1, #798	; 0x31e
 800326e:	482f      	ldr	r0, [pc, #188]	; (800332c <HAL_RCC_ClockConfig+0x430>)
 8003270:	f004 fa81 	bl	8007776 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003274:	4b2b      	ldr	r3, [pc, #172]	; (8003324 <HAL_RCC_ClockConfig+0x428>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4928      	ldr	r1, [pc, #160]	; (8003324 <HAL_RCC_ClockConfig+0x428>)
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d026      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d018      	beq.n	80032cc <HAL_RCC_ClockConfig+0x3d0>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a2:	d013      	beq.n	80032cc <HAL_RCC_ClockConfig+0x3d0>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80032ac:	d00e      	beq.n	80032cc <HAL_RCC_ClockConfig+0x3d0>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80032b6:	d009      	beq.n	80032cc <HAL_RCC_ClockConfig+0x3d0>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032c0:	d004      	beq.n	80032cc <HAL_RCC_ClockConfig+0x3d0>
 80032c2:	f240 3125 	movw	r1, #805	; 0x325
 80032c6:	4819      	ldr	r0, [pc, #100]	; (800332c <HAL_RCC_ClockConfig+0x430>)
 80032c8:	f004 fa55 	bl	8007776 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032cc:	4b15      	ldr	r3, [pc, #84]	; (8003324 <HAL_RCC_ClockConfig+0x428>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4912      	ldr	r1, [pc, #72]	; (8003324 <HAL_RCC_ClockConfig+0x428>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032e0:	f000 f82c 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80032e4:	4601      	mov	r1, r0
 80032e6:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HAL_RCC_ClockConfig+0x428>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ee:	22f0      	movs	r2, #240	; 0xf0
 80032f0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	fa92 f2a2 	rbit	r2, r2
 80032f8:	60fa      	str	r2, [r7, #12]
  return result;
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	fab2 f282 	clz	r2, r2
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	40d3      	lsrs	r3, r2
 8003304:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <HAL_RCC_ClockConfig+0x434>)
 8003306:	5cd3      	ldrb	r3, [r2, r3]
 8003308:	fa21 f303 	lsr.w	r3, r1, r3
 800330c:	4a09      	ldr	r2, [pc, #36]	; (8003334 <HAL_RCC_ClockConfig+0x438>)
 800330e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003310:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_RCC_ClockConfig+0x43c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f004 fa61 	bl	80077dc <HAL_InitTick>
  
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3778      	adds	r7, #120	; 0x78
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40021000 	.word	0x40021000
 8003328:	40022000 	.word	0x40022000
 800332c:	080083e0 	.word	0x080083e0
 8003330:	0800858c 	.word	0x0800858c
 8003334:	2000000c 	.word	0x2000000c
 8003338:	20000000 	.word	0x20000000

0800333c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	b08b      	sub	sp, #44	; 0x2c
 8003340:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003356:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b04      	cmp	r3, #4
 8003364:	d002      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x30>
 8003366:	2b08      	cmp	r3, #8
 8003368:	d003      	beq.n	8003372 <HAL_RCC_GetSysClockFreq+0x36>
 800336a:	e03c      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800336c:	4b24      	ldr	r3, [pc, #144]	; (8003400 <HAL_RCC_GetSysClockFreq+0xc4>)
 800336e:	623b      	str	r3, [r7, #32]
      break;
 8003370:	e03c      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003378:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800337c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	fa92 f2a2 	rbit	r2, r2
 8003384:	607a      	str	r2, [r7, #4]
  return result;
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	fab2 f282 	clz	r2, r2
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	40d3      	lsrs	r3, r2
 8003390:	4a1c      	ldr	r2, [pc, #112]	; (8003404 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003392:	5cd3      	ldrb	r3, [r2, r3]
 8003394:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003396:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	220f      	movs	r2, #15
 80033a0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	fa92 f2a2 	rbit	r2, r2
 80033a8:	60fa      	str	r2, [r7, #12]
  return result;
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	fab2 f282 	clz	r2, r2
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	40d3      	lsrs	r3, r2
 80033b4:	4a14      	ldr	r2, [pc, #80]	; (8003408 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033c4:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	fb02 f303 	mul.w	r3, r2, r3
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
 80033d4:	e004      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	4a0c      	ldr	r2, [pc, #48]	; (800340c <HAL_RCC_GetSysClockFreq+0xd0>)
 80033da:	fb02 f303 	mul.w	r3, r2, r3
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	623b      	str	r3, [r7, #32]
      break;
 80033e4:	e002      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033e8:	623b      	str	r3, [r7, #32]
      break;
 80033ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ec:	6a3b      	ldr	r3, [r7, #32]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	372c      	adds	r7, #44	; 0x2c
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000
 8003400:	007a1200 	.word	0x007a1200
 8003404:	080084e8 	.word	0x080084e8
 8003408:	080084f8 	.word	0x080084f8
 800340c:	003d0900 	.word	0x003d0900

08003410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <HAL_RCC_GetHCLKFreq+0x14>)
 8003416:	681b      	ldr	r3, [r3, #0]
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	2000000c 	.word	0x2000000c

08003428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800342e:	f7ff ffef 	bl	8003410 <HAL_RCC_GetHCLKFreq>
 8003432:	4601      	mov	r1, r0
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800343c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003440:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	fa92 f2a2 	rbit	r2, r2
 8003448:	603a      	str	r2, [r7, #0]
  return result;
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	fab2 f282 	clz	r2, r2
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	40d3      	lsrs	r3, r2
 8003454:	4a04      	ldr	r2, [pc, #16]	; (8003468 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003456:	5cd3      	ldrb	r3, [r2, r3]
 8003458:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000
 8003468:	0800859c 	.word	0x0800859c

0800346c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003472:	f7ff ffcd 	bl	8003410 <HAL_RCC_GetHCLKFreq>
 8003476:	4601      	mov	r1, r0
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003480:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003484:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	fa92 f2a2 	rbit	r2, r2
 800348c:	603a      	str	r2, [r7, #0]
  return result;
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	fab2 f282 	clz	r2, r2
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	40d3      	lsrs	r3, r2
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40021000 	.word	0x40021000
 80034ac:	0800859c 	.word	0x0800859c

080034b0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <HAL_RCC_GetClockConfig+0x1a>
 80034c0:	f240 4184 	movw	r1, #1156	; 0x484
 80034c4:	4818      	ldr	r0, [pc, #96]	; (8003528 <HAL_RCC_GetClockConfig+0x78>)
 80034c6:	f004 f956 	bl	8007776 <assert_failed>
  assert_param(pFLatency != NULL);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d104      	bne.n	80034da <HAL_RCC_GetClockConfig+0x2a>
 80034d0:	f240 4185 	movw	r1, #1157	; 0x485
 80034d4:	4814      	ldr	r0, [pc, #80]	; (8003528 <HAL_RCC_GetClockConfig+0x78>)
 80034d6:	f004 f94e 	bl	8007776 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	220f      	movs	r2, #15
 80034de:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_RCC_GetClockConfig+0x7c>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0203 	and.w	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <HAL_RCC_GetClockConfig+0x7c>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <HAL_RCC_GetClockConfig+0x7c>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_RCC_GetClockConfig+0x7c>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	08db      	lsrs	r3, r3, #3
 800350a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RCC_GetClockConfig+0x80>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0207 	and.w	r2, r3, #7
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	601a      	str	r2, [r3, #0]
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	080083e0 	.word	0x080083e0
 800352c:	40021000 	.word	0x40021000
 8003530:	40022000 	.word	0x40022000

08003534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e079      	b.n	800363a <HAL_TIM_Base_Init+0x106>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a3e      	ldr	r2, [pc, #248]	; (8003644 <HAL_TIM_Base_Init+0x110>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d01d      	beq.n	800358c <HAL_TIM_Base_Init+0x58>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003558:	d018      	beq.n	800358c <HAL_TIM_Base_Init+0x58>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a3a      	ldr	r2, [pc, #232]	; (8003648 <HAL_TIM_Base_Init+0x114>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d013      	beq.n	800358c <HAL_TIM_Base_Init+0x58>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a38      	ldr	r2, [pc, #224]	; (800364c <HAL_TIM_Base_Init+0x118>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00e      	beq.n	800358c <HAL_TIM_Base_Init+0x58>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a37      	ldr	r2, [pc, #220]	; (8003650 <HAL_TIM_Base_Init+0x11c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_TIM_Base_Init+0x58>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a35      	ldr	r2, [pc, #212]	; (8003654 <HAL_TIM_Base_Init+0x120>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d004      	beq.n	800358c <HAL_TIM_Base_Init+0x58>
 8003582:	f240 1119 	movw	r1, #281	; 0x119
 8003586:	4834      	ldr	r0, [pc, #208]	; (8003658 <HAL_TIM_Base_Init+0x124>)
 8003588:	f004 f8f5 	bl	8007776 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d014      	beq.n	80035be <HAL_TIM_Base_Init+0x8a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b10      	cmp	r3, #16
 800359a:	d010      	beq.n	80035be <HAL_TIM_Base_Init+0x8a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d00c      	beq.n	80035be <HAL_TIM_Base_Init+0x8a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	d008      	beq.n	80035be <HAL_TIM_Base_Init+0x8a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b60      	cmp	r3, #96	; 0x60
 80035b2:	d004      	beq.n	80035be <HAL_TIM_Base_Init+0x8a>
 80035b4:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80035b8:	4827      	ldr	r0, [pc, #156]	; (8003658 <HAL_TIM_Base_Init+0x124>)
 80035ba:	f004 f8dc 	bl	8007776 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00e      	beq.n	80035e4 <HAL_TIM_Base_Init+0xb0>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ce:	d009      	beq.n	80035e4 <HAL_TIM_Base_Init+0xb0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d8:	d004      	beq.n	80035e4 <HAL_TIM_Base_Init+0xb0>
 80035da:	f240 111b 	movw	r1, #283	; 0x11b
 80035de:	481e      	ldr	r0, [pc, #120]	; (8003658 <HAL_TIM_Base_Init+0x124>)
 80035e0:	f004 f8c9 	bl	8007776 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <HAL_TIM_Base_Init+0xca>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b80      	cmp	r3, #128	; 0x80
 80035f2:	d004      	beq.n	80035fe <HAL_TIM_Base_Init+0xca>
 80035f4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80035f8:	4817      	ldr	r0, [pc, #92]	; (8003658 <HAL_TIM_Base_Init+0x124>)
 80035fa:	f004 f8bc 	bl	8007776 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_TIM_Base_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f822 	bl	800365c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3304      	adds	r3, #4
 8003628:	4619      	mov	r1, r3
 800362a:	4610      	mov	r0, r2
 800362c:	f000 f9c0 	bl	80039b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40001000 	.word	0x40001000
 800364c:	40014000 	.word	0x40014000
 8003650:	40014400 	.word	0x40014400
 8003654:	40014800 	.word	0x40014800
 8003658:	08008418 	.word	0x08008418

0800365c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a21      	ldr	r2, [pc, #132]	; (8003704 <HAL_TIM_Base_Start_IT+0x94>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d01d      	beq.n	80036be <HAL_TIM_Base_Start_IT+0x4e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368a:	d018      	beq.n	80036be <HAL_TIM_Base_Start_IT+0x4e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <HAL_TIM_Base_Start_IT+0x98>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_TIM_Base_Start_IT+0x4e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1c      	ldr	r2, [pc, #112]	; (800370c <HAL_TIM_Base_Start_IT+0x9c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00e      	beq.n	80036be <HAL_TIM_Base_Start_IT+0x4e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <HAL_TIM_Base_Start_IT+0xa0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d009      	beq.n	80036be <HAL_TIM_Base_Start_IT+0x4e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a19      	ldr	r2, [pc, #100]	; (8003714 <HAL_TIM_Base_Start_IT+0xa4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_TIM_Base_Start_IT+0x4e>
 80036b4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80036b8:	4817      	ldr	r0, [pc, #92]	; (8003718 <HAL_TIM_Base_Start_IT+0xa8>)
 80036ba:	f004 f85c 	bl	8007776 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0201 	orr.w	r2, r2, #1
 80036cc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_TIM_Base_Start_IT+0xac>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b06      	cmp	r3, #6
 80036de:	d00b      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x88>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e6:	d007      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x88>
  {
    __HAL_TIM_ENABLE(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40001000 	.word	0x40001000
 800370c:	40014000 	.word	0x40014000
 8003710:	40014400 	.word	0x40014400
 8003714:	40014800 	.word	0x40014800
 8003718:	08008418 	.word	0x08008418
 800371c:	00010007 	.word	0x00010007

08003720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b02      	cmp	r3, #2
 8003734:	d122      	bne.n	800377c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b02      	cmp	r3, #2
 8003742:	d11b      	bne.n	800377c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0202 	mvn.w	r2, #2
 800374c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f905 	bl	8003972 <HAL_TIM_IC_CaptureCallback>
 8003768:	e005      	b.n	8003776 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8f7 	bl	800395e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f908 	bl	8003986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b04      	cmp	r3, #4
 8003788:	d122      	bne.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b04      	cmp	r3, #4
 8003796:	d11b      	bne.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0204 	mvn.w	r2, #4
 80037a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f8db 	bl	8003972 <HAL_TIM_IC_CaptureCallback>
 80037bc:	e005      	b.n	80037ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f8cd 	bl	800395e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f8de 	bl	8003986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d122      	bne.n	8003824 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d11b      	bne.n	8003824 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0208 	mvn.w	r2, #8
 80037f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2204      	movs	r2, #4
 80037fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f8b1 	bl	8003972 <HAL_TIM_IC_CaptureCallback>
 8003810:	e005      	b.n	800381e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8a3 	bl	800395e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f8b4 	bl	8003986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2b10      	cmp	r3, #16
 8003830:	d122      	bne.n	8003878 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b10      	cmp	r3, #16
 800383e:	d11b      	bne.n	8003878 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0210 	mvn.w	r2, #16
 8003848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2208      	movs	r2, #8
 800384e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f887 	bl	8003972 <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f879 	bl	800395e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f88a 	bl	8003986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b01      	cmp	r3, #1
 8003884:	d10e      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d107      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0201 	mvn.w	r2, #1
 800389c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f003 ff50 	bl	8007744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ae:	2b80      	cmp	r3, #128	; 0x80
 80038b0:	d10e      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	2b80      	cmp	r3, #128	; 0x80
 80038be:	d107      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8e8 	bl	8003aa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038de:	d10e      	bne.n	80038fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ea:	2b80      	cmp	r3, #128	; 0x80
 80038ec:	d107      	bne.n	80038fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f8db 	bl	8003ab4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b40      	cmp	r3, #64	; 0x40
 800390a:	d10e      	bne.n	800392a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003916:	2b40      	cmp	r3, #64	; 0x40
 8003918:	d107      	bne.n	800392a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f838 	bl	800399a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b20      	cmp	r3, #32
 8003936:	d10e      	bne.n	8003956 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b20      	cmp	r3, #32
 8003944:	d107      	bne.n	8003956 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f06f 0220 	mvn.w	r2, #32
 800394e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f89b 	bl	8003a8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
	...

080039b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a2e      	ldr	r2, [pc, #184]	; (8003a7c <TIM_Base_SetConfig+0xcc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_Base_SetConfig+0x20>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ce:	d108      	bne.n	80039e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a25      	ldr	r2, [pc, #148]	; (8003a7c <TIM_Base_SetConfig+0xcc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00f      	beq.n	8003a0a <TIM_Base_SetConfig+0x5a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f0:	d00b      	beq.n	8003a0a <TIM_Base_SetConfig+0x5a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a22      	ldr	r2, [pc, #136]	; (8003a80 <TIM_Base_SetConfig+0xd0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <TIM_Base_SetConfig+0x5a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a21      	ldr	r2, [pc, #132]	; (8003a84 <TIM_Base_SetConfig+0xd4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d003      	beq.n	8003a0a <TIM_Base_SetConfig+0x5a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a20      	ldr	r2, [pc, #128]	; (8003a88 <TIM_Base_SetConfig+0xd8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d108      	bne.n	8003a1c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <TIM_Base_SetConfig+0xcc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <TIM_Base_SetConfig+0xb0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <TIM_Base_SetConfig+0xd0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <TIM_Base_SetConfig+0xb0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0c      	ldr	r2, [pc, #48]	; (8003a84 <TIM_Base_SetConfig+0xd4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_Base_SetConfig+0xb0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a0b      	ldr	r2, [pc, #44]	; (8003a88 <TIM_Base_SetConfig+0xd8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d103      	bne.n	8003a68 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	615a      	str	r2, [r3, #20]
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40012c00 	.word	0x40012c00
 8003a80:	40014000 	.word	0x40014000
 8003a84:	40014400 	.word	0x40014400
 8003a88:	40014800 	.word	0x40014800

08003a8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e06d      	b.n	8003bb6 <HAL_UART_Init+0xee>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d014      	beq.n	8003b0c <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a36      	ldr	r2, [pc, #216]	; (8003bc0 <HAL_UART_Init+0xf8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d023      	beq.n	8003b34 <HAL_UART_Init+0x6c>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a34      	ldr	r2, [pc, #208]	; (8003bc4 <HAL_UART_Init+0xfc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01e      	beq.n	8003b34 <HAL_UART_Init+0x6c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a33      	ldr	r2, [pc, #204]	; (8003bc8 <HAL_UART_Init+0x100>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d019      	beq.n	8003b34 <HAL_UART_Init+0x6c>
 8003b00:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8003b04:	4831      	ldr	r0, [pc, #196]	; (8003bcc <HAL_UART_Init+0x104>)
 8003b06:	f003 fe36 	bl	8007776 <assert_failed>
 8003b0a:	e013      	b.n	8003b34 <HAL_UART_Init+0x6c>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a2b      	ldr	r2, [pc, #172]	; (8003bc0 <HAL_UART_Init+0xf8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00e      	beq.n	8003b34 <HAL_UART_Init+0x6c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2a      	ldr	r2, [pc, #168]	; (8003bc4 <HAL_UART_Init+0xfc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d009      	beq.n	8003b34 <HAL_UART_Init+0x6c>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a28      	ldr	r2, [pc, #160]	; (8003bc8 <HAL_UART_Init+0x100>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d004      	beq.n	8003b34 <HAL_UART_Init+0x6c>
 8003b2a:	f240 112f 	movw	r1, #303	; 0x12f
 8003b2e:	4827      	ldr	r0, [pc, #156]	; (8003bcc <HAL_UART_Init+0x104>)
 8003b30:	f003 fe21 	bl	8007776 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d106      	bne.n	8003b4a <HAL_UART_Init+0x82>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f003 ff3f 	bl	80079c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2224      	movs	r2, #36	; 0x24
 8003b4e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f8c9 	bl	8003cf8 <UART_SetConfig>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_UART_Init+0xa8>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e022      	b.n	8003bb6 <HAL_UART_Init+0xee>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_UART_Init+0xb6>
  {
    UART_AdvFeatureConfig(huart);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 facd 	bl	8004118 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fbf2 	bl	8004398 <UART_CheckIdleState>
 8003bb4:	4603      	mov	r3, r0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40013800 	.word	0x40013800
 8003bc4:	40004400 	.word	0x40004400
 8003bc8:	40004800 	.word	0x40004800
 8003bcc:	08008450 	.word	0x08008450

08003bd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	; 0x28
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	f040 8081 	bne.w	8003cec <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <HAL_UART_Transmit+0x26>
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e079      	b.n	8003cee <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_UART_Transmit+0x38>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e072      	b.n	8003cee <HAL_UART_Transmit+0x11e>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2221      	movs	r2, #33	; 0x21
 8003c1a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003c1c:	f7fc fb5a 	bl	80002d4 <HAL_GetTick>
 8003c20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	88fa      	ldrh	r2, [r7, #6]
 8003c2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3a:	d108      	bne.n	8003c4e <HAL_UART_Transmit+0x7e>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d104      	bne.n	8003c4e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	e003      	b.n	8003c56 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c56:	e02d      	b.n	8003cb4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2180      	movs	r1, #128	; 0x80
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fbdd 	bl	8004422 <UART_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e03d      	b.n	8003cee <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10b      	bne.n	8003c90 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	881a      	ldrh	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c84:	b292      	uxth	r2, r2
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	3302      	adds	r3, #2
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	e008      	b.n	8003ca2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	781a      	ldrb	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	b292      	uxth	r2, r2
 8003c9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1cb      	bne.n	8003c58 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2140      	movs	r1, #64	; 0x40
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fba9 	bl	8004422 <UART_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e009      	b.n	8003cee <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e000      	b.n	8003cee <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
  }
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4a9f      	ldr	r2, [pc, #636]	; (8003f8c <UART_SetConfig+0x294>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d904      	bls.n	8003d1c <UART_SetConfig+0x24>
 8003d12:	f640 21a2 	movw	r1, #2722	; 0xaa2
 8003d16:	489e      	ldr	r0, [pc, #632]	; (8003f90 <UART_SetConfig+0x298>)
 8003d18:	f003 fd2d 	bl	8007776 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d24:	d00d      	beq.n	8003d42 <UART_SetConfig+0x4a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <UART_SetConfig+0x4a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d36:	d004      	beq.n	8003d42 <UART_SetConfig+0x4a>
 8003d38:	f640 21a3 	movw	r1, #2723	; 0xaa3
 8003d3c:	4894      	ldr	r0, [pc, #592]	; (8003f90 <UART_SetConfig+0x298>)
 8003d3e:	f003 fd1a 	bl	8007776 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4a:	d012      	beq.n	8003d72 <UART_SetConfig+0x7a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00e      	beq.n	8003d72 <UART_SetConfig+0x7a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d5c:	d009      	beq.n	8003d72 <UART_SetConfig+0x7a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d66:	d004      	beq.n	8003d72 <UART_SetConfig+0x7a>
 8003d68:	f640 21a4 	movw	r1, #2724	; 0xaa4
 8003d6c:	4888      	ldr	r0, [pc, #544]	; (8003f90 <UART_SetConfig+0x298>)
 8003d6e:	f003 fd02 	bl	8007776 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <UART_SetConfig+0x96>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d82:	d004      	beq.n	8003d8e <UART_SetConfig+0x96>
 8003d84:	f640 21a5 	movw	r1, #2725	; 0xaa5
 8003d88:	4881      	ldr	r0, [pc, #516]	; (8003f90 <UART_SetConfig+0x298>)
 8003d8a:	f003 fcf4 	bl	8007776 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00e      	beq.n	8003db4 <UART_SetConfig+0xbc>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9e:	d009      	beq.n	8003db4 <UART_SetConfig+0xbc>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003da8:	d004      	beq.n	8003db4 <UART_SetConfig+0xbc>
 8003daa:	f640 21a7 	movw	r1, #2727	; 0xaa7
 8003dae:	4878      	ldr	r0, [pc, #480]	; (8003f90 <UART_SetConfig+0x298>)
 8003db0:	f003 fce1 	bl	8007776 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f023 030c 	bic.w	r3, r3, #12
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d103      	bne.n	8003dc8 <UART_SetConfig+0xd0>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <UART_SetConfig+0xda>
 8003dc8:	f640 21a8 	movw	r1, #2728	; 0xaa8
 8003dcc:	4870      	ldr	r0, [pc, #448]	; (8003f90 <UART_SetConfig+0x298>)
 8003dce:	f003 fcd2 	bl	8007776 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d013      	beq.n	8003e02 <UART_SetConfig+0x10a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de2:	d00e      	beq.n	8003e02 <UART_SetConfig+0x10a>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dec:	d009      	beq.n	8003e02 <UART_SetConfig+0x10a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df6:	d004      	beq.n	8003e02 <UART_SetConfig+0x10a>
 8003df8:	f640 21a9 	movw	r1, #2729	; 0xaa9
 8003dfc:	4864      	ldr	r0, [pc, #400]	; (8003f90 <UART_SetConfig+0x298>)
 8003dfe:	f003 fcba 	bl	8007776 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <UART_SetConfig+0x126>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e12:	d004      	beq.n	8003e1e <UART_SetConfig+0x126>
 8003e14:	f640 21aa 	movw	r1, #2730	; 0xaaa
 8003e18:	485d      	ldr	r0, [pc, #372]	; (8003f90 <UART_SetConfig+0x298>)
 8003e1a:	f003 fcac 	bl	8007776 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4b55      	ldr	r3, [pc, #340]	; (8003f94 <UART_SetConfig+0x29c>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	6939      	ldr	r1, [r7, #16]
 8003e46:	430b      	orrs	r3, r1
 8003e48:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a43      	ldr	r2, [pc, #268]	; (8003f98 <UART_SetConfig+0x2a0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d120      	bne.n	8003ed0 <UART_SetConfig+0x1d8>
 8003e8e:	4b43      	ldr	r3, [pc, #268]	; (8003f9c <UART_SetConfig+0x2a4>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d816      	bhi.n	8003ec8 <UART_SetConfig+0x1d0>
 8003e9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <UART_SetConfig+0x1a8>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003ebd 	.word	0x08003ebd
 8003ea8:	08003ec3 	.word	0x08003ec3
 8003eac:	08003eb7 	.word	0x08003eb7
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e01e      	b.n	8003ef4 <UART_SetConfig+0x1fc>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	77fb      	strb	r3, [r7, #31]
 8003eba:	e01b      	b.n	8003ef4 <UART_SetConfig+0x1fc>
 8003ebc:	2304      	movs	r3, #4
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e018      	b.n	8003ef4 <UART_SetConfig+0x1fc>
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	77fb      	strb	r3, [r7, #31]
 8003ec6:	e015      	b.n	8003ef4 <UART_SetConfig+0x1fc>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	bf00      	nop
 8003ece:	e011      	b.n	8003ef4 <UART_SetConfig+0x1fc>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a32      	ldr	r2, [pc, #200]	; (8003fa0 <UART_SetConfig+0x2a8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d102      	bne.n	8003ee0 <UART_SetConfig+0x1e8>
 8003eda:	2300      	movs	r3, #0
 8003edc:	77fb      	strb	r3, [r7, #31]
 8003ede:	e009      	b.n	8003ef4 <UART_SetConfig+0x1fc>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2f      	ldr	r2, [pc, #188]	; (8003fa4 <UART_SetConfig+0x2ac>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d102      	bne.n	8003ef0 <UART_SetConfig+0x1f8>
 8003eea:	2300      	movs	r3, #0
 8003eec:	77fb      	strb	r3, [r7, #31]
 8003eee:	e001      	b.n	8003ef4 <UART_SetConfig+0x1fc>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003efc:	f040 8090 	bne.w	8004020 <UART_SetConfig+0x328>
  {
    switch (clocksource)
 8003f00:	7ffb      	ldrb	r3, [r7, #31]
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d86c      	bhi.n	8003fe0 <UART_SetConfig+0x2e8>
 8003f06:	a201      	add	r2, pc, #4	; (adr r2, 8003f0c <UART_SetConfig+0x214>)
 8003f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0c:	08003f31 	.word	0x08003f31
 8003f10:	08003f51 	.word	0x08003f51
 8003f14:	08003f71 	.word	0x08003f71
 8003f18:	08003fe1 	.word	0x08003fe1
 8003f1c:	08003fa9 	.word	0x08003fa9
 8003f20:	08003fe1 	.word	0x08003fe1
 8003f24:	08003fe1 	.word	0x08003fe1
 8003f28:	08003fe1 	.word	0x08003fe1
 8003f2c:	08003fc9 	.word	0x08003fc9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f30:	f7ff fa7a 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8003f34:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	005a      	lsls	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	441a      	add	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	61bb      	str	r3, [r7, #24]
        break;
 8003f4e:	e04a      	b.n	8003fe6 <UART_SetConfig+0x2ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f50:	f7ff fa8c 	bl	800346c <HAL_RCC_GetPCLK2Freq>
 8003f54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	005a      	lsls	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	441a      	add	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	61bb      	str	r3, [r7, #24]
        break;
 8003f6e:	e03a      	b.n	8003fe6 <UART_SetConfig+0x2ee>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	085b      	lsrs	r3, r3, #1
 8003f76:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003f7a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6852      	ldr	r2, [r2, #4]
 8003f82:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	61bb      	str	r3, [r7, #24]
        break;
 8003f8a:	e02c      	b.n	8003fe6 <UART_SetConfig+0x2ee>
 8003f8c:	00895440 	.word	0x00895440
 8003f90:	08008450 	.word	0x08008450
 8003f94:	efff69f3 	.word	0xefff69f3
 8003f98:	40013800 	.word	0x40013800
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40004400 	.word	0x40004400
 8003fa4:	40004800 	.word	0x40004800
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa8:	f7ff f9c8 	bl	800333c <HAL_RCC_GetSysClockFreq>
 8003fac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	005a      	lsls	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	441a      	add	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	61bb      	str	r3, [r7, #24]
        break;
 8003fc6:	e00e      	b.n	8003fe6 <UART_SetConfig+0x2ee>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	61bb      	str	r3, [r7, #24]
        break;
 8003fde:	e002      	b.n	8003fe6 <UART_SetConfig+0x2ee>
      default:
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
        break;
 8003fe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	2b0f      	cmp	r3, #15
 8003fea:	d916      	bls.n	800401a <UART_SetConfig+0x322>
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff2:	d212      	bcs.n	800401a <UART_SetConfig+0x322>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	f023 030f 	bic.w	r3, r3, #15
 8003ffc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	085b      	lsrs	r3, r3, #1
 8004002:	b29b      	uxth	r3, r3
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	b29a      	uxth	r2, r3
 800400a:	897b      	ldrh	r3, [r7, #10]
 800400c:	4313      	orrs	r3, r2
 800400e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	897a      	ldrh	r2, [r7, #10]
 8004016:	60da      	str	r2, [r3, #12]
 8004018:	e072      	b.n	8004100 <UART_SetConfig+0x408>
    }
    else
    {
      ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	75fb      	strb	r3, [r7, #23]
 800401e:	e06f      	b.n	8004100 <UART_SetConfig+0x408>
    }
  }
  else
  {
    switch (clocksource)
 8004020:	7ffb      	ldrb	r3, [r7, #31]
 8004022:	2b08      	cmp	r3, #8
 8004024:	d85b      	bhi.n	80040de <UART_SetConfig+0x3e6>
 8004026:	a201      	add	r2, pc, #4	; (adr r2, 800402c <UART_SetConfig+0x334>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	08004051 	.word	0x08004051
 8004030:	0800406f 	.word	0x0800406f
 8004034:	0800408d 	.word	0x0800408d
 8004038:	080040df 	.word	0x080040df
 800403c:	080040a9 	.word	0x080040a9
 8004040:	080040df 	.word	0x080040df
 8004044:	080040df 	.word	0x080040df
 8004048:	080040df 	.word	0x080040df
 800404c:	080040c7 	.word	0x080040c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004050:	f7ff f9ea 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8004054:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	085a      	lsrs	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	441a      	add	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	fbb2 f3f3 	udiv	r3, r2, r3
 8004068:	b29b      	uxth	r3, r3
 800406a:	61bb      	str	r3, [r7, #24]
        break;
 800406c:	e03a      	b.n	80040e4 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800406e:	f7ff f9fd 	bl	800346c <HAL_RCC_GetPCLK2Freq>
 8004072:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	085a      	lsrs	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	441a      	add	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	fbb2 f3f3 	udiv	r3, r2, r3
 8004086:	b29b      	uxth	r3, r3
 8004088:	61bb      	str	r3, [r7, #24]
        break;
 800408a:	e02b      	b.n	80040e4 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	085b      	lsrs	r3, r3, #1
 8004092:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004096:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6852      	ldr	r2, [r2, #4]
 800409e:	fbb3 f3f2 	udiv	r3, r3, r2
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	61bb      	str	r3, [r7, #24]
        break;
 80040a6:	e01d      	b.n	80040e4 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a8:	f7ff f948 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80040ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	085a      	lsrs	r2, r3, #1
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	441a      	add	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	61bb      	str	r3, [r7, #24]
        break;
 80040c4:	e00e      	b.n	80040e4 <UART_SetConfig+0x3ec>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	085b      	lsrs	r3, r3, #1
 80040cc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	b29b      	uxth	r3, r3
 80040da:	61bb      	str	r3, [r7, #24]
        break;
 80040dc:	e002      	b.n	80040e4 <UART_SetConfig+0x3ec>
      default:
        ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	75fb      	strb	r3, [r7, #23]
        break;
 80040e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b0f      	cmp	r3, #15
 80040e8:	d908      	bls.n	80040fc <UART_SetConfig+0x404>
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f0:	d204      	bcs.n	80040fc <UART_SetConfig+0x404>
    {
      huart->Instance->BRR = usartdiv;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	e001      	b.n	8004100 <UART_SetConfig+0x408>
    }
    else
    {
      ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800410c:	7dfb      	ldrb	r3, [r7, #23]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop

08004118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	2bff      	cmp	r3, #255	; 0xff
 8004126:	d904      	bls.n	8004132 <UART_AdvFeatureConfig+0x1a>
 8004128:	f640 3127 	movw	r1, #2855	; 0xb27
 800412c:	4898      	ldr	r0, [pc, #608]	; (8004390 <UART_AdvFeatureConfig+0x278>)
 800412e:	f003 fb22 	bl	8007776 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d018      	beq.n	8004170 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <UART_AdvFeatureConfig+0x42>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800414e:	d004      	beq.n	800415a <UART_AdvFeatureConfig+0x42>
 8004150:	f640 312c 	movw	r1, #2860	; 0xb2c
 8004154:	488e      	ldr	r0, [pc, #568]	; (8004390 <UART_AdvFeatureConfig+0x278>)
 8004156:	f003 fb0e 	bl	8007776 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d018      	beq.n	80041ae <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	2b00      	cmp	r3, #0
 8004182:	d009      	beq.n	8004198 <UART_AdvFeatureConfig+0x80>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418c:	d004      	beq.n	8004198 <UART_AdvFeatureConfig+0x80>
 800418e:	f640 3133 	movw	r1, #2867	; 0xb33
 8004192:	487f      	ldr	r0, [pc, #508]	; (8004390 <UART_AdvFeatureConfig+0x278>)
 8004194:	f003 faef 	bl	8007776 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d018      	beq.n	80041ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <UART_AdvFeatureConfig+0xbe>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041ca:	d004      	beq.n	80041d6 <UART_AdvFeatureConfig+0xbe>
 80041cc:	f640 313a 	movw	r1, #2874	; 0xb3a
 80041d0:	486f      	ldr	r0, [pc, #444]	; (8004390 <UART_AdvFeatureConfig+0x278>)
 80041d2:	f003 fad0 	bl	8007776 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d018      	beq.n	800422a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d009      	beq.n	8004214 <UART_AdvFeatureConfig+0xfc>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004208:	d004      	beq.n	8004214 <UART_AdvFeatureConfig+0xfc>
 800420a:	f640 3141 	movw	r1, #2881	; 0xb41
 800420e:	4860      	ldr	r0, [pc, #384]	; (8004390 <UART_AdvFeatureConfig+0x278>)
 8004210:	f003 fab1 	bl	8007776 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	2b00      	cmp	r3, #0
 8004234:	d018      	beq.n	8004268 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <UART_AdvFeatureConfig+0x13a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004246:	d004      	beq.n	8004252 <UART_AdvFeatureConfig+0x13a>
 8004248:	f640 3148 	movw	r1, #2888	; 0xb48
 800424c:	4850      	ldr	r0, [pc, #320]	; (8004390 <UART_AdvFeatureConfig+0x278>)
 800424e:	f003 fa92 	bl	8007776 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d018      	beq.n	80042a6 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d009      	beq.n	8004290 <UART_AdvFeatureConfig+0x178>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004284:	d004      	beq.n	8004290 <UART_AdvFeatureConfig+0x178>
 8004286:	f640 314f 	movw	r1, #2895	; 0xb4f
 800428a:	4841      	ldr	r0, [pc, #260]	; (8004390 <UART_AdvFeatureConfig+0x278>)
 800428c:	f003 fa73 	bl	8007776 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d04a      	beq.n	8004348 <UART_AdvFeatureConfig+0x230>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a37      	ldr	r2, [pc, #220]	; (8004394 <UART_AdvFeatureConfig+0x27c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <UART_AdvFeatureConfig+0x1ae>
 80042bc:	f640 3156 	movw	r1, #2902	; 0xb56
 80042c0:	4833      	ldr	r0, [pc, #204]	; (8004390 <UART_AdvFeatureConfig+0x278>)
 80042c2:	f003 fa58 	bl	8007776 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d009      	beq.n	80042e2 <UART_AdvFeatureConfig+0x1ca>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042d6:	d004      	beq.n	80042e2 <UART_AdvFeatureConfig+0x1ca>
 80042d8:	f640 3157 	movw	r1, #2903	; 0xb57
 80042dc:	482c      	ldr	r0, [pc, #176]	; (8004390 <UART_AdvFeatureConfig+0x278>)
 80042de:	f003 fa4a 	bl	8007776 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004300:	d122      	bne.n	8004348 <UART_AdvFeatureConfig+0x230>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	2b00      	cmp	r3, #0
 8004308:	d013      	beq.n	8004332 <UART_AdvFeatureConfig+0x21a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004312:	d00e      	beq.n	8004332 <UART_AdvFeatureConfig+0x21a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800431c:	d009      	beq.n	8004332 <UART_AdvFeatureConfig+0x21a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004326:	d004      	beq.n	8004332 <UART_AdvFeatureConfig+0x21a>
 8004328:	f640 315c 	movw	r1, #2908	; 0xb5c
 800432c:	4818      	ldr	r0, [pc, #96]	; (8004390 <UART_AdvFeatureConfig+0x278>)
 800432e:	f003 fa22 	bl	8007776 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	2b00      	cmp	r3, #0
 8004352:	d018      	beq.n	8004386 <UART_AdvFeatureConfig+0x26e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004358:	2b00      	cmp	r3, #0
 800435a:	d009      	beq.n	8004370 <UART_AdvFeatureConfig+0x258>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004360:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004364:	d004      	beq.n	8004370 <UART_AdvFeatureConfig+0x258>
 8004366:	f640 3164 	movw	r1, #2916	; 0xb64
 800436a:	4809      	ldr	r0, [pc, #36]	; (8004390 <UART_AdvFeatureConfig+0x278>)
 800436c:	f003 fa03 	bl	8007776 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	08008450 	.word	0x08008450
 8004394:	40013800 	.word	0x40013800

08004398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af02      	add	r7, sp, #8
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80043a6:	f7fb ff95 	bl	80002d4 <HAL_GetTick>
 80043aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d10e      	bne.n	80043d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f82a 	bl	8004422 <UART_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e020      	b.n	800441a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d10e      	bne.n	8004404 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f814 	bl	8004422 <UART_WaitOnFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e00a      	b.n	800441a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	4613      	mov	r3, r2
 8004430:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004432:	e05d      	b.n	80044f0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	d059      	beq.n	80044f0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443c:	f7fb ff4a 	bl	80002d4 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	429a      	cmp	r2, r3
 800444a:	d302      	bcc.n	8004452 <UART_WaitOnFlagUntilTimeout+0x30>
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d11b      	bne.n	800448a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004460:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e042      	b.n	8004510 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d02b      	beq.n	80044f0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a6:	d123      	bne.n	80044f0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044b0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0201 	bic.w	r2, r2, #1
 80044d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2220      	movs	r2, #32
 80044d6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e00f      	b.n	8004510 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69da      	ldr	r2, [r3, #28]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4013      	ands	r3, r2
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	429a      	cmp	r2, r3
 800450c:	d092      	beq.n	8004434 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800451e:	f3ef 8305 	mrs	r3, IPSR
 8004522:	60bb      	str	r3, [r7, #8]
  return(result);
 8004524:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10f      	bne.n	800454a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800452a:	f3ef 8310 	mrs	r3, PRIMASK
 800452e:	607b      	str	r3, [r7, #4]
  return(result);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <osKernelInitialize+0x32>
 8004536:	4b11      	ldr	r3, [pc, #68]	; (800457c <osKernelInitialize+0x64>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d109      	bne.n	8004552 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800453e:	f3ef 8311 	mrs	r3, BASEPRI
 8004542:	603b      	str	r3, [r7, #0]
  return(result);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800454a:	f06f 0305 	mvn.w	r3, #5
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	e00c      	b.n	800456c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004552:	4b0a      	ldr	r3, [pc, #40]	; (800457c <osKernelInitialize+0x64>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d105      	bne.n	8004566 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800455a:	4b08      	ldr	r3, [pc, #32]	; (800457c <osKernelInitialize+0x64>)
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	e002      	b.n	800456c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004566:	f04f 33ff 	mov.w	r3, #4294967295
 800456a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800456c:	68fb      	ldr	r3, [r7, #12]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000090 	.word	0x20000090

08004580 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004586:	f3ef 8305 	mrs	r3, IPSR
 800458a:	60bb      	str	r3, [r7, #8]
  return(result);
 800458c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10f      	bne.n	80045b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004592:	f3ef 8310 	mrs	r3, PRIMASK
 8004596:	607b      	str	r3, [r7, #4]
  return(result);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <osKernelStart+0x32>
 800459e:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <osKernelStart+0x64>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d109      	bne.n	80045ba <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045a6:	f3ef 8311 	mrs	r3, BASEPRI
 80045aa:	603b      	str	r3, [r7, #0]
  return(result);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <osKernelStart+0x3a>
    stat = osErrorISR;
 80045b2:	f06f 0305 	mvn.w	r3, #5
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	e00e      	b.n	80045d8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80045ba:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <osKernelStart+0x64>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d107      	bne.n	80045d2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <osKernelStart+0x64>)
 80045c4:	2202      	movs	r2, #2
 80045c6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80045c8:	f001 fa1c 	bl	8005a04 <vTaskStartScheduler>
      stat = osOK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e002      	b.n	80045d8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80045d2:	f04f 33ff 	mov.w	r3, #4294967295
 80045d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000090 	.word	0x20000090

080045e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b092      	sub	sp, #72	; 0x48
 80045ec:	af04      	add	r7, sp, #16
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f8:	f3ef 8305 	mrs	r3, IPSR
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004600:	2b00      	cmp	r3, #0
 8004602:	f040 8094 	bne.w	800472e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004606:	f3ef 8310 	mrs	r3, PRIMASK
 800460a:	623b      	str	r3, [r7, #32]
  return(result);
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f040 808d 	bne.w	800472e <osThreadNew+0x146>
 8004614:	4b48      	ldr	r3, [pc, #288]	; (8004738 <osThreadNew+0x150>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d106      	bne.n	800462a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800461c:	f3ef 8311 	mrs	r3, BASEPRI
 8004620:	61fb      	str	r3, [r7, #28]
  return(result);
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f040 8082 	bne.w	800472e <osThreadNew+0x146>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d07e      	beq.n	800472e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004630:	2380      	movs	r3, #128	; 0x80
 8004632:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004634:	2318      	movs	r3, #24
 8004636:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004638:	2300      	movs	r3, #0
 800463a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800463c:	f107 031b 	add.w	r3, r7, #27
 8004640:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004642:	f04f 33ff 	mov.w	r3, #4294967295
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d045      	beq.n	80046da <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <osThreadNew+0x74>
        name = attr->name;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <osThreadNew+0x9a>
 8004670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004672:	2b38      	cmp	r3, #56	; 0x38
 8004674:	d805      	bhi.n	8004682 <osThreadNew+0x9a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <osThreadNew+0x9e>
        return (NULL);
 8004682:	2300      	movs	r3, #0
 8004684:	e054      	b.n	8004730 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	089b      	lsrs	r3, r3, #2
 8004694:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00e      	beq.n	80046bc <osThreadNew+0xd4>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2b5b      	cmp	r3, #91	; 0x5b
 80046a4:	d90a      	bls.n	80046bc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d006      	beq.n	80046bc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <osThreadNew+0xd4>
        mem = 1;
 80046b6:	2301      	movs	r3, #1
 80046b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ba:	e010      	b.n	80046de <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10c      	bne.n	80046de <osThreadNew+0xf6>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d108      	bne.n	80046de <osThreadNew+0xf6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <osThreadNew+0xf6>
          mem = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d8:	e001      	b.n	80046de <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d110      	bne.n	8004706 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046ec:	9202      	str	r2, [sp, #8]
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 ffba 	bl	8005674 <xTaskCreateStatic>
 8004700:	4603      	mov	r3, r0
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	e013      	b.n	800472e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	2b00      	cmp	r3, #0
 800470a:	d110      	bne.n	800472e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470e:	b29a      	uxth	r2, r3
 8004710:	f107 0314 	add.w	r3, r7, #20
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f001 f801 	bl	8005726 <xTaskCreate>
 8004724:	4603      	mov	r3, r0
 8004726:	2b01      	cmp	r3, #1
 8004728:	d001      	beq.n	800472e <osThreadNew+0x146>
          hTask = NULL;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800472e:	697b      	ldr	r3, [r7, #20]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3738      	adds	r7, #56	; 0x38
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20000090 	.word	0x20000090

0800473c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004744:	f3ef 8305 	mrs	r3, IPSR
 8004748:	613b      	str	r3, [r7, #16]
  return(result);
 800474a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10f      	bne.n	8004770 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004750:	f3ef 8310 	mrs	r3, PRIMASK
 8004754:	60fb      	str	r3, [r7, #12]
  return(result);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <osDelay+0x34>
 800475c:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <osDelay+0x58>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d109      	bne.n	8004778 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004764:	f3ef 8311 	mrs	r3, BASEPRI
 8004768:	60bb      	str	r3, [r7, #8]
  return(result);
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <osDelay+0x3c>
    stat = osErrorISR;
 8004770:	f06f 0305 	mvn.w	r3, #5
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	e007      	b.n	8004788 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f001 f90a 	bl	800599c <vTaskDelay>
    }
  }

  return (stat);
 8004788:	697b      	ldr	r3, [r7, #20]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000090 	.word	0x20000090

08004798 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b08c      	sub	sp, #48	; 0x30
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047a8:	f3ef 8305 	mrs	r3, IPSR
 80047ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80047ae:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d170      	bne.n	8004896 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b4:	f3ef 8310 	mrs	r3, PRIMASK
 80047b8:	617b      	str	r3, [r7, #20]
  return(result);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d16a      	bne.n	8004896 <osMessageQueueNew+0xfe>
 80047c0:	4b37      	ldr	r3, [pc, #220]	; (80048a0 <osMessageQueueNew+0x108>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d105      	bne.n	80047d4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047c8:	f3ef 8311 	mrs	r3, BASEPRI
 80047cc:	613b      	str	r3, [r7, #16]
  return(result);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d160      	bne.n	8004896 <osMessageQueueNew+0xfe>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d05d      	beq.n	8004896 <osMessageQueueNew+0xfe>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d05a      	beq.n	8004896 <osMessageQueueNew+0xfe>
    mem = -1;
 80047e0:	f04f 33ff 	mov.w	r3, #4294967295
 80047e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d029      	beq.n	8004840 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d012      	beq.n	800481a <osMessageQueueNew+0x82>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b4f      	cmp	r3, #79	; 0x4f
 80047fa:	d90e      	bls.n	800481a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	429a      	cmp	r2, r3
 8004812:	d302      	bcc.n	800481a <osMessageQueueNew+0x82>
        mem = 1;
 8004814:	2301      	movs	r3, #1
 8004816:	623b      	str	r3, [r7, #32]
 8004818:	e014      	b.n	8004844 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d110      	bne.n	8004844 <osMessageQueueNew+0xac>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10c      	bne.n	8004844 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800482e:	2b00      	cmp	r3, #0
 8004830:	d108      	bne.n	8004844 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <osMessageQueueNew+0xac>
          mem = 0;
 800483a:	2300      	movs	r3, #0
 800483c:	623b      	str	r3, [r7, #32]
 800483e:	e001      	b.n	8004844 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d10c      	bne.n	8004864 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6899      	ldr	r1, [r3, #8]
 8004852:	2300      	movs	r3, #0
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	460b      	mov	r3, r1
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f9e4 	bl	8004c28 <xQueueGenericCreateStatic>
 8004860:	6278      	str	r0, [r7, #36]	; 0x24
 8004862:	e008      	b.n	8004876 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d105      	bne.n	8004876 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800486a:	2200      	movs	r2, #0
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 fa4c 	bl	8004d0c <xQueueGenericCreate>
 8004874:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00c      	beq.n	8004896 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <osMessageQueueNew+0xf2>
        name = attr->name;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	e001      	b.n	800488e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800488e:	69f9      	ldr	r1, [r7, #28]
 8004890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004892:	f000 fe93 	bl	80055bc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004898:	4618      	mov	r0, r3
 800489a:	3728      	adds	r7, #40	; 0x28
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000090 	.word	0x20000090

080048a4 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08a      	sub	sp, #40	; 0x28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ba:	f3ef 8305 	mrs	r3, IPSR
 80048be:	61fb      	str	r3, [r7, #28]
  return(result);
 80048c0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10f      	bne.n	80048e6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <osMessageQueueGet+0x42>
 80048d2:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <osMessageQueueGet+0xdc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d12e      	bne.n	8004938 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048da:	f3ef 8311 	mrs	r3, BASEPRI
 80048de:	617b      	str	r3, [r7, #20]
  return(result);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d028      	beq.n	8004938 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <osMessageQueueGet+0x54>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <osMessageQueueGet+0x54>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80048f8:	f06f 0303 	mvn.w	r3, #3
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80048fe:	e038      	b.n	8004972 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004900:	2300      	movs	r3, #0
 8004902:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004904:	f107 0310 	add.w	r3, r7, #16
 8004908:	461a      	mov	r2, r3
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	6a38      	ldr	r0, [r7, #32]
 800490e:	f000 fcc7 	bl	80052a0 <xQueueReceiveFromISR>
 8004912:	4603      	mov	r3, r0
 8004914:	2b01      	cmp	r3, #1
 8004916:	d003      	beq.n	8004920 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004918:	f06f 0302 	mvn.w	r3, #2
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800491e:	e028      	b.n	8004972 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d025      	beq.n	8004972 <osMessageQueueGet+0xce>
 8004926:	4b17      	ldr	r3, [pc, #92]	; (8004984 <osMessageQueueGet+0xe0>)
 8004928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004936:	e01c      	b.n	8004972 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <osMessageQueueGet+0xa0>
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d103      	bne.n	800494c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004944:	f06f 0303 	mvn.w	r3, #3
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
 800494a:	e013      	b.n	8004974 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	6a38      	ldr	r0, [r7, #32]
 8004952:	f000 fbc9 	bl	80050e8 <xQueueReceive>
 8004956:	4603      	mov	r3, r0
 8004958:	2b01      	cmp	r3, #1
 800495a:	d00b      	beq.n	8004974 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004962:	f06f 0301 	mvn.w	r3, #1
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
 8004968:	e004      	b.n	8004974 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800496a:	f06f 0302 	mvn.w	r3, #2
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
 8004970:	e000      	b.n	8004974 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004972:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004976:	4618      	mov	r0, r3
 8004978:	3728      	adds	r7, #40	; 0x28
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000090 	.word	0x20000090
 8004984:	e000ed04 	.word	0xe000ed04

08004988 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4a07      	ldr	r2, [pc, #28]	; (80049b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004998:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	4a06      	ldr	r2, [pc, #24]	; (80049b8 <vApplicationGetIdleTaskMemory+0x30>)
 800499e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2280      	movs	r2, #128	; 0x80
 80049a4:	601a      	str	r2, [r3, #0]
}
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	20000094 	.word	0x20000094
 80049b8:	200000f0 	.word	0x200000f0

080049bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4a07      	ldr	r2, [pc, #28]	; (80049e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80049cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4a06      	ldr	r2, [pc, #24]	; (80049ec <vApplicationGetTimerTaskMemory+0x30>)
 80049d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049da:	601a      	str	r2, [r3, #0]
}
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	200002f0 	.word	0x200002f0
 80049ec:	2000034c 	.word	0x2000034c

080049f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f103 0208 	add.w	r2, r3, #8
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f04f 32ff 	mov.w	r2, #4294967295
 8004a08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f103 0208 	add.w	r2, r3, #8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f103 0208 	add.w	r2, r3, #8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	601a      	str	r2, [r3, #0]
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	d103      	bne.n	8004ab2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	e00c      	b.n	8004acc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	e002      	b.n	8004ac0 <vListInsert+0x2e>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d2f6      	bcs.n	8004aba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	601a      	str	r2, [r3, #0]
}
 8004af8:	bf00      	nop
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6892      	ldr	r2, [r2, #8]
 8004b1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6852      	ldr	r2, [r2, #4]
 8004b24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d103      	bne.n	8004b38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	1e5a      	subs	r2, r3, #1
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d109      	bne.n	8004b80 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	e7fe      	b.n	8004b7e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004b80:	f002 f894 	bl	8006cac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8c:	68f9      	ldr	r1, [r7, #12]
 8004b8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	441a      	add	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	68f9      	ldr	r1, [r7, #12]
 8004bb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bb6:	fb01 f303 	mul.w	r3, r1, r3
 8004bba:	441a      	add	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	22ff      	movs	r2, #255	; 0xff
 8004bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	22ff      	movs	r2, #255	; 0xff
 8004bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d114      	bne.n	8004c00 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d01a      	beq.n	8004c14 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3310      	adds	r3, #16
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 f994 	bl	8005f10 <xTaskRemoveFromEventList>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d012      	beq.n	8004c14 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bee:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <xQueueGenericReset+0xcc>)
 8004bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	e009      	b.n	8004c14 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3310      	adds	r3, #16
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fef3 	bl	80049f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3324      	adds	r3, #36	; 0x24
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff feee 	bl	80049f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c14:	f002 f878 	bl	8006d08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c18:	2301      	movs	r3, #1
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	e000ed04 	.word	0xe000ed04

08004c28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08e      	sub	sp, #56	; 0x38
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d109      	bne.n	8004c50 <xQueueGenericCreateStatic+0x28>
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c4e:	e7fe      	b.n	8004c4e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <xQueueGenericCreateStatic+0x42>
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
 8004c68:	e7fe      	b.n	8004c68 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <xQueueGenericCreateStatic+0x4e>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <xQueueGenericCreateStatic+0x52>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <xQueueGenericCreateStatic+0x54>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d109      	bne.n	8004c94 <xQueueGenericCreateStatic+0x6c>
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	623b      	str	r3, [r7, #32]
 8004c92:	e7fe      	b.n	8004c92 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d102      	bne.n	8004ca0 <xQueueGenericCreateStatic+0x78>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <xQueueGenericCreateStatic+0x7c>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <xQueueGenericCreateStatic+0x7e>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <xQueueGenericCreateStatic+0x96>
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	e7fe      	b.n	8004cbc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cbe:	2350      	movs	r3, #80	; 0x50
 8004cc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b50      	cmp	r3, #80	; 0x50
 8004cc6:	d009      	beq.n	8004cdc <xQueueGenericCreateStatic+0xb4>
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	e7fe      	b.n	8004cda <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00d      	beq.n	8004d02 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f842 	bl	8004d86 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3730      	adds	r7, #48	; 0x30
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	; 0x28
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	4613      	mov	r3, r2
 8004d18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d109      	bne.n	8004d34 <xQueueGenericCreate+0x28>
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	e7fe      	b.n	8004d32 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	e004      	b.n	8004d4a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	fb02 f303 	mul.w	r3, r2, r3
 8004d48:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	3350      	adds	r3, #80	; 0x50
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f002 f8c6 	bl	8006ee0 <pvPortMalloc>
 8004d54:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00f      	beq.n	8004d7c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	3350      	adds	r3, #80	; 0x50
 8004d60:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d6a:	79fa      	ldrb	r2, [r7, #7]
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	4613      	mov	r3, r2
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f805 	bl	8004d86 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
	}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3720      	adds	r7, #32
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e002      	b.n	8004da8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004db4:	2101      	movs	r1, #1
 8004db6:	69b8      	ldr	r0, [r7, #24]
 8004db8:	f7ff fece 	bl	8004b58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	78fa      	ldrb	r2, [r7, #3]
 8004dc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08e      	sub	sp, #56	; 0x38
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <xQueueGenericSend+0x30>
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dfa:	e7fe      	b.n	8004dfa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d103      	bne.n	8004e0a <xQueueGenericSend+0x3e>
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <xQueueGenericSend+0x42>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <xQueueGenericSend+0x44>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <xQueueGenericSend+0x5c>
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
 8004e26:	e7fe      	b.n	8004e26 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d103      	bne.n	8004e36 <xQueueGenericSend+0x6a>
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <xQueueGenericSend+0x6e>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <xQueueGenericSend+0x70>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d109      	bne.n	8004e54 <xQueueGenericSend+0x88>
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	623b      	str	r3, [r7, #32]
 8004e52:	e7fe      	b.n	8004e52 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e54:	f001 fa18 	bl	8006288 <xTaskGetSchedulerState>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d102      	bne.n	8004e64 <xQueueGenericSend+0x98>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <xQueueGenericSend+0x9c>
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <xQueueGenericSend+0x9e>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <xQueueGenericSend+0xb6>
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	e7fe      	b.n	8004e80 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e82:	f001 ff13 	bl	8006cac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d302      	bcc.n	8004e98 <xQueueGenericSend+0xcc>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d129      	bne.n	8004eec <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e9e:	f000 fa7c 	bl	800539a <prvCopyDataToQueue>
 8004ea2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d010      	beq.n	8004ece <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	3324      	adds	r3, #36	; 0x24
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 f82d 	bl	8005f10 <xTaskRemoveFromEventList>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d013      	beq.n	8004ee4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ebc:	4b3f      	ldr	r3, [pc, #252]	; (8004fbc <xQueueGenericSend+0x1f0>)
 8004ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	e00a      	b.n	8004ee4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ed4:	4b39      	ldr	r3, [pc, #228]	; (8004fbc <xQueueGenericSend+0x1f0>)
 8004ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ee4:	f001 ff10 	bl	8006d08 <vPortExitCritical>
				return pdPASS;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e063      	b.n	8004fb4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d103      	bne.n	8004efa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ef2:	f001 ff09 	bl	8006d08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e05c      	b.n	8004fb4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f00:	f107 0314 	add.w	r3, r7, #20
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 f865 	bl	8005fd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f0e:	f001 fefb 	bl	8006d08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f12:	f000 fddb 	bl	8005acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f16:	f001 fec9 	bl	8006cac <vPortEnterCritical>
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f20:	b25b      	sxtb	r3, r3
 8004f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f26:	d103      	bne.n	8004f30 <xQueueGenericSend+0x164>
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f36:	b25b      	sxtb	r3, r3
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d103      	bne.n	8004f46 <xQueueGenericSend+0x17a>
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f46:	f001 fedf 	bl	8006d08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f4a:	1d3a      	adds	r2, r7, #4
 8004f4c:	f107 0314 	add.w	r3, r7, #20
 8004f50:	4611      	mov	r1, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f001 f854 	bl	8006000 <xTaskCheckForTimeOut>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d124      	bne.n	8004fa8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f60:	f000 fb13 	bl	800558a <prvIsQueueFull>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d018      	beq.n	8004f9c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	3310      	adds	r3, #16
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	4611      	mov	r1, r2
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 ff7e 	bl	8005e74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f7a:	f000 fa9e 	bl	80054ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f7e:	f000 fdb3 	bl	8005ae8 <xTaskResumeAll>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f47f af7c 	bne.w	8004e82 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004f8a:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <xQueueGenericSend+0x1f0>)
 8004f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	e772      	b.n	8004e82 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f9e:	f000 fa8c 	bl	80054ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fa2:	f000 fda1 	bl	8005ae8 <xTaskResumeAll>
 8004fa6:	e76c      	b.n	8004e82 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004faa:	f000 fa86 	bl	80054ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fae:	f000 fd9b 	bl	8005ae8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004fb2:	2300      	movs	r3, #0
		}
	}
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3738      	adds	r7, #56	; 0x38
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	e000ed04 	.word	0xe000ed04

08004fc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08e      	sub	sp, #56	; 0x38
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d109      	bne.n	8004fec <xQueueGenericSendFromISR+0x2c>
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fea:	e7fe      	b.n	8004fea <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d103      	bne.n	8004ffa <xQueueGenericSendFromISR+0x3a>
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <xQueueGenericSendFromISR+0x3e>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <xQueueGenericSendFromISR+0x40>
 8004ffe:	2300      	movs	r3, #0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <xQueueGenericSendFromISR+0x58>
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	623b      	str	r3, [r7, #32]
 8005016:	e7fe      	b.n	8005016 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d103      	bne.n	8005026 <xQueueGenericSendFromISR+0x66>
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005022:	2b01      	cmp	r3, #1
 8005024:	d101      	bne.n	800502a <xQueueGenericSendFromISR+0x6a>
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <xQueueGenericSendFromISR+0x6c>
 800502a:	2300      	movs	r3, #0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d109      	bne.n	8005044 <xQueueGenericSendFromISR+0x84>
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	e7fe      	b.n	8005042 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005044:	f001 ff0e 	bl	8006e64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005048:	f3ef 8211 	mrs	r2, BASEPRI
 800504c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	61ba      	str	r2, [r7, #24]
 800505e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005060:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506c:	429a      	cmp	r2, r3
 800506e:	d302      	bcc.n	8005076 <xQueueGenericSendFromISR+0xb6>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d12c      	bne.n	80050d0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800507c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005086:	f000 f988 	bl	800539a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800508a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d112      	bne.n	80050ba <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	2b00      	cmp	r3, #0
 800509a:	d016      	beq.n	80050ca <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	3324      	adds	r3, #36	; 0x24
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 ff35 	bl	8005f10 <xTaskRemoveFromEventList>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00e      	beq.n	80050ca <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	e007      	b.n	80050ca <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050be:	3301      	adds	r3, #1
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	b25a      	sxtb	r2, r3
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80050ca:	2301      	movs	r3, #1
 80050cc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80050ce:	e001      	b.n	80050d4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	637b      	str	r3, [r7, #52]	; 0x34
 80050d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3738      	adds	r7, #56	; 0x38
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08c      	sub	sp, #48	; 0x30
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80050f4:	2300      	movs	r3, #0
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <xQueueReceive+0x2e>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	623b      	str	r3, [r7, #32]
 8005114:	e7fe      	b.n	8005114 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d103      	bne.n	8005124 <xQueueReceive+0x3c>
 800511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <xQueueReceive+0x40>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <xQueueReceive+0x42>
 8005128:	2300      	movs	r3, #0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d109      	bne.n	8005142 <xQueueReceive+0x5a>
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	61fb      	str	r3, [r7, #28]
 8005140:	e7fe      	b.n	8005140 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005142:	f001 f8a1 	bl	8006288 <xTaskGetSchedulerState>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d102      	bne.n	8005152 <xQueueReceive+0x6a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <xQueueReceive+0x6e>
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <xQueueReceive+0x70>
 8005156:	2300      	movs	r3, #0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d109      	bne.n	8005170 <xQueueReceive+0x88>
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	e7fe      	b.n	800516e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005170:	f001 fd9c 	bl	8006cac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01f      	beq.n	80051c0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005184:	f000 f973 	bl	800546e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	1e5a      	subs	r2, r3, #1
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00f      	beq.n	80051b8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519a:	3310      	adds	r3, #16
 800519c:	4618      	mov	r0, r3
 800519e:	f000 feb7 	bl	8005f10 <xTaskRemoveFromEventList>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d007      	beq.n	80051b8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051a8:	4b3c      	ldr	r3, [pc, #240]	; (800529c <xQueueReceive+0x1b4>)
 80051aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051b8:	f001 fda6 	bl	8006d08 <vPortExitCritical>
				return pdPASS;
 80051bc:	2301      	movs	r3, #1
 80051be:	e069      	b.n	8005294 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d103      	bne.n	80051ce <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051c6:	f001 fd9f 	bl	8006d08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e062      	b.n	8005294 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d106      	bne.n	80051e2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051d4:	f107 0310 	add.w	r3, r7, #16
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fefb 	bl	8005fd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051de:	2301      	movs	r3, #1
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051e2:	f001 fd91 	bl	8006d08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051e6:	f000 fc71 	bl	8005acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051ea:	f001 fd5f 	bl	8006cac <vPortEnterCritical>
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f4:	b25b      	sxtb	r3, r3
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fa:	d103      	bne.n	8005204 <xQueueReceive+0x11c>
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800520a:	b25b      	sxtb	r3, r3
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d103      	bne.n	800521a <xQueueReceive+0x132>
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800521a:	f001 fd75 	bl	8006d08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800521e:	1d3a      	adds	r2, r7, #4
 8005220:	f107 0310 	add.w	r3, r7, #16
 8005224:	4611      	mov	r1, r2
 8005226:	4618      	mov	r0, r3
 8005228:	f000 feea 	bl	8006000 <xTaskCheckForTimeOut>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d123      	bne.n	800527a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005234:	f000 f993 	bl	800555e <prvIsQueueEmpty>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d017      	beq.n	800526e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	3324      	adds	r3, #36	; 0x24
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	4611      	mov	r1, r2
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fe14 	bl	8005e74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800524c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800524e:	f000 f934 	bl	80054ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005252:	f000 fc49 	bl	8005ae8 <xTaskResumeAll>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d189      	bne.n	8005170 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800525c:	4b0f      	ldr	r3, [pc, #60]	; (800529c <xQueueReceive+0x1b4>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	e780      	b.n	8005170 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800526e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005270:	f000 f923 	bl	80054ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005274:	f000 fc38 	bl	8005ae8 <xTaskResumeAll>
 8005278:	e77a      	b.n	8005170 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800527a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800527c:	f000 f91d 	bl	80054ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005280:	f000 fc32 	bl	8005ae8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005286:	f000 f96a 	bl	800555e <prvIsQueueEmpty>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	f43f af6f 	beq.w	8005170 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005292:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005294:	4618      	mov	r0, r3
 8005296:	3730      	adds	r7, #48	; 0x30
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	e000ed04 	.word	0xe000ed04

080052a0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08e      	sub	sp, #56	; 0x38
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <xQueueReceiveFromISR+0x2a>
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	623b      	str	r3, [r7, #32]
 80052c8:	e7fe      	b.n	80052c8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d103      	bne.n	80052d8 <xQueueReceiveFromISR+0x38>
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <xQueueReceiveFromISR+0x3c>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <xQueueReceiveFromISR+0x3e>
 80052dc:	2300      	movs	r3, #0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <xQueueReceiveFromISR+0x56>
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	e7fe      	b.n	80052f4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052f6:	f001 fdb5 	bl	8006e64 <vPortValidateInterruptPriority>
	__asm volatile
 80052fa:	f3ef 8211 	mrs	r2, BASEPRI
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	61ba      	str	r2, [r7, #24]
 8005310:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005312:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	2b00      	cmp	r3, #0
 8005320:	d02f      	beq.n	8005382 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005330:	f000 f89d 	bl	800546e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	1e5a      	subs	r2, r3, #1
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800533c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d112      	bne.n	800536c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d016      	beq.n	800537c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	3310      	adds	r3, #16
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fddc 	bl	8005f10 <xTaskRemoveFromEventList>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00e      	beq.n	800537c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00b      	beq.n	800537c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e007      	b.n	800537c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800536c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005370:	3301      	adds	r3, #1
 8005372:	b2db      	uxtb	r3, r3
 8005374:	b25a      	sxtb	r2, r3
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800537c:	2301      	movs	r3, #1
 800537e:	637b      	str	r3, [r7, #52]	; 0x34
 8005380:	e001      	b.n	8005386 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005382:	2300      	movs	r3, #0
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
 8005386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005388:	613b      	str	r3, [r7, #16]
	__asm volatile
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005392:	4618      	mov	r0, r3
 8005394:	3738      	adds	r7, #56	; 0x38
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b086      	sub	sp, #24
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10d      	bne.n	80053d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d14d      	bne.n	800545c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 ff7d 	bl	80062c4 <xTaskPriorityDisinherit>
 80053ca:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	e043      	b.n	800545c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d119      	bne.n	800540e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6898      	ldr	r0, [r3, #8]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	461a      	mov	r2, r3
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	f002 fb85 	bl	8007af4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	441a      	add	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	429a      	cmp	r2, r3
 8005402:	d32b      	bcc.n	800545c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	609a      	str	r2, [r3, #8]
 800540c:	e026      	b.n	800545c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	68d8      	ldr	r0, [r3, #12]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	461a      	mov	r2, r3
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	f002 fb6b 	bl	8007af4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	425b      	negs	r3, r3
 8005428:	441a      	add	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d207      	bcs.n	800544a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	425b      	negs	r3, r3
 8005444:	441a      	add	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d105      	bne.n	800545c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	3b01      	subs	r3, #1
 800545a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005464:	697b      	ldr	r3, [r7, #20]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d018      	beq.n	80054b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	441a      	add	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	429a      	cmp	r2, r3
 8005498:	d303      	bcc.n	80054a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68d9      	ldr	r1, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	461a      	mov	r2, r3
 80054ac:	6838      	ldr	r0, [r7, #0]
 80054ae:	f002 fb21 	bl	8007af4 <memcpy>
	}
}
 80054b2:	bf00      	nop
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054c2:	f001 fbf3 	bl	8006cac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054ce:	e011      	b.n	80054f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d012      	beq.n	80054fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3324      	adds	r3, #36	; 0x24
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fd17 	bl	8005f10 <xTaskRemoveFromEventList>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054e8:	f000 fdea 	bl	80060c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	dce9      	bgt.n	80054d0 <prvUnlockQueue+0x16>
 80054fc:	e000      	b.n	8005500 <prvUnlockQueue+0x46>
					break;
 80054fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	22ff      	movs	r2, #255	; 0xff
 8005504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005508:	f001 fbfe 	bl	8006d08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800550c:	f001 fbce 	bl	8006cac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005516:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005518:	e011      	b.n	800553e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d012      	beq.n	8005548 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3310      	adds	r3, #16
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fcf2 	bl	8005f10 <xTaskRemoveFromEventList>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005532:	f000 fdc5 	bl	80060c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	3b01      	subs	r3, #1
 800553a:	b2db      	uxtb	r3, r3
 800553c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800553e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005542:	2b00      	cmp	r3, #0
 8005544:	dce9      	bgt.n	800551a <prvUnlockQueue+0x60>
 8005546:	e000      	b.n	800554a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005548:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	22ff      	movs	r2, #255	; 0xff
 800554e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005552:	f001 fbd9 	bl	8006d08 <vPortExitCritical>
}
 8005556:	bf00      	nop
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b084      	sub	sp, #16
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005566:	f001 fba1 	bl	8006cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556e:	2b00      	cmp	r3, #0
 8005570:	d102      	bne.n	8005578 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005572:	2301      	movs	r3, #1
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e001      	b.n	800557c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800557c:	f001 fbc4 	bl	8006d08 <vPortExitCritical>

	return xReturn;
 8005580:	68fb      	ldr	r3, [r7, #12]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005592:	f001 fb8b 	bl	8006cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559e:	429a      	cmp	r2, r3
 80055a0:	d102      	bne.n	80055a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055a2:	2301      	movs	r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	e001      	b.n	80055ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055ac:	f001 fbac 	bl	8006d08 <vPortExitCritical>

	return xReturn;
 80055b0:	68fb      	ldr	r3, [r7, #12]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e014      	b.n	80055f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055cc:	4a0e      	ldr	r2, [pc, #56]	; (8005608 <vQueueAddToRegistry+0x4c>)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10b      	bne.n	80055f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055d8:	490b      	ldr	r1, [pc, #44]	; (8005608 <vQueueAddToRegistry+0x4c>)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055e2:	4a09      	ldr	r2, [pc, #36]	; (8005608 <vQueueAddToRegistry+0x4c>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	4413      	add	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055ee:	e005      	b.n	80055fc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3301      	adds	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b07      	cmp	r3, #7
 80055fa:	d9e7      	bls.n	80055cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055fc:	bf00      	nop
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	200019a8 	.word	0x200019a8

0800560c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800561c:	f001 fb46 	bl	8006cac <vPortEnterCritical>
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005626:	b25b      	sxtb	r3, r3
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562c:	d103      	bne.n	8005636 <vQueueWaitForMessageRestricted+0x2a>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800563c:	b25b      	sxtb	r3, r3
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005642:	d103      	bne.n	800564c <vQueueWaitForMessageRestricted+0x40>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800564c:	f001 fb5c 	bl	8006d08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	2b00      	cmp	r3, #0
 8005656:	d106      	bne.n	8005666 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	3324      	adds	r3, #36	; 0x24
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fc2b 	bl	8005ebc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005666:	6978      	ldr	r0, [r7, #20]
 8005668:	f7ff ff27 	bl	80054ba <prvUnlockQueue>
	}
 800566c:	bf00      	nop
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08e      	sub	sp, #56	; 0x38
 8005678:	af04      	add	r7, sp, #16
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <xTaskCreateStatic+0x28>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	623b      	str	r3, [r7, #32]
 800569a:	e7fe      	b.n	800569a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <xTaskCreateStatic+0x42>
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	e7fe      	b.n	80056b4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056b6:	235c      	movs	r3, #92	; 0x5c
 80056b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2b5c      	cmp	r3, #92	; 0x5c
 80056be:	d009      	beq.n	80056d4 <xTaskCreateStatic+0x60>
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	e7fe      	b.n	80056d2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01e      	beq.n	8005718 <xTaskCreateStatic+0xa4>
 80056da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01b      	beq.n	8005718 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	2202      	movs	r2, #2
 80056ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056f2:	2300      	movs	r3, #0
 80056f4:	9303      	str	r3, [sp, #12]
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	9302      	str	r3, [sp, #8]
 80056fa:	f107 0314 	add.w	r3, r7, #20
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f850 	bl	80057b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005712:	f000 f8d3 	bl	80058bc <prvAddNewTaskToReadyList>
 8005716:	e001      	b.n	800571c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800571c:	697b      	ldr	r3, [r7, #20]
	}
 800571e:	4618      	mov	r0, r3
 8005720:	3728      	adds	r7, #40	; 0x28
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005726:	b580      	push	{r7, lr}
 8005728:	b08c      	sub	sp, #48	; 0x30
 800572a:	af04      	add	r7, sp, #16
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	603b      	str	r3, [r7, #0]
 8005732:	4613      	mov	r3, r2
 8005734:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4618      	mov	r0, r3
 800573c:	f001 fbd0 	bl	8006ee0 <pvPortMalloc>
 8005740:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00e      	beq.n	8005766 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005748:	205c      	movs	r0, #92	; 0x5c
 800574a:	f001 fbc9 	bl	8006ee0 <pvPortMalloc>
 800574e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	631a      	str	r2, [r3, #48]	; 0x30
 800575c:	e005      	b.n	800576a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800575e:	6978      	ldr	r0, [r7, #20]
 8005760:	f001 fc80 	bl	8007064 <vPortFree>
 8005764:	e001      	b.n	800576a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d017      	beq.n	80057a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005778:	88fa      	ldrh	r2, [r7, #6]
 800577a:	2300      	movs	r3, #0
 800577c:	9303      	str	r3, [sp, #12]
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	9302      	str	r3, [sp, #8]
 8005782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005784:	9301      	str	r3, [sp, #4]
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f80e 	bl	80057b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005794:	69f8      	ldr	r0, [r7, #28]
 8005796:	f000 f891 	bl	80058bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800579a:	2301      	movs	r3, #1
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	e002      	b.n	80057a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057a0:	f04f 33ff 	mov.w	r3, #4294967295
 80057a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057a6:	69bb      	ldr	r3, [r7, #24]
	}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3720      	adds	r7, #32
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	461a      	mov	r2, r3
 80057c8:	21a5      	movs	r1, #165	; 0xa5
 80057ca:	f002 f99e 	bl	8007b0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057d8:	3b01      	subs	r3, #1
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	f023 0307 	bic.w	r3, r3, #7
 80057e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d009      	beq.n	8005806 <prvInitialiseNewTask+0x56>
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	e7fe      	b.n	8005804 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005806:	2300      	movs	r3, #0
 8005808:	61fb      	str	r3, [r7, #28]
 800580a:	e012      	b.n	8005832 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	4413      	add	r3, r2
 8005812:	7819      	ldrb	r1, [r3, #0]
 8005814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	4413      	add	r3, r2
 800581a:	3334      	adds	r3, #52	; 0x34
 800581c:	460a      	mov	r2, r1
 800581e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	4413      	add	r3, r2
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d006      	beq.n	800583a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	3301      	adds	r3, #1
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2b0f      	cmp	r3, #15
 8005836:	d9e9      	bls.n	800580c <prvInitialiseNewTask+0x5c>
 8005838:	e000      	b.n	800583c <prvInitialiseNewTask+0x8c>
		{
			break;
 800583a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	2b37      	cmp	r3, #55	; 0x37
 8005848:	d901      	bls.n	800584e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800584a:	2337      	movs	r3, #55	; 0x37
 800584c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005852:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005858:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	2200      	movs	r2, #0
 800585e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	3304      	adds	r3, #4
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff f8e3 	bl	8004a30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	3318      	adds	r3, #24
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff f8de 	bl	8004a30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005878:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005888:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	2200      	movs	r2, #0
 800588e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	68f9      	ldr	r1, [r7, #12]
 800589c:	69b8      	ldr	r0, [r7, #24]
 800589e:	f001 f8db 	bl	8006a58 <pxPortInitialiseStack>
 80058a2:	4602      	mov	r2, r0
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80058a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058b4:	bf00      	nop
 80058b6:	3720      	adds	r7, #32
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058c4:	f001 f9f2 	bl	8006cac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058c8:	4b2d      	ldr	r3, [pc, #180]	; (8005980 <prvAddNewTaskToReadyList+0xc4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3301      	adds	r3, #1
 80058ce:	4a2c      	ldr	r2, [pc, #176]	; (8005980 <prvAddNewTaskToReadyList+0xc4>)
 80058d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058d2:	4b2c      	ldr	r3, [pc, #176]	; (8005984 <prvAddNewTaskToReadyList+0xc8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058da:	4a2a      	ldr	r2, [pc, #168]	; (8005984 <prvAddNewTaskToReadyList+0xc8>)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058e0:	4b27      	ldr	r3, [pc, #156]	; (8005980 <prvAddNewTaskToReadyList+0xc4>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d110      	bne.n	800590a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058e8:	f000 fc0e 	bl	8006108 <prvInitialiseTaskLists>
 80058ec:	e00d      	b.n	800590a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058ee:	4b26      	ldr	r3, [pc, #152]	; (8005988 <prvAddNewTaskToReadyList+0xcc>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d109      	bne.n	800590a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058f6:	4b23      	ldr	r3, [pc, #140]	; (8005984 <prvAddNewTaskToReadyList+0xc8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	429a      	cmp	r2, r3
 8005902:	d802      	bhi.n	800590a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005904:	4a1f      	ldr	r2, [pc, #124]	; (8005984 <prvAddNewTaskToReadyList+0xc8>)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800590a:	4b20      	ldr	r3, [pc, #128]	; (800598c <prvAddNewTaskToReadyList+0xd0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3301      	adds	r3, #1
 8005910:	4a1e      	ldr	r2, [pc, #120]	; (800598c <prvAddNewTaskToReadyList+0xd0>)
 8005912:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005914:	4b1d      	ldr	r3, [pc, #116]	; (800598c <prvAddNewTaskToReadyList+0xd0>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005920:	4b1b      	ldr	r3, [pc, #108]	; (8005990 <prvAddNewTaskToReadyList+0xd4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d903      	bls.n	8005930 <prvAddNewTaskToReadyList+0x74>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	4a18      	ldr	r2, [pc, #96]	; (8005990 <prvAddNewTaskToReadyList+0xd4>)
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4a15      	ldr	r2, [pc, #84]	; (8005994 <prvAddNewTaskToReadyList+0xd8>)
 800593e:	441a      	add	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3304      	adds	r3, #4
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f7ff f87f 	bl	8004a4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800594c:	f001 f9dc 	bl	8006d08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005950:	4b0d      	ldr	r3, [pc, #52]	; (8005988 <prvAddNewTaskToReadyList+0xcc>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00e      	beq.n	8005976 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005958:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <prvAddNewTaskToReadyList+0xc8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	429a      	cmp	r2, r3
 8005964:	d207      	bcs.n	8005976 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005966:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <prvAddNewTaskToReadyList+0xdc>)
 8005968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005976:	bf00      	nop
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20000c20 	.word	0x20000c20
 8005984:	2000074c 	.word	0x2000074c
 8005988:	20000c2c 	.word	0x20000c2c
 800598c:	20000c3c 	.word	0x20000c3c
 8005990:	20000c28 	.word	0x20000c28
 8005994:	20000750 	.word	0x20000750
 8005998:	e000ed04 	.word	0xe000ed04

0800599c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d016      	beq.n	80059dc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059ae:	4b13      	ldr	r3, [pc, #76]	; (80059fc <vTaskDelay+0x60>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <vTaskDelay+0x2e>
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60bb      	str	r3, [r7, #8]
 80059c8:	e7fe      	b.n	80059c8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80059ca:	f000 f87f 	bl	8005acc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059ce:	2100      	movs	r1, #0
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fce3 	bl	800639c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059d6:	f000 f887 	bl	8005ae8 <xTaskResumeAll>
 80059da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d107      	bne.n	80059f2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80059e2:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <vTaskDelay+0x64>)
 80059e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059f2:	bf00      	nop
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000c48 	.word	0x20000c48
 8005a00:	e000ed04 	.word	0xe000ed04

08005a04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08a      	sub	sp, #40	; 0x28
 8005a08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a12:	463a      	mov	r2, r7
 8005a14:	1d39      	adds	r1, r7, #4
 8005a16:	f107 0308 	add.w	r3, r7, #8
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fe ffb4 	bl	8004988 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	9202      	str	r2, [sp, #8]
 8005a28:	9301      	str	r3, [sp, #4]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	460a      	mov	r2, r1
 8005a32:	4920      	ldr	r1, [pc, #128]	; (8005ab4 <vTaskStartScheduler+0xb0>)
 8005a34:	4820      	ldr	r0, [pc, #128]	; (8005ab8 <vTaskStartScheduler+0xb4>)
 8005a36:	f7ff fe1d 	bl	8005674 <xTaskCreateStatic>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	4b1f      	ldr	r3, [pc, #124]	; (8005abc <vTaskStartScheduler+0xb8>)
 8005a3e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a40:	4b1e      	ldr	r3, [pc, #120]	; (8005abc <vTaskStartScheduler+0xb8>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e001      	b.n	8005a52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d102      	bne.n	8005a5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a58:	f000 fcf4 	bl	8006444 <xTimerCreateTimerTask>
 8005a5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d115      	bne.n	8005a90 <vTaskStartScheduler+0x8c>
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <vTaskStartScheduler+0xbc>)
 8005a78:	f04f 32ff 	mov.w	r2, #4294967295
 8005a7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <vTaskStartScheduler+0xc0>)
 8005a80:	2201      	movs	r2, #1
 8005a82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005a84:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <vTaskStartScheduler+0xc4>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a8a:	f001 f871 	bl	8006b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a8e:	e00d      	b.n	8005aac <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a96:	d109      	bne.n	8005aac <vTaskStartScheduler+0xa8>
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e7fe      	b.n	8005aaa <vTaskStartScheduler+0xa6>
}
 8005aac:	bf00      	nop
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	0800848c 	.word	0x0800848c
 8005ab8:	080060d9 	.word	0x080060d9
 8005abc:	20000c44 	.word	0x20000c44
 8005ac0:	20000c40 	.word	0x20000c40
 8005ac4:	20000c2c 	.word	0x20000c2c
 8005ac8:	20000c24 	.word	0x20000c24

08005acc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ad0:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <vTaskSuspendAll+0x18>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	4a03      	ldr	r2, [pc, #12]	; (8005ae4 <vTaskSuspendAll+0x18>)
 8005ad8:	6013      	str	r3, [r2, #0]
}
 8005ada:	bf00      	nop
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	20000c48 	.word	0x20000c48

08005ae8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005af6:	4b41      	ldr	r3, [pc, #260]	; (8005bfc <xTaskResumeAll+0x114>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d109      	bne.n	8005b12 <xTaskResumeAll+0x2a>
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	e7fe      	b.n	8005b10 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b12:	f001 f8cb 	bl	8006cac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b16:	4b39      	ldr	r3, [pc, #228]	; (8005bfc <xTaskResumeAll+0x114>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	4a37      	ldr	r2, [pc, #220]	; (8005bfc <xTaskResumeAll+0x114>)
 8005b1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b20:	4b36      	ldr	r3, [pc, #216]	; (8005bfc <xTaskResumeAll+0x114>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d162      	bne.n	8005bee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b28:	4b35      	ldr	r3, [pc, #212]	; (8005c00 <xTaskResumeAll+0x118>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d05e      	beq.n	8005bee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b30:	e02f      	b.n	8005b92 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005b32:	4b34      	ldr	r3, [pc, #208]	; (8005c04 <xTaskResumeAll+0x11c>)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3318      	adds	r3, #24
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fe ffe0 	bl	8004b04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3304      	adds	r3, #4
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fe ffdb 	bl	8004b04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b52:	4b2d      	ldr	r3, [pc, #180]	; (8005c08 <xTaskResumeAll+0x120>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d903      	bls.n	8005b62 <xTaskResumeAll+0x7a>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	4a2a      	ldr	r2, [pc, #168]	; (8005c08 <xTaskResumeAll+0x120>)
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4a27      	ldr	r2, [pc, #156]	; (8005c0c <xTaskResumeAll+0x124>)
 8005b70:	441a      	add	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3304      	adds	r3, #4
 8005b76:	4619      	mov	r1, r3
 8005b78:	4610      	mov	r0, r2
 8005b7a:	f7fe ff66 	bl	8004a4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b82:	4b23      	ldr	r3, [pc, #140]	; (8005c10 <xTaskResumeAll+0x128>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d302      	bcc.n	8005b92 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005b8c:	4b21      	ldr	r3, [pc, #132]	; (8005c14 <xTaskResumeAll+0x12c>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b92:	4b1c      	ldr	r3, [pc, #112]	; (8005c04 <xTaskResumeAll+0x11c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1cb      	bne.n	8005b32 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ba0:	f000 fb4c 	bl	800623c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ba4:	4b1c      	ldr	r3, [pc, #112]	; (8005c18 <xTaskResumeAll+0x130>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d010      	beq.n	8005bd2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bb0:	f000 f846 	bl	8005c40 <xTaskIncrementTick>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005bba:	4b16      	ldr	r3, [pc, #88]	; (8005c14 <xTaskResumeAll+0x12c>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f1      	bne.n	8005bb0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005bcc:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <xTaskResumeAll+0x130>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bd2:	4b10      	ldr	r3, [pc, #64]	; (8005c14 <xTaskResumeAll+0x12c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d009      	beq.n	8005bee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bde:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <xTaskResumeAll+0x134>)
 8005be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bee:	f001 f88b 	bl	8006d08 <vPortExitCritical>

	return xAlreadyYielded;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	20000c48 	.word	0x20000c48
 8005c00:	20000c20 	.word	0x20000c20
 8005c04:	20000be0 	.word	0x20000be0
 8005c08:	20000c28 	.word	0x20000c28
 8005c0c:	20000750 	.word	0x20000750
 8005c10:	2000074c 	.word	0x2000074c
 8005c14:	20000c34 	.word	0x20000c34
 8005c18:	20000c30 	.word	0x20000c30
 8005c1c:	e000ed04 	.word	0xe000ed04

08005c20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c26:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <xTaskGetTickCount+0x1c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c2c:	687b      	ldr	r3, [r7, #4]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	20000c24 	.word	0x20000c24

08005c40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c4a:	4b51      	ldr	r3, [pc, #324]	; (8005d90 <xTaskIncrementTick+0x150>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f040 808d 	bne.w	8005d6e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c54:	4b4f      	ldr	r3, [pc, #316]	; (8005d94 <xTaskIncrementTick+0x154>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c5c:	4a4d      	ldr	r2, [pc, #308]	; (8005d94 <xTaskIncrementTick+0x154>)
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d11f      	bne.n	8005ca8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c68:	4b4b      	ldr	r3, [pc, #300]	; (8005d98 <xTaskIncrementTick+0x158>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <xTaskIncrementTick+0x46>
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	e7fe      	b.n	8005c84 <xTaskIncrementTick+0x44>
 8005c86:	4b44      	ldr	r3, [pc, #272]	; (8005d98 <xTaskIncrementTick+0x158>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	4b43      	ldr	r3, [pc, #268]	; (8005d9c <xTaskIncrementTick+0x15c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a41      	ldr	r2, [pc, #260]	; (8005d98 <xTaskIncrementTick+0x158>)
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	4a41      	ldr	r2, [pc, #260]	; (8005d9c <xTaskIncrementTick+0x15c>)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	4b41      	ldr	r3, [pc, #260]	; (8005da0 <xTaskIncrementTick+0x160>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	4a3f      	ldr	r2, [pc, #252]	; (8005da0 <xTaskIncrementTick+0x160>)
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	f000 faca 	bl	800623c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ca8:	4b3e      	ldr	r3, [pc, #248]	; (8005da4 <xTaskIncrementTick+0x164>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d34e      	bcc.n	8005d50 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cb2:	4b39      	ldr	r3, [pc, #228]	; (8005d98 <xTaskIncrementTick+0x158>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <xTaskIncrementTick+0x80>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e000      	b.n	8005cc2 <xTaskIncrementTick+0x82>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc6:	4b37      	ldr	r3, [pc, #220]	; (8005da4 <xTaskIncrementTick+0x164>)
 8005cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ccc:	601a      	str	r2, [r3, #0]
					break;
 8005cce:	e03f      	b.n	8005d50 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005cd0:	4b31      	ldr	r3, [pc, #196]	; (8005d98 <xTaskIncrementTick+0x158>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d203      	bcs.n	8005cf0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ce8:	4a2e      	ldr	r2, [pc, #184]	; (8005da4 <xTaskIncrementTick+0x164>)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6013      	str	r3, [r2, #0]
						break;
 8005cee:	e02f      	b.n	8005d50 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fe ff05 	bl	8004b04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d004      	beq.n	8005d0c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	3318      	adds	r3, #24
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe fefc 	bl	8004b04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d10:	4b25      	ldr	r3, [pc, #148]	; (8005da8 <xTaskIncrementTick+0x168>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d903      	bls.n	8005d20 <xTaskIncrementTick+0xe0>
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	4a22      	ldr	r2, [pc, #136]	; (8005da8 <xTaskIncrementTick+0x168>)
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4a1f      	ldr	r2, [pc, #124]	; (8005dac <xTaskIncrementTick+0x16c>)
 8005d2e:	441a      	add	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f7fe fe87 	bl	8004a4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	4b1b      	ldr	r3, [pc, #108]	; (8005db0 <xTaskIncrementTick+0x170>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d3b3      	bcc.n	8005cb2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d4e:	e7b0      	b.n	8005cb2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d50:	4b17      	ldr	r3, [pc, #92]	; (8005db0 <xTaskIncrementTick+0x170>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d56:	4915      	ldr	r1, [pc, #84]	; (8005dac <xTaskIncrementTick+0x16c>)
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d907      	bls.n	8005d78 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	e004      	b.n	8005d78 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d6e:	4b11      	ldr	r3, [pc, #68]	; (8005db4 <xTaskIncrementTick+0x174>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	4a0f      	ldr	r2, [pc, #60]	; (8005db4 <xTaskIncrementTick+0x174>)
 8005d76:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d78:	4b0f      	ldr	r3, [pc, #60]	; (8005db8 <xTaskIncrementTick+0x178>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005d80:	2301      	movs	r3, #1
 8005d82:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d84:	697b      	ldr	r3, [r7, #20]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20000c48 	.word	0x20000c48
 8005d94:	20000c24 	.word	0x20000c24
 8005d98:	20000bd8 	.word	0x20000bd8
 8005d9c:	20000bdc 	.word	0x20000bdc
 8005da0:	20000c38 	.word	0x20000c38
 8005da4:	20000c40 	.word	0x20000c40
 8005da8:	20000c28 	.word	0x20000c28
 8005dac:	20000750 	.word	0x20000750
 8005db0:	2000074c 	.word	0x2000074c
 8005db4:	20000c30 	.word	0x20000c30
 8005db8:	20000c34 	.word	0x20000c34

08005dbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dc2:	4b27      	ldr	r3, [pc, #156]	; (8005e60 <vTaskSwitchContext+0xa4>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005dca:	4b26      	ldr	r3, [pc, #152]	; (8005e64 <vTaskSwitchContext+0xa8>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dd0:	e040      	b.n	8005e54 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005dd2:	4b24      	ldr	r3, [pc, #144]	; (8005e64 <vTaskSwitchContext+0xa8>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005dd8:	4b23      	ldr	r3, [pc, #140]	; (8005e68 <vTaskSwitchContext+0xac>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e00f      	b.n	8005e00 <vTaskSwitchContext+0x44>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <vTaskSwitchContext+0x3e>
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	607b      	str	r3, [r7, #4]
 8005df8:	e7fe      	b.n	8005df8 <vTaskSwitchContext+0x3c>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	491a      	ldr	r1, [pc, #104]	; (8005e6c <vTaskSwitchContext+0xb0>)
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0e5      	beq.n	8005de0 <vTaskSwitchContext+0x24>
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4a13      	ldr	r2, [pc, #76]	; (8005e6c <vTaskSwitchContext+0xb0>)
 8005e20:	4413      	add	r3, r2
 8005e22:	60bb      	str	r3, [r7, #8]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	605a      	str	r2, [r3, #4]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	3308      	adds	r3, #8
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d104      	bne.n	8005e44 <vTaskSwitchContext+0x88>
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	605a      	str	r2, [r3, #4]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	4a09      	ldr	r2, [pc, #36]	; (8005e70 <vTaskSwitchContext+0xb4>)
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	4a06      	ldr	r2, [pc, #24]	; (8005e68 <vTaskSwitchContext+0xac>)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6013      	str	r3, [r2, #0]
}
 8005e54:	bf00      	nop
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	20000c48 	.word	0x20000c48
 8005e64:	20000c34 	.word	0x20000c34
 8005e68:	20000c28 	.word	0x20000c28
 8005e6c:	20000750 	.word	0x20000750
 8005e70:	2000074c 	.word	0x2000074c

08005e74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d109      	bne.n	8005e98 <vTaskPlaceOnEventList+0x24>
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	e7fe      	b.n	8005e96 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e98:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <vTaskPlaceOnEventList+0x44>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3318      	adds	r3, #24
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7fe fdf6 	bl	8004a92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	6838      	ldr	r0, [r7, #0]
 8005eaa:	f000 fa77 	bl	800639c <prvAddCurrentTaskToDelayedList>
}
 8005eae:	bf00      	nop
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	2000074c 	.word	0x2000074c

08005ebc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d109      	bne.n	8005ee2 <vTaskPlaceOnEventListRestricted+0x26>
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	e7fe      	b.n	8005ee0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ee2:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <vTaskPlaceOnEventListRestricted+0x50>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3318      	adds	r3, #24
 8005ee8:	4619      	mov	r1, r3
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f7fe fdad 	bl	8004a4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8005efa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005efc:	6879      	ldr	r1, [r7, #4]
 8005efe:	68b8      	ldr	r0, [r7, #8]
 8005f00:	f000 fa4c 	bl	800639c <prvAddCurrentTaskToDelayedList>
	}
 8005f04:	bf00      	nop
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	2000074c 	.word	0x2000074c

08005f10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <xTaskRemoveFromEventList+0x2a>
 8005f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	e7fe      	b.n	8005f38 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	3318      	adds	r3, #24
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe fde0 	bl	8004b04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f44:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <xTaskRemoveFromEventList+0xac>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d11d      	bne.n	8005f88 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fe fdd7 	bl	8004b04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5a:	4b19      	ldr	r3, [pc, #100]	; (8005fc0 <xTaskRemoveFromEventList+0xb0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d903      	bls.n	8005f6a <xTaskRemoveFromEventList+0x5a>
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	4a16      	ldr	r2, [pc, #88]	; (8005fc0 <xTaskRemoveFromEventList+0xb0>)
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4a13      	ldr	r2, [pc, #76]	; (8005fc4 <xTaskRemoveFromEventList+0xb4>)
 8005f78:	441a      	add	r2, r3
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4610      	mov	r0, r2
 8005f82:	f7fe fd62 	bl	8004a4a <vListInsertEnd>
 8005f86:	e005      	b.n	8005f94 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	3318      	adds	r3, #24
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	480e      	ldr	r0, [pc, #56]	; (8005fc8 <xTaskRemoveFromEventList+0xb8>)
 8005f90:	f7fe fd5b 	bl	8004a4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f98:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <xTaskRemoveFromEventList+0xbc>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d905      	bls.n	8005fae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fa6:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <xTaskRemoveFromEventList+0xc0>)
 8005fa8:	2201      	movs	r2, #1
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	e001      	b.n	8005fb2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005fb2:	697b      	ldr	r3, [r7, #20]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	20000c48 	.word	0x20000c48
 8005fc0:	20000c28 	.word	0x20000c28
 8005fc4:	20000750 	.word	0x20000750
 8005fc8:	20000be0 	.word	0x20000be0
 8005fcc:	2000074c 	.word	0x2000074c
 8005fd0:	20000c34 	.word	0x20000c34

08005fd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fdc:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <vTaskInternalSetTimeOutState+0x24>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <vTaskInternalSetTimeOutState+0x28>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	605a      	str	r2, [r3, #4]
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	20000c38 	.word	0x20000c38
 8005ffc:	20000c24 	.word	0x20000c24

08006000 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d109      	bne.n	8006024 <xTaskCheckForTimeOut+0x24>
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	e7fe      	b.n	8006022 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d109      	bne.n	800603e <xTaskCheckForTimeOut+0x3e>
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	e7fe      	b.n	800603c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800603e:	f000 fe35 	bl	8006cac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006042:	4b1d      	ldr	r3, [pc, #116]	; (80060b8 <xTaskCheckForTimeOut+0xb8>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605a:	d102      	bne.n	8006062 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800605c:	2300      	movs	r3, #0
 800605e:	61fb      	str	r3, [r7, #28]
 8006060:	e023      	b.n	80060aa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b15      	ldr	r3, [pc, #84]	; (80060bc <xTaskCheckForTimeOut+0xbc>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d007      	beq.n	800607e <xTaskCheckForTimeOut+0x7e>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	429a      	cmp	r2, r3
 8006076:	d302      	bcc.n	800607e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006078:	2301      	movs	r3, #1
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	e015      	b.n	80060aa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	429a      	cmp	r2, r3
 8006086:	d20b      	bcs.n	80060a0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	1ad2      	subs	r2, r2, r3
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff ff9d 	bl	8005fd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	e004      	b.n	80060aa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060a6:	2301      	movs	r3, #1
 80060a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060aa:	f000 fe2d 	bl	8006d08 <vPortExitCritical>

	return xReturn;
 80060ae:	69fb      	ldr	r3, [r7, #28]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20000c24 	.word	0x20000c24
 80060bc:	20000c38 	.word	0x20000c38

080060c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060c4:	4b03      	ldr	r3, [pc, #12]	; (80060d4 <vTaskMissedYield+0x14>)
 80060c6:	2201      	movs	r2, #1
 80060c8:	601a      	str	r2, [r3, #0]
}
 80060ca:	bf00      	nop
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	20000c34 	.word	0x20000c34

080060d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060e0:	f000 f852 	bl	8006188 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <prvIdleTask+0x28>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d9f9      	bls.n	80060e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060ec:	4b05      	ldr	r3, [pc, #20]	; (8006104 <prvIdleTask+0x2c>)
 80060ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060fc:	e7f0      	b.n	80060e0 <prvIdleTask+0x8>
 80060fe:	bf00      	nop
 8006100:	20000750 	.word	0x20000750
 8006104:	e000ed04 	.word	0xe000ed04

08006108 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800610e:	2300      	movs	r3, #0
 8006110:	607b      	str	r3, [r7, #4]
 8006112:	e00c      	b.n	800612e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	4613      	mov	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4a12      	ldr	r2, [pc, #72]	; (8006168 <prvInitialiseTaskLists+0x60>)
 8006120:	4413      	add	r3, r2
 8006122:	4618      	mov	r0, r3
 8006124:	f7fe fc64 	bl	80049f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3301      	adds	r3, #1
 800612c:	607b      	str	r3, [r7, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b37      	cmp	r3, #55	; 0x37
 8006132:	d9ef      	bls.n	8006114 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006134:	480d      	ldr	r0, [pc, #52]	; (800616c <prvInitialiseTaskLists+0x64>)
 8006136:	f7fe fc5b 	bl	80049f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800613a:	480d      	ldr	r0, [pc, #52]	; (8006170 <prvInitialiseTaskLists+0x68>)
 800613c:	f7fe fc58 	bl	80049f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006140:	480c      	ldr	r0, [pc, #48]	; (8006174 <prvInitialiseTaskLists+0x6c>)
 8006142:	f7fe fc55 	bl	80049f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006146:	480c      	ldr	r0, [pc, #48]	; (8006178 <prvInitialiseTaskLists+0x70>)
 8006148:	f7fe fc52 	bl	80049f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800614c:	480b      	ldr	r0, [pc, #44]	; (800617c <prvInitialiseTaskLists+0x74>)
 800614e:	f7fe fc4f 	bl	80049f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006152:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <prvInitialiseTaskLists+0x78>)
 8006154:	4a05      	ldr	r2, [pc, #20]	; (800616c <prvInitialiseTaskLists+0x64>)
 8006156:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006158:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <prvInitialiseTaskLists+0x7c>)
 800615a:	4a05      	ldr	r2, [pc, #20]	; (8006170 <prvInitialiseTaskLists+0x68>)
 800615c:	601a      	str	r2, [r3, #0]
}
 800615e:	bf00      	nop
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20000750 	.word	0x20000750
 800616c:	20000bb0 	.word	0x20000bb0
 8006170:	20000bc4 	.word	0x20000bc4
 8006174:	20000be0 	.word	0x20000be0
 8006178:	20000bf4 	.word	0x20000bf4
 800617c:	20000c0c 	.word	0x20000c0c
 8006180:	20000bd8 	.word	0x20000bd8
 8006184:	20000bdc 	.word	0x20000bdc

08006188 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800618e:	e019      	b.n	80061c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006190:	f000 fd8c 	bl	8006cac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006194:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <prvCheckTasksWaitingTermination+0x4c>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3304      	adds	r3, #4
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fe fcaf 	bl	8004b04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061a6:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <prvCheckTasksWaitingTermination+0x50>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	4a0a      	ldr	r2, [pc, #40]	; (80061d8 <prvCheckTasksWaitingTermination+0x50>)
 80061ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <prvCheckTasksWaitingTermination+0x54>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	4a09      	ldr	r2, [pc, #36]	; (80061dc <prvCheckTasksWaitingTermination+0x54>)
 80061b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061ba:	f000 fda5 	bl	8006d08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f80e 	bl	80061e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061c4:	4b05      	ldr	r3, [pc, #20]	; (80061dc <prvCheckTasksWaitingTermination+0x54>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e1      	bne.n	8006190 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061cc:	bf00      	nop
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	20000bf4 	.word	0x20000bf4
 80061d8:	20000c20 	.word	0x20000c20
 80061dc:	20000c08 	.word	0x20000c08

080061e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d108      	bne.n	8006204 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 ff34 	bl	8007064 <vPortFree>
				vPortFree( pxTCB );
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 ff31 	bl	8007064 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006202:	e017      	b.n	8006234 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800620a:	2b01      	cmp	r3, #1
 800620c:	d103      	bne.n	8006216 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 ff28 	bl	8007064 <vPortFree>
	}
 8006214:	e00e      	b.n	8006234 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800621c:	2b02      	cmp	r3, #2
 800621e:	d009      	beq.n	8006234 <prvDeleteTCB+0x54>
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	e7fe      	b.n	8006232 <prvDeleteTCB+0x52>
	}
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006242:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <prvResetNextTaskUnblockTime+0x44>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <prvResetNextTaskUnblockTime+0x14>
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <prvResetNextTaskUnblockTime+0x16>
 8006250:	2300      	movs	r3, #0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d004      	beq.n	8006260 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006256:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <prvResetNextTaskUnblockTime+0x48>)
 8006258:	f04f 32ff 	mov.w	r2, #4294967295
 800625c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800625e:	e008      	b.n	8006272 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006260:	4b07      	ldr	r3, [pc, #28]	; (8006280 <prvResetNextTaskUnblockTime+0x44>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	4a05      	ldr	r2, [pc, #20]	; (8006284 <prvResetNextTaskUnblockTime+0x48>)
 8006270:	6013      	str	r3, [r2, #0]
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20000bd8 	.word	0x20000bd8
 8006284:	20000c40 	.word	0x20000c40

08006288 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800628e:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <xTaskGetSchedulerState+0x34>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d102      	bne.n	800629c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006296:	2301      	movs	r3, #1
 8006298:	607b      	str	r3, [r7, #4]
 800629a:	e008      	b.n	80062ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800629c:	4b08      	ldr	r3, [pc, #32]	; (80062c0 <xTaskGetSchedulerState+0x38>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d102      	bne.n	80062aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062a4:	2302      	movs	r3, #2
 80062a6:	607b      	str	r3, [r7, #4]
 80062a8:	e001      	b.n	80062ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062aa:	2300      	movs	r3, #0
 80062ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062ae:	687b      	ldr	r3, [r7, #4]
	}
 80062b0:	4618      	mov	r0, r3
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	20000c2c 	.word	0x20000c2c
 80062c0:	20000c48 	.word	0x20000c48

080062c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d054      	beq.n	8006384 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062da:	4b2d      	ldr	r3, [pc, #180]	; (8006390 <xTaskPriorityDisinherit+0xcc>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d009      	beq.n	80062f8 <xTaskPriorityDisinherit+0x34>
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	e7fe      	b.n	80062f6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d109      	bne.n	8006314 <xTaskPriorityDisinherit+0x50>
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	60bb      	str	r3, [r7, #8]
 8006312:	e7fe      	b.n	8006312 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	1e5a      	subs	r2, r3, #1
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006326:	429a      	cmp	r2, r3
 8006328:	d02c      	beq.n	8006384 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632e:	2b00      	cmp	r3, #0
 8006330:	d128      	bne.n	8006384 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	3304      	adds	r3, #4
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fbe4 	bl	8004b04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006354:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <xTaskPriorityDisinherit+0xd0>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d903      	bls.n	8006364 <xTaskPriorityDisinherit+0xa0>
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006360:	4a0c      	ldr	r2, [pc, #48]	; (8006394 <xTaskPriorityDisinherit+0xd0>)
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006368:	4613      	mov	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4a09      	ldr	r2, [pc, #36]	; (8006398 <xTaskPriorityDisinherit+0xd4>)
 8006372:	441a      	add	r2, r3
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	3304      	adds	r3, #4
 8006378:	4619      	mov	r1, r3
 800637a:	4610      	mov	r0, r2
 800637c:	f7fe fb65 	bl	8004a4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006380:	2301      	movs	r3, #1
 8006382:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006384:	697b      	ldr	r3, [r7, #20]
	}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	2000074c 	.word	0x2000074c
 8006394:	20000c28 	.word	0x20000c28
 8006398:	20000750 	.word	0x20000750

0800639c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063a6:	4b21      	ldr	r3, [pc, #132]	; (800642c <prvAddCurrentTaskToDelayedList+0x90>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063ac:	4b20      	ldr	r3, [pc, #128]	; (8006430 <prvAddCurrentTaskToDelayedList+0x94>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3304      	adds	r3, #4
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fe fba6 	bl	8004b04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063be:	d10a      	bne.n	80063d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d007      	beq.n	80063d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063c6:	4b1a      	ldr	r3, [pc, #104]	; (8006430 <prvAddCurrentTaskToDelayedList+0x94>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3304      	adds	r3, #4
 80063cc:	4619      	mov	r1, r3
 80063ce:	4819      	ldr	r0, [pc, #100]	; (8006434 <prvAddCurrentTaskToDelayedList+0x98>)
 80063d0:	f7fe fb3b 	bl	8004a4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063d4:	e026      	b.n	8006424 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4413      	add	r3, r2
 80063dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063de:	4b14      	ldr	r3, [pc, #80]	; (8006430 <prvAddCurrentTaskToDelayedList+0x94>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d209      	bcs.n	8006402 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ee:	4b12      	ldr	r3, [pc, #72]	; (8006438 <prvAddCurrentTaskToDelayedList+0x9c>)
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	4b0f      	ldr	r3, [pc, #60]	; (8006430 <prvAddCurrentTaskToDelayedList+0x94>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f7fe fb49 	bl	8004a92 <vListInsert>
}
 8006400:	e010      	b.n	8006424 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006402:	4b0e      	ldr	r3, [pc, #56]	; (800643c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <prvAddCurrentTaskToDelayedList+0x94>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3304      	adds	r3, #4
 800640c:	4619      	mov	r1, r3
 800640e:	4610      	mov	r0, r2
 8006410:	f7fe fb3f 	bl	8004a92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006414:	4b0a      	ldr	r3, [pc, #40]	; (8006440 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	429a      	cmp	r2, r3
 800641c:	d202      	bcs.n	8006424 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800641e:	4a08      	ldr	r2, [pc, #32]	; (8006440 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	6013      	str	r3, [r2, #0]
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	20000c24 	.word	0x20000c24
 8006430:	2000074c 	.word	0x2000074c
 8006434:	20000c0c 	.word	0x20000c0c
 8006438:	20000bdc 	.word	0x20000bdc
 800643c:	20000bd8 	.word	0x20000bd8
 8006440:	20000c40 	.word	0x20000c40

08006444 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	; 0x28
 8006448:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800644e:	f000 fac3 	bl	80069d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006452:	4b1c      	ldr	r3, [pc, #112]	; (80064c4 <xTimerCreateTimerTask+0x80>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d021      	beq.n	800649e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800645e:	2300      	movs	r3, #0
 8006460:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006462:	1d3a      	adds	r2, r7, #4
 8006464:	f107 0108 	add.w	r1, r7, #8
 8006468:	f107 030c 	add.w	r3, r7, #12
 800646c:	4618      	mov	r0, r3
 800646e:	f7fe faa5 	bl	80049bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	9202      	str	r2, [sp, #8]
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	2302      	movs	r3, #2
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	2300      	movs	r3, #0
 8006482:	460a      	mov	r2, r1
 8006484:	4910      	ldr	r1, [pc, #64]	; (80064c8 <xTimerCreateTimerTask+0x84>)
 8006486:	4811      	ldr	r0, [pc, #68]	; (80064cc <xTimerCreateTimerTask+0x88>)
 8006488:	f7ff f8f4 	bl	8005674 <xTaskCreateStatic>
 800648c:	4602      	mov	r2, r0
 800648e:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <xTimerCreateTimerTask+0x8c>)
 8006490:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006492:	4b0f      	ldr	r3, [pc, #60]	; (80064d0 <xTimerCreateTimerTask+0x8c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800649a:	2301      	movs	r3, #1
 800649c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <xTimerCreateTimerTask+0x74>
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	613b      	str	r3, [r7, #16]
 80064b6:	e7fe      	b.n	80064b6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80064b8:	697b      	ldr	r3, [r7, #20]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20000c7c 	.word	0x20000c7c
 80064c8:	08008494 	.word	0x08008494
 80064cc:	080065ed 	.word	0x080065ed
 80064d0:	20000c80 	.word	0x20000c80

080064d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08a      	sub	sp, #40	; 0x28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d109      	bne.n	8006500 <xTimerGenericCommand+0x2c>
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	623b      	str	r3, [r7, #32]
 80064fe:	e7fe      	b.n	80064fe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006500:	4b19      	ldr	r3, [pc, #100]	; (8006568 <xTimerGenericCommand+0x94>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d02a      	beq.n	800655e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b05      	cmp	r3, #5
 8006518:	dc18      	bgt.n	800654c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800651a:	f7ff feb5 	bl	8006288 <xTaskGetSchedulerState>
 800651e:	4603      	mov	r3, r0
 8006520:	2b02      	cmp	r3, #2
 8006522:	d109      	bne.n	8006538 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006524:	4b10      	ldr	r3, [pc, #64]	; (8006568 <xTimerGenericCommand+0x94>)
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	f107 0110 	add.w	r1, r7, #16
 800652c:	2300      	movs	r3, #0
 800652e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006530:	f7fe fc4c 	bl	8004dcc <xQueueGenericSend>
 8006534:	6278      	str	r0, [r7, #36]	; 0x24
 8006536:	e012      	b.n	800655e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <xTimerGenericCommand+0x94>)
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	f107 0110 	add.w	r1, r7, #16
 8006540:	2300      	movs	r3, #0
 8006542:	2200      	movs	r2, #0
 8006544:	f7fe fc42 	bl	8004dcc <xQueueGenericSend>
 8006548:	6278      	str	r0, [r7, #36]	; 0x24
 800654a:	e008      	b.n	800655e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800654c:	4b06      	ldr	r3, [pc, #24]	; (8006568 <xTimerGenericCommand+0x94>)
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	f107 0110 	add.w	r1, r7, #16
 8006554:	2300      	movs	r3, #0
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	f7fe fd32 	bl	8004fc0 <xQueueGenericSendFromISR>
 800655c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006560:	4618      	mov	r0, r3
 8006562:	3728      	adds	r7, #40	; 0x28
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20000c7c 	.word	0x20000c7c

0800656c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af02      	add	r7, sp, #8
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006576:	4b1c      	ldr	r3, [pc, #112]	; (80065e8 <prvProcessExpiredTimer+0x7c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	3304      	adds	r3, #4
 8006584:	4618      	mov	r0, r3
 8006586:	f7fe fabd 	bl	8004b04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d121      	bne.n	80065d6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	699a      	ldr	r2, [r3, #24]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	18d1      	adds	r1, r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	6978      	ldr	r0, [r7, #20]
 80065a0:	f000 f8c8 	bl	8006734 <prvInsertTimerInActiveList>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d015      	beq.n	80065d6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065aa:	2300      	movs	r3, #0
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	2300      	movs	r3, #0
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	2100      	movs	r1, #0
 80065b4:	6978      	ldr	r0, [r7, #20]
 80065b6:	f7ff ff8d 	bl	80064d4 <xTimerGenericCommand>
 80065ba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <prvProcessExpiredTimer+0x6a>
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e7fe      	b.n	80065d4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	6978      	ldr	r0, [r7, #20]
 80065dc:	4798      	blx	r3
}
 80065de:	bf00      	nop
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000c74 	.word	0x20000c74

080065ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065f4:	f107 0308 	add.w	r3, r7, #8
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 f857 	bl	80066ac <prvGetNextExpireTime>
 80065fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	4619      	mov	r1, r3
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 f803 	bl	8006610 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800660a:	f000 f8d5 	bl	80067b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800660e:	e7f1      	b.n	80065f4 <prvTimerTask+0x8>

08006610 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800661a:	f7ff fa57 	bl	8005acc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800661e:	f107 0308 	add.w	r3, r7, #8
 8006622:	4618      	mov	r0, r3
 8006624:	f000 f866 	bl	80066f4 <prvSampleTimeNow>
 8006628:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d130      	bne.n	8006692 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <prvProcessTimerOrBlockTask+0x3c>
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	429a      	cmp	r2, r3
 800663c:	d806      	bhi.n	800664c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800663e:	f7ff fa53 	bl	8005ae8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006642:	68f9      	ldr	r1, [r7, #12]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff ff91 	bl	800656c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800664a:	e024      	b.n	8006696 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d008      	beq.n	8006664 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006652:	4b13      	ldr	r3, [pc, #76]	; (80066a0 <prvProcessTimerOrBlockTask+0x90>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	bf0c      	ite	eq
 800665c:	2301      	moveq	r3, #1
 800665e:	2300      	movne	r3, #0
 8006660:	b2db      	uxtb	r3, r3
 8006662:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006664:	4b0f      	ldr	r3, [pc, #60]	; (80066a4 <prvProcessTimerOrBlockTask+0x94>)
 8006666:	6818      	ldr	r0, [r3, #0]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	4619      	mov	r1, r3
 8006672:	f7fe ffcb 	bl	800560c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006676:	f7ff fa37 	bl	8005ae8 <xTaskResumeAll>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006680:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <prvProcessTimerOrBlockTask+0x98>)
 8006682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	f3bf 8f6f 	isb	sy
}
 8006690:	e001      	b.n	8006696 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006692:	f7ff fa29 	bl	8005ae8 <xTaskResumeAll>
}
 8006696:	bf00      	nop
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000c78 	.word	0x20000c78
 80066a4:	20000c7c 	.word	0x20000c7c
 80066a8:	e000ed04 	.word	0xe000ed04

080066ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066b4:	4b0e      	ldr	r3, [pc, #56]	; (80066f0 <prvGetNextExpireTime+0x44>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bf0c      	ite	eq
 80066be:	2301      	moveq	r3, #1
 80066c0:	2300      	movne	r3, #0
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	461a      	mov	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d105      	bne.n	80066de <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066d2:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <prvGetNextExpireTime+0x44>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	e001      	b.n	80066e2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066e2:	68fb      	ldr	r3, [r7, #12]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	20000c74 	.word	0x20000c74

080066f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80066fc:	f7ff fa90 	bl	8005c20 <xTaskGetTickCount>
 8006700:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006702:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <prvSampleTimeNow+0x3c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	429a      	cmp	r2, r3
 800670a:	d205      	bcs.n	8006718 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800670c:	f000 f904 	bl	8006918 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	e002      	b.n	800671e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800671e:	4a04      	ldr	r2, [pc, #16]	; (8006730 <prvSampleTimeNow+0x3c>)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006724:	68fb      	ldr	r3, [r7, #12]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000c84 	.word	0x20000c84

08006734 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	d812      	bhi.n	8006780 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	1ad2      	subs	r2, r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	429a      	cmp	r2, r3
 8006766:	d302      	bcc.n	800676e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006768:	2301      	movs	r3, #1
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e01b      	b.n	80067a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800676e:	4b10      	ldr	r3, [pc, #64]	; (80067b0 <prvInsertTimerInActiveList+0x7c>)
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3304      	adds	r3, #4
 8006776:	4619      	mov	r1, r3
 8006778:	4610      	mov	r0, r2
 800677a:	f7fe f98a 	bl	8004a92 <vListInsert>
 800677e:	e012      	b.n	80067a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d206      	bcs.n	8006796 <prvInsertTimerInActiveList+0x62>
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d302      	bcc.n	8006796 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006790:	2301      	movs	r3, #1
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	e007      	b.n	80067a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006796:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <prvInsertTimerInActiveList+0x80>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3304      	adds	r3, #4
 800679e:	4619      	mov	r1, r3
 80067a0:	4610      	mov	r0, r2
 80067a2:	f7fe f976 	bl	8004a92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067a6:	697b      	ldr	r3, [r7, #20]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	20000c78 	.word	0x20000c78
 80067b4:	20000c74 	.word	0x20000c74

080067b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08e      	sub	sp, #56	; 0x38
 80067bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067be:	e099      	b.n	80068f4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	da17      	bge.n	80067f6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	3304      	adds	r3, #4
 80067ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80067cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d109      	bne.n	80067e6 <prvProcessReceivedCommands+0x2e>
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	61fb      	str	r3, [r7, #28]
 80067e4:	e7fe      	b.n	80067e4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ec:	6850      	ldr	r0, [r2, #4]
 80067ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067f0:	6892      	ldr	r2, [r2, #8]
 80067f2:	4611      	mov	r1, r2
 80067f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	db7a      	blt.n	80068f2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d004      	beq.n	8006812 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	3304      	adds	r3, #4
 800680c:	4618      	mov	r0, r3
 800680e:	f7fe f979 	bl	8004b04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006812:	463b      	mov	r3, r7
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff ff6d 	bl	80066f4 <prvSampleTimeNow>
 800681a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b09      	cmp	r3, #9
 8006820:	d868      	bhi.n	80068f4 <prvProcessReceivedCommands+0x13c>
 8006822:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <prvProcessReceivedCommands+0x70>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	08006851 	.word	0x08006851
 800682c:	08006851 	.word	0x08006851
 8006830:	08006851 	.word	0x08006851
 8006834:	080068f5 	.word	0x080068f5
 8006838:	080068ab 	.word	0x080068ab
 800683c:	080068e1 	.word	0x080068e1
 8006840:	08006851 	.word	0x08006851
 8006844:	08006851 	.word	0x08006851
 8006848:	080068f5 	.word	0x080068f5
 800684c:	080068ab 	.word	0x080068ab
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	18d1      	adds	r1, r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800685e:	f7ff ff69 	bl	8006734 <prvInsertTimerInActiveList>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d045      	beq.n	80068f4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800686e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d13d      	bne.n	80068f4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	441a      	add	r2, r3
 8006880:	2300      	movs	r3, #0
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	2300      	movs	r3, #0
 8006886:	2100      	movs	r1, #0
 8006888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800688a:	f7ff fe23 	bl	80064d4 <xTimerGenericCommand>
 800688e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d12e      	bne.n	80068f4 <prvProcessReceivedCommands+0x13c>
 8006896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	61bb      	str	r3, [r7, #24]
 80068a8:	e7fe      	b.n	80068a8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d109      	bne.n	80068cc <prvProcessReceivedCommands+0x114>
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	e7fe      	b.n	80068ca <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	699a      	ldr	r2, [r3, #24]
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	18d1      	adds	r1, r2, r3
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068da:	f7ff ff2b 	bl	8006734 <prvInsertTimerInActiveList>
					break;
 80068de:	e009      	b.n	80068f4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d104      	bne.n	80068f4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80068ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ec:	f000 fbba 	bl	8007064 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068f0:	e000      	b.n	80068f4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80068f2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068f4:	4b07      	ldr	r3, [pc, #28]	; (8006914 <prvProcessReceivedCommands+0x15c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	1d39      	adds	r1, r7, #4
 80068fa:	2200      	movs	r2, #0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe fbf3 	bl	80050e8 <xQueueReceive>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	f47f af5b 	bne.w	80067c0 <prvProcessReceivedCommands+0x8>
	}
}
 800690a:	bf00      	nop
 800690c:	3730      	adds	r7, #48	; 0x30
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20000c7c 	.word	0x20000c7c

08006918 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800691e:	e044      	b.n	80069aa <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006920:	4b2b      	ldr	r3, [pc, #172]	; (80069d0 <prvSwitchTimerLists+0xb8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800692a:	4b29      	ldr	r3, [pc, #164]	; (80069d0 <prvSwitchTimerLists+0xb8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3304      	adds	r3, #4
 8006938:	4618      	mov	r0, r3
 800693a:	f7fe f8e3 	bl	8004b04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d12d      	bne.n	80069aa <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	4413      	add	r3, r2
 8006956:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	429a      	cmp	r2, r3
 800695e:	d90e      	bls.n	800697e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800696c:	4b18      	ldr	r3, [pc, #96]	; (80069d0 <prvSwitchTimerLists+0xb8>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3304      	adds	r3, #4
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f7fe f88b 	bl	8004a92 <vListInsert>
 800697c:	e015      	b.n	80069aa <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800697e:	2300      	movs	r3, #0
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	2300      	movs	r3, #0
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	2100      	movs	r1, #0
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff fda3 	bl	80064d4 <xTimerGenericCommand>
 800698e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d109      	bne.n	80069aa <prvSwitchTimerLists+0x92>
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	e7fe      	b.n	80069a8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069aa:	4b09      	ldr	r3, [pc, #36]	; (80069d0 <prvSwitchTimerLists+0xb8>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1b5      	bne.n	8006920 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80069b4:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <prvSwitchTimerLists+0xb8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80069ba:	4b06      	ldr	r3, [pc, #24]	; (80069d4 <prvSwitchTimerLists+0xbc>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a04      	ldr	r2, [pc, #16]	; (80069d0 <prvSwitchTimerLists+0xb8>)
 80069c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80069c2:	4a04      	ldr	r2, [pc, #16]	; (80069d4 <prvSwitchTimerLists+0xbc>)
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	6013      	str	r3, [r2, #0]
}
 80069c8:	bf00      	nop
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	20000c74 	.word	0x20000c74
 80069d4:	20000c78 	.word	0x20000c78

080069d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80069de:	f000 f965 	bl	8006cac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069e2:	4b15      	ldr	r3, [pc, #84]	; (8006a38 <prvCheckForValidListAndQueue+0x60>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d120      	bne.n	8006a2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069ea:	4814      	ldr	r0, [pc, #80]	; (8006a3c <prvCheckForValidListAndQueue+0x64>)
 80069ec:	f7fe f800 	bl	80049f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069f0:	4813      	ldr	r0, [pc, #76]	; (8006a40 <prvCheckForValidListAndQueue+0x68>)
 80069f2:	f7fd fffd 	bl	80049f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069f6:	4b13      	ldr	r3, [pc, #76]	; (8006a44 <prvCheckForValidListAndQueue+0x6c>)
 80069f8:	4a10      	ldr	r2, [pc, #64]	; (8006a3c <prvCheckForValidListAndQueue+0x64>)
 80069fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80069fc:	4b12      	ldr	r3, [pc, #72]	; (8006a48 <prvCheckForValidListAndQueue+0x70>)
 80069fe:	4a10      	ldr	r2, [pc, #64]	; (8006a40 <prvCheckForValidListAndQueue+0x68>)
 8006a00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a02:	2300      	movs	r3, #0
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	4b11      	ldr	r3, [pc, #68]	; (8006a4c <prvCheckForValidListAndQueue+0x74>)
 8006a08:	4a11      	ldr	r2, [pc, #68]	; (8006a50 <prvCheckForValidListAndQueue+0x78>)
 8006a0a:	2110      	movs	r1, #16
 8006a0c:	200a      	movs	r0, #10
 8006a0e:	f7fe f90b 	bl	8004c28 <xQueueGenericCreateStatic>
 8006a12:	4602      	mov	r2, r0
 8006a14:	4b08      	ldr	r3, [pc, #32]	; (8006a38 <prvCheckForValidListAndQueue+0x60>)
 8006a16:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a18:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <prvCheckForValidListAndQueue+0x60>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d005      	beq.n	8006a2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a20:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <prvCheckForValidListAndQueue+0x60>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	490b      	ldr	r1, [pc, #44]	; (8006a54 <prvCheckForValidListAndQueue+0x7c>)
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fdc8 	bl	80055bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a2c:	f000 f96c 	bl	8006d08 <vPortExitCritical>
}
 8006a30:	bf00      	nop
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000c7c 	.word	0x20000c7c
 8006a3c:	20000c4c 	.word	0x20000c4c
 8006a40:	20000c60 	.word	0x20000c60
 8006a44:	20000c74 	.word	0x20000c74
 8006a48:	20000c78 	.word	0x20000c78
 8006a4c:	20000d28 	.word	0x20000d28
 8006a50:	20000c88 	.word	0x20000c88
 8006a54:	0800849c 	.word	0x0800849c

08006a58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3b04      	subs	r3, #4
 8006a68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3b04      	subs	r3, #4
 8006a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f023 0201 	bic.w	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3b04      	subs	r3, #4
 8006a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a88:	4a0c      	ldr	r2, [pc, #48]	; (8006abc <pxPortInitialiseStack+0x64>)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3b14      	subs	r3, #20
 8006a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3b04      	subs	r3, #4
 8006a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f06f 0202 	mvn.w	r2, #2
 8006aa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3b20      	subs	r3, #32
 8006aac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006aae:	68fb      	ldr	r3, [r7, #12]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	08006ac1 	.word	0x08006ac1

08006ac0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006aca:	4b11      	ldr	r3, [pc, #68]	; (8006b10 <prvTaskExitError+0x50>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad2:	d009      	beq.n	8006ae8 <prvTaskExitError+0x28>
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	e7fe      	b.n	8006ae6 <prvTaskExitError+0x26>
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006afa:	bf00      	nop
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0fc      	beq.n	8006afc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b02:	bf00      	nop
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	20000008 	.word	0x20000008
	...

08006b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b20:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <pxCurrentTCBConst2>)
 8006b22:	6819      	ldr	r1, [r3, #0]
 8006b24:	6808      	ldr	r0, [r1, #0]
 8006b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2a:	f380 8809 	msr	PSP, r0
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f04f 0000 	mov.w	r0, #0
 8006b36:	f380 8811 	msr	BASEPRI, r0
 8006b3a:	4770      	bx	lr
 8006b3c:	f3af 8000 	nop.w

08006b40 <pxCurrentTCBConst2>:
 8006b40:	2000074c 	.word	0x2000074c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop

08006b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b48:	4808      	ldr	r0, [pc, #32]	; (8006b6c <prvPortStartFirstTask+0x24>)
 8006b4a:	6800      	ldr	r0, [r0, #0]
 8006b4c:	6800      	ldr	r0, [r0, #0]
 8006b4e:	f380 8808 	msr	MSP, r0
 8006b52:	f04f 0000 	mov.w	r0, #0
 8006b56:	f380 8814 	msr	CONTROL, r0
 8006b5a:	b662      	cpsie	i
 8006b5c:	b661      	cpsie	f
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	df00      	svc	0
 8006b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b6a:	bf00      	nop
 8006b6c:	e000ed08 	.word	0xe000ed08

08006b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b76:	4b44      	ldr	r3, [pc, #272]	; (8006c88 <xPortStartScheduler+0x118>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a44      	ldr	r2, [pc, #272]	; (8006c8c <xPortStartScheduler+0x11c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d109      	bne.n	8006b94 <xPortStartScheduler+0x24>
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	613b      	str	r3, [r7, #16]
 8006b92:	e7fe      	b.n	8006b92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b94:	4b3c      	ldr	r3, [pc, #240]	; (8006c88 <xPortStartScheduler+0x118>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a3d      	ldr	r2, [pc, #244]	; (8006c90 <xPortStartScheduler+0x120>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d109      	bne.n	8006bb2 <xPortStartScheduler+0x42>
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e7fe      	b.n	8006bb0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bb2:	4b38      	ldr	r3, [pc, #224]	; (8006c94 <xPortStartScheduler+0x124>)
 8006bb4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	22ff      	movs	r2, #255	; 0xff
 8006bc2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	4b30      	ldr	r3, [pc, #192]	; (8006c98 <xPortStartScheduler+0x128>)
 8006bd8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bda:	4b30      	ldr	r3, [pc, #192]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006bdc:	2207      	movs	r2, #7
 8006bde:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006be0:	e009      	b.n	8006bf6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006be2:	4b2e      	ldr	r3, [pc, #184]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	4a2c      	ldr	r2, [pc, #176]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006bea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bec:	78fb      	ldrb	r3, [r7, #3]
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfe:	2b80      	cmp	r3, #128	; 0x80
 8006c00:	d0ef      	beq.n	8006be2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c02:	4b26      	ldr	r3, [pc, #152]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f1c3 0307 	rsb	r3, r3, #7
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d009      	beq.n	8006c22 <xPortStartScheduler+0xb2>
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	60bb      	str	r3, [r7, #8]
 8006c20:	e7fe      	b.n	8006c20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c22:	4b1e      	ldr	r3, [pc, #120]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	4a1c      	ldr	r2, [pc, #112]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006c2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c2c:	4b1b      	ldr	r3, [pc, #108]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c34:	4a19      	ldr	r2, [pc, #100]	; (8006c9c <xPortStartScheduler+0x12c>)
 8006c36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c40:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <xPortStartScheduler+0x130>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a16      	ldr	r2, [pc, #88]	; (8006ca0 <xPortStartScheduler+0x130>)
 8006c46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c4c:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <xPortStartScheduler+0x130>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a13      	ldr	r2, [pc, #76]	; (8006ca0 <xPortStartScheduler+0x130>)
 8006c52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c58:	f000 f8d6 	bl	8006e08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c5c:	4b11      	ldr	r3, [pc, #68]	; (8006ca4 <xPortStartScheduler+0x134>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c62:	f000 f8f5 	bl	8006e50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c66:	4b10      	ldr	r3, [pc, #64]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a0f      	ldr	r2, [pc, #60]	; (8006ca8 <xPortStartScheduler+0x138>)
 8006c6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c72:	f7ff ff69 	bl	8006b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c76:	f7ff f8a1 	bl	8005dbc <vTaskSwitchContext>
	prvTaskExitError();
 8006c7a:	f7ff ff21 	bl	8006ac0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	e000ed00 	.word	0xe000ed00
 8006c8c:	410fc271 	.word	0x410fc271
 8006c90:	410fc270 	.word	0x410fc270
 8006c94:	e000e400 	.word	0xe000e400
 8006c98:	20000d78 	.word	0x20000d78
 8006c9c:	20000d7c 	.word	0x20000d7c
 8006ca0:	e000ed20 	.word	0xe000ed20
 8006ca4:	20000008 	.word	0x20000008
 8006ca8:	e000ef34 	.word	0xe000ef34

08006cac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006cc4:	4b0e      	ldr	r3, [pc, #56]	; (8006d00 <vPortEnterCritical+0x54>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	4a0d      	ldr	r2, [pc, #52]	; (8006d00 <vPortEnterCritical+0x54>)
 8006ccc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cce:	4b0c      	ldr	r3, [pc, #48]	; (8006d00 <vPortEnterCritical+0x54>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d10e      	bne.n	8006cf4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <vPortEnterCritical+0x58>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d009      	beq.n	8006cf4 <vPortEnterCritical+0x48>
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	603b      	str	r3, [r7, #0]
 8006cf2:	e7fe      	b.n	8006cf2 <vPortEnterCritical+0x46>
	}
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	20000008 	.word	0x20000008
 8006d04:	e000ed04 	.word	0xe000ed04

08006d08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d0e:	4b11      	ldr	r3, [pc, #68]	; (8006d54 <vPortExitCritical+0x4c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <vPortExitCritical+0x22>
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	607b      	str	r3, [r7, #4]
 8006d28:	e7fe      	b.n	8006d28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006d2a:	4b0a      	ldr	r3, [pc, #40]	; (8006d54 <vPortExitCritical+0x4c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	4a08      	ldr	r2, [pc, #32]	; (8006d54 <vPortExitCritical+0x4c>)
 8006d32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d34:	4b07      	ldr	r3, [pc, #28]	; (8006d54 <vPortExitCritical+0x4c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <vPortExitCritical+0x3e>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	20000008 	.word	0x20000008
	...

08006d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d60:	f3ef 8009 	mrs	r0, PSP
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <pxCurrentTCBConst>)
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	f01e 0f10 	tst.w	lr, #16
 8006d70:	bf08      	it	eq
 8006d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7a:	6010      	str	r0, [r2, #0]
 8006d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d84:	f380 8811 	msr	BASEPRI, r0
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f7ff f814 	bl	8005dbc <vTaskSwitchContext>
 8006d94:	f04f 0000 	mov.w	r0, #0
 8006d98:	f380 8811 	msr	BASEPRI, r0
 8006d9c:	bc09      	pop	{r0, r3}
 8006d9e:	6819      	ldr	r1, [r3, #0]
 8006da0:	6808      	ldr	r0, [r1, #0]
 8006da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da6:	f01e 0f10 	tst.w	lr, #16
 8006daa:	bf08      	it	eq
 8006dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006db0:	f380 8809 	msr	PSP, r0
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	f3af 8000 	nop.w

08006dc0 <pxCurrentTCBConst>:
 8006dc0:	2000074c 	.word	0x2000074c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop

08006dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006de0:	f7fe ff2e 	bl	8005c40 <xTaskIncrementTick>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dea:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <SysTick_Handler+0x3c>)
 8006dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	2300      	movs	r3, #0
 8006df4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	e000ed04 	.word	0xe000ed04

08006e08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e0c:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <vPortSetupTimerInterrupt+0x34>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e12:	4b0b      	ldr	r3, [pc, #44]	; (8006e40 <vPortSetupTimerInterrupt+0x38>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e18:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <vPortSetupTimerInterrupt+0x3c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a0a      	ldr	r2, [pc, #40]	; (8006e48 <vPortSetupTimerInterrupt+0x40>)
 8006e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e22:	099b      	lsrs	r3, r3, #6
 8006e24:	4a09      	ldr	r2, [pc, #36]	; (8006e4c <vPortSetupTimerInterrupt+0x44>)
 8006e26:	3b01      	subs	r3, #1
 8006e28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e2a:	4b04      	ldr	r3, [pc, #16]	; (8006e3c <vPortSetupTimerInterrupt+0x34>)
 8006e2c:	2207      	movs	r2, #7
 8006e2e:	601a      	str	r2, [r3, #0]
}
 8006e30:	bf00      	nop
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	e000e010 	.word	0xe000e010
 8006e40:	e000e018 	.word	0xe000e018
 8006e44:	2000000c 	.word	0x2000000c
 8006e48:	10624dd3 	.word	0x10624dd3
 8006e4c:	e000e014 	.word	0xe000e014

08006e50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e60 <vPortEnableVFP+0x10>
 8006e54:	6801      	ldr	r1, [r0, #0]
 8006e56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e5a:	6001      	str	r1, [r0, #0]
 8006e5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e5e:	bf00      	nop
 8006e60:	e000ed88 	.word	0xe000ed88

08006e64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e6a:	f3ef 8305 	mrs	r3, IPSR
 8006e6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2b0f      	cmp	r3, #15
 8006e74:	d913      	bls.n	8006e9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e76:	4a16      	ldr	r2, [pc, #88]	; (8006ed0 <vPortValidateInterruptPriority+0x6c>)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e80:	4b14      	ldr	r3, [pc, #80]	; (8006ed4 <vPortValidateInterruptPriority+0x70>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	7afa      	ldrb	r2, [r7, #11]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d209      	bcs.n	8006e9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	607b      	str	r3, [r7, #4]
 8006e9c:	e7fe      	b.n	8006e9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e9e:	4b0e      	ldr	r3, [pc, #56]	; (8006ed8 <vPortValidateInterruptPriority+0x74>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <vPortValidateInterruptPriority+0x78>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d909      	bls.n	8006ec2 <vPortValidateInterruptPriority+0x5e>
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	603b      	str	r3, [r7, #0]
 8006ec0:	e7fe      	b.n	8006ec0 <vPortValidateInterruptPriority+0x5c>
	}
 8006ec2:	bf00      	nop
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	e000e3f0 	.word	0xe000e3f0
 8006ed4:	20000d78 	.word	0x20000d78
 8006ed8:	e000ed0c 	.word	0xe000ed0c
 8006edc:	20000d7c 	.word	0x20000d7c

08006ee0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08a      	sub	sp, #40	; 0x28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006eec:	f7fe fdee 	bl	8005acc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ef0:	4b57      	ldr	r3, [pc, #348]	; (8007050 <pvPortMalloc+0x170>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ef8:	f000 f90c 	bl	8007114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006efc:	4b55      	ldr	r3, [pc, #340]	; (8007054 <pvPortMalloc+0x174>)
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4013      	ands	r3, r2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f040 808c 	bne.w	8007022 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01c      	beq.n	8006f4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006f10:	2208      	movs	r2, #8
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4413      	add	r3, r2
 8006f16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d013      	beq.n	8006f4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f023 0307 	bic.w	r3, r3, #7
 8006f28:	3308      	adds	r3, #8
 8006f2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f003 0307 	and.w	r3, r3, #7
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <pvPortMalloc+0x6a>
 8006f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	e7fe      	b.n	8006f48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d068      	beq.n	8007022 <pvPortMalloc+0x142>
 8006f50:	4b41      	ldr	r3, [pc, #260]	; (8007058 <pvPortMalloc+0x178>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d863      	bhi.n	8007022 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f5a:	4b40      	ldr	r3, [pc, #256]	; (800705c <pvPortMalloc+0x17c>)
 8006f5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f5e:	4b3f      	ldr	r3, [pc, #252]	; (800705c <pvPortMalloc+0x17c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f64:	e004      	b.n	8006f70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d903      	bls.n	8006f82 <pvPortMalloc+0xa2>
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1f1      	bne.n	8006f66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f82:	4b33      	ldr	r3, [pc, #204]	; (8007050 <pvPortMalloc+0x170>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d04a      	beq.n	8007022 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2208      	movs	r2, #8
 8006f92:	4413      	add	r3, r2
 8006f94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	1ad2      	subs	r2, r2, r3
 8006fa6:	2308      	movs	r3, #8
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d91e      	bls.n	8006fec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d009      	beq.n	8006fd4 <pvPortMalloc+0xf4>
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	e7fe      	b.n	8006fd2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	1ad2      	subs	r2, r2, r3
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fe6:	69b8      	ldr	r0, [r7, #24]
 8006fe8:	f000 f8f6 	bl	80071d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fec:	4b1a      	ldr	r3, [pc, #104]	; (8007058 <pvPortMalloc+0x178>)
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	4a18      	ldr	r2, [pc, #96]	; (8007058 <pvPortMalloc+0x178>)
 8006ff8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ffa:	4b17      	ldr	r3, [pc, #92]	; (8007058 <pvPortMalloc+0x178>)
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	4b18      	ldr	r3, [pc, #96]	; (8007060 <pvPortMalloc+0x180>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	429a      	cmp	r2, r3
 8007004:	d203      	bcs.n	800700e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007006:	4b14      	ldr	r3, [pc, #80]	; (8007058 <pvPortMalloc+0x178>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a15      	ldr	r2, [pc, #84]	; (8007060 <pvPortMalloc+0x180>)
 800700c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	4b10      	ldr	r3, [pc, #64]	; (8007054 <pvPortMalloc+0x174>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	431a      	orrs	r2, r3
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007022:	f7fe fd61 	bl	8005ae8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	f003 0307 	and.w	r3, r3, #7
 800702c:	2b00      	cmp	r3, #0
 800702e:	d009      	beq.n	8007044 <pvPortMalloc+0x164>
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	60fb      	str	r3, [r7, #12]
 8007042:	e7fe      	b.n	8007042 <pvPortMalloc+0x162>
	return pvReturn;
 8007044:	69fb      	ldr	r3, [r7, #28]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3728      	adds	r7, #40	; 0x28
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20001988 	.word	0x20001988
 8007054:	20001994 	.word	0x20001994
 8007058:	2000198c 	.word	0x2000198c
 800705c:	20001980 	.word	0x20001980
 8007060:	20001990 	.word	0x20001990

08007064 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d046      	beq.n	8007104 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007076:	2308      	movs	r3, #8
 8007078:	425b      	negs	r3, r3
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	4413      	add	r3, r2
 800707e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	4b20      	ldr	r3, [pc, #128]	; (800710c <vPortFree+0xa8>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4013      	ands	r3, r2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d109      	bne.n	80070a6 <vPortFree+0x42>
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	e7fe      	b.n	80070a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d009      	beq.n	80070c2 <vPortFree+0x5e>
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	60bb      	str	r3, [r7, #8]
 80070c0:	e7fe      	b.n	80070c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	4b11      	ldr	r3, [pc, #68]	; (800710c <vPortFree+0xa8>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d019      	beq.n	8007104 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d115      	bne.n	8007104 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	4b0b      	ldr	r3, [pc, #44]	; (800710c <vPortFree+0xa8>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	43db      	mvns	r3, r3
 80070e2:	401a      	ands	r2, r3
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070e8:	f7fe fcf0 	bl	8005acc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	4b07      	ldr	r3, [pc, #28]	; (8007110 <vPortFree+0xac>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4413      	add	r3, r2
 80070f6:	4a06      	ldr	r2, [pc, #24]	; (8007110 <vPortFree+0xac>)
 80070f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070fa:	6938      	ldr	r0, [r7, #16]
 80070fc:	f000 f86c 	bl	80071d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007100:	f7fe fcf2 	bl	8005ae8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007104:	bf00      	nop
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20001994 	.word	0x20001994
 8007110:	2000198c 	.word	0x2000198c

08007114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800711a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800711e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007120:	4b27      	ldr	r3, [pc, #156]	; (80071c0 <prvHeapInit+0xac>)
 8007122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00c      	beq.n	8007148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3307      	adds	r3, #7
 8007132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0307 	bic.w	r3, r3, #7
 800713a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	4a1f      	ldr	r2, [pc, #124]	; (80071c0 <prvHeapInit+0xac>)
 8007144:	4413      	add	r3, r2
 8007146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800714c:	4a1d      	ldr	r2, [pc, #116]	; (80071c4 <prvHeapInit+0xb0>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007152:	4b1c      	ldr	r3, [pc, #112]	; (80071c4 <prvHeapInit+0xb0>)
 8007154:	2200      	movs	r2, #0
 8007156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4413      	add	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007160:	2208      	movs	r2, #8
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0307 	bic.w	r3, r3, #7
 800716e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4a15      	ldr	r2, [pc, #84]	; (80071c8 <prvHeapInit+0xb4>)
 8007174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007176:	4b14      	ldr	r3, [pc, #80]	; (80071c8 <prvHeapInit+0xb4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2200      	movs	r2, #0
 800717c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800717e:	4b12      	ldr	r3, [pc, #72]	; (80071c8 <prvHeapInit+0xb4>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007194:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <prvHeapInit+0xb4>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	4a0a      	ldr	r2, [pc, #40]	; (80071cc <prvHeapInit+0xb8>)
 80071a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <prvHeapInit+0xbc>)
 80071aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071ac:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <prvHeapInit+0xc0>)
 80071ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071b2:	601a      	str	r2, [r3, #0]
}
 80071b4:	bf00      	nop
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	20000d80 	.word	0x20000d80
 80071c4:	20001980 	.word	0x20001980
 80071c8:	20001988 	.word	0x20001988
 80071cc:	20001990 	.word	0x20001990
 80071d0:	2000198c 	.word	0x2000198c
 80071d4:	20001994 	.word	0x20001994

080071d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071e0:	4b28      	ldr	r3, [pc, #160]	; (8007284 <prvInsertBlockIntoFreeList+0xac>)
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	e002      	b.n	80071ec <prvInsertBlockIntoFreeList+0x14>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d8f7      	bhi.n	80071e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	4413      	add	r3, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	429a      	cmp	r2, r3
 8007206:	d108      	bne.n	800721a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	441a      	add	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	441a      	add	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d118      	bne.n	8007260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b15      	ldr	r3, [pc, #84]	; (8007288 <prvInsertBlockIntoFreeList+0xb0>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d00d      	beq.n	8007256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	441a      	add	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e008      	b.n	8007268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007256:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <prvInsertBlockIntoFreeList+0xb0>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	e003      	b.n	8007268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	429a      	cmp	r2, r3
 800726e:	d002      	beq.n	8007276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007276:	bf00      	nop
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20001980 	.word	0x20001980
 8007288:	20001988 	.word	0x20001988

0800728c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8007292:	463b      	mov	r3, r7
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	605a      	str	r2, [r3, #4]
 800729a:	609a      	str	r2, [r3, #8]
 800729c:	60da      	str	r2, [r3, #12]
 800729e:	611a      	str	r2, [r3, #16]
 80072a0:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80072a2:	4b28      	ldr	r3, [pc, #160]	; (8007344 <MX_ADC1_Init+0xb8>)
 80072a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80072aa:	4b26      	ldr	r3, [pc, #152]	; (8007344 <MX_ADC1_Init+0xb8>)
 80072ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80072b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80072b2:	4b24      	ldr	r3, [pc, #144]	; (8007344 <MX_ADC1_Init+0xb8>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80072b8:	4b22      	ldr	r3, [pc, #136]	; (8007344 <MX_ADC1_Init+0xb8>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80072be:	4b21      	ldr	r3, [pc, #132]	; (8007344 <MX_ADC1_Init+0xb8>)
 80072c0:	2201      	movs	r2, #1
 80072c2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80072c4:	4b1f      	ldr	r3, [pc, #124]	; (8007344 <MX_ADC1_Init+0xb8>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80072cc:	4b1d      	ldr	r3, [pc, #116]	; (8007344 <MX_ADC1_Init+0xb8>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80072d2:	4b1c      	ldr	r3, [pc, #112]	; (8007344 <MX_ADC1_Init+0xb8>)
 80072d4:	2201      	movs	r2, #1
 80072d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80072d8:	4b1a      	ldr	r3, [pc, #104]	; (8007344 <MX_ADC1_Init+0xb8>)
 80072da:	2200      	movs	r2, #0
 80072dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80072de:	4b19      	ldr	r3, [pc, #100]	; (8007344 <MX_ADC1_Init+0xb8>)
 80072e0:	2201      	movs	r2, #1
 80072e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80072e4:	4b17      	ldr	r3, [pc, #92]	; (8007344 <MX_ADC1_Init+0xb8>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80072ec:	4b15      	ldr	r3, [pc, #84]	; (8007344 <MX_ADC1_Init+0xb8>)
 80072ee:	2204      	movs	r2, #4
 80072f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80072f2:	4b14      	ldr	r3, [pc, #80]	; (8007344 <MX_ADC1_Init+0xb8>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80072f8:	4b12      	ldr	r3, [pc, #72]	; (8007344 <MX_ADC1_Init+0xb8>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80072fe:	4811      	ldr	r0, [pc, #68]	; (8007344 <MX_ADC1_Init+0xb8>)
 8007300:	f7f9 f808 	bl	8000314 <HAL_ADC_Init>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 800730a:	f000 fa2d 	bl	8007768 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800730e:	2306      	movs	r3, #6
 8007310:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007312:	2301      	movs	r3, #1
 8007314:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8007316:	2301      	movs	r3, #1
 8007318:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800731a:	2300      	movs	r3, #0
 800731c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800731e:	2300      	movs	r3, #0
 8007320:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007326:	463b      	mov	r3, r7
 8007328:	4619      	mov	r1, r3
 800732a:	4806      	ldr	r0, [pc, #24]	; (8007344 <MX_ADC1_Init+0xb8>)
 800732c:	f7f9 fd56 	bl	8000ddc <HAL_ADC_ConfigChannel>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8007336:	f000 fa17 	bl	8007768 <Error_Handler>
  }

}
 800733a:	bf00      	nop
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	200019e8 	.word	0x200019e8

08007348 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b08a      	sub	sp, #40	; 0x28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007350:	f107 0314 	add.w	r3, r7, #20
 8007354:	2200      	movs	r2, #0
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	605a      	str	r2, [r3, #4]
 800735a:	609a      	str	r2, [r3, #8]
 800735c:	60da      	str	r2, [r3, #12]
 800735e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007368:	d12b      	bne.n	80073c2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800736a:	4b18      	ldr	r3, [pc, #96]	; (80073cc <HAL_ADC_MspInit+0x84>)
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	4a17      	ldr	r2, [pc, #92]	; (80073cc <HAL_ADC_MspInit+0x84>)
 8007370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007374:	6153      	str	r3, [r2, #20]
 8007376:	4b15      	ldr	r3, [pc, #84]	; (80073cc <HAL_ADC_MspInit+0x84>)
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007382:	4b12      	ldr	r3, [pc, #72]	; (80073cc <HAL_ADC_MspInit+0x84>)
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	4a11      	ldr	r2, [pc, #68]	; (80073cc <HAL_ADC_MspInit+0x84>)
 8007388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800738c:	6153      	str	r3, [r2, #20]
 800738e:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <HAL_ADC_MspInit+0x84>)
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800739a:	2303      	movs	r3, #3
 800739c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800739e:	2303      	movs	r3, #3
 80073a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073a6:	f107 0314 	add.w	r3, r7, #20
 80073aa:	4619      	mov	r1, r3
 80073ac:	4808      	ldr	r0, [pc, #32]	; (80073d0 <HAL_ADC_MspInit+0x88>)
 80073ae:	f7fa fb0d 	bl	80019cc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80073b2:	2200      	movs	r2, #0
 80073b4:	2105      	movs	r1, #5
 80073b6:	2012      	movs	r0, #18
 80073b8:	f7fa fac4 	bl	8001944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80073bc:	2012      	movs	r0, #18
 80073be:	f7fa faed 	bl	800199c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80073c2:	bf00      	nop
 80073c4:	3728      	adds	r7, #40	; 0x28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	40021000 	.word	0x40021000
 80073d0:	48000800 	.word	0x48000800

080073d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of dataQueue */
  dataQueueHandle = osMessageQueueNew (128, sizeof(uint32_t), &dataQueue_attributes);
 80073d8:	4a10      	ldr	r2, [pc, #64]	; (800741c <MX_FREERTOS_Init+0x48>)
 80073da:	2104      	movs	r1, #4
 80073dc:	2080      	movs	r0, #128	; 0x80
 80073de:	f7fd f9db 	bl	8004798 <osMessageQueueNew>
 80073e2:	4602      	mov	r2, r0
 80073e4:	4b0e      	ldr	r3, [pc, #56]	; (8007420 <MX_FREERTOS_Init+0x4c>)
 80073e6:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of measureTask */
  measureTaskHandle = osThreadNew(StartMeasurement, NULL, &measureTask_attributes);
 80073e8:	4a0e      	ldr	r2, [pc, #56]	; (8007424 <MX_FREERTOS_Init+0x50>)
 80073ea:	2100      	movs	r1, #0
 80073ec:	480e      	ldr	r0, [pc, #56]	; (8007428 <MX_FREERTOS_Init+0x54>)
 80073ee:	f7fd f8fb 	bl	80045e8 <osThreadNew>
 80073f2:	4602      	mov	r2, r0
 80073f4:	4b0d      	ldr	r3, [pc, #52]	; (800742c <MX_FREERTOS_Init+0x58>)
 80073f6:	601a      	str	r2, [r3, #0]

  /* creation of UARTTransmit */
  UARTTransmitHandle = osThreadNew(TransmitTask, NULL, &UARTTransmit_attributes);
 80073f8:	4a0d      	ldr	r2, [pc, #52]	; (8007430 <MX_FREERTOS_Init+0x5c>)
 80073fa:	2100      	movs	r1, #0
 80073fc:	480d      	ldr	r0, [pc, #52]	; (8007434 <MX_FREERTOS_Init+0x60>)
 80073fe:	f7fd f8f3 	bl	80045e8 <osThreadNew>
 8007402:	4602      	mov	r2, r0
 8007404:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <MX_FREERTOS_Init+0x64>)
 8007406:	601a      	str	r2, [r3, #0]

  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(HeartBeatTask, NULL, &HeartBeat_attributes);
 8007408:	4a0c      	ldr	r2, [pc, #48]	; (800743c <MX_FREERTOS_Init+0x68>)
 800740a:	2100      	movs	r1, #0
 800740c:	480c      	ldr	r0, [pc, #48]	; (8007440 <MX_FREERTOS_Init+0x6c>)
 800740e:	f7fd f8eb 	bl	80045e8 <osThreadNew>
 8007412:	4602      	mov	r2, r0
 8007414:	4b0b      	ldr	r3, [pc, #44]	; (8007444 <MX_FREERTOS_Init+0x70>)
 8007416:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8007418:	bf00      	nop
 800741a:	bd80      	pop	{r7, pc}
 800741c:	08008574 	.word	0x08008574
 8007420:	20001a44 	.word	0x20001a44
 8007424:	08008508 	.word	0x08008508
 8007428:	08007449 	.word	0x08007449
 800742c:	20001a3c 	.word	0x20001a3c
 8007430:	0800852c 	.word	0x0800852c
 8007434:	080074c1 	.word	0x080074c1
 8007438:	20001a38 	.word	0x20001a38
 800743c:	08008550 	.word	0x08008550
 8007440:	080074d1 	.word	0x080074d1
 8007444:	20001a40 	.word	0x20001a40

08007448 <StartMeasurement>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasurement */
void StartMeasurement(void *argument)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b09e      	sub	sp, #120	; 0x78
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMeasurement */
	/* Infinite loop */
	uint32_t data = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	673b      	str	r3, [r7, #112]	; 0x70
	osStatus_t s = 0;
 8007454:	2300      	movs	r3, #0
 8007456:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t msg[100];
	HAL_ADC_Start_IT(&hadc1);
 8007458:	4815      	ldr	r0, [pc, #84]	; (80074b0 <StartMeasurement+0x68>)
 800745a:	f7f9 f9ed 	bl	8000838 <HAL_ADC_Start_IT>
	for (;;) {
		s = osMessageQueueGet(dataQueueHandle, &data, 1, 1);
 800745e:	4b15      	ldr	r3, [pc, #84]	; (80074b4 <StartMeasurement+0x6c>)
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8007466:	2301      	movs	r3, #1
 8007468:	2201      	movs	r2, #1
 800746a:	f7fd fa1b 	bl	80048a4 <osMessageQueueGet>
 800746e:	6778      	str	r0, [r7, #116]	; 0x74
		if (s == osErrorTimeout) {
 8007470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007472:	f113 0f02 	cmn.w	r3, #2
 8007476:	d016      	beq.n	80074a6 <StartMeasurement+0x5e>
			// Just catch it
		} else if (s == osOK) {
 8007478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800747a:	2b00      	cmp	r3, #0
 800747c:	d113      	bne.n	80074a6 <StartMeasurement+0x5e>
			sprintf(msg, "%d\n\r\0", data);
 800747e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007480:	f107 030c 	add.w	r3, r7, #12
 8007484:	490c      	ldr	r1, [pc, #48]	; (80074b8 <StartMeasurement+0x70>)
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fb48 	bl	8007b1c <siprintf>
			HAL_UART_Transmit(&huart2, msg, strlen(msg), 10);
 800748c:	f107 030c 	add.w	r3, r7, #12
 8007490:	4618      	mov	r0, r3
 8007492:	f7f8 fe9d 	bl	80001d0 <strlen>
 8007496:	4603      	mov	r3, r0
 8007498:	b29a      	uxth	r2, r3
 800749a:	f107 010c 	add.w	r1, r7, #12
 800749e:	230a      	movs	r3, #10
 80074a0:	4806      	ldr	r0, [pc, #24]	; (80074bc <StartMeasurement+0x74>)
 80074a2:	f7fc fb95 	bl	8003bd0 <HAL_UART_Transmit>
		}
//		HAL_UART_Transmit(&huart1, &data, 4, 10);
		osDelay(1);
 80074a6:	2001      	movs	r0, #1
 80074a8:	f7fd f948 	bl	800473c <osDelay>
		s = osMessageQueueGet(dataQueueHandle, &data, 1, 1);
 80074ac:	e7d7      	b.n	800745e <StartMeasurement+0x16>
 80074ae:	bf00      	nop
 80074b0:	200019e8 	.word	0x200019e8
 80074b4:	20001a44 	.word	0x20001a44
 80074b8:	080084d8 	.word	0x080084d8
 80074bc:	20001a88 	.word	0x20001a88

080074c0 <TransmitTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_TransmitTask */
void TransmitTask(void *argument)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TransmitTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80074c8:	2001      	movs	r0, #1
 80074ca:	f7fd f937 	bl	800473c <osDelay>
 80074ce:	e7fb      	b.n	80074c8 <TransmitTask+0x8>

080074d0 <HeartBeatTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HeartBeatTask */
void HeartBeatTask(void *argument)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HeartBeatTask */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80074d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80074dc:	4803      	ldr	r0, [pc, #12]	; (80074ec <HeartBeatTask+0x1c>)
 80074de:	f7fa fcd9 	bl	8001e94 <HAL_GPIO_TogglePin>
		osDelay(100);
 80074e2:	2064      	movs	r0, #100	; 0x64
 80074e4:	f7fd f92a 	bl	800473c <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80074e8:	e7f6      	b.n	80074d8 <HeartBeatTask+0x8>
 80074ea:	bf00      	nop
 80074ec:	48000400 	.word	0x48000400

080074f0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08a      	sub	sp, #40	; 0x28
 80074f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074f6:	f107 0314 	add.w	r3, r7, #20
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	605a      	str	r2, [r3, #4]
 8007500:	609a      	str	r2, [r3, #8]
 8007502:	60da      	str	r2, [r3, #12]
 8007504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007506:	4b4b      	ldr	r3, [pc, #300]	; (8007634 <MX_GPIO_Init+0x144>)
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	4a4a      	ldr	r2, [pc, #296]	; (8007634 <MX_GPIO_Init+0x144>)
 800750c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007510:	6153      	str	r3, [r2, #20]
 8007512:	4b48      	ldr	r3, [pc, #288]	; (8007634 <MX_GPIO_Init+0x144>)
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800751a:	613b      	str	r3, [r7, #16]
 800751c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800751e:	4b45      	ldr	r3, [pc, #276]	; (8007634 <MX_GPIO_Init+0x144>)
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	4a44      	ldr	r2, [pc, #272]	; (8007634 <MX_GPIO_Init+0x144>)
 8007524:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007528:	6153      	str	r3, [r2, #20]
 800752a:	4b42      	ldr	r3, [pc, #264]	; (8007634 <MX_GPIO_Init+0x144>)
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007532:	60fb      	str	r3, [r7, #12]
 8007534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007536:	4b3f      	ldr	r3, [pc, #252]	; (8007634 <MX_GPIO_Init+0x144>)
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	4a3e      	ldr	r2, [pc, #248]	; (8007634 <MX_GPIO_Init+0x144>)
 800753c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007540:	6153      	str	r3, [r2, #20]
 8007542:	4b3c      	ldr	r3, [pc, #240]	; (8007634 <MX_GPIO_Init+0x144>)
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800754a:	60bb      	str	r3, [r7, #8]
 800754c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800754e:	4b39      	ldr	r3, [pc, #228]	; (8007634 <MX_GPIO_Init+0x144>)
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	4a38      	ldr	r2, [pc, #224]	; (8007634 <MX_GPIO_Init+0x144>)
 8007554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007558:	6153      	str	r3, [r2, #20]
 800755a:	4b36      	ldr	r3, [pc, #216]	; (8007634 <MX_GPIO_Init+0x144>)
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007562:	607b      	str	r3, [r7, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007566:	4b33      	ldr	r3, [pc, #204]	; (8007634 <MX_GPIO_Init+0x144>)
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	4a32      	ldr	r2, [pc, #200]	; (8007634 <MX_GPIO_Init+0x144>)
 800756c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007570:	6153      	str	r3, [r2, #20]
 8007572:	4b30      	ldr	r3, [pc, #192]	; (8007634 <MX_GPIO_Init+0x144>)
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800757e:	2200      	movs	r2, #0
 8007580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007584:	482c      	ldr	r0, [pc, #176]	; (8007638 <MX_GPIO_Init+0x148>)
 8007586:	f7fa fc55 	bl	8001e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800758a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800758e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007590:	4b2a      	ldr	r3, [pc, #168]	; (800763c <MX_GPIO_Init+0x14c>)
 8007592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007594:	2300      	movs	r3, #0
 8007596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007598:	f107 0314 	add.w	r3, r7, #20
 800759c:	4619      	mov	r1, r3
 800759e:	4828      	ldr	r0, [pc, #160]	; (8007640 <MX_GPIO_Init+0x150>)
 80075a0:	f7fa fa14 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5 
                           PC6 PC7 PC8 PC9 
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80075a4:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 80075a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075aa:	2303      	movs	r3, #3
 80075ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075b2:	f107 0314 	add.w	r3, r7, #20
 80075b6:	4619      	mov	r1, r3
 80075b8:	4821      	ldr	r0, [pc, #132]	; (8007640 <MX_GPIO_Init+0x150>)
 80075ba:	f7fa fa07 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5 
                           PA6 PA7 PA8 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 80075be:	f649 73f3 	movw	r3, #40947	; 0x9ff3
 80075c2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075c4:	2303      	movs	r3, #3
 80075c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c8:	2300      	movs	r3, #0
 80075ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075cc:	f107 0314 	add.w	r3, r7, #20
 80075d0:	4619      	mov	r1, r3
 80075d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075d6:	f7fa f9f9 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB14 PB15 
                           PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80075da:	f64d 73f7 	movw	r3, #57335	; 0xdff7
 80075de:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075e0:	2303      	movs	r3, #3
 80075e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e4:	2300      	movs	r3, #0
 80075e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075e8:	f107 0314 	add.w	r3, r7, #20
 80075ec:	4619      	mov	r1, r3
 80075ee:	4812      	ldr	r0, [pc, #72]	; (8007638 <MX_GPIO_Init+0x148>)
 80075f0:	f7fa f9ec 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80075f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075fa:	2301      	movs	r3, #1
 80075fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007602:	2300      	movs	r3, #0
 8007604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8007606:	f107 0314 	add.w	r3, r7, #20
 800760a:	4619      	mov	r1, r3
 800760c:	480a      	ldr	r0, [pc, #40]	; (8007638 <MX_GPIO_Init+0x148>)
 800760e:	f7fa f9dd 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007612:	2304      	movs	r3, #4
 8007614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007616:	2303      	movs	r3, #3
 8007618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800761a:	2300      	movs	r3, #0
 800761c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800761e:	f107 0314 	add.w	r3, r7, #20
 8007622:	4619      	mov	r1, r3
 8007624:	4807      	ldr	r0, [pc, #28]	; (8007644 <MX_GPIO_Init+0x154>)
 8007626:	f7fa f9d1 	bl	80019cc <HAL_GPIO_Init>

}
 800762a:	bf00      	nop
 800762c:	3728      	adds	r7, #40	; 0x28
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	40021000 	.word	0x40021000
 8007638:	48000400 	.word	0x48000400
 800763c:	10210000 	.word	0x10210000
 8007640:	48000800 	.word	0x48000800
 8007644:	48000c00 	.word	0x48000c00

08007648 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8007648:	b580      	push	{r7, lr}
 800764a:	b09c      	sub	sp, #112	; 0x70
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
	uint32_t data = HAL_ADC_GetValue(&hadc);
 8007650:	1d3b      	adds	r3, r7, #4
 8007652:	4618      	mov	r0, r3
 8007654:	f7f9 f994 	bl	8000980 <HAL_ADC_GetValue>
 8007658:	66f8      	str	r0, [r7, #108]	; 0x6c
	uint8_t msg[100];
	sprintf(msg, "%d\n\r\0", data);
 800765a:	f107 0308 	add.w	r3, r7, #8
 800765e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007660:	490a      	ldr	r1, [pc, #40]	; (800768c <HAL_ADC_ConvCpltCallback+0x44>)
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fa5a 	bl	8007b1c <siprintf>
	HAL_UART_Transmit(&huart2, msg, strlen(msg), 10);
 8007668:	f107 0308 	add.w	r3, r7, #8
 800766c:	4618      	mov	r0, r3
 800766e:	f7f8 fdaf 	bl	80001d0 <strlen>
 8007672:	4603      	mov	r3, r0
 8007674:	b29a      	uxth	r2, r3
 8007676:	f107 0108 	add.w	r1, r7, #8
 800767a:	230a      	movs	r3, #10
 800767c:	4804      	ldr	r0, [pc, #16]	; (8007690 <HAL_ADC_ConvCpltCallback+0x48>)
 800767e:	f7fc faa7 	bl	8003bd0 <HAL_UART_Transmit>
}
 8007682:	bf00      	nop
 8007684:	3770      	adds	r7, #112	; 0x70
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	080084e0 	.word	0x080084e0
 8007690:	20001a88 	.word	0x20001a88

08007694 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8007698:	f7f8 fdf2 	bl	8000280 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800769c:	f000 f80d 	bl	80076ba <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80076a0:	f7ff ff26 	bl	80074f0 <MX_GPIO_Init>
	MX_ADC1_Init();
 80076a4:	f7ff fdf2 	bl	800728c <MX_ADC1_Init>
	MX_USART2_UART_Init();
 80076a8:	f000 f95e 	bl	8007968 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in freertos.c) */
 80076ac:	f7fc ff34 	bl	8004518 <osKernelInitialize>
	MX_FREERTOS_Init();
 80076b0:	f7ff fe90 	bl	80073d4 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 80076b4:	f7fc ff64 	bl	8004580 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80076b8:	e7fe      	b.n	80076b8 <main+0x24>

080076ba <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b090      	sub	sp, #64	; 0x40
 80076be:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80076c0:	f107 0318 	add.w	r3, r7, #24
 80076c4:	2228      	movs	r2, #40	; 0x28
 80076c6:	2100      	movs	r1, #0
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fa1e 	bl	8007b0a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80076ce:	1d3b      	adds	r3, r7, #4
 80076d0:	2200      	movs	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	605a      	str	r2, [r3, #4]
 80076d6:	609a      	str	r2, [r3, #8]
 80076d8:	60da      	str	r2, [r3, #12]
 80076da:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80076dc:	2301      	movs	r3, #1
 80076de:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80076e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80076e4:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80076e6:	2300      	movs	r3, #0
 80076e8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80076ea:	2301      	movs	r3, #1
 80076ec:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80076ee:	2302      	movs	r3, #2
 80076f0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80076f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80076f6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80076f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80076fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80076fe:	f107 0318 	add.w	r3, r7, #24
 8007702:	4618      	mov	r0, r3
 8007704:	f7fa fbee 	bl	8001ee4 <HAL_RCC_OscConfig>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <SystemClock_Config+0x58>
		Error_Handler();
 800770e:	f000 f82b 	bl	8007768 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8007712:	230f      	movs	r3, #15
 8007714:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007716:	2302      	movs	r3, #2
 8007718:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800771e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007722:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007724:	2300      	movs	r3, #0
 8007726:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8007728:	1d3b      	adds	r3, r7, #4
 800772a:	2101      	movs	r1, #1
 800772c:	4618      	mov	r0, r3
 800772e:	f7fb fbe5 	bl	8002efc <HAL_RCC_ClockConfig>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <SystemClock_Config+0x82>
		Error_Handler();
 8007738:	f000 f816 	bl	8007768 <Error_Handler>
	}
}
 800773c:	bf00      	nop
 800773e:	3740      	adds	r7, #64	; 0x40
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a04      	ldr	r2, [pc, #16]	; (8007764 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d101      	bne.n	800775a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8007756:	f7f8 fda9 	bl	80002ac <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800775a:	bf00      	nop
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	40012c00 	.word	0x40012c00

08007768 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8007768:	b480      	push	{r7}
 800776a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800776c:	bf00      	nop
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007792:	4b11      	ldr	r3, [pc, #68]	; (80077d8 <HAL_MspInit+0x4c>)
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	4a10      	ldr	r2, [pc, #64]	; (80077d8 <HAL_MspInit+0x4c>)
 8007798:	f043 0301 	orr.w	r3, r3, #1
 800779c:	6193      	str	r3, [r2, #24]
 800779e:	4b0e      	ldr	r3, [pc, #56]	; (80077d8 <HAL_MspInit+0x4c>)
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	607b      	str	r3, [r7, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077aa:	4b0b      	ldr	r3, [pc, #44]	; (80077d8 <HAL_MspInit+0x4c>)
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	4a0a      	ldr	r2, [pc, #40]	; (80077d8 <HAL_MspInit+0x4c>)
 80077b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b4:	61d3      	str	r3, [r2, #28]
 80077b6:	4b08      	ldr	r3, [pc, #32]	; (80077d8 <HAL_MspInit+0x4c>)
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80077c2:	2200      	movs	r2, #0
 80077c4:	210f      	movs	r1, #15
 80077c6:	f06f 0001 	mvn.w	r0, #1
 80077ca:	f7fa f8bb 	bl	8001944 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80077ce:	bf00      	nop
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	40021000 	.word	0x40021000

080077dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08c      	sub	sp, #48	; 0x30
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80077ec:	2200      	movs	r2, #0
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	2019      	movs	r0, #25
 80077f2:	f7fa f8a7 	bl	8001944 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80077f6:	2019      	movs	r0, #25
 80077f8:	f7fa f8d0 	bl	800199c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80077fc:	4b1e      	ldr	r3, [pc, #120]	; (8007878 <HAL_InitTick+0x9c>)
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	4a1d      	ldr	r2, [pc, #116]	; (8007878 <HAL_InitTick+0x9c>)
 8007802:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007806:	6193      	str	r3, [r2, #24]
 8007808:	4b1b      	ldr	r3, [pc, #108]	; (8007878 <HAL_InitTick+0x9c>)
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007814:	f107 0210 	add.w	r2, r7, #16
 8007818:	f107 0314 	add.w	r3, r7, #20
 800781c:	4611      	mov	r1, r2
 800781e:	4618      	mov	r0, r3
 8007820:	f7fb fe46 	bl	80034b0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007824:	f7fb fe22 	bl	800346c <HAL_RCC_GetPCLK2Freq>
 8007828:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782c:	4a13      	ldr	r2, [pc, #76]	; (800787c <HAL_InitTick+0xa0>)
 800782e:	fba2 2303 	umull	r2, r3, r2, r3
 8007832:	0c9b      	lsrs	r3, r3, #18
 8007834:	3b01      	subs	r3, #1
 8007836:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007838:	4b11      	ldr	r3, [pc, #68]	; (8007880 <HAL_InitTick+0xa4>)
 800783a:	4a12      	ldr	r2, [pc, #72]	; (8007884 <HAL_InitTick+0xa8>)
 800783c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800783e:	4b10      	ldr	r3, [pc, #64]	; (8007880 <HAL_InitTick+0xa4>)
 8007840:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007844:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007846:	4a0e      	ldr	r2, [pc, #56]	; (8007880 <HAL_InitTick+0xa4>)
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800784c:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <HAL_InitTick+0xa4>)
 800784e:	2200      	movs	r2, #0
 8007850:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007852:	4b0b      	ldr	r3, [pc, #44]	; (8007880 <HAL_InitTick+0xa4>)
 8007854:	2200      	movs	r2, #0
 8007856:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8007858:	4809      	ldr	r0, [pc, #36]	; (8007880 <HAL_InitTick+0xa4>)
 800785a:	f7fb fe6b 	bl	8003534 <HAL_TIM_Base_Init>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d104      	bne.n	800786e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8007864:	4806      	ldr	r0, [pc, #24]	; (8007880 <HAL_InitTick+0xa4>)
 8007866:	f7fb ff03 	bl	8003670 <HAL_TIM_Base_Start_IT>
 800786a:	4603      	mov	r3, r0
 800786c:	e000      	b.n	8007870 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
}
 8007870:	4618      	mov	r0, r3
 8007872:	3730      	adds	r7, #48	; 0x30
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	40021000 	.word	0x40021000
 800787c:	431bde83 	.word	0x431bde83
 8007880:	20001a48 	.word	0x20001a48
 8007884:	40012c00 	.word	0x40012c00

08007888 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 800788c:	bf00      	nop
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8007896:	b480      	push	{r7}
 8007898:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800789a:	e7fe      	b.n	800789a <HardFault_Handler+0x4>

0800789c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80078a0:	e7fe      	b.n	80078a0 <MemManage_Handler+0x4>

080078a2 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80078a2:	b480      	push	{r7}
 80078a4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80078a6:	e7fe      	b.n	80078a6 <BusFault_Handler+0x4>

080078a8 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80078ac:	e7fe      	b.n	80078ac <UsageFault_Handler+0x4>

080078ae <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80078ae:	b480      	push	{r7}
 80078b0:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80078b2:	bf00      	nop
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <ADC1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles ADC1 interrupt.
 */
void ADC1_IRQHandler(void) {
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_IRQn 0 */

	/* USER CODE END ADC1_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 80078c0:	4802      	ldr	r0, [pc, #8]	; (80078cc <ADC1_IRQHandler+0x10>)
 80078c2:	f7f9 f875 	bl	80009b0 <HAL_ADC_IRQHandler>
	/* USER CODE BEGIN ADC1_IRQn 1 */
	//osSignalSet(&measureTaskHandle, ADC_VALUE);
	/* USER CODE END ADC1_IRQn 1 */
}
 80078c6:	bf00      	nop
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	200019e8 	.word	0x200019e8

080078d0 <TIM1_UP_TIM16_IRQHandler>:

/**
 * @brief This function handles TIM1 update and TIM16 interrupts.
 */
void TIM1_UP_TIM16_IRQHandler(void) {
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

	/* USER CODE END TIM1_UP_TIM16_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80078d4:	4802      	ldr	r0, [pc, #8]	; (80078e0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80078d6:	f7fb ff23 	bl	8003720 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

	/* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80078da:	bf00      	nop
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20001a48 	.word	0x20001a48

080078e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80078ec:	4b11      	ldr	r3, [pc, #68]	; (8007934 <_sbrk+0x50>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d102      	bne.n	80078fa <_sbrk+0x16>
		heap_end = &end;
 80078f4:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <_sbrk+0x50>)
 80078f6:	4a10      	ldr	r2, [pc, #64]	; (8007938 <_sbrk+0x54>)
 80078f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80078fa:	4b0e      	ldr	r3, [pc, #56]	; (8007934 <_sbrk+0x50>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007900:	4b0c      	ldr	r3, [pc, #48]	; (8007934 <_sbrk+0x50>)
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4413      	add	r3, r2
 8007908:	466a      	mov	r2, sp
 800790a:	4293      	cmp	r3, r2
 800790c:	d907      	bls.n	800791e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800790e:	f000 f8c7 	bl	8007aa0 <__errno>
 8007912:	4602      	mov	r2, r0
 8007914:	230c      	movs	r3, #12
 8007916:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007918:	f04f 33ff 	mov.w	r3, #4294967295
 800791c:	e006      	b.n	800792c <_sbrk+0x48>
	}

	heap_end += incr;
 800791e:	4b05      	ldr	r3, [pc, #20]	; (8007934 <_sbrk+0x50>)
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4413      	add	r3, r2
 8007926:	4a03      	ldr	r2, [pc, #12]	; (8007934 <_sbrk+0x50>)
 8007928:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800792a:	68fb      	ldr	r3, [r7, #12]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20001998 	.word	0x20001998
 8007938:	20001b10 	.word	0x20001b10

0800793c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007940:	4b08      	ldr	r3, [pc, #32]	; (8007964 <SystemInit+0x28>)
 8007942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007946:	4a07      	ldr	r2, [pc, #28]	; (8007964 <SystemInit+0x28>)
 8007948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800794c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007950:	4b04      	ldr	r3, [pc, #16]	; (8007964 <SystemInit+0x28>)
 8007952:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007956:	609a      	str	r2, [r3, #8]
#endif
}
 8007958:	bf00      	nop
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	e000ed00 	.word	0xe000ed00

08007968 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800796c:	4b14      	ldr	r3, [pc, #80]	; (80079c0 <MX_USART2_UART_Init+0x58>)
 800796e:	4a15      	ldr	r2, [pc, #84]	; (80079c4 <MX_USART2_UART_Init+0x5c>)
 8007970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007972:	4b13      	ldr	r3, [pc, #76]	; (80079c0 <MX_USART2_UART_Init+0x58>)
 8007974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800797a:	4b11      	ldr	r3, [pc, #68]	; (80079c0 <MX_USART2_UART_Init+0x58>)
 800797c:	2200      	movs	r2, #0
 800797e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007980:	4b0f      	ldr	r3, [pc, #60]	; (80079c0 <MX_USART2_UART_Init+0x58>)
 8007982:	2200      	movs	r2, #0
 8007984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007986:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <MX_USART2_UART_Init+0x58>)
 8007988:	2200      	movs	r2, #0
 800798a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800798c:	4b0c      	ldr	r3, [pc, #48]	; (80079c0 <MX_USART2_UART_Init+0x58>)
 800798e:	220c      	movs	r2, #12
 8007990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007992:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <MX_USART2_UART_Init+0x58>)
 8007994:	2200      	movs	r2, #0
 8007996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007998:	4b09      	ldr	r3, [pc, #36]	; (80079c0 <MX_USART2_UART_Init+0x58>)
 800799a:	2200      	movs	r2, #0
 800799c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800799e:	4b08      	ldr	r3, [pc, #32]	; (80079c0 <MX_USART2_UART_Init+0x58>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80079a4:	4b06      	ldr	r3, [pc, #24]	; (80079c0 <MX_USART2_UART_Init+0x58>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80079aa:	4805      	ldr	r0, [pc, #20]	; (80079c0 <MX_USART2_UART_Init+0x58>)
 80079ac:	f7fc f88c 	bl	8003ac8 <HAL_UART_Init>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80079b6:	f7ff fed7 	bl	8007768 <Error_Handler>
  }

}
 80079ba:	bf00      	nop
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	20001a88 	.word	0x20001a88
 80079c4:	40004400 	.word	0x40004400

080079c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08a      	sub	sp, #40	; 0x28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079d0:	f107 0314 	add.w	r3, r7, #20
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	605a      	str	r2, [r3, #4]
 80079da:	609a      	str	r2, [r3, #8]
 80079dc:	60da      	str	r2, [r3, #12]
 80079de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a17      	ldr	r2, [pc, #92]	; (8007a44 <HAL_UART_MspInit+0x7c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d128      	bne.n	8007a3c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80079ea:	4b17      	ldr	r3, [pc, #92]	; (8007a48 <HAL_UART_MspInit+0x80>)
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	4a16      	ldr	r2, [pc, #88]	; (8007a48 <HAL_UART_MspInit+0x80>)
 80079f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079f4:	61d3      	str	r3, [r2, #28]
 80079f6:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <HAL_UART_MspInit+0x80>)
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079fe:	613b      	str	r3, [r7, #16]
 8007a00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a02:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <HAL_UART_MspInit+0x80>)
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	4a10      	ldr	r2, [pc, #64]	; (8007a48 <HAL_UART_MspInit+0x80>)
 8007a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a0c:	6153      	str	r3, [r2, #20]
 8007a0e:	4b0e      	ldr	r3, [pc, #56]	; (8007a48 <HAL_UART_MspInit+0x80>)
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007a1a:	230c      	movs	r3, #12
 8007a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a1e:	2302      	movs	r3, #2
 8007a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a22:	2300      	movs	r3, #0
 8007a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a26:	2300      	movs	r3, #0
 8007a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007a2a:	2307      	movs	r3, #7
 8007a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a2e:	f107 0314 	add.w	r3, r7, #20
 8007a32:	4619      	mov	r1, r3
 8007a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a38:	f7f9 ffc8 	bl	80019cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007a3c:	bf00      	nop
 8007a3e:	3728      	adds	r7, #40	; 0x28
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40004400 	.word	0x40004400
 8007a48:	40021000 	.word	0x40021000

08007a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a84 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007a50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007a52:	e003      	b.n	8007a5c <LoopCopyDataInit>

08007a54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007a54:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007a56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007a58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007a5a:	3104      	adds	r1, #4

08007a5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007a5c:	480b      	ldr	r0, [pc, #44]	; (8007a8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8007a5e:	4b0c      	ldr	r3, [pc, #48]	; (8007a90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007a60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007a62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007a64:	d3f6      	bcc.n	8007a54 <CopyDataInit>
	ldr	r2, =_sbss
 8007a66:	4a0b      	ldr	r2, [pc, #44]	; (8007a94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007a68:	e002      	b.n	8007a70 <LoopFillZerobss>

08007a6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007a6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007a6c:	f842 3b04 	str.w	r3, [r2], #4

08007a70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007a70:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <LoopForever+0x16>)
	cmp	r2, r3
 8007a72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007a74:	d3f9      	bcc.n	8007a6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007a76:	f7ff ff61 	bl	800793c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007a7a:	f000 f817 	bl	8007aac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007a7e:	f7ff fe09 	bl	8007694 <main>

08007a82 <LoopForever>:

LoopForever:
    b LoopForever
 8007a82:	e7fe      	b.n	8007a82 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007a84:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8007a88:	080085e0 	.word	0x080085e0
	ldr	r0, =_sdata
 8007a8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007a90:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8007a94:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8007a98:	20001b0c 	.word	0x20001b0c

08007a9c <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007a9c:	e7fe      	b.n	8007a9c <CAN_RX1_IRQHandler>
	...

08007aa0 <__errno>:
 8007aa0:	4b01      	ldr	r3, [pc, #4]	; (8007aa8 <__errno+0x8>)
 8007aa2:	6818      	ldr	r0, [r3, #0]
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	20000010 	.word	0x20000010

08007aac <__libc_init_array>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	4e0d      	ldr	r6, [pc, #52]	; (8007ae4 <__libc_init_array+0x38>)
 8007ab0:	4c0d      	ldr	r4, [pc, #52]	; (8007ae8 <__libc_init_array+0x3c>)
 8007ab2:	1ba4      	subs	r4, r4, r6
 8007ab4:	10a4      	asrs	r4, r4, #2
 8007ab6:	2500      	movs	r5, #0
 8007ab8:	42a5      	cmp	r5, r4
 8007aba:	d109      	bne.n	8007ad0 <__libc_init_array+0x24>
 8007abc:	4e0b      	ldr	r6, [pc, #44]	; (8007aec <__libc_init_array+0x40>)
 8007abe:	4c0c      	ldr	r4, [pc, #48]	; (8007af0 <__libc_init_array+0x44>)
 8007ac0:	f000 fc28 	bl	8008314 <_init>
 8007ac4:	1ba4      	subs	r4, r4, r6
 8007ac6:	10a4      	asrs	r4, r4, #2
 8007ac8:	2500      	movs	r5, #0
 8007aca:	42a5      	cmp	r5, r4
 8007acc:	d105      	bne.n	8007ada <__libc_init_array+0x2e>
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
 8007ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ad4:	4798      	blx	r3
 8007ad6:	3501      	adds	r5, #1
 8007ad8:	e7ee      	b.n	8007ab8 <__libc_init_array+0xc>
 8007ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ade:	4798      	blx	r3
 8007ae0:	3501      	adds	r5, #1
 8007ae2:	e7f2      	b.n	8007aca <__libc_init_array+0x1e>
 8007ae4:	080085d8 	.word	0x080085d8
 8007ae8:	080085d8 	.word	0x080085d8
 8007aec:	080085d8 	.word	0x080085d8
 8007af0:	080085dc 	.word	0x080085dc

08007af4 <memcpy>:
 8007af4:	b510      	push	{r4, lr}
 8007af6:	1e43      	subs	r3, r0, #1
 8007af8:	440a      	add	r2, r1
 8007afa:	4291      	cmp	r1, r2
 8007afc:	d100      	bne.n	8007b00 <memcpy+0xc>
 8007afe:	bd10      	pop	{r4, pc}
 8007b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b08:	e7f7      	b.n	8007afa <memcpy+0x6>

08007b0a <memset>:
 8007b0a:	4402      	add	r2, r0
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d100      	bne.n	8007b14 <memset+0xa>
 8007b12:	4770      	bx	lr
 8007b14:	f803 1b01 	strb.w	r1, [r3], #1
 8007b18:	e7f9      	b.n	8007b0e <memset+0x4>
	...

08007b1c <siprintf>:
 8007b1c:	b40e      	push	{r1, r2, r3}
 8007b1e:	b500      	push	{lr}
 8007b20:	b09c      	sub	sp, #112	; 0x70
 8007b22:	ab1d      	add	r3, sp, #116	; 0x74
 8007b24:	9002      	str	r0, [sp, #8]
 8007b26:	9006      	str	r0, [sp, #24]
 8007b28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b2c:	4809      	ldr	r0, [pc, #36]	; (8007b54 <siprintf+0x38>)
 8007b2e:	9107      	str	r1, [sp, #28]
 8007b30:	9104      	str	r1, [sp, #16]
 8007b32:	4909      	ldr	r1, [pc, #36]	; (8007b58 <siprintf+0x3c>)
 8007b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b38:	9105      	str	r1, [sp, #20]
 8007b3a:	6800      	ldr	r0, [r0, #0]
 8007b3c:	9301      	str	r3, [sp, #4]
 8007b3e:	a902      	add	r1, sp, #8
 8007b40:	f000 f866 	bl	8007c10 <_svfiprintf_r>
 8007b44:	9b02      	ldr	r3, [sp, #8]
 8007b46:	2200      	movs	r2, #0
 8007b48:	701a      	strb	r2, [r3, #0]
 8007b4a:	b01c      	add	sp, #112	; 0x70
 8007b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b50:	b003      	add	sp, #12
 8007b52:	4770      	bx	lr
 8007b54:	20000010 	.word	0x20000010
 8007b58:	ffff0208 	.word	0xffff0208

08007b5c <__ssputs_r>:
 8007b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b60:	688e      	ldr	r6, [r1, #8]
 8007b62:	429e      	cmp	r6, r3
 8007b64:	4682      	mov	sl, r0
 8007b66:	460c      	mov	r4, r1
 8007b68:	4690      	mov	r8, r2
 8007b6a:	4699      	mov	r9, r3
 8007b6c:	d837      	bhi.n	8007bde <__ssputs_r+0x82>
 8007b6e:	898a      	ldrh	r2, [r1, #12]
 8007b70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b74:	d031      	beq.n	8007bda <__ssputs_r+0x7e>
 8007b76:	6825      	ldr	r5, [r4, #0]
 8007b78:	6909      	ldr	r1, [r1, #16]
 8007b7a:	1a6f      	subs	r7, r5, r1
 8007b7c:	6965      	ldr	r5, [r4, #20]
 8007b7e:	2302      	movs	r3, #2
 8007b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b84:	fb95 f5f3 	sdiv	r5, r5, r3
 8007b88:	f109 0301 	add.w	r3, r9, #1
 8007b8c:	443b      	add	r3, r7
 8007b8e:	429d      	cmp	r5, r3
 8007b90:	bf38      	it	cc
 8007b92:	461d      	movcc	r5, r3
 8007b94:	0553      	lsls	r3, r2, #21
 8007b96:	d530      	bpl.n	8007bfa <__ssputs_r+0x9e>
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f000 fb21 	bl	80081e0 <_malloc_r>
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	b950      	cbnz	r0, 8007bb8 <__ssputs_r+0x5c>
 8007ba2:	230c      	movs	r3, #12
 8007ba4:	f8ca 3000 	str.w	r3, [sl]
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bae:	81a3      	strh	r3, [r4, #12]
 8007bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb8:	463a      	mov	r2, r7
 8007bba:	6921      	ldr	r1, [r4, #16]
 8007bbc:	f7ff ff9a 	bl	8007af4 <memcpy>
 8007bc0:	89a3      	ldrh	r3, [r4, #12]
 8007bc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bca:	81a3      	strh	r3, [r4, #12]
 8007bcc:	6126      	str	r6, [r4, #16]
 8007bce:	6165      	str	r5, [r4, #20]
 8007bd0:	443e      	add	r6, r7
 8007bd2:	1bed      	subs	r5, r5, r7
 8007bd4:	6026      	str	r6, [r4, #0]
 8007bd6:	60a5      	str	r5, [r4, #8]
 8007bd8:	464e      	mov	r6, r9
 8007bda:	454e      	cmp	r6, r9
 8007bdc:	d900      	bls.n	8007be0 <__ssputs_r+0x84>
 8007bde:	464e      	mov	r6, r9
 8007be0:	4632      	mov	r2, r6
 8007be2:	4641      	mov	r1, r8
 8007be4:	6820      	ldr	r0, [r4, #0]
 8007be6:	f000 fa93 	bl	8008110 <memmove>
 8007bea:	68a3      	ldr	r3, [r4, #8]
 8007bec:	1b9b      	subs	r3, r3, r6
 8007bee:	60a3      	str	r3, [r4, #8]
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	441e      	add	r6, r3
 8007bf4:	6026      	str	r6, [r4, #0]
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	e7dc      	b.n	8007bb4 <__ssputs_r+0x58>
 8007bfa:	462a      	mov	r2, r5
 8007bfc:	f000 fb4a 	bl	8008294 <_realloc_r>
 8007c00:	4606      	mov	r6, r0
 8007c02:	2800      	cmp	r0, #0
 8007c04:	d1e2      	bne.n	8007bcc <__ssputs_r+0x70>
 8007c06:	6921      	ldr	r1, [r4, #16]
 8007c08:	4650      	mov	r0, sl
 8007c0a:	f000 fa9b 	bl	8008144 <_free_r>
 8007c0e:	e7c8      	b.n	8007ba2 <__ssputs_r+0x46>

08007c10 <_svfiprintf_r>:
 8007c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c14:	461d      	mov	r5, r3
 8007c16:	898b      	ldrh	r3, [r1, #12]
 8007c18:	061f      	lsls	r7, r3, #24
 8007c1a:	b09d      	sub	sp, #116	; 0x74
 8007c1c:	4680      	mov	r8, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	4616      	mov	r6, r2
 8007c22:	d50f      	bpl.n	8007c44 <_svfiprintf_r+0x34>
 8007c24:	690b      	ldr	r3, [r1, #16]
 8007c26:	b96b      	cbnz	r3, 8007c44 <_svfiprintf_r+0x34>
 8007c28:	2140      	movs	r1, #64	; 0x40
 8007c2a:	f000 fad9 	bl	80081e0 <_malloc_r>
 8007c2e:	6020      	str	r0, [r4, #0]
 8007c30:	6120      	str	r0, [r4, #16]
 8007c32:	b928      	cbnz	r0, 8007c40 <_svfiprintf_r+0x30>
 8007c34:	230c      	movs	r3, #12
 8007c36:	f8c8 3000 	str.w	r3, [r8]
 8007c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3e:	e0c8      	b.n	8007dd2 <_svfiprintf_r+0x1c2>
 8007c40:	2340      	movs	r3, #64	; 0x40
 8007c42:	6163      	str	r3, [r4, #20]
 8007c44:	2300      	movs	r3, #0
 8007c46:	9309      	str	r3, [sp, #36]	; 0x24
 8007c48:	2320      	movs	r3, #32
 8007c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c4e:	2330      	movs	r3, #48	; 0x30
 8007c50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c54:	9503      	str	r5, [sp, #12]
 8007c56:	f04f 0b01 	mov.w	fp, #1
 8007c5a:	4637      	mov	r7, r6
 8007c5c:	463d      	mov	r5, r7
 8007c5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007c62:	b10b      	cbz	r3, 8007c68 <_svfiprintf_r+0x58>
 8007c64:	2b25      	cmp	r3, #37	; 0x25
 8007c66:	d13e      	bne.n	8007ce6 <_svfiprintf_r+0xd6>
 8007c68:	ebb7 0a06 	subs.w	sl, r7, r6
 8007c6c:	d00b      	beq.n	8007c86 <_svfiprintf_r+0x76>
 8007c6e:	4653      	mov	r3, sl
 8007c70:	4632      	mov	r2, r6
 8007c72:	4621      	mov	r1, r4
 8007c74:	4640      	mov	r0, r8
 8007c76:	f7ff ff71 	bl	8007b5c <__ssputs_r>
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	f000 80a4 	beq.w	8007dc8 <_svfiprintf_r+0x1b8>
 8007c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c82:	4453      	add	r3, sl
 8007c84:	9309      	str	r3, [sp, #36]	; 0x24
 8007c86:	783b      	ldrb	r3, [r7, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 809d 	beq.w	8007dc8 <_svfiprintf_r+0x1b8>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f04f 32ff 	mov.w	r2, #4294967295
 8007c94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c98:	9304      	str	r3, [sp, #16]
 8007c9a:	9307      	str	r3, [sp, #28]
 8007c9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ca0:	931a      	str	r3, [sp, #104]	; 0x68
 8007ca2:	462f      	mov	r7, r5
 8007ca4:	2205      	movs	r2, #5
 8007ca6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007caa:	4850      	ldr	r0, [pc, #320]	; (8007dec <_svfiprintf_r+0x1dc>)
 8007cac:	f7f8 fa98 	bl	80001e0 <memchr>
 8007cb0:	9b04      	ldr	r3, [sp, #16]
 8007cb2:	b9d0      	cbnz	r0, 8007cea <_svfiprintf_r+0xda>
 8007cb4:	06d9      	lsls	r1, r3, #27
 8007cb6:	bf44      	itt	mi
 8007cb8:	2220      	movmi	r2, #32
 8007cba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007cbe:	071a      	lsls	r2, r3, #28
 8007cc0:	bf44      	itt	mi
 8007cc2:	222b      	movmi	r2, #43	; 0x2b
 8007cc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007cc8:	782a      	ldrb	r2, [r5, #0]
 8007cca:	2a2a      	cmp	r2, #42	; 0x2a
 8007ccc:	d015      	beq.n	8007cfa <_svfiprintf_r+0xea>
 8007cce:	9a07      	ldr	r2, [sp, #28]
 8007cd0:	462f      	mov	r7, r5
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	250a      	movs	r5, #10
 8007cd6:	4639      	mov	r1, r7
 8007cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cdc:	3b30      	subs	r3, #48	; 0x30
 8007cde:	2b09      	cmp	r3, #9
 8007ce0:	d94d      	bls.n	8007d7e <_svfiprintf_r+0x16e>
 8007ce2:	b1b8      	cbz	r0, 8007d14 <_svfiprintf_r+0x104>
 8007ce4:	e00f      	b.n	8007d06 <_svfiprintf_r+0xf6>
 8007ce6:	462f      	mov	r7, r5
 8007ce8:	e7b8      	b.n	8007c5c <_svfiprintf_r+0x4c>
 8007cea:	4a40      	ldr	r2, [pc, #256]	; (8007dec <_svfiprintf_r+0x1dc>)
 8007cec:	1a80      	subs	r0, r0, r2
 8007cee:	fa0b f000 	lsl.w	r0, fp, r0
 8007cf2:	4318      	orrs	r0, r3
 8007cf4:	9004      	str	r0, [sp, #16]
 8007cf6:	463d      	mov	r5, r7
 8007cf8:	e7d3      	b.n	8007ca2 <_svfiprintf_r+0x92>
 8007cfa:	9a03      	ldr	r2, [sp, #12]
 8007cfc:	1d11      	adds	r1, r2, #4
 8007cfe:	6812      	ldr	r2, [r2, #0]
 8007d00:	9103      	str	r1, [sp, #12]
 8007d02:	2a00      	cmp	r2, #0
 8007d04:	db01      	blt.n	8007d0a <_svfiprintf_r+0xfa>
 8007d06:	9207      	str	r2, [sp, #28]
 8007d08:	e004      	b.n	8007d14 <_svfiprintf_r+0x104>
 8007d0a:	4252      	negs	r2, r2
 8007d0c:	f043 0302 	orr.w	r3, r3, #2
 8007d10:	9207      	str	r2, [sp, #28]
 8007d12:	9304      	str	r3, [sp, #16]
 8007d14:	783b      	ldrb	r3, [r7, #0]
 8007d16:	2b2e      	cmp	r3, #46	; 0x2e
 8007d18:	d10c      	bne.n	8007d34 <_svfiprintf_r+0x124>
 8007d1a:	787b      	ldrb	r3, [r7, #1]
 8007d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d1e:	d133      	bne.n	8007d88 <_svfiprintf_r+0x178>
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	1d1a      	adds	r2, r3, #4
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	9203      	str	r2, [sp, #12]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	bfb8      	it	lt
 8007d2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d30:	3702      	adds	r7, #2
 8007d32:	9305      	str	r3, [sp, #20]
 8007d34:	4d2e      	ldr	r5, [pc, #184]	; (8007df0 <_svfiprintf_r+0x1e0>)
 8007d36:	7839      	ldrb	r1, [r7, #0]
 8007d38:	2203      	movs	r2, #3
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	f7f8 fa50 	bl	80001e0 <memchr>
 8007d40:	b138      	cbz	r0, 8007d52 <_svfiprintf_r+0x142>
 8007d42:	2340      	movs	r3, #64	; 0x40
 8007d44:	1b40      	subs	r0, r0, r5
 8007d46:	fa03 f000 	lsl.w	r0, r3, r0
 8007d4a:	9b04      	ldr	r3, [sp, #16]
 8007d4c:	4303      	orrs	r3, r0
 8007d4e:	3701      	adds	r7, #1
 8007d50:	9304      	str	r3, [sp, #16]
 8007d52:	7839      	ldrb	r1, [r7, #0]
 8007d54:	4827      	ldr	r0, [pc, #156]	; (8007df4 <_svfiprintf_r+0x1e4>)
 8007d56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d5a:	2206      	movs	r2, #6
 8007d5c:	1c7e      	adds	r6, r7, #1
 8007d5e:	f7f8 fa3f 	bl	80001e0 <memchr>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d038      	beq.n	8007dd8 <_svfiprintf_r+0x1c8>
 8007d66:	4b24      	ldr	r3, [pc, #144]	; (8007df8 <_svfiprintf_r+0x1e8>)
 8007d68:	bb13      	cbnz	r3, 8007db0 <_svfiprintf_r+0x1a0>
 8007d6a:	9b03      	ldr	r3, [sp, #12]
 8007d6c:	3307      	adds	r3, #7
 8007d6e:	f023 0307 	bic.w	r3, r3, #7
 8007d72:	3308      	adds	r3, #8
 8007d74:	9303      	str	r3, [sp, #12]
 8007d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d78:	444b      	add	r3, r9
 8007d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d7c:	e76d      	b.n	8007c5a <_svfiprintf_r+0x4a>
 8007d7e:	fb05 3202 	mla	r2, r5, r2, r3
 8007d82:	2001      	movs	r0, #1
 8007d84:	460f      	mov	r7, r1
 8007d86:	e7a6      	b.n	8007cd6 <_svfiprintf_r+0xc6>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	3701      	adds	r7, #1
 8007d8c:	9305      	str	r3, [sp, #20]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	250a      	movs	r5, #10
 8007d92:	4638      	mov	r0, r7
 8007d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d98:	3a30      	subs	r2, #48	; 0x30
 8007d9a:	2a09      	cmp	r2, #9
 8007d9c:	d903      	bls.n	8007da6 <_svfiprintf_r+0x196>
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0c8      	beq.n	8007d34 <_svfiprintf_r+0x124>
 8007da2:	9105      	str	r1, [sp, #20]
 8007da4:	e7c6      	b.n	8007d34 <_svfiprintf_r+0x124>
 8007da6:	fb05 2101 	mla	r1, r5, r1, r2
 8007daa:	2301      	movs	r3, #1
 8007dac:	4607      	mov	r7, r0
 8007dae:	e7f0      	b.n	8007d92 <_svfiprintf_r+0x182>
 8007db0:	ab03      	add	r3, sp, #12
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	4622      	mov	r2, r4
 8007db6:	4b11      	ldr	r3, [pc, #68]	; (8007dfc <_svfiprintf_r+0x1ec>)
 8007db8:	a904      	add	r1, sp, #16
 8007dba:	4640      	mov	r0, r8
 8007dbc:	f3af 8000 	nop.w
 8007dc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007dc4:	4681      	mov	r9, r0
 8007dc6:	d1d6      	bne.n	8007d76 <_svfiprintf_r+0x166>
 8007dc8:	89a3      	ldrh	r3, [r4, #12]
 8007dca:	065b      	lsls	r3, r3, #25
 8007dcc:	f53f af35 	bmi.w	8007c3a <_svfiprintf_r+0x2a>
 8007dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dd2:	b01d      	add	sp, #116	; 0x74
 8007dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd8:	ab03      	add	r3, sp, #12
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	4622      	mov	r2, r4
 8007dde:	4b07      	ldr	r3, [pc, #28]	; (8007dfc <_svfiprintf_r+0x1ec>)
 8007de0:	a904      	add	r1, sp, #16
 8007de2:	4640      	mov	r0, r8
 8007de4:	f000 f882 	bl	8007eec <_printf_i>
 8007de8:	e7ea      	b.n	8007dc0 <_svfiprintf_r+0x1b0>
 8007dea:	bf00      	nop
 8007dec:	080085a4 	.word	0x080085a4
 8007df0:	080085aa 	.word	0x080085aa
 8007df4:	080085ae 	.word	0x080085ae
 8007df8:	00000000 	.word	0x00000000
 8007dfc:	08007b5d 	.word	0x08007b5d

08007e00 <_printf_common>:
 8007e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e04:	4691      	mov	r9, r2
 8007e06:	461f      	mov	r7, r3
 8007e08:	688a      	ldr	r2, [r1, #8]
 8007e0a:	690b      	ldr	r3, [r1, #16]
 8007e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e10:	4293      	cmp	r3, r2
 8007e12:	bfb8      	it	lt
 8007e14:	4613      	movlt	r3, r2
 8007e16:	f8c9 3000 	str.w	r3, [r9]
 8007e1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e1e:	4606      	mov	r6, r0
 8007e20:	460c      	mov	r4, r1
 8007e22:	b112      	cbz	r2, 8007e2a <_printf_common+0x2a>
 8007e24:	3301      	adds	r3, #1
 8007e26:	f8c9 3000 	str.w	r3, [r9]
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	0699      	lsls	r1, r3, #26
 8007e2e:	bf42      	ittt	mi
 8007e30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e34:	3302      	addmi	r3, #2
 8007e36:	f8c9 3000 	strmi.w	r3, [r9]
 8007e3a:	6825      	ldr	r5, [r4, #0]
 8007e3c:	f015 0506 	ands.w	r5, r5, #6
 8007e40:	d107      	bne.n	8007e52 <_printf_common+0x52>
 8007e42:	f104 0a19 	add.w	sl, r4, #25
 8007e46:	68e3      	ldr	r3, [r4, #12]
 8007e48:	f8d9 2000 	ldr.w	r2, [r9]
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	42ab      	cmp	r3, r5
 8007e50:	dc28      	bgt.n	8007ea4 <_printf_common+0xa4>
 8007e52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e56:	6822      	ldr	r2, [r4, #0]
 8007e58:	3300      	adds	r3, #0
 8007e5a:	bf18      	it	ne
 8007e5c:	2301      	movne	r3, #1
 8007e5e:	0692      	lsls	r2, r2, #26
 8007e60:	d42d      	bmi.n	8007ebe <_printf_common+0xbe>
 8007e62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e66:	4639      	mov	r1, r7
 8007e68:	4630      	mov	r0, r6
 8007e6a:	47c0      	blx	r8
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d020      	beq.n	8007eb2 <_printf_common+0xb2>
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	68e5      	ldr	r5, [r4, #12]
 8007e74:	f8d9 2000 	ldr.w	r2, [r9]
 8007e78:	f003 0306 	and.w	r3, r3, #6
 8007e7c:	2b04      	cmp	r3, #4
 8007e7e:	bf08      	it	eq
 8007e80:	1aad      	subeq	r5, r5, r2
 8007e82:	68a3      	ldr	r3, [r4, #8]
 8007e84:	6922      	ldr	r2, [r4, #16]
 8007e86:	bf0c      	ite	eq
 8007e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e8c:	2500      	movne	r5, #0
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	bfc4      	itt	gt
 8007e92:	1a9b      	subgt	r3, r3, r2
 8007e94:	18ed      	addgt	r5, r5, r3
 8007e96:	f04f 0900 	mov.w	r9, #0
 8007e9a:	341a      	adds	r4, #26
 8007e9c:	454d      	cmp	r5, r9
 8007e9e:	d11a      	bne.n	8007ed6 <_printf_common+0xd6>
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	e008      	b.n	8007eb6 <_printf_common+0xb6>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	4652      	mov	r2, sl
 8007ea8:	4639      	mov	r1, r7
 8007eaa:	4630      	mov	r0, r6
 8007eac:	47c0      	blx	r8
 8007eae:	3001      	adds	r0, #1
 8007eb0:	d103      	bne.n	8007eba <_printf_common+0xba>
 8007eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eba:	3501      	adds	r5, #1
 8007ebc:	e7c3      	b.n	8007e46 <_printf_common+0x46>
 8007ebe:	18e1      	adds	r1, r4, r3
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	2030      	movs	r0, #48	; 0x30
 8007ec4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ec8:	4422      	add	r2, r4
 8007eca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ece:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ed2:	3302      	adds	r3, #2
 8007ed4:	e7c5      	b.n	8007e62 <_printf_common+0x62>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	4622      	mov	r2, r4
 8007eda:	4639      	mov	r1, r7
 8007edc:	4630      	mov	r0, r6
 8007ede:	47c0      	blx	r8
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d0e6      	beq.n	8007eb2 <_printf_common+0xb2>
 8007ee4:	f109 0901 	add.w	r9, r9, #1
 8007ee8:	e7d8      	b.n	8007e9c <_printf_common+0x9c>
	...

08007eec <_printf_i>:
 8007eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ef0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	7e09      	ldrb	r1, [r1, #24]
 8007ef8:	b085      	sub	sp, #20
 8007efa:	296e      	cmp	r1, #110	; 0x6e
 8007efc:	4617      	mov	r7, r2
 8007efe:	4606      	mov	r6, r0
 8007f00:	4698      	mov	r8, r3
 8007f02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f04:	f000 80b3 	beq.w	800806e <_printf_i+0x182>
 8007f08:	d822      	bhi.n	8007f50 <_printf_i+0x64>
 8007f0a:	2963      	cmp	r1, #99	; 0x63
 8007f0c:	d036      	beq.n	8007f7c <_printf_i+0x90>
 8007f0e:	d80a      	bhi.n	8007f26 <_printf_i+0x3a>
 8007f10:	2900      	cmp	r1, #0
 8007f12:	f000 80b9 	beq.w	8008088 <_printf_i+0x19c>
 8007f16:	2958      	cmp	r1, #88	; 0x58
 8007f18:	f000 8083 	beq.w	8008022 <_printf_i+0x136>
 8007f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f24:	e032      	b.n	8007f8c <_printf_i+0xa0>
 8007f26:	2964      	cmp	r1, #100	; 0x64
 8007f28:	d001      	beq.n	8007f2e <_printf_i+0x42>
 8007f2a:	2969      	cmp	r1, #105	; 0x69
 8007f2c:	d1f6      	bne.n	8007f1c <_printf_i+0x30>
 8007f2e:	6820      	ldr	r0, [r4, #0]
 8007f30:	6813      	ldr	r3, [r2, #0]
 8007f32:	0605      	lsls	r5, r0, #24
 8007f34:	f103 0104 	add.w	r1, r3, #4
 8007f38:	d52a      	bpl.n	8007f90 <_printf_i+0xa4>
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6011      	str	r1, [r2, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	da03      	bge.n	8007f4a <_printf_i+0x5e>
 8007f42:	222d      	movs	r2, #45	; 0x2d
 8007f44:	425b      	negs	r3, r3
 8007f46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f4a:	486f      	ldr	r0, [pc, #444]	; (8008108 <_printf_i+0x21c>)
 8007f4c:	220a      	movs	r2, #10
 8007f4e:	e039      	b.n	8007fc4 <_printf_i+0xd8>
 8007f50:	2973      	cmp	r1, #115	; 0x73
 8007f52:	f000 809d 	beq.w	8008090 <_printf_i+0x1a4>
 8007f56:	d808      	bhi.n	8007f6a <_printf_i+0x7e>
 8007f58:	296f      	cmp	r1, #111	; 0x6f
 8007f5a:	d020      	beq.n	8007f9e <_printf_i+0xb2>
 8007f5c:	2970      	cmp	r1, #112	; 0x70
 8007f5e:	d1dd      	bne.n	8007f1c <_printf_i+0x30>
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	f043 0320 	orr.w	r3, r3, #32
 8007f66:	6023      	str	r3, [r4, #0]
 8007f68:	e003      	b.n	8007f72 <_printf_i+0x86>
 8007f6a:	2975      	cmp	r1, #117	; 0x75
 8007f6c:	d017      	beq.n	8007f9e <_printf_i+0xb2>
 8007f6e:	2978      	cmp	r1, #120	; 0x78
 8007f70:	d1d4      	bne.n	8007f1c <_printf_i+0x30>
 8007f72:	2378      	movs	r3, #120	; 0x78
 8007f74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f78:	4864      	ldr	r0, [pc, #400]	; (800810c <_printf_i+0x220>)
 8007f7a:	e055      	b.n	8008028 <_printf_i+0x13c>
 8007f7c:	6813      	ldr	r3, [r2, #0]
 8007f7e:	1d19      	adds	r1, r3, #4
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6011      	str	r1, [r2, #0]
 8007f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e08c      	b.n	80080aa <_printf_i+0x1be>
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6011      	str	r1, [r2, #0]
 8007f94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f98:	bf18      	it	ne
 8007f9a:	b21b      	sxthne	r3, r3
 8007f9c:	e7cf      	b.n	8007f3e <_printf_i+0x52>
 8007f9e:	6813      	ldr	r3, [r2, #0]
 8007fa0:	6825      	ldr	r5, [r4, #0]
 8007fa2:	1d18      	adds	r0, r3, #4
 8007fa4:	6010      	str	r0, [r2, #0]
 8007fa6:	0628      	lsls	r0, r5, #24
 8007fa8:	d501      	bpl.n	8007fae <_printf_i+0xc2>
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	e002      	b.n	8007fb4 <_printf_i+0xc8>
 8007fae:	0668      	lsls	r0, r5, #25
 8007fb0:	d5fb      	bpl.n	8007faa <_printf_i+0xbe>
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	4854      	ldr	r0, [pc, #336]	; (8008108 <_printf_i+0x21c>)
 8007fb6:	296f      	cmp	r1, #111	; 0x6f
 8007fb8:	bf14      	ite	ne
 8007fba:	220a      	movne	r2, #10
 8007fbc:	2208      	moveq	r2, #8
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fc4:	6865      	ldr	r5, [r4, #4]
 8007fc6:	60a5      	str	r5, [r4, #8]
 8007fc8:	2d00      	cmp	r5, #0
 8007fca:	f2c0 8095 	blt.w	80080f8 <_printf_i+0x20c>
 8007fce:	6821      	ldr	r1, [r4, #0]
 8007fd0:	f021 0104 	bic.w	r1, r1, #4
 8007fd4:	6021      	str	r1, [r4, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d13d      	bne.n	8008056 <_printf_i+0x16a>
 8007fda:	2d00      	cmp	r5, #0
 8007fdc:	f040 808e 	bne.w	80080fc <_printf_i+0x210>
 8007fe0:	4665      	mov	r5, ip
 8007fe2:	2a08      	cmp	r2, #8
 8007fe4:	d10b      	bne.n	8007ffe <_printf_i+0x112>
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	07db      	lsls	r3, r3, #31
 8007fea:	d508      	bpl.n	8007ffe <_printf_i+0x112>
 8007fec:	6923      	ldr	r3, [r4, #16]
 8007fee:	6862      	ldr	r2, [r4, #4]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	bfde      	ittt	le
 8007ff4:	2330      	movle	r3, #48	; 0x30
 8007ff6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ffa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ffe:	ebac 0305 	sub.w	r3, ip, r5
 8008002:	6123      	str	r3, [r4, #16]
 8008004:	f8cd 8000 	str.w	r8, [sp]
 8008008:	463b      	mov	r3, r7
 800800a:	aa03      	add	r2, sp, #12
 800800c:	4621      	mov	r1, r4
 800800e:	4630      	mov	r0, r6
 8008010:	f7ff fef6 	bl	8007e00 <_printf_common>
 8008014:	3001      	adds	r0, #1
 8008016:	d14d      	bne.n	80080b4 <_printf_i+0x1c8>
 8008018:	f04f 30ff 	mov.w	r0, #4294967295
 800801c:	b005      	add	sp, #20
 800801e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008022:	4839      	ldr	r0, [pc, #228]	; (8008108 <_printf_i+0x21c>)
 8008024:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008028:	6813      	ldr	r3, [r2, #0]
 800802a:	6821      	ldr	r1, [r4, #0]
 800802c:	1d1d      	adds	r5, r3, #4
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6015      	str	r5, [r2, #0]
 8008032:	060a      	lsls	r2, r1, #24
 8008034:	d50b      	bpl.n	800804e <_printf_i+0x162>
 8008036:	07ca      	lsls	r2, r1, #31
 8008038:	bf44      	itt	mi
 800803a:	f041 0120 	orrmi.w	r1, r1, #32
 800803e:	6021      	strmi	r1, [r4, #0]
 8008040:	b91b      	cbnz	r3, 800804a <_printf_i+0x15e>
 8008042:	6822      	ldr	r2, [r4, #0]
 8008044:	f022 0220 	bic.w	r2, r2, #32
 8008048:	6022      	str	r2, [r4, #0]
 800804a:	2210      	movs	r2, #16
 800804c:	e7b7      	b.n	8007fbe <_printf_i+0xd2>
 800804e:	064d      	lsls	r5, r1, #25
 8008050:	bf48      	it	mi
 8008052:	b29b      	uxthmi	r3, r3
 8008054:	e7ef      	b.n	8008036 <_printf_i+0x14a>
 8008056:	4665      	mov	r5, ip
 8008058:	fbb3 f1f2 	udiv	r1, r3, r2
 800805c:	fb02 3311 	mls	r3, r2, r1, r3
 8008060:	5cc3      	ldrb	r3, [r0, r3]
 8008062:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008066:	460b      	mov	r3, r1
 8008068:	2900      	cmp	r1, #0
 800806a:	d1f5      	bne.n	8008058 <_printf_i+0x16c>
 800806c:	e7b9      	b.n	8007fe2 <_printf_i+0xf6>
 800806e:	6813      	ldr	r3, [r2, #0]
 8008070:	6825      	ldr	r5, [r4, #0]
 8008072:	6961      	ldr	r1, [r4, #20]
 8008074:	1d18      	adds	r0, r3, #4
 8008076:	6010      	str	r0, [r2, #0]
 8008078:	0628      	lsls	r0, r5, #24
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	d501      	bpl.n	8008082 <_printf_i+0x196>
 800807e:	6019      	str	r1, [r3, #0]
 8008080:	e002      	b.n	8008088 <_printf_i+0x19c>
 8008082:	066a      	lsls	r2, r5, #25
 8008084:	d5fb      	bpl.n	800807e <_printf_i+0x192>
 8008086:	8019      	strh	r1, [r3, #0]
 8008088:	2300      	movs	r3, #0
 800808a:	6123      	str	r3, [r4, #16]
 800808c:	4665      	mov	r5, ip
 800808e:	e7b9      	b.n	8008004 <_printf_i+0x118>
 8008090:	6813      	ldr	r3, [r2, #0]
 8008092:	1d19      	adds	r1, r3, #4
 8008094:	6011      	str	r1, [r2, #0]
 8008096:	681d      	ldr	r5, [r3, #0]
 8008098:	6862      	ldr	r2, [r4, #4]
 800809a:	2100      	movs	r1, #0
 800809c:	4628      	mov	r0, r5
 800809e:	f7f8 f89f 	bl	80001e0 <memchr>
 80080a2:	b108      	cbz	r0, 80080a8 <_printf_i+0x1bc>
 80080a4:	1b40      	subs	r0, r0, r5
 80080a6:	6060      	str	r0, [r4, #4]
 80080a8:	6863      	ldr	r3, [r4, #4]
 80080aa:	6123      	str	r3, [r4, #16]
 80080ac:	2300      	movs	r3, #0
 80080ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080b2:	e7a7      	b.n	8008004 <_printf_i+0x118>
 80080b4:	6923      	ldr	r3, [r4, #16]
 80080b6:	462a      	mov	r2, r5
 80080b8:	4639      	mov	r1, r7
 80080ba:	4630      	mov	r0, r6
 80080bc:	47c0      	blx	r8
 80080be:	3001      	adds	r0, #1
 80080c0:	d0aa      	beq.n	8008018 <_printf_i+0x12c>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	079b      	lsls	r3, r3, #30
 80080c6:	d413      	bmi.n	80080f0 <_printf_i+0x204>
 80080c8:	68e0      	ldr	r0, [r4, #12]
 80080ca:	9b03      	ldr	r3, [sp, #12]
 80080cc:	4298      	cmp	r0, r3
 80080ce:	bfb8      	it	lt
 80080d0:	4618      	movlt	r0, r3
 80080d2:	e7a3      	b.n	800801c <_printf_i+0x130>
 80080d4:	2301      	movs	r3, #1
 80080d6:	464a      	mov	r2, r9
 80080d8:	4639      	mov	r1, r7
 80080da:	4630      	mov	r0, r6
 80080dc:	47c0      	blx	r8
 80080de:	3001      	adds	r0, #1
 80080e0:	d09a      	beq.n	8008018 <_printf_i+0x12c>
 80080e2:	3501      	adds	r5, #1
 80080e4:	68e3      	ldr	r3, [r4, #12]
 80080e6:	9a03      	ldr	r2, [sp, #12]
 80080e8:	1a9b      	subs	r3, r3, r2
 80080ea:	42ab      	cmp	r3, r5
 80080ec:	dcf2      	bgt.n	80080d4 <_printf_i+0x1e8>
 80080ee:	e7eb      	b.n	80080c8 <_printf_i+0x1dc>
 80080f0:	2500      	movs	r5, #0
 80080f2:	f104 0919 	add.w	r9, r4, #25
 80080f6:	e7f5      	b.n	80080e4 <_printf_i+0x1f8>
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1ac      	bne.n	8008056 <_printf_i+0x16a>
 80080fc:	7803      	ldrb	r3, [r0, #0]
 80080fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008102:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008106:	e76c      	b.n	8007fe2 <_printf_i+0xf6>
 8008108:	080085b5 	.word	0x080085b5
 800810c:	080085c6 	.word	0x080085c6

08008110 <memmove>:
 8008110:	4288      	cmp	r0, r1
 8008112:	b510      	push	{r4, lr}
 8008114:	eb01 0302 	add.w	r3, r1, r2
 8008118:	d807      	bhi.n	800812a <memmove+0x1a>
 800811a:	1e42      	subs	r2, r0, #1
 800811c:	4299      	cmp	r1, r3
 800811e:	d00a      	beq.n	8008136 <memmove+0x26>
 8008120:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008124:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008128:	e7f8      	b.n	800811c <memmove+0xc>
 800812a:	4283      	cmp	r3, r0
 800812c:	d9f5      	bls.n	800811a <memmove+0xa>
 800812e:	1881      	adds	r1, r0, r2
 8008130:	1ad2      	subs	r2, r2, r3
 8008132:	42d3      	cmn	r3, r2
 8008134:	d100      	bne.n	8008138 <memmove+0x28>
 8008136:	bd10      	pop	{r4, pc}
 8008138:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800813c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008140:	e7f7      	b.n	8008132 <memmove+0x22>
	...

08008144 <_free_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4605      	mov	r5, r0
 8008148:	2900      	cmp	r1, #0
 800814a:	d045      	beq.n	80081d8 <_free_r+0x94>
 800814c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008150:	1f0c      	subs	r4, r1, #4
 8008152:	2b00      	cmp	r3, #0
 8008154:	bfb8      	it	lt
 8008156:	18e4      	addlt	r4, r4, r3
 8008158:	f000 f8d2 	bl	8008300 <__malloc_lock>
 800815c:	4a1f      	ldr	r2, [pc, #124]	; (80081dc <_free_r+0x98>)
 800815e:	6813      	ldr	r3, [r2, #0]
 8008160:	4610      	mov	r0, r2
 8008162:	b933      	cbnz	r3, 8008172 <_free_r+0x2e>
 8008164:	6063      	str	r3, [r4, #4]
 8008166:	6014      	str	r4, [r2, #0]
 8008168:	4628      	mov	r0, r5
 800816a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800816e:	f000 b8c8 	b.w	8008302 <__malloc_unlock>
 8008172:	42a3      	cmp	r3, r4
 8008174:	d90c      	bls.n	8008190 <_free_r+0x4c>
 8008176:	6821      	ldr	r1, [r4, #0]
 8008178:	1862      	adds	r2, r4, r1
 800817a:	4293      	cmp	r3, r2
 800817c:	bf04      	itt	eq
 800817e:	681a      	ldreq	r2, [r3, #0]
 8008180:	685b      	ldreq	r3, [r3, #4]
 8008182:	6063      	str	r3, [r4, #4]
 8008184:	bf04      	itt	eq
 8008186:	1852      	addeq	r2, r2, r1
 8008188:	6022      	streq	r2, [r4, #0]
 800818a:	6004      	str	r4, [r0, #0]
 800818c:	e7ec      	b.n	8008168 <_free_r+0x24>
 800818e:	4613      	mov	r3, r2
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	b10a      	cbz	r2, 8008198 <_free_r+0x54>
 8008194:	42a2      	cmp	r2, r4
 8008196:	d9fa      	bls.n	800818e <_free_r+0x4a>
 8008198:	6819      	ldr	r1, [r3, #0]
 800819a:	1858      	adds	r0, r3, r1
 800819c:	42a0      	cmp	r0, r4
 800819e:	d10b      	bne.n	80081b8 <_free_r+0x74>
 80081a0:	6820      	ldr	r0, [r4, #0]
 80081a2:	4401      	add	r1, r0
 80081a4:	1858      	adds	r0, r3, r1
 80081a6:	4282      	cmp	r2, r0
 80081a8:	6019      	str	r1, [r3, #0]
 80081aa:	d1dd      	bne.n	8008168 <_free_r+0x24>
 80081ac:	6810      	ldr	r0, [r2, #0]
 80081ae:	6852      	ldr	r2, [r2, #4]
 80081b0:	605a      	str	r2, [r3, #4]
 80081b2:	4401      	add	r1, r0
 80081b4:	6019      	str	r1, [r3, #0]
 80081b6:	e7d7      	b.n	8008168 <_free_r+0x24>
 80081b8:	d902      	bls.n	80081c0 <_free_r+0x7c>
 80081ba:	230c      	movs	r3, #12
 80081bc:	602b      	str	r3, [r5, #0]
 80081be:	e7d3      	b.n	8008168 <_free_r+0x24>
 80081c0:	6820      	ldr	r0, [r4, #0]
 80081c2:	1821      	adds	r1, r4, r0
 80081c4:	428a      	cmp	r2, r1
 80081c6:	bf04      	itt	eq
 80081c8:	6811      	ldreq	r1, [r2, #0]
 80081ca:	6852      	ldreq	r2, [r2, #4]
 80081cc:	6062      	str	r2, [r4, #4]
 80081ce:	bf04      	itt	eq
 80081d0:	1809      	addeq	r1, r1, r0
 80081d2:	6021      	streq	r1, [r4, #0]
 80081d4:	605c      	str	r4, [r3, #4]
 80081d6:	e7c7      	b.n	8008168 <_free_r+0x24>
 80081d8:	bd38      	pop	{r3, r4, r5, pc}
 80081da:	bf00      	nop
 80081dc:	2000199c 	.word	0x2000199c

080081e0 <_malloc_r>:
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	1ccd      	adds	r5, r1, #3
 80081e4:	f025 0503 	bic.w	r5, r5, #3
 80081e8:	3508      	adds	r5, #8
 80081ea:	2d0c      	cmp	r5, #12
 80081ec:	bf38      	it	cc
 80081ee:	250c      	movcc	r5, #12
 80081f0:	2d00      	cmp	r5, #0
 80081f2:	4606      	mov	r6, r0
 80081f4:	db01      	blt.n	80081fa <_malloc_r+0x1a>
 80081f6:	42a9      	cmp	r1, r5
 80081f8:	d903      	bls.n	8008202 <_malloc_r+0x22>
 80081fa:	230c      	movs	r3, #12
 80081fc:	6033      	str	r3, [r6, #0]
 80081fe:	2000      	movs	r0, #0
 8008200:	bd70      	pop	{r4, r5, r6, pc}
 8008202:	f000 f87d 	bl	8008300 <__malloc_lock>
 8008206:	4a21      	ldr	r2, [pc, #132]	; (800828c <_malloc_r+0xac>)
 8008208:	6814      	ldr	r4, [r2, #0]
 800820a:	4621      	mov	r1, r4
 800820c:	b991      	cbnz	r1, 8008234 <_malloc_r+0x54>
 800820e:	4c20      	ldr	r4, [pc, #128]	; (8008290 <_malloc_r+0xb0>)
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	b91b      	cbnz	r3, 800821c <_malloc_r+0x3c>
 8008214:	4630      	mov	r0, r6
 8008216:	f000 f863 	bl	80082e0 <_sbrk_r>
 800821a:	6020      	str	r0, [r4, #0]
 800821c:	4629      	mov	r1, r5
 800821e:	4630      	mov	r0, r6
 8008220:	f000 f85e 	bl	80082e0 <_sbrk_r>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	d124      	bne.n	8008272 <_malloc_r+0x92>
 8008228:	230c      	movs	r3, #12
 800822a:	6033      	str	r3, [r6, #0]
 800822c:	4630      	mov	r0, r6
 800822e:	f000 f868 	bl	8008302 <__malloc_unlock>
 8008232:	e7e4      	b.n	80081fe <_malloc_r+0x1e>
 8008234:	680b      	ldr	r3, [r1, #0]
 8008236:	1b5b      	subs	r3, r3, r5
 8008238:	d418      	bmi.n	800826c <_malloc_r+0x8c>
 800823a:	2b0b      	cmp	r3, #11
 800823c:	d90f      	bls.n	800825e <_malloc_r+0x7e>
 800823e:	600b      	str	r3, [r1, #0]
 8008240:	50cd      	str	r5, [r1, r3]
 8008242:	18cc      	adds	r4, r1, r3
 8008244:	4630      	mov	r0, r6
 8008246:	f000 f85c 	bl	8008302 <__malloc_unlock>
 800824a:	f104 000b 	add.w	r0, r4, #11
 800824e:	1d23      	adds	r3, r4, #4
 8008250:	f020 0007 	bic.w	r0, r0, #7
 8008254:	1ac3      	subs	r3, r0, r3
 8008256:	d0d3      	beq.n	8008200 <_malloc_r+0x20>
 8008258:	425a      	negs	r2, r3
 800825a:	50e2      	str	r2, [r4, r3]
 800825c:	e7d0      	b.n	8008200 <_malloc_r+0x20>
 800825e:	428c      	cmp	r4, r1
 8008260:	684b      	ldr	r3, [r1, #4]
 8008262:	bf16      	itet	ne
 8008264:	6063      	strne	r3, [r4, #4]
 8008266:	6013      	streq	r3, [r2, #0]
 8008268:	460c      	movne	r4, r1
 800826a:	e7eb      	b.n	8008244 <_malloc_r+0x64>
 800826c:	460c      	mov	r4, r1
 800826e:	6849      	ldr	r1, [r1, #4]
 8008270:	e7cc      	b.n	800820c <_malloc_r+0x2c>
 8008272:	1cc4      	adds	r4, r0, #3
 8008274:	f024 0403 	bic.w	r4, r4, #3
 8008278:	42a0      	cmp	r0, r4
 800827a:	d005      	beq.n	8008288 <_malloc_r+0xa8>
 800827c:	1a21      	subs	r1, r4, r0
 800827e:	4630      	mov	r0, r6
 8008280:	f000 f82e 	bl	80082e0 <_sbrk_r>
 8008284:	3001      	adds	r0, #1
 8008286:	d0cf      	beq.n	8008228 <_malloc_r+0x48>
 8008288:	6025      	str	r5, [r4, #0]
 800828a:	e7db      	b.n	8008244 <_malloc_r+0x64>
 800828c:	2000199c 	.word	0x2000199c
 8008290:	200019a0 	.word	0x200019a0

08008294 <_realloc_r>:
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008296:	4607      	mov	r7, r0
 8008298:	4614      	mov	r4, r2
 800829a:	460e      	mov	r6, r1
 800829c:	b921      	cbnz	r1, 80082a8 <_realloc_r+0x14>
 800829e:	4611      	mov	r1, r2
 80082a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082a4:	f7ff bf9c 	b.w	80081e0 <_malloc_r>
 80082a8:	b922      	cbnz	r2, 80082b4 <_realloc_r+0x20>
 80082aa:	f7ff ff4b 	bl	8008144 <_free_r>
 80082ae:	4625      	mov	r5, r4
 80082b0:	4628      	mov	r0, r5
 80082b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b4:	f000 f826 	bl	8008304 <_malloc_usable_size_r>
 80082b8:	42a0      	cmp	r0, r4
 80082ba:	d20f      	bcs.n	80082dc <_realloc_r+0x48>
 80082bc:	4621      	mov	r1, r4
 80082be:	4638      	mov	r0, r7
 80082c0:	f7ff ff8e 	bl	80081e0 <_malloc_r>
 80082c4:	4605      	mov	r5, r0
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d0f2      	beq.n	80082b0 <_realloc_r+0x1c>
 80082ca:	4631      	mov	r1, r6
 80082cc:	4622      	mov	r2, r4
 80082ce:	f7ff fc11 	bl	8007af4 <memcpy>
 80082d2:	4631      	mov	r1, r6
 80082d4:	4638      	mov	r0, r7
 80082d6:	f7ff ff35 	bl	8008144 <_free_r>
 80082da:	e7e9      	b.n	80082b0 <_realloc_r+0x1c>
 80082dc:	4635      	mov	r5, r6
 80082de:	e7e7      	b.n	80082b0 <_realloc_r+0x1c>

080082e0 <_sbrk_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4c06      	ldr	r4, [pc, #24]	; (80082fc <_sbrk_r+0x1c>)
 80082e4:	2300      	movs	r3, #0
 80082e6:	4605      	mov	r5, r0
 80082e8:	4608      	mov	r0, r1
 80082ea:	6023      	str	r3, [r4, #0]
 80082ec:	f7ff fafa 	bl	80078e4 <_sbrk>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d102      	bne.n	80082fa <_sbrk_r+0x1a>
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	b103      	cbz	r3, 80082fa <_sbrk_r+0x1a>
 80082f8:	602b      	str	r3, [r5, #0]
 80082fa:	bd38      	pop	{r3, r4, r5, pc}
 80082fc:	20001b08 	.word	0x20001b08

08008300 <__malloc_lock>:
 8008300:	4770      	bx	lr

08008302 <__malloc_unlock>:
 8008302:	4770      	bx	lr

08008304 <_malloc_usable_size_r>:
 8008304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008308:	1f18      	subs	r0, r3, #4
 800830a:	2b00      	cmp	r3, #0
 800830c:	bfbc      	itt	lt
 800830e:	580b      	ldrlt	r3, [r1, r0]
 8008310:	18c0      	addlt	r0, r0, r3
 8008312:	4770      	bx	lr

08008314 <_init>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	bf00      	nop
 8008318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831a:	bc08      	pop	{r3}
 800831c:	469e      	mov	lr, r3
 800831e:	4770      	bx	lr

08008320 <_fini>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	bf00      	nop
 8008324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008326:	bc08      	pop	{r3}
 8008328:	469e      	mov	lr, r3
 800832a:	4770      	bx	lr
